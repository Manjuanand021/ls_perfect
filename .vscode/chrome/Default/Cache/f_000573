{"version":3,"sources":["webpack:///D:/code/lifesuite/base/UI/HTML5/LifeSuite.Angular/src/lifesuite-app/life-core/component/layout/split/index.ts","webpack:///D:/code/lifesuite/base/UI/HTML5/LifeSuite.Angular/src/lifesuite-app/life-core/component/layout/split/split-pane/index.ts","webpack:///D:/code/lifesuite/base/UI/HTML5/LifeSuite.Angular/src/lifesuite-app/life-core/component/layout/split/split-pane/lf-split-pane-channels.ts","webpack:///D:/code/lifesuite/base/UI/HTML5/LifeSuite.Angular/src/lifesuite-app/life-core/component/layout/split/split-pane/lf-split-pane.model.ts","webpack:///D:/code/lifesuite/base/UI/HTML5/LifeSuite.Angular/src/lifesuite-app/life-core/component/layout/split/split-pane/vm/split-pane-container.vm.ts","webpack:///D:/code/lifesuite/base/UI/HTML5/LifeSuite.Angular/src/lifesuite-app/life-core/component/layout/split/split-pane/vm/split-pane-dialog.vm.ts","webpack:///./src/app/component/tab-view/tab-definitions.ts","webpack:///./src/app/component/tab-view/test-routed-tabview.scss","webpack:///./src/app/component/tab-view/test-routed-tabview.ts","webpack:///./src/app/component/tab-view/test-split-area.ts","webpack:///./src/app/component/tab-view/test-tab-authorization.provider.ts","webpack:///./src/app/component/tab-view/test-tab-descriptor.factory.ts","webpack:///./src/app/component/tab-view/test-tabview-routing.module.ts","webpack:///./src/app/component/tab-view/test-tabview.module.ts"],"names":[],"mappings":"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","file":"lab-component-tab-view-test-tabview-module.js","sourcesContent":["﻿export * from './split-component';\r\nexport * from './split-pane';\r\nexport * from './lf-split.model';\r\n","﻿export * from './lf-split-pane.model';\r\nexport * from './lf-split-pane.component';\r\nexport * from './lf-split-pane-channels';\r\nexport * from './vm/split-pane-container.vm';\r\nexport * from './vm/split-pane-dialog.vm';\r\n","export const LfSplitPaneChannels = {\r\n    AddSplitPaneArea: 'add-split-pane-area',\r\n    RemoveSplitPaneArea: 'remove-split-pane-area',\r\n    SplitPaneVisible: 'split-pane-visible',\r\n    SplitPaneHidden: 'split-pane-hidden'\r\n};\r\n","﻿import { Type } from '@angular/core';\r\nimport { SplitArea } from '../lf-split.model';\r\n\r\nexport class SplitPaneArea extends SplitArea {\r\n    public view: Type<any>;\r\n    public context?: any;\r\n    public type?: string;\r\n    constructor({\r\n        id,\r\n        index,\r\n        type,\r\n        size,\r\n        view,\r\n        context,\r\n        visible\r\n    }: {\r\n        id: string;\r\n        index?: number;\r\n        type?: string;\r\n        size: number;\r\n        view: Type<any>;\r\n        context?: any;\r\n        visible?: boolean;\r\n    }) {\r\n        super({ id, index, size, visible });\r\n        this.view = view;\r\n        this.context = context;\r\n        this.type = type;\r\n    }\r\n}\r\n\r\nexport type SplitPaneAreaData = {\r\n    areaId: string;\r\n    context?: any;\r\n    type?: string;\r\n};\r\n\r\nexport class SplitPaneStateData {\r\n    public splitPaneSize: number;\r\n    public splitPaneAreas: SplitPaneArea[];\r\n}\r\n","﻿import { Injector } from '@angular/core';\r\n\r\nimport { ViewModel } from 'life-core/view-model';\r\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\r\nimport { TabStateManager, TabStateValueAccessor } from 'life-core/util';\r\nimport { ClickEventResolver } from 'life-core/component/shared/event/click-event.resolver';\r\nimport { SplitAreasInfo, GutterSize, GutterColor } from '../../lf-split.model';\r\nimport { SplitPaneArea, SplitPaneAreaData, SplitPaneStateData } from '../lf-split-pane.model';\r\nimport { LfSplitPaneComponent } from '../lf-split-pane.component';\r\nimport { LfSplitPaneChannels } from '../lf-split-pane-channels';\r\nimport { SplitPaneResult } from './split-pane-dialog.vm';\r\nimport { ConfirmDialog, DialogButton, DialogButtonType } from 'life-core/component';\r\nimport { SplitPaneContainerMessagesMapper } from './split-pane-container-messages.mapper';\r\n\r\nexport abstract class SplitPaneContainerViewModel extends ViewModel {\r\n    public containerAreasInfo: SplitAreasInfo;\r\n\r\n    public splitPaneAreas: SplitPaneArea[] = [];\r\n\r\n    public splitterVisible: boolean;\r\n\r\n    public splitContainerClass: string;\r\n\r\n    public gutterSize: number = GutterSize.large;\r\n\r\n    public gutterColor: string = GutterColor.default;\r\n\r\n    public dragGutterColor: string = GutterColor.drag;\r\n\r\n    public splitterMinimized: boolean = false;\r\n\r\n    protected abstract splitPane: LfSplitPaneComponent;\r\n\r\n    protected messagingService: IMessagingService;\r\n\r\n    protected splitPaneSize: number;\r\n\r\n    private _splitPaneStateValueAccessor: TabStateValueAccessor<SplitPaneStateData>;\r\n\r\n    private _gutterClickEventResolver: ClickEventResolver;\r\n\r\n    private _confirmDialog: ConfirmDialog;\r\n\r\n    private _splitPaneContainerMessagesMapper: SplitPaneContainerMessagesMapper;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.messagingService = injector.get(MessagingService);\r\n        this._confirmDialog = injector.get(ConfirmDialog);\r\n\r\n        this._splitPaneContainerMessagesMapper = injector.get(SplitPaneContainerMessagesMapper);\r\n        this.createStateValueAccessor(injector.get(TabStateManager));\r\n        this.initContainerAreas();\r\n        this.initSubscribers();\r\n        this.initClickEventResolver();\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        const splitPaneStateData = this._splitPaneStateValueAccessor.getValue();\r\n        if (splitPaneStateData) {\r\n            this.restoreSplitPaneState(splitPaneStateData);\r\n        } else {\r\n            this.setContainerSplitVisible(false);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public addSplitArea(areaData: SplitPaneAreaData): SplitPaneArea {\r\n        if (this.splitPaneTypeAlreadyExists(areaData.areaId)) {\r\n            this.showSplitAreaExistMessage(areaData.areaId);\r\n            return;\r\n        }\r\n        if (!this.splitterVisible) {\r\n            this.showSplitter();\r\n        }\r\n        const splitPaneArea = this.createSplitPaneArea(areaData.areaId);\r\n        splitPaneArea.index = this.splitPaneAreas.length + 1;\r\n        splitPaneArea.context = areaData.context;\r\n        this.splitPaneAreas.push(splitPaneArea);\r\n        return splitPaneArea;\r\n    }\r\n\r\n    public removeSplitArea(splitPaneResult: SplitPaneResult): void {\r\n        const area = this.splitPaneAreas.find(area => area.id == splitPaneResult.areaId);\r\n        if (area) {\r\n            area.context = undefined;\r\n            this.splitPaneAreas.splice(this.splitPaneAreas.indexOf(area), 1);\r\n            if (this.splitPaneAreas.length == 0) {\r\n                this.hideSplitter();\r\n            }\r\n        }\r\n    }\r\n\r\n    public onSplitGutterDragStart(e: { gutterNum: number; sizes: Array<number> }): void {\r\n        this.gutterColor = GutterColor.drag;\r\n        this.splitPaneSize = e.sizes[1];\r\n    }\r\n\r\n    public onSplitGutterDragEnd(e: { gutterNum: number; sizes: Array<number> }): void {\r\n        this.gutterColor = GutterColor.default;\r\n        this.splitPaneSize = e.sizes[1];\r\n    }\r\n\r\n    public onSplitGutterClick(e: { gutterNum: number; sizes: Array<number> }): void {\r\n        this.gutterColor = GutterColor.default;\r\n        this._gutterClickEventResolver.onClick(e);\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        this.messagingService.closeChannel(LfSplitPaneChannels.AddSplitPaneArea);\r\n        this.messagingService.closeChannel(LfSplitPaneChannels.RemoveSplitPaneArea);\r\n        if (this.messagingService.channelExist(LfSplitPaneChannels.SplitPaneVisible)) {\r\n            this.messagingService.closeChannel(LfSplitPaneChannels.SplitPaneVisible);\r\n        }\r\n        if (this.messagingService.channelExist(LfSplitPaneChannels.SplitPaneHidden)) {\r\n            this.messagingService.closeChannel(LfSplitPaneChannels.SplitPaneHidden);\r\n        }\r\n\r\n        this.saveSplitPaneState();\r\n    }\r\n\r\n    protected getErrorItemMessage(areaId: string): string {\r\n        return this._splitPaneContainerMessagesMapper.getMessage(areaId);\r\n    }\r\n\r\n    protected abstract getErrorItemDialogTitle(): string;\r\n\r\n    protected abstract createSplitPaneArea(areaId: string): SplitPaneArea;\r\n\r\n    protected handleSplitGutterClick(e: { gutterNum: number; sizes: Array<number> }): void {\r\n        const SplitPaneMinimizedSize = 0.5;\r\n        if (this.splitterVisible) {\r\n            this.splitterMinimized = !this.splitterMinimized;\r\n            this.splitPaneSize = this.splitterMinimized ? SplitPaneMinimizedSize : this.splitPaneInitialSize;\r\n            this.setContainerAreasSize(this.splitPaneSize);\r\n            this.containerAreasInfo.right.size = this.splitPaneSize;\r\n        }\r\n    }\r\n\r\n    protected handleSplitGutterDoubleClick(e: { gutterNum: number; sizes: Array<number> }): void {}\r\n\r\n    protected abstract getContainerAreasInfo(): SplitAreasInfo;\r\n\r\n    protected abstract setContainerAreasSize(splitPaneSize: number): void;\r\n\r\n    protected abstract get splitPaneInitialSize(): number;\r\n\r\n    protected abstract getSplitAreaType(areaId: string): string;\r\n\r\n    // State management\r\n    protected abstract get splitPaneStateValueKey(): string;\r\n\r\n    private createStateValueAccessor(tabStateManager: TabStateManager): void {\r\n        this._splitPaneStateValueAccessor = new TabStateValueAccessor<SplitPaneStateData>(\r\n            tabStateManager,\r\n            this.splitPaneStateValueKey\r\n        );\r\n    }\r\n\r\n    private saveSplitPaneState(): void {\r\n        if (this.splitterVisible) {\r\n            const splitPaneStateData = new SplitPaneStateData();\r\n            splitPaneStateData.splitPaneSize = this.splitPaneSize;\r\n            splitPaneStateData.splitPaneAreas = this.splitPaneAreas;\r\n            this._splitPaneStateValueAccessor.setValue(splitPaneStateData);\r\n        }\r\n    }\r\n\r\n    private restoreSplitPaneState(splitPaneStateData: SplitPaneStateData): void {\r\n        this.splitPaneSize = splitPaneStateData.splitPaneSize;\r\n        this.setContainerAreasSize(this.splitPaneSize);\r\n        this.splitPaneAreas = splitPaneStateData.splitPaneAreas;\r\n        this.setContainerSplitVisible(this.splitPaneAreas.length > 0);\r\n    }\r\n\r\n    private initSubscribers(): void {\r\n        this.subscriptionTracker.track(\r\n            this.messagingService.subscribe(LfSplitPaneChannels.AddSplitPaneArea, (value: SplitPaneAreaData) => {\r\n                if (this.addSplitArea(value)) {\r\n                    this.publishSplitPaneVisibleMessage();\r\n                }\r\n            })\r\n        );\r\n\r\n        this.subscriptionTracker.track(\r\n            this.messagingService.subscribe(LfSplitPaneChannels.RemoveSplitPaneArea, splitPaneResult => {\r\n                this.removeSplitArea(splitPaneResult);\r\n                this.publishSplitPaneHiddenMessage();\r\n            })\r\n        );\r\n    }\r\n\r\n    private publishSplitPaneVisibleMessage(): void {\r\n        if (this.isSplitPaneVisible()) {\r\n            this.messagingService.publish(LfSplitPaneChannels.SplitPaneVisible);\r\n        }\r\n    }\r\n\r\n    private publishSplitPaneHiddenMessage(): void {\r\n        if (this.isSplitPaneHidden()) {\r\n            this.messagingService.publish(LfSplitPaneChannels.SplitPaneHidden);\r\n        }\r\n    }\r\n\r\n    private isSplitPaneVisible(): boolean {\r\n        return this.splitPaneAreas.length === 1;\r\n    }\r\n\r\n    private isSplitPaneHidden(): boolean {\r\n        return this.splitPaneAreas.length === 0;\r\n    }\r\n\r\n    private splitPaneTypeAlreadyExists(areaId: string): boolean {\r\n        const areaType = this.getSplitAreaType(areaId);\r\n        return this.splitPane && this.splitPane.hasSplitArea(areaId, areaType);\r\n    }\r\n\r\n    private showSplitAreaExistMessage(areaId: string): void {\r\n        this._confirmDialog.open({\r\n            message: this.getErrorItemMessage(areaId),\r\n            title: this.getErrorItemDialogTitle(),\r\n            buttons: [new DialogButton({ type: DialogButtonType.OK })]\r\n        });\r\n    }\r\n\r\n    private initContainerAreas(): void {\r\n        this.splitPaneSize = this.splitPaneInitialSize;\r\n        this.containerAreasInfo = this.getContainerAreasInfo();\r\n        this.setContainerAreasSize(this.splitPaneInitialSize);\r\n    }\r\n\r\n    private initClickEventResolver(): void {\r\n        this._gutterClickEventResolver = new ClickEventResolver(\r\n            event => this.handleSplitGutterClick(event),\r\n            event => this.handleSplitGutterClick(event)\r\n        );\r\n    }\r\n\r\n    private showSplitter(): void {\r\n        this.setContainerSplitVisible(true);\r\n    }\r\n    private hideSplitter(): void {\r\n        this.setContainerSplitVisible(false);\r\n    }\r\n\r\n    private setContainerSplitVisible(visible: boolean): void {\r\n        if (visible) {\r\n            this.splitterVisible = true;\r\n            this.splitContainerClass = 'tab-split-container';\r\n        } else {\r\n            this.splitterVisible = false;\r\n            this.splitContainerClass = 'tab-no-split-container';\r\n        }\r\n    }\r\n}\r\n","﻿import { Injector } from '@angular/core';\r\n\r\nimport { ViewModel, ValidationRenderType, ViewValidationResult } from 'life-core/view-model';\r\nimport {\r\n    CardDialog,\r\n    CardDialogParams,\r\n    CardDialogResult,\r\n    DialogData,\r\n    ICardDialogViewModel,\r\n    DialogResult\r\n} from 'life-core/component/dialog';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { MessagingService } from 'life-core/messaging';\r\nimport { TabStateManager, TabStateValueAccessor } from 'life-core/util/tab-state';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { SplitPaneArea } from '../lf-split-pane.model';\r\nimport { LfSplitPaneChannels } from '../lf-split-pane-channels';\r\n\r\nexport abstract class SplitPaneDialogViewModel extends ViewModel implements ICompose {\r\n    public dialogData: DialogData;\r\n\r\n    protected abstract cardDialog: CardDialog;\r\n    protected i18n: I18n;\r\n\r\n    protected splitArea: SplitPaneArea;\r\n    protected messagingService: MessagingService;\r\n    protected tabStateManager: TabStateManager;\r\n    protected stateValueAccessor: TabStateValueAccessor<any>;\r\n    private _dialogClosing: boolean = false;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.messagingService = injector.get(MessagingService);\r\n        this.tabStateManager = injector.get(TabStateManager);\r\n        this.stateValueAccessor = this.createStateValueAccessor();\r\n    }\r\n\r\n    public ngAfterContentInit(): void {\r\n        super.ngAfterContentInit();\r\n        this.cardDialog.open(this.getDialogParams()).then(_ => {\r\n            this.setupCardDialogData();\r\n            this.dialogData = this.cardDialog.data;\r\n        });\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        this.splitArea = model as SplitPaneArea;\r\n    }\r\n\r\n    public getDialogComponent<TComp>(): TComp {\r\n        return this.cardDialog.getContentComponent<TComp>();\r\n    }\r\n\r\n    public validate(validationRenderType?: ValidationRenderType): Promise<ViewValidationResult> {\r\n        return this.getDialogComponent<ViewModel>().validate(validationRenderType);\r\n    }\r\n\r\n    public onDialogDismiss(e: Event): void {\r\n        this.closeDialog();\r\n    }\r\n\r\n    protected closeDialog(dialogResult?: CardDialogResult): void {\r\n        this.cardDialog.close();\r\n        this._dialogClosing = true;\r\n        this.messagingService.publish(\r\n            LfSplitPaneChannels.RemoveSplitPaneArea,\r\n            new SplitPaneResult(this.splitArea.id, dialogResult)\r\n        );\r\n    }\r\n\r\n    protected onCardDialogButtonClick(dialogResult: CardDialogResult): void {\r\n        if (dialogResult.closeDialog) {\r\n            this.closeDialog(dialogResult);\r\n        }\r\n    }\r\n\r\n    protected abstract getDialogParams(): CardDialogParams;\r\n\r\n    protected onCardDialogOkClick(dialogResult: DialogResult): void {}\r\n\r\n    private setupCardDialogData(): void {\r\n        const stateData = this.stateValueAccessor.getValue();\r\n        if (stateData) {\r\n            this.restoreState(stateData);\r\n        } else {\r\n            this.initCardDialogData();\r\n        }\r\n    }\r\n\r\n    private initCardDialogData(): void {\r\n        this.getDialogComponent<ICardDialogViewModel>().initData();\r\n    }\r\n\r\n    // State Management\r\n\r\n    protected abstract getStateValueKey(): string;\r\n\r\n    private createStateValueAccessor(): TabStateValueAccessor<any> {\r\n        return new TabStateValueAccessor<any>(this.tabStateManager, this.getStateValueKey());\r\n    }\r\n\r\n    private saveState(): void {\r\n        this.stateValueAccessor.setValue(this.getDialogComponent<ICardDialogViewModel>().getState());\r\n    }\r\n\r\n    private restoreState(stateData: any): void {\r\n        this.getDialogComponent<ICardDialogViewModel>().setState(stateData);\r\n    }\r\n\r\n    private deleteState(): void {\r\n        this.stateValueAccessor.deleteValue();\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        if (this._dialogClosing) {\r\n            this.deleteState();\r\n        } else {\r\n            this.saveState();\r\n        }\r\n        super.ngOnDestroy();\r\n    }\r\n}\r\n\r\nexport class SplitPaneResult {\r\n    public areaId: string;\r\n    public dialogResult: DialogResult;\r\n\r\n    constructor(areaId: string, dialogResult: DialogResult) {\r\n        this.areaId = areaId;\r\n        this.dialogResult = dialogResult;\r\n    }\r\n}\r\n","﻿import { TabDefinition, TabContainerType } from 'life-core/component/layout/tabview/model';\r\n\r\nexport enum PrimaryTabType {\r\n\tHome,\r\n\tSearch,\r\n\tPolicy\r\n}\r\n\r\nexport enum SecondaryTabType {\r\n\tWorkItems,\r\n\tCaseDisposition,\r\n\tReviewMessages,\r\n\tNotes,\r\n\tDetails\r\n}\r\n\r\nexport enum TabObjectType {\r\n\tPolicy\r\n}\r\n\r\n// PRIMARY Tab Definitions\r\nexport const TabDefHome: TabDefinition = {\r\n\tname: 'tabHome',\r\n\ttitle: 'Home',\r\n\ttabType: PrimaryTabType.Home,\r\n\tcontainerType: TabContainerType.Primary,\r\n\tclosable: false,\r\n\tvalidatable: false\r\n}\r\n\r\nexport const TabDefSearch: TabDefinition = {\r\n\tname: 'tabSearch',\r\n\ttitle: 'Search',\r\n\ttabType: PrimaryTabType.Search,\r\n\tcontainerType: TabContainerType.Primary,\r\n\tclosable: true,\r\n\tvalidatable: false\r\n}\r\n\r\nexport const TabDefPolicy: TabDefinition = {\r\n\tname: 'tabPolicy',\r\n\ttitle: 'Policy',\r\n\ttabType: PrimaryTabType.Policy,\r\n\ttabObjectType: TabObjectType.Policy,\r\n\tcontainerType: TabContainerType.Primary,\r\n\tclosable: true,\r\n\tvalidatable: true\r\n}\r\n\r\n// SECONDARY Tab Definitions\r\nexport const TabDefWorkItems: TabDefinition = {\r\n\tname: 'tabWorkItems',\r\n\ttitle: 'Work Items',\r\n\ttabType: SecondaryTabType.WorkItems,\r\n\tcontainerType: TabContainerType.Secondary,\r\n\tclosable: false,\r\n\tvalidatable: false\r\n}\r\n\r\nexport const TabDefCaseDisposition: TabDefinition = {\r\n\tname: 'tabCaseDisposition',\r\n\ttitle: 'Case Disposition',\r\n\ttabType: SecondaryTabType.CaseDisposition,\r\n\ttabObjectType: TabObjectType.Policy,\r\n\tcontainerType: TabContainerType.Secondary,\r\n\tclosable: false,\r\n\tvalidatable: true\r\n}\r\n\r\nexport const TabDefReviewMessages: TabDefinition = {\r\n\tname: 'tabReviewMessages',\r\n\ttitle: 'Review Messages',\r\n\ttabType: SecondaryTabType.ReviewMessages,\r\n\ttabObjectType: TabObjectType.Policy,\r\n\tcontainerType: TabContainerType.Secondary,\r\n\tclosable: false,\r\n\tvalidatable: true\r\n}\r\n\r\nexport const TabDefNotes: TabDefinition = {\r\n\tname: 'tabNotes',\r\n\ttitle: 'Notes',\r\n\ttabType: SecondaryTabType.Notes,\r\n\ttabObjectType: TabObjectType.Policy,\r\n\tcontainerType: TabContainerType.Secondary,\r\n\tclosable: false,\r\n\tvalidatable: true\r\n}\r\n\r\nexport const TabDefDetails: TabDefinition = {\r\n\tname: 'tabDetails',\r\n\ttitle: 'Policy Details',\r\n\ttabType: SecondaryTabType.Notes,\r\n\ttabObjectType: TabObjectType.Policy,\r\n\tcontainerType: TabContainerType.Secondary,\r\n\tclosable: true,\r\n\tvalidatable: true\r\n}\r\n\r\nexport class TabDefinitions {\r\n// PRIMARY Tab Definitions\r\n\tstatic Home: TabDefinition = TabDefHome;\r\n\tstatic Search: TabDefinition = TabDefSearch;\r\n\tstatic Policy: TabDefinition = TabDefPolicy;\r\n// SECONDARY Tab Definitions\r\n\tstatic WorkItems: TabDefinition = TabDefWorkItems;\r\n\tstatic CaseDesposition: TabDefinition = TabDefCaseDisposition;\r\n\tstatic ReviewMessages: TabDefinition = TabDefReviewMessages;\r\n\tstatic Notes: TabDefinition = TabDefNotes;\r\n\tstatic Details: TabDefinition = TabDefDetails;\r\n}\r\n\r\n","module.exports = \"/* Can redefine any of these variables in the themes by adding !default to the value */\\n/* Fonts */\\n/* Leftnav */\\n/* Navbar */\\n/* Footer */\\n/* Height Calculations */\\n/* Input components */\\n/* Obsolete ConsumerFacing variables\\r\\n\\r\\n$quote-btn-font-size: 23px;\\r\\n$form-quote-bton-font-size: 22px;\\r\\n$radio-checkbox-height: 20px;\\r\\n$radio-checkbox-width: 25px;\\r\\n$form-radius: 25px;\\r\\n$mobile-app-width: 93%;\\r\\n$panel-max-width: 400px;\\r\\n$wrapper-max-width: 1240px;\\r\\n\\r\\n$landing-pg-save-time-font-family: 'Goudy Old Style', Garamond, serif;\\r\\n$quote-font-family: 'Calisto MT', Serif;\\r\\n$invalid-message-font-family: 'adelle-sans', Helvetica, Arial, sans-serif;\\r\\n*/\\n.tab-split-container {\\n  height: calc(100vh - 126px - 7px); }\\n.tab-no-split-container {\\n  height: 100%; }\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInByb2plY3RzL2NvbXBvbmVudHMtbGFiL3NyYy9hcHAvY29tcG9uZW50L3RhYi12aWV3L0Q6XFxjb2RlXFxsaWZlc3VpdGVcXGJhc2VcXFVJXFxIVE1MNVxcTGlmZVN1aXRlLkFuZ3VsYXIvc3JjXFxzdHlsZXNcXGJhc2VcXGhlbHBlcnNcXHZhcmlhYmxlcy5zY3NzIiwicHJvamVjdHMvY29tcG9uZW50cy1sYWIvc3JjL2FwcC9jb21wb25lbnQvdGFiLXZpZXcvRDpcXGNvZGVcXGxpZmVzdWl0ZVxcYmFzZVxcVUlcXEhUTUw1XFxMaWZlU3VpdGUuQW5ndWxhci9wcm9qZWN0c1xcY29tcG9uZW50cy1sYWJcXHNyY1xcYXBwXFxjb21wb25lbnRcXHRhYi12aWV3XFx0ZXN0LXJvdXRlZC10YWJ2aWV3LnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBS0EsdUZBQXVGO0FBRXZGLFdBQVc7QUFZWCxhQUFhO0FBS2IsWUFBWTtBQUtaLFlBQVk7QUFHWix5QkFBeUI7QUFLekIsc0JBQXNCO0FBSXRCOzs7Ozs7Ozs7Ozs7OztFQWNFO0FDakRGO0VBQ0ksa0NBSGdFLEVBSW5FO0FBRUQ7RUFDSSxhQUFZLEVBQ2YiLCJmaWxlIjoicHJvamVjdHMvY29tcG9uZW50cy1sYWIvc3JjL2FwcC9jb21wb25lbnQvdGFiLXZpZXcvdGVzdC1yb3V0ZWQtdGFidmlldy5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy8kYm9vdHN0cmFwLXNhc3MtdmVyc2lvbjogJzMuMy43JztcclxuLy8kYm9vdHN0cmFwLXNhc3MtaWNvbi1wYXRoOiAnLi9qc3BtX3BhY2thZ2VzL2dpdGh1Yi90d2JzL2Jvb3RzdHJhcC1zYXNzQCcgKyAkYm9vdHN0cmFwLXNhc3MtdmVyc2lvbiArICcvYXNzZXRzL2ZvbnRzL2Jvb3RzdHJhcC8nO1xyXG4vLyRib290c3RyYXAtc2Fzcy1wYXRoOiAnLi4vLi4vanNwbV9wYWNrYWdlcy9naXRodWIvdHdicy9ib290c3RyYXAtc2Fzc0AnICsgJGJvb3RzdHJhcC1zYXNzLXZlcnNpb24gKyAnL2Fzc2V0cy9zdHlsZXNoZWV0cy9ib290c3RyYXAnO1xyXG4vLyRib290c3RyYXAtc2Fzcy12YXJpYWJsZXMtcGF0aDogJy4uLy4uL2pzcG1fcGFja2FnZXMvZ2l0aHViL3R3YnMvYm9vdHN0cmFwLXNhc3NAJyArICRib290c3RyYXAtc2Fzcy12ZXJzaW9uICsgJy9hc3NldHMvc3R5bGVzaGVldHMvYm9vdHN0cmFwL3ZhcmlhYmxlcyc7XHJcblxyXG4vKiBDYW4gcmVkZWZpbmUgYW55IG9mIHRoZXNlIHZhcmlhYmxlcyBpbiB0aGUgdGhlbWVzIGJ5IGFkZGluZyAhZGVmYXVsdCB0byB0aGUgdmFsdWUgKi9cclxuXHJcbi8qIEZvbnRzICovXHJcbiRmb250LXNpemUtYmFzZTogMC43cmVtO1xyXG4kZm9udC1zaXplLXNtYWxsOiAoKCRmb250LXNpemUtYmFzZSAqIDAuOSkpO1xyXG4kZm9udC1zaXplLWxhcmdlOiAoKCRmb250LXNpemUtYmFzZSAqIDEuMikpO1xyXG4kZm9udC1zaXplLWV4dHJhLWxhcmdlOiAoKCRmb250LXNpemUtYmFzZSAqIDUuMikpO1xyXG4kZm9udC1zaXplLWgxOiAoKCRmb250LXNpemUtYmFzZSAqIDIuNikpO1xyXG4kZm9udC1zaXplLWgyOiAoKCRmb250LXNpemUtYmFzZSAqIDIuMTUpKTtcclxuJGZvbnQtc2l6ZS1oMzogKCRmb250LXNpemUtYmFzZSAqIDIpO1xyXG4kZm9udC1zaXplLWg0OiAoKCRmb250LXNpemUtYmFzZSAqIDEuODUpKTtcclxuJGZvbnQtc2l6ZS1oNTogKCgkZm9udC1zaXplLWJhc2UgKiAxLjMpKTtcclxuJGZvbnQtc2l6ZS1oNjogKCgkZm9udC1zaXplLWJhc2UgKiAxLjEpKTtcclxuXHJcbi8qIExlZnRuYXYgKi9cclxuJGxlZnRuYXYtbWF4LXdpZHRoOiAxMi41cmVtO1xyXG4kbGVmdG5hdi1tYXgtd2lkdGgteGw6IDE0cmVtO1xyXG4kbGVmdG5hdi1pY29ucy1vbmx5LXdpZHRoOiAyLjVyZW07XHJcblxyXG4vKiBOYXZiYXIgKi9cclxuJG5hdmJhci1sb2dvLWhlaWdodDogNTBweCAhZGVmYXVsdDtcclxuJG5hdmJhci1sb2dvLXdpZHRoOiAyMDVweCAhZGVmYXVsdDtcclxuJG5hdmJhci1oZWlnaHQ6ICRuYXZiYXItbG9nby1oZWlnaHQgKyA1cHg7XHJcblxyXG4vKiBGb290ZXIgKi9cclxuJGZvb3Rlci1oZWlnaHQ6IDBweDtcclxuXHJcbi8qIEhlaWdodCBDYWxjdWxhdGlvbnMgKi9cclxuJG9mZnNldC1ib3R0b206IDdweDtcclxuJGdyaWQtc3RhdHVzLWJhci1oZWlnaHQ6IDI1cHg7XHJcbiRncmlkLW9mZnNldC1ib3R0b206ICRvZmZzZXQtYm90dG9tICsgJGdyaWQtc3RhdHVzLWJhci1oZWlnaHQ7XHJcblxyXG4vKiBJbnB1dCBjb21wb25lbnRzICovXHJcbiRpbnB1dC1oZWlnaHQ6IDEuNXJlbTtcclxuJGlucHV0LXRleHQtc2l6ZTogMC44cmVtO1xyXG5cclxuLyogT2Jzb2xldGUgQ29uc3VtZXJGYWNpbmcgdmFyaWFibGVzXHJcblxyXG4kcXVvdGUtYnRuLWZvbnQtc2l6ZTogMjNweDtcclxuJGZvcm0tcXVvdGUtYnRvbi1mb250LXNpemU6IDIycHg7XHJcbiRyYWRpby1jaGVja2JveC1oZWlnaHQ6IDIwcHg7XHJcbiRyYWRpby1jaGVja2JveC13aWR0aDogMjVweDtcclxuJGZvcm0tcmFkaXVzOiAyNXB4O1xyXG4kbW9iaWxlLWFwcC13aWR0aDogOTMlO1xyXG4kcGFuZWwtbWF4LXdpZHRoOiA0MDBweDtcclxuJHdyYXBwZXItbWF4LXdpZHRoOiAxMjQwcHg7XHJcblxyXG4kbGFuZGluZy1wZy1zYXZlLXRpbWUtZm9udC1mYW1pbHk6ICdHb3VkeSBPbGQgU3R5bGUnLCBHYXJhbW9uZCwgc2VyaWY7XHJcbiRxdW90ZS1mb250LWZhbWlseTogJ0NhbGlzdG8gTVQnLCBTZXJpZjtcclxuJGludmFsaWQtbWVzc2FnZS1mb250LWZhbWlseTogJ2FkZWxsZS1zYW5zJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcclxuKi9cclxuIiwiQGltcG9ydCAnLi4vLi4vLi4vLi4vLi4vLi4vc3JjL3N0eWxlcy9iYXNlL2hlbHBlcnMvdmFyaWFibGVzJztcclxuXHJcbiRzcGxpdHRlci1vZmZzZXQtdG9wOiA3MXB4O1xyXG4kc3BsaXR0ZXItdG9wOiAkc3BsaXR0ZXItb2Zmc2V0LXRvcCArICRuYXZiYXItaGVpZ2h0O1xyXG4kc3BsaXR0ZXItaGVpZ2h0OiBjYWxjKDEwMHZoIC0gI3skc3BsaXR0ZXItdG9wfSAtICN7JG9mZnNldC1ib3R0b219KTtcclxuXHJcbi50YWItc3BsaXQtY29udGFpbmVyIHtcclxuICAgIGhlaWdodDogJHNwbGl0dGVyLWhlaWdodDtcclxufVxyXG5cclxuLnRhYi1uby1zcGxpdC1jb250YWluZXIge1xyXG4gICAgaGVpZ2h0OiAxMDAlO1xyXG59XHJcbiJdfQ== */\"","﻿import { Component, Injectable, Injector, Input, ViewChild } from '@angular/core';\r\nimport { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { ParentChildRegistry } from 'life-core/view-model';\r\nimport {\r\n    RoutedTabView,\r\n    TabDescriptor,\r\n    TabDescriptorFactory,\r\n    TabChannels,\r\n    CompositeTabId,\r\n    PrimaryTabViewHostViewModel,\r\n    SecondaryTabViewHostViewModel,\r\n    PrimaryTabHostViewModel,\r\n    SecondaryTabHostViewModel\r\n} from 'life-core/component/layout/tabview';\r\nimport { ComponentsStateManager } from 'life-core/component';\r\nimport { TabStateManager, TabStateValueAccessor } from 'life-core/util/tab-state';\r\nimport { TestTabDescriptorFactory } from './test-tab-descriptor.factory';\r\n\r\nimport {\r\n    SplitArea,\r\n    SplitAreasInfo,\r\n    SplitPaneArea,\r\n    LfSplitPaneComponent,\r\n    LfSplitPaneChannels,\r\n    SplitPaneStateData,\r\n    SplitPaneResult\r\n} from 'life-core/component/layout/split';\r\nimport { SplitComponent } from 'angular-split';\r\nimport { NoteDialog, ScratchPadDialog } from './test-split-area';\r\nimport { AuthorizationProvider } from 'life-core/authorization/authorization.provider';\r\nimport { TestTabAuthorizationProvider } from './test-tab-authorization.provider';\r\n\r\n// ***************************************\r\n// Main TabView component\r\n// ***************************************\r\n\r\n@Component({\r\n    selector: 'test-routed-tab-view',\r\n    template: `\r\n        <lf-button label=\"Add Simple Tab\" (onClick)=\"addTabSimple()\"></lf-button>\r\n        <lf-button label=\"Add Tab with TabView\" (onClick)=\"addTabWithTabView()\"></lf-button>\r\n\r\n        <lf-routedTabView\r\n            id=\"primaryTabView\"\r\n            [tabs]=\"tabsData$\"\r\n            [initialSelectedIndex]=\"initialSelectedIndex$\"\r\n            controlClose=\"true\"\r\n            (onClose)=\"onTabClose($event)\"\r\n            (onChange)=\"onTabSelectionChange($event)\"\r\n        >\r\n            <router-outlet></router-outlet>\r\n        </lf-routedTabView>\r\n    `,\r\n    providers: [\r\n        ParentChildRegistry,\r\n        TabStateManager,\r\n        ComponentsStateManager,\r\n        { provide: AuthorizationProvider, useClass: TestTabAuthorizationProvider }\r\n    ]\r\n})\r\nexport class TestRoutedTabView extends PrimaryTabViewHostViewModel {\r\n    @ViewChild(RoutedTabView)\r\n    refTabView: RoutedTabView;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected get tabViewId(): string {\r\n        return 'primaryTabView';\r\n    }\r\n\r\n    protected getStaticTabs(): TabDescriptor[] {\r\n        const tabHome = (this.tabDescriptorFactory as TestTabDescriptorFactory).createPrimaryTabDescriptorHome();\r\n        const tabSearch = (this.tabDescriptorFactory as TestTabDescriptorFactory).createPrimaryTabDescriptorSearch();\r\n        tabHome.selected = true;\r\n        return [tabHome, tabSearch];\r\n    }\r\n\r\n    public addTabSimple(): void {\r\n        const policyId = generatePolicyId();\r\n        const tabPolicy = (this.tabDescriptorFactory as TestTabDescriptorFactory).createPrimaryTabDescriptorSimple(\r\n            policyId\r\n        );\r\n        tabPolicy.selected = true;\r\n        this.addTab(tabPolicy);\r\n    }\r\n\r\n    public addTabWithTabView(): void {\r\n        const policyId = generatePolicyId();\r\n        const tabPolicy = (this.tabDescriptorFactory as TestTabDescriptorFactory).createPrimaryTabDescriptorPolicy(\r\n            policyId,\r\n            policyId.toString()\r\n        );\r\n        tabPolicy.selected = true;\r\n        this.addTab(tabPolicy);\r\n    }\r\n}\r\n\r\n// ***************************************\r\n// First level (primary) tab components\r\n// ***************************************\r\n\r\nexport class PrimaryTabHostBase extends PrimaryTabHostViewModel {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        console.debug(`Comp ${this.constructor.name} loaded`);\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        console.debug(`Comp ${this.constructor.name} destroyed`);\r\n    }\r\n\r\n    public get tabId(): string {\r\n        return this.tabData.compositeTabId.toString();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'home',\r\n    template: `\r\n        <div style=\"height: 100vh;\">\r\n            Home\r\n        </div>\r\n    `\r\n})\r\nexport class HomeComp extends PrimaryTabHostBase {\r\n    protected tabDescriptorFactory: TestTabDescriptorFactory;\r\n\r\n    constructor(injector: Injector, tabDescriptorFactory: TabDescriptorFactory) {\r\n        super(injector);\r\n        this.tabDescriptorFactory = tabDescriptorFactory as TestTabDescriptorFactory;\r\n    }\r\n    public addTabSimple() {\r\n        const policyId = generatePolicyId();\r\n        const tabPolicy = this.tabDescriptorFactory.createPrimaryTabDescriptorSimple(policyId);\r\n        tabPolicy.selected = true;\r\n        this.messagingService.publish(TabChannels.AddPrimaryTab, tabPolicy);\r\n    }\r\n    public addTabWithTabView() {\r\n        const policyId = generatePolicyId();\r\n        const tabPolicy = this.tabDescriptorFactory.createPrimaryTabDescriptorPolicy(policyId, policyId.toString());\r\n        tabPolicy.selected = true;\r\n        this.messagingService.publish(TabChannels.AddPrimaryTab, tabPolicy);\r\n    }\r\n}\r\n@Component({\r\n    selector: 'Search',\r\n    template: '<div style=\"height: 100vh;\">Search</div>'\r\n})\r\nexport class SearchComp extends PrimaryTabHostBase {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'comp1',\r\n    template: '<div>Simple Tab (SimpleComp) - #{{tabId}}</div>'\r\n})\r\nexport class SimpleComp extends PrimaryTabHostBase {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'tabbed-comp',\r\n    template: `\r\n        <span>\r\n            <!-- Tabbed Tab (TabbedComp) - #{{tabId}} -->\r\n        </span>\r\n        <div [class]=\"tabContainerClass\">\r\n            <lf-split direction=\"horizontal\" [useTransition]=\"true\" (dragEnd)=\"onTabSplitGutterDragEnd($event)\">\r\n                <lf-split-area [size]=\"tabSplitAreasInfo.left.size\">\r\n                    <nested-tabview-host-comp [primaryTabId]=\"tabId\"></nested-tabview-host-comp>\r\n                </lf-split-area>\r\n                <lf-split-area *ngIf=\"splitterVisible\" [size]=\"tabSplitAreasInfo.right.size\">\r\n                    <lf-split-pane\r\n                        [splitPaneAreas]=\"splitPaneAreas\"\r\n                        direction=\"vertical\"\r\n                        stateId=\"split_pane\"\r\n                        [state]=\"componentsState.get('split_pane')\"\r\n                    >\r\n                    </lf-split-pane>\r\n                </lf-split-area>\r\n            </lf-split>\r\n        </div>\r\n    `,\r\n    styleUrls: ['test-routed-tabview.scss'],\r\n    providers: [ParentChildRegistry]\r\n})\r\nexport class TabbedComp extends PrimaryTabHostBase {\r\n    public splitterVisible: boolean;\r\n    public tabContainerClass: string;\r\n\r\n    @ViewChild(LfSplitPaneComponent)\r\n    splitPane: LfSplitPaneComponent;\r\n\r\n    @ViewChild(SplitComponent)\r\n    tabSplit: SplitComponent;\r\n\r\n    public tabSplitAreasInfo: SplitAreasInfo = {\r\n        left: new SplitArea({ id: 'left', index: 1, size: 100 - SplitPaneInitialSize }),\r\n        right: new SplitArea({ id: 'right', index: 2, size: SplitPaneInitialSize })\r\n    };\r\n\r\n    public splitPaneAreas: SplitPaneArea[] = [];\r\n\r\n    private splitPaneSize: number = SplitPaneInitialSize;\r\n\r\n    private _splitPaneStateValueAccessor: TabStateValueAccessor<SplitPaneStateData>;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.createStateValueAccessor(injector.get(TabStateManager));\r\n        this.initSubscribers();\r\n    }\r\n\r\n    private initSubscribers(): void {\r\n        this.messagingService.subscribe(LfSplitPaneChannels.AddSplitPaneArea, id => {\r\n            this.addSplitArea(id);\r\n        });\r\n        this.messagingService.subscribe(LfSplitPaneChannels.RemoveSplitPaneArea, splitPaneResult => {\r\n            this.removeSplitArea(splitPaneResult);\r\n        });\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        const splitPaneStateData = this._splitPaneStateValueAccessor.getValue();\r\n        if (splitPaneStateData) {\r\n            this.restoreSplitPaneState(splitPaneStateData);\r\n        } else {\r\n            this.setTabSplitVisible(false);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private showSplitter(): void {\r\n        this.setTabSplitVisible(true);\r\n    }\r\n    private hideSplitter(): void {\r\n        this.setTabSplitVisible(false);\r\n    }\r\n\r\n    private setTabSplitVisible(visible: boolean): void {\r\n        if (visible) {\r\n            this.splitterVisible = true;\r\n            this.tabContainerClass = 'tab-split-container';\r\n        } else {\r\n            this.splitterVisible = false;\r\n            this.tabContainerClass = 'tab-no-split-container';\r\n        }\r\n    }\r\n\r\n    public addSplitArea(id: string): void {\r\n        if (this.splitPane && this.splitPane.hasSplitArea(id, id)) {\r\n            alert(`Split area with id='${id}' already exists.`);\r\n            return;\r\n        }\r\n        if (!this.splitterVisible) {\r\n            this.showSplitter();\r\n        }\r\n        this.splitPaneAreas.push(this.createSplitPaneArea(id));\r\n    }\r\n\r\n    private createSplitPaneArea(id: string): SplitPaneArea {\r\n        let area: SplitPaneArea;\r\n        if (id == SplitPaneAreaTypes.note) {\r\n            area = new SplitPaneArea({ id: id, index: 1, size: 55, view: NoteDialog });\r\n        } else if (id == SplitPaneAreaTypes.scratchpad) {\r\n            area = new SplitPaneArea({ id: id, index: 2, size: 45, view: ScratchPadDialog });\r\n        } else {\r\n            throw new Error(`Undefined Split Pane Area ID: '${id}'.`);\r\n        }\r\n        return area;\r\n    }\r\n    public removeSplitArea(splitPaneResult: SplitPaneResult): void {\r\n        const area = this.splitPaneAreas.find(area => area.id == splitPaneResult.areaId);\r\n        if (area) {\r\n            this.splitPaneAreas.splice(this.splitPaneAreas.indexOf(area), 1);\r\n            if (this.splitPaneAreas.length == 0) {\r\n                this.hideSplitter();\r\n            }\r\n        }\r\n    }\r\n\r\n    public onTabSplitGutterDragEnd(e: { gutterNum: number; sizes: Array<number> }): void {\r\n        this.splitPaneSize = e.sizes[1];\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        this.messagingService.closeChannel(LfSplitPaneChannels.AddSplitPaneArea);\r\n        this.messagingService.closeChannel(LfSplitPaneChannels.RemoveSplitPaneArea);\r\n        this.saveSplitPaneState();\r\n    }\r\n\r\n    // State management\r\n    private createStateValueAccessor(tabStateManager: TabStateManager) {\r\n        this._splitPaneStateValueAccessor = new TabStateValueAccessor<SplitPaneStateData>(\r\n            tabStateManager,\r\n            SplitPaneStateValueKey\r\n        );\r\n    }\r\n\r\n    private saveSplitPaneState(): void {\r\n        if (this.splitterVisible) {\r\n            const splitPaneStateData = new SplitPaneStateData();\r\n            splitPaneStateData.splitPaneSize = this.splitPaneSize;\r\n            splitPaneStateData.splitPaneAreas = this.splitPaneAreas;\r\n            this._splitPaneStateValueAccessor.setValue(splitPaneStateData);\r\n        }\r\n    }\r\n\r\n    private restoreSplitPaneState(splitPaneStateData: SplitPaneStateData): void {\r\n        this.splitPaneSize = splitPaneStateData.splitPaneSize;\r\n        this.tabSplitAreasInfo.left.size = 100 - this.splitPaneSize;\r\n        this.tabSplitAreasInfo.right.size = this.splitPaneSize;\r\n        this.splitPaneAreas = splitPaneStateData.splitPaneAreas;\r\n        this.setTabSplitVisible(!!this.splitPaneAreas);\r\n    }\r\n}\r\n\r\nconst SplitPaneAreaTypes = {\r\n    note: 'note',\r\n    scratchpad: 'scratchpad'\r\n};\r\nconst SplitPaneInitialSize = 30;\r\nconst SplitPaneStateValueKey = 'splitPaneStateValueKey';\r\n\r\n// ***************************************\r\n// Second level (nested) tab components\r\n// ***************************************\r\n\r\nexport class SecondaryTabHostBase extends SecondaryTabHostViewModel {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        console.debug(`Comp ${this.constructor.name} loaded`);\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        console.debug(`Comp ${this.constructor.name} destroyed`);\r\n    }\r\n\r\n    public get tabId(): string {\r\n        return this.tabData.compositeTabId.toString();\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'nested-tabview-host-comp',\r\n    template: `\r\n        <!--  <lf-button label=\"Add Tab\" (onClick)=\"addNestedDynamicTab()\"></lf-button> -->\r\n        <lf-routedTabView\r\n            id=\"secondaryTabView\"\r\n            [tabs]=\"tabsData$\"\r\n            [initialSelectedIndex]=\"initialSelectedIndex$\"\r\n            controlClose=\"true\"\r\n            (onClose)=\"onTabClose($event)\"\r\n            (onChange)=\"onTabSelectionChange($event)\"\r\n        >\r\n            <router-outlet></router-outlet>\r\n        </lf-routedTabView>\r\n    `\r\n})\r\nexport class NestedTabViewHostComp extends SecondaryTabViewHostViewModel {\r\n    @Input()\r\n    primaryTabId: CompositeTabId;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected get tabViewId(): string {\r\n        return this.primaryTabId.toString();\r\n    }\r\n\r\n    //private setupPanelData(): void {\r\n    protected getStaticTabs(): TabDescriptor[] {\r\n        const policyId = parseInt(this.primaryTabId.objectId);\r\n        const tabCaseDisp = (this\r\n            .tabDescriptorFactory as TestTabDescriptorFactory).createSecondaryTabDescriptorCaseDesp(policyId);\r\n        const tabMessages = (this\r\n            .tabDescriptorFactory as TestTabDescriptorFactory).createSecondaryTabDescriptorReviewMessages(policyId);\r\n        tabMessages.selected = true;\r\n        return [tabCaseDisp, tabMessages];\r\n    }\r\n\r\n    public addNestedDynamicTab(): void {\r\n        const policyId = generatePolicyId(); //parseInt(this.primaryTabId.objectId);\r\n        const tabDescDetail = (this\r\n            .tabDescriptorFactory as TestTabDescriptorFactory).createSecondaryTabDescriptorDetail(policyId);\r\n        tabDescDetail.selected = true;\r\n        this.addTab(tabDescDetail);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'case-disp',\r\n    template: '<div>Case Disposition - #{{tabId}}</div>'\r\n})\r\nexport class CaseDispComp extends SecondaryTabHostBase {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'messages',\r\n    template: `\r\n        <div>Messages - #{{ tabId }}</div>\r\n        <lf-panel\r\n            header=\"Section 1\"\r\n            [toggleable]=\"true\"\r\n            panelType=\"primary\"\r\n            stateId=\"panel1\"\r\n            [state]=\"componentsState.get('panel1')\"\r\n        >\r\n            <div style=\"height: 300px;  border-width: 1px; border-style:solid; border-color:black\">\r\n                Content 1\r\n                <br /><br />\r\n                <lf-button label=\"Add Note\" (onClick)=\"onAddNoteClick()\"></lf-button>\r\n                <lf-button label=\"Open Scratchpad\" (onClick)=\"onAddScratchpadClick()\"></lf-button>\r\n            </div>\r\n        </lf-panel>\r\n        <lf-panel\r\n            header=\"Section 2\"\r\n            [toggleable]=\"true\"\r\n            panelType=\"primary\"\r\n            stateId=\"panel2\"\r\n            [state]=\"componentsState.get('panel2')\"\r\n        >\r\n            <div style=\"height: 200px;  border-width: 1px; border-style:solid; border-color:black\">Content 2</div>\r\n        </lf-panel>\r\n    `\r\n})\r\nexport class MessagesComp extends SecondaryTabHostBase {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    public onAddNoteClick(): void {\r\n        this.messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, SplitPaneAreaTypes.note);\r\n    }\r\n\r\n    public onAddScratchpadClick(): void {\r\n        this.messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, SplitPaneAreaTypes.scratchpad);\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'policy-detail',\r\n    template: '<div>Policy Details - #{{tabId}}</div>'\r\n})\r\nexport class PolicyDetailComp extends SecondaryTabHostBase {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class ParentDataResolver implements Resolve<any> {\r\n    constructor() {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): any {\r\n        //console.debug(\"Parent Data Resolver called.\", this.activatedRoute, route, state);\r\n    }\r\n}\r\n\r\n@Injectable()\r\nexport class ChildDataResolver implements Resolve<any> {\r\n    constructor() {}\r\n\r\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): any {\r\n        //console.debug(\"Child Data Resolver called.\", this.activatedRoute, route, state);\r\n    }\r\n}\r\n\r\nfunction generatePolicyId(): number {\r\n    return Math.floor(Math.random() * 100);\r\n}\r\n","﻿import { Component, Injector, ViewChild, Type } from '@angular/core';\r\n\r\nimport {\r\n    CardDialog,\r\n    IDialogViewModel,\r\n    DialogViewModelResult,\r\n    DialogButton,\r\n    DialogButtonType,\r\n    CardDialogParams\r\n} from 'life-core/component/dialog';\r\nimport { SplitPaneDialogViewModel } from 'life-core/component/layout/split';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { ViewModel, ValidationRenderType, ViewValidationResult, ParentChildRegistry } from 'life-core/view-model';\r\nimport { SaveDataResult } from 'life-core/service';\r\n\r\n// NOTE\r\n\r\n@Component({\r\n    selector: 'note-dialog',\r\n    template: `\r\n        <card-dialog [view]=\"view\" (dialogDismiss)=\"onDialogDismiss($event)\"></card-dialog>\r\n    `\r\n})\r\nexport class NoteDialog extends SplitPaneDialogViewModel {\r\n    public view: Type<NoteComponent> = NoteComponent;\r\n\r\n    @ViewChild(CardDialog)\r\n    protected cardDialog: CardDialog;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected getDialogParams(): CardDialogParams {\r\n        return {\r\n            title: 'Notes',\r\n            buttons: [\r\n                new DialogButton({\r\n                    type: DialogButtonType.OK,\r\n                    handler: dialogResult => {\r\n                        this.onCardDialogButtonClick(dialogResult);\r\n                    }\r\n                }),\r\n                new DialogButton({\r\n                    type: DialogButtonType.CANCEL,\r\n                    handler: dialogResult => {\r\n                        this.onCardDialogButtonClick(dialogResult);\r\n                    }\r\n                })\r\n            ],\r\n            data: this.splitArea.context\r\n        };\r\n    }\r\n\r\n    // State Management\r\n    protected getStateValueKey(): string {\r\n        return NoteDialogStateValueKey;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'note-component',\r\n    template: `\r\n        <form #form=\"ngForm\" role=\"form\" class=\"form\" autocomplete=\"off\">\r\n            <div class=\"col\">\r\n                <lf-form-input [control]=\"textField\" label=\"Field 1\">\r\n                    <lf-inputtext #textField name=\"textField\" [(ngModel)]=\"data.text\" required></lf-inputtext>\r\n                </lf-form-input>                \r\n                <lf-form-input [control]=\"dateField\" label=\"Field 2\">\r\n                    <lf-inputdate #dateField name=\"dateField\" [(ngModel)]=\"data.date\"></lf-inputdate>\r\n                </lf-form-input>                \r\n            </div>\r\n            <div class=\"col\">\r\n                <lf-form-input [control]=\"note\" label=\"Note\">\r\n                    <lf-inputtextarea #note name=\"note\" [(ngModel)]=\"data.note\" rows=\"5\" cols=\"40\"></lf-inputtextarea>\r\n                </lf-form-input>                \r\n            </div>\r\n        </form>\r\n    `,\r\n    providers: [ParentChildRegistry]\r\n})\r\nexport class NoteComponent extends ViewModel implements ICompose, IDialogViewModel {\r\n    public data: NoteDialogModel;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        Object.assign(this.data, { ...model });\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId == DialogButtonType.OK) {\r\n            return this.validate(ValidationRenderType.never).then(validationResult => {\r\n                if (validationResult == ViewValidationResult.pass) {\r\n                    return this.saveData().then(saveResult => {\r\n                        return new DialogViewModelResult(saveResult == SaveDataResult.success, true);\r\n                    });\r\n                } else {\r\n                    return Promise.resolve(new DialogViewModelResult(null, false, false));\r\n                }\r\n            });\r\n        }\r\n        return Promise.resolve(null);\r\n    }\r\n\r\n    public initData(): void {\r\n        this.data = new NoteDialogModel();\r\n    }\r\n}\r\n\r\n// SCRATCH PAD\r\n\r\n@Component({\r\n    selector: 'scratch-pad-dialog',\r\n    template: `\r\n        <card-dialog [view]=\"view\" (dialogDismiss)=\"onDialogDismiss($event)\"></card-dialog>\r\n    `\r\n})\r\nexport class ScratchPadDialog extends SplitPaneDialogViewModel {\r\n    public view: Type<ScratchPadComponent> = ScratchPadComponent;\r\n\r\n    @ViewChild(CardDialog)\r\n    protected cardDialog: CardDialog;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected getDialogParams(): CardDialogParams {\r\n        return {\r\n            title: 'Scratch Pad',\r\n            buttons: [\r\n                new DialogButton({\r\n                    type: DialogButtonType.OK,\r\n                    handler: dialogResult => {\r\n                        this.onCardDialogButtonClick(dialogResult);\r\n                    }\r\n                }),\r\n                new DialogButton({\r\n                    type: DialogButtonType.CANCEL,\r\n                    handler: dialogResult => {\r\n                        this.onCardDialogButtonClick(dialogResult);\r\n                    }\r\n                })\r\n            ],\r\n            data: this.splitArea.context\r\n        };\r\n    }\r\n\r\n    // State Management\r\n    protected getStateValueKey(): string {\r\n        return ScratchpadDialogStateValueKey;\r\n    }\r\n}\r\n\r\n@Component({\r\n    selector: 'scratchpad-component',\r\n    template: `\r\n        <form #form=\"ngForm\" role=\"form\" class=\"form\" autocomplete=\"off\">\r\n            <div class=\"col\">\r\n                <lf-form-input [control]=\"pad\" label=\"Scratchpad\">\r\n                    <lf-inputtextarea #pad name=\"pad\" [(ngModel)]=\"data.text\" rows=\"7\" cols=\"40\"></lf-inputtextarea>\r\n                </lf-form-input> \r\n            </div>\r\n        </form>\r\n    `,\r\n    providers: [ParentChildRegistry]\r\n})\r\nexport class ScratchPadComponent extends ViewModel implements ICompose, IDialogViewModel {\r\n    public data: ScratchpadModel;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        Object.assign(this.data, { ...model });\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId == DialogButtonType.OK) {\r\n            return this.validate(ValidationRenderType.never).then(validationResult => {\r\n                if (validationResult == ViewValidationResult.pass) {\r\n                    return this.saveData().then(saveResult => {\r\n                        const dialogResult =\r\n                            saveResult == SaveDataResult.success || saveResult == SaveDataResult.noNeedToSave;\r\n                        return Promise.resolve(new DialogViewModelResult(dialogResult, true));\r\n                    });\r\n                }\r\n            });\r\n        }\r\n        return Promise.resolve(null);\r\n    }\r\n\r\n    public initData(): void {\r\n        this.data = new ScratchpadModel();\r\n    }\r\n}\r\n\r\nclass NoteDialogModel {\r\n    text: string;\r\n    date: Date;\r\n    note: string;\r\n}\r\nclass ScratchpadModel {\r\n    text: string;\r\n}\r\n\r\nconst NoteDialogStateValueKey = 'noteDialogStateValueKey';\r\nconst ScratchpadDialogStateValueKey = 'scratchpadDialogStateValueKey';\r\n","import { Injectable, SkipSelf, Optional } from '@angular/core';\r\n\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\n@Injectable()\r\nexport class TestTabAuthorizationProvider extends AuthorizationProvider {\r\n    constructor(\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider\r\n    ) {\r\n        super(parentAuthProvider);\r\n    }\r\n\r\n    protected setup(): void {\r\n        this.authorizationData.componentLevel['tabHome'] = 0;\r\n        this.authorizationData.componentLevel['tabSearch'] = 0;\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { TabDescriptor, TabDescriptorFactory } from 'life-core/component/layout/tabview';\r\nimport { TabDefinitions } from './tab-definitions';\r\n\r\n@Injectable()\r\nexport class TestTabDescriptorFactory extends TabDescriptorFactory {\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    protected getTabDescriptorTitle(tab: TabDefinitions): string {\r\n        return null;\r\n    }\r\n\r\n    // PRIMARY Tabs\r\n    public createPrimaryTabDescriptorHome(): TabDescriptor {\r\n        return new TabDescriptor({\r\n            tab: TabDefinitions.Home,\r\n            route: 'home'\r\n        });\r\n    }\r\n\r\n    public createPrimaryTabDescriptorSearch(): TabDescriptor {\r\n        return new TabDescriptor({\r\n            tab: TabDefinitions.Search,\r\n            route: 'search'\r\n        });\r\n    }\r\n\r\n    public createPrimaryTabDescriptorPolicy(policyId: number, policyNumber: string): TabDescriptor {\r\n        return new TabDescriptor({\r\n            tab: TabDefinitions.Policy,\r\n            objectId: policyId.toString(),\r\n            title: `Case: ${policyNumber}`,\r\n            route: 'policy'\r\n        });\r\n    }\r\n\r\n    // SECONDARY Tabs\r\n    public createSecondaryTabDescriptorWorkItems(): TabDescriptor {\r\n        return new TabDescriptor({\r\n            tab: TabDefinitions.WorkItems,\r\n            route: 'work-items'\r\n        });\r\n    }\r\n\r\n    public createSecondaryTabDescriptorCaseDesp(policyId: number): TabDescriptor {\r\n        return new TabDescriptor({\r\n            tab: TabDefinitions.CaseDesposition,\r\n            objectId: policyId.toString(),\r\n            route: 'case-disp'\r\n        });\r\n    }\r\n\r\n    public createSecondaryTabDescriptorReviewMessages(policyId: number): TabDescriptor {\r\n        return new TabDescriptor({\r\n            tab: TabDefinitions.ReviewMessages,\r\n            objectId: policyId.toString(),\r\n            route: 'review-messages'\r\n        });\r\n    }\r\n\r\n    public createSecondaryTabDescriptorNotes(policyId: number): TabDescriptor {\r\n        return new TabDescriptor({\r\n            tab: TabDefinitions.Notes,\r\n            objectId: policyId.toString(),\r\n            route: 'notes'\r\n        });\r\n    }\r\n\r\n    public createPrimaryTabDescriptorSimple(policyId: number): TabDescriptor {\r\n        return new TabDescriptor({\r\n            tab: TabDefinitions.Policy,\r\n            objectId: policyId.toString(),\r\n            title: `Some Tab (${policyId})`,\r\n            route: 'simple-comp'\r\n        });\r\n    }\r\n\r\n    public createSecondaryTabDescriptorDetail(policyId: number): TabDescriptor {\r\n        return new TabDescriptor({\r\n            tab: TabDefinitions.Details,\r\n            objectId: policyId.toString(),\r\n            title: `Policy Details(${policyId})`,\r\n            route: 'policy-details'\r\n        });\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport {\r\n    TestRoutedTabView,\r\n    HomeComp,\r\n    SearchComp,\r\n    SimpleComp,\r\n    TabbedComp,\r\n    CaseDispComp,\r\n    MessagesComp,\r\n    PolicyDetailComp,\r\n    ParentDataResolver,\r\n    ChildDataResolver\r\n} from './test-routed-tabview';\r\n\r\nexport const testTabViewRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: TestRoutedTabView,\r\n        children: [\r\n            { path: 'home', component: HomeComp },\r\n            { path: 'search', component: SearchComp },\r\n            { path: 'simple-comp/:id', component: SimpleComp, resolve: { parentData: ParentDataResolver } },\r\n            {\r\n                path: 'policy/:id',\r\n                component: TabbedComp,\r\n                resolve: { childData: ParentDataResolver },\r\n                children: [\r\n                    { path: 'case-disp', component: CaseDispComp, resolve: { childData: ChildDataResolver } },\r\n                    { path: 'review-messages', component: MessagesComp },\r\n                    { path: 'policy-details', component: PolicyDetailComp, resolve: { childData: ChildDataResolver } }\r\n                ]\r\n            }\r\n        ]\r\n    }\r\n];\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(testTabViewRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class TestTabViewRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\n\r\nimport { AngularSplitModule, SplitComponent, SplitAreaDirective } from 'angular-split';\r\n\r\nimport { ComponentsModule } from 'life-core/component/components.module';\r\nimport { RoutedTabViewModule, TabViewStateStore, TabDescriptorFactory } from 'life-core/component/layout/tabview';\r\nimport { MessagingService } from 'life-core/messaging';\r\nimport { TabStateManager } from 'life-core/util';\r\nimport { TestTabViewRoutingModule } from './test-tabview-routing.module';\r\nimport {\r\n    TestRoutedTabView,\r\n    HomeComp,\r\n    SearchComp,\r\n    SimpleComp,\r\n    TabbedComp,\r\n    NestedTabViewHostComp,\r\n    CaseDispComp,\r\n    MessagesComp,\r\n    PolicyDetailComp,\r\n    ParentDataResolver,\r\n    ChildDataResolver\r\n} from './test-routed-tabview';\r\nimport { NoteDialog, NoteComponent, ScratchPadDialog, ScratchPadComponent } from './test-split-area';\r\nimport { TestTabDescriptorFactory } from './test-tab-descriptor.factory';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        RouterModule,\r\n        AngularSplitModule,\r\n        ComponentsModule,\r\n        RoutedTabViewModule,\r\n        TestTabViewRoutingModule\r\n    ],\r\n    declarations: [\r\n        HomeComp,\r\n        SearchComp,\r\n        SimpleComp,\r\n        TabbedComp,\r\n        NestedTabViewHostComp,\r\n        CaseDispComp,\r\n        MessagesComp,\r\n        PolicyDetailComp,\r\n        TestRoutedTabView,\r\n        NoteDialog,\r\n        NoteComponent,\r\n        ScratchPadDialog,\r\n        ScratchPadComponent\r\n    ],\r\n    exports: [SplitComponent, SplitAreaDirective],\r\n    entryComponents: [NoteDialog, NoteComponent, ScratchPadDialog, ScratchPadComponent],\r\n    providers: [\r\n        TabViewStateStore,\r\n        MessagingService,\r\n        ParentDataResolver,\r\n        ChildDataResolver,\r\n        TabStateManager,\r\n        { provide: TabDescriptorFactory, useClass: TestTabDescriptorFactory }\r\n    ]\r\n})\r\nexport class TestTabViewModule {}\r\n"],"sourceRoot":""}