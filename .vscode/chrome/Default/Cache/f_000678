{"version":3,"sources":["webpack:///./src/lifesuite-app/business/policy/note/add-note/case-note/add-case-note-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/case-note/add-case-note-dialog.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/case-note/add-case-note-list-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/case-note/add-case-note-meta-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/case-note/add-case-note.component.html","webpack:///./src/lifesuite-app/business/policy/note/add-note/case-note/add-case-note.component.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/case-note/add-case-notes-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/case-note/index.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/medical-condition-uw-note/add-medical-condition-uw-note-dialog.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/medical-condition-uw-note/add-medical-condition-uw-note.component.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/medical-condition-uw-note/index.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/requirement-case-note/add-requirement-case-note-dialog.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/requirement-case-note/add-requirement-note.component.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/requirement-case-note/index.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/review-message-note/add-review-message-note-dialog.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/review-message-note/add-review-message-note.component.html","webpack:///./src/lifesuite-app/business/policy/note/add-note/review-message-note/add-review-message-note.component.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/review-message-note/checkable-messages/checkable-messages-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/review-message-note/checkable-messages/checkable-messages.component.html","webpack:///./src/lifesuite-app/business/policy/note/add-note/review-message-note/checkable-messages/checkable-messages.component.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/review-message-note/index.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/review-message-note/review-message-note-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/uw-note/add-uw-note-dialog.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/uw-note/add-uw-note.component.html","webpack:///./src/lifesuite-app/business/policy/note/add-note/uw-note/add-uw-note.component.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/uw-note/add-uw-notes-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/note/add-note/uw-note/index.ts","webpack:///./src/lifesuite-app/business/policy/note/case-notes-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/note/case-notes.component.html","webpack:///./src/lifesuite-app/business/policy/note/case-notes.component.ts","webpack:///./src/lifesuite-app/business/policy/note/combined-notes-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/note/note-component-resolver.helper.ts","webpack:///./src/lifesuite-app/business/policy/note/note-info.component.html","webpack:///./src/lifesuite-app/business/policy/note/note-info.component.ts","webpack:///./src/lifesuite-app/business/policy/note/note-list/note-list.component.css","webpack:///./src/lifesuite-app/business/policy/note/note-list/note-list.component.html","webpack:///./src/lifesuite-app/business/policy/note/note-list/note-list.component.ts","webpack:///./src/lifesuite-app/business/policy/note/notes-component-level-privileges.ts","webpack:///./src/lifesuite-app/business/policy/note/notes-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/note/notes-meta-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/note/notes.component.ts","webpack:///./src/lifesuite-app/business/policy/note/notes.module.ts","webpack:///./src/lifesuite-app/business/policy/note/type/case-note.component.css","webpack:///./src/lifesuite-app/business/policy/note/type/case-note.component.html","webpack:///./src/lifesuite-app/business/policy/note/type/case-note.component.ts","webpack:///./src/lifesuite-app/business/policy/note/type/index.ts","webpack:///./src/lifesuite-app/business/policy/note/type/note-type.component.ts","webpack:///./src/lifesuite-app/business/policy/note/type/uw-note.component.html","webpack:///./src/lifesuite-app/business/policy/note/type/uw-note.component.ts","webpack:///./src/lifesuite-app/business/policy/note/uw-notes-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/note/uw-notes.component.html","webpack:///./src/lifesuite-app/business/policy/note/uw-notes.component.ts","webpack:///./src/lifesuite-app/business/policy/note/view-notes/view-notes.component.html","webpack:///./src/lifesuite-app/business/policy/note/view-notes/view-notes.component.ts","webpack:///./src/lifesuite-app/business/policy/scratch-pad/index.ts","webpack:///./src/lifesuite-app/business/policy/scratch-pad/scratch-pad-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/scratch-pad/scratch-pad-data.service.ts","webpack:///./src/lifesuite-app/business/policy/scratch-pad/scratch-pad-dialog.component.html","webpack:///./src/lifesuite-app/business/policy/scratch-pad/scratch-pad-dialog.component.ts","webpack:///./src/lifesuite-app/business/policy/scratch-pad/scratch-pad.component.html","webpack:///./src/lifesuite-app/business/policy/scratch-pad/scratch-pad.component.ts","webpack:///./src/lifesuite-app/business/policy/scratch-pad/scratch-pad.request.ts","webpack:///./src/lifesuite-app/business/policy/shared/data-resolver/index.ts","webpack:///./src/lifesuite-app/business/policy/shared/refresh-policy/refresh-policy-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/shared/refresh-policy/refresh-policy.handler.ts","webpack:///./src/lifesuite-app/business/policy/tab/index.ts","webpack:///./src/lifesuite-app/business/policy/tab/split-container/tab-policy-split-pane-areas.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/review-messages/review-messages-type.ts","webpack:///./src/lifesuite-app/business/shared/auto-navigation/auto-navigation-channels.ts","webpack:///./src/lifesuite-app/life-core/component/layout/split/index.ts","webpack:///./src/lifesuite-app/life-core/component/layout/split/split-pane/index.ts","webpack:///./src/lifesuite-app/life-core/component/layout/split/split-pane/lf-split-pane.model.ts","webpack:///./src/lifesuite-app/life-core/component/layout/split/split-pane/vm/split-pane-container.vm.ts","webpack:///./src/lifesuite-app/life-core/component/layout/split/split-pane/vm/split-pane-dialog.vm.ts","webpack:///./src/lifesuite-app/life-core/util/email/email.util.ts","webpack:///./src/lifesuite-app/life-core/util/email/index.ts","webpack:///./src/lifesuite-app/ls-core/auto-navigation/auto-navigation-manager.ts","webpack:///./src/lifesuite-app/ls-core/auto-navigation/auto-navigation-processor.ts","webpack:///./src/lifesuite-app/ls-core/auto-navigation/index.ts","webpack:///./src/lifesuite-app/ls-core/auto-navigation/navigation-sequence-factory.ts","webpack:///./src/lifesuite-app/ls-core/auto-navigation/navigation-sequence-type.ts","webpack:///./src/lifesuite-app/ls-core/model/auto-navigation/index.ts","webpack:///./src/lifesuite-app/ls-core/model/auto-navigation/navigation-sequence.ts","webpack:///./src/lifesuite-app/ls-core/model/auto-navigation/navigation-target.ts"],"names":[],"mappings":"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","file":"default~business-policy-note-view-notes-view-notes-module~business-policy-policy-module.js","sourcesContent":["import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared/data-resolver';\r\n\r\n@Injectable()\r\nexport class AddCaseNoteDataResolver extends BasePolicyDataResolver implements DirectDataResolverClass<void> {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItems(this.policy, [\r\n            DataCollectionNames.Agencies,\r\n            DataCollectionNames.Agents,\r\n            DataCollectionNames.Notes\r\n        ]);\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getInsuredLazyLoadTree());\r\n        return this.lazyDataLoader.batchLoad(request);\r\n    }\r\n\r\n    private getInsuredLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            insuredDTOLoadTree.AddChildren([DataCollectionNames.Applications]);\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n}\r\n","import { Component, ViewChild, Injector, Type, inject } from '@angular/core';\r\n\r\nimport { SplitPaneDialogViewModel } from 'life-core/component/layout/split';\r\nimport {\r\n    CardDialog,\r\n    CardDialogParams,\r\n    DialogResult,\r\n    DialogButton,\r\n    DialogButtonType,\r\n    ButtonActionType\r\n} from 'life-core/component';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { ResolvedDataNames, ViewValidationResult } from 'life-core/view-model';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { NoteDTO, PolicyDTO } from 'ls-core/model';\r\nimport { AppSession, PolicySubscriber } from 'ls-core/session';\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\n\r\nimport { AddCaseNoteComponent } from './add-case-note.component';\r\nimport { AddCaseNoteMetaDataResolver } from './add-case-note-meta-data.resolver';\r\nimport { AddCaseNoteListDataResolver } from './add-case-note-list-data.resolver';\r\nimport { AddCaseNoteDataResolver } from './add-case-note-data.resolver';\r\nimport { AddCaseNotesAuthorizationProvider } from './add-case-notes-authorization.provider';\r\nimport { RefreshPolicyHandler } from 'business/policy/shared/refresh-policy/refresh-policy.handler';\r\n\r\n@Component({\r\n    selector: 'add-case-note-dialog',\r\n    template: `\r\n        <card-dialog [view]=\"view\" (dialogDismiss)=\"onDialogDismiss($event)\" secureComponent></card-dialog>\r\n    `,\r\n    providers: [{ provide: AuthorizationProvider, useClass: AddCaseNotesAuthorizationProvider }, PolicySubscriber]\r\n})\r\nexport class AddCaseNoteDialog extends SplitPaneDialogViewModel {\r\n    public view: Type<AddCaseNoteComponent> = AddCaseNoteComponent;\r\n    protected policy: PolicyDTO;\r\n    private _parentNote: NoteDTO;\r\n\r\n    @ViewChild(CardDialog)\r\n    protected cardDialog: CardDialog;\r\n\r\n    constructor(injector: Injector, i18n: I18n, policySubscriber: PolicySubscriber) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        policySubscriber.subscribe(this, policy => {\r\n            this.policy = policy;\r\n        });\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        super.setModel(model);\r\n        if (model.context) {\r\n            this._parentNote = model.context.parentNote;\r\n        }\r\n    }\r\n\r\n    protected getDialogParams(): CardDialogParams {\r\n        return {\r\n            title: this.getDialogTitle(),\r\n            buttons: [\r\n                new DialogButton({\r\n                    type: DialogButtonType.ACCEPT,\r\n                    actionType: ButtonActionType.DataChange,\r\n                    handler: dialogResult => {\r\n                        this.validate().then(validationResult => {\r\n                            if (validationResult == ViewValidationResult.pass) {\r\n                                this.onCardDialogOkClick(dialogResult);\r\n                            }\r\n                        });\r\n                    }\r\n                }),\r\n                new DialogButton({\r\n                    type: DialogButtonType.CANCEL,\r\n                    actionType: ButtonActionType.Presentation,\r\n                    handler: dialogResult => {\r\n                        this.onCardDialogButtonClick(dialogResult);\r\n                    }\r\n                })\r\n            ],\r\n            data: this.splitArea.context,\r\n            resolve: [\r\n                { resolveName: ResolvedDataNames.data, resolverClass: AddCaseNoteDataResolver },\r\n                { resolveName: ResolvedDataNames.listData, resolverClass: AddCaseNoteListDataResolver },\r\n                { resolveName: ResolvedDataNames.metaData, resolverClass: AddCaseNoteMetaDataResolver }\r\n            ]\r\n        };\r\n    }\r\n\r\n    protected getDialogTitle(): string {\r\n        return this.showSupplementalNote()\r\n            ? this.i18n({ value: 'Add Supplemental Note', id: 'policy.notes.addnotes.addsupplementalnotes' })\r\n            : this.i18n({ value: 'Add Case Notes', id: 'policy.notes.addnotes.casenote.title' });\r\n    }\r\n\r\n    protected showSupplementalNote(): boolean {\r\n        return this._parentNote != undefined;\r\n    }\r\n\r\n    protected onCardDialogOkClick(dialogResult: DialogResult): void {\r\n        if (this.isSupplementalNoteAdded(dialogResult.returnValue)) {\r\n            this.addSupplementalNoteToParentNote(dialogResult.returnValue);\r\n        } else {\r\n            this.addNoteToPolicy(dialogResult.returnValue);\r\n        }\r\n        this.saveData();\r\n        this.onCardDialogButtonClick(dialogResult);\r\n    }\r\n\r\n    protected isSupplementalNoteAdded(newNote: NoteDTO): boolean {\r\n        return newNote.ParentNoteId !== undefined;\r\n    }\r\n\r\n    protected addSupplementalNoteToParentNote(supplementalNote: NoteDTO): void {\r\n        supplementalNote.DiaryDate = null;\r\n        this._parentNote.ReferToUserId = supplementalNote.ReferToUserId;\r\n        this._parentNote.Author = supplementalNote.Author;\r\n        this._parentNote.SupplementalNotes.push(supplementalNote);\r\n    }\r\n\r\n    protected refreshPolicy(): void {\r\n        const refreshPolicyHandler = this.injector.get(RefreshPolicyHandler);\r\n        refreshPolicyHandler.execute();\r\n    }\r\n\r\n    private addNoteToPolicy(newNote: NoteDTO): void {\r\n        this.policy.Notes_LazyLoad.push(newNote);\r\n    }\r\n\r\n    // State Management\r\n    protected getStateValueKey(): string {\r\n        return 'case_notes_dialog';\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n\r\n    protected getDataToSave(): any {\r\n        return this.policy;\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\nimport { ListsDataRequest, ListDataRequestBuilder } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { NoteDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class AddCaseNoteListDataResolver extends BaseListDataResolver {\r\n    public context?: any;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder: ListDataRequestBuilder = new ListDataRequestBuilder();\r\n        const note = this.getNote();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        listDataRequestBuilder.addListRequestItem(note, 'UserType');\r\n        listDataRequestBuilder.addListRequestItem(note, 'ReferToUserId');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n\r\n    private getNote(): NoteDTO {\r\n        // if context is passed from casenotecomponent when visibility option is changed,\r\n        // use that to send note with selected visibility option to middle tier\r\n        // to get correct lists else newNote on initial load of component.\r\n        return this.context ? (this.context as NoteDTO) : new NoteDTO();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ListMap } from 'life-core/model';\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { MetadataItem } from 'ls-core/model';\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class AddCaseNoteMetaDataResolver extends BaseMetaDataResolver\r\n    implements DirectDataResolverClass<ListMap<MetadataItem>> {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['Visibility', 'System', 'Notes_Subject_lines', 'aus_users', 'service_associate'];\r\n    }\r\n}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12 col-lg-6\\\">\\r\\n            <lf-form-input [control]=\\\"caseNumber\\\" label=\\\"Case #\\\" i18n-label=\\\"@@policy.notes.addnotes.casenumber\\\">\\r\\n                <lf-statictext #caseNumber name=\\\"caseNumber\\\" [value]=\\\"policy.PolicyNumber\\\" secureComponent>\\r\\n                </lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-12 col-lg-6\\\">\\r\\n            <lf-form-input [control]=\\\"caseManager\\\" label=\\\"Case Manager\\\"\\r\\n                i18n-label=\\\"@@policy.notes.addnotes.casemanager\\\">\\r\\n                <lf-statictext #caseManager name=\\\"caseManager\\\" [value]=\\\"serviceAssociateName\\\" secureComponent>\\r\\n                </lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-12 col-lg-6\\\">\\r\\n            <lf-form-input [control]=\\\"agency\\\" label=\\\"Agency\\\" i18n-label=\\\"@@policy.notes.addnotes.agency\\\">\\r\\n                <lf-statictext #agency name=\\\"agency\\\" [value]=\\\"agencyName\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-12 col-lg-6\\\">\\r\\n            <lf-form-input [control]=\\\"agent\\\" label=\\\"Agent\\\" i18n-label=\\\"@@policy.notes.addnotes.agent\\\">\\r\\n                <lf-statictext #agent name=\\\"agent\\\" [value]=\\\"agentName\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12 col-lg-6\\\">\\r\\n            <lf-form-input [control]=\\\"createdOn\\\" label=\\\"Created On\\\" i18n-label=\\\"@@policy.notes.addnotes.createdon\\\">\\r\\n                <lf-statictext #createdOn name=\\\"createdOn\\\" [value]=\\\"dateCreated | lfDate\\\" secureComponent>\\r\\n                </lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-12 col-lg-6\\\">\\r\\n            <lf-form-input [control]=\\\"createdBy\\\" label=\\\"Created By\\\" i18n-label=\\\"@@policy.notes.addnotes.createdby\\\">\\r\\n                <lf-statictext #createdBy name=\\\"createdBy\\\" [value]=\\\"userName\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-12 col-lg-6\\\">\\r\\n            <lf-form-input [control]=\\\"applicant\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.notes.addnotes.applicant\\\">\\r\\n                <lf-select #applicant name=\\\"applicant\\\" [items]=\\\"applicantList\\\" [(ngModel)]=\\\"applicantId\\\"\\r\\n                    (change)=\\\"onApplicantChange($event)\\\" [disabled]=\\\"isSupplementalNote || isApplicantListDisabled\\\"\\r\\n                    style=\\\"width:200px\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"!showSubjectFieldList && !isSupplementalNote\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input [control]=\\\"subject\\\" label=\\\"Subject\\\" i18n-label=\\\"@@policy.notes.addnotes.subject\\\">\\r\\n                <lf-inputtext #subject name=\\\"subject\\\" [(ngModel)]=\\\"data.Topic\\\" [maxLength]=\\\"254\\\"\\r\\n                    [disabled]=\\\"isSubjectDisabled\\\" [style]=\\\"{ width: '280px' }\\\" secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"showSubjectFieldList && !isSupplementalNote\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input [control]=\\\"subjectList\\\" label=\\\"Subject\\\" i18n-label=\\\"@@policy.notes.addnotes.subject\\\">\\r\\n                <lf-select #subjectList name=\\\"subjectList\\\" [items]=\\\"subjectListOptions | listItems: 'label':'value'\\\"\\r\\n                    [(ngModel)]=\\\"data.Topic\\\" [disabled]=\\\"isSubjectDisabled\\\" style=\\\"width:280px\\\" [clearable]=\\\"false\\\"\\r\\n                    secureComponent required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input [control]=\\\"visibilityList\\\" label=\\\"Visibility\\\"\\r\\n                i18n-label=\\\"@@policy.notes.addnotes.visibility\\\">\\r\\n                <lf-select #visibilityList name=\\\"visibilityList\\\"\\r\\n                    [items]=\\\"visibilityListOptions | listItems: 'label':'value'\\\" [(ngModel)]=\\\"data.Visibility\\\"\\r\\n                    style=\\\"width:200px\\\" (change)=\\\"onVisibilityChange($event)\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input [control]=\\\"needsReview\\\" label=\\\"Needs Review\\\"\\r\\n                i18n-label=\\\"@@policy.notes.addnotes.needsreview\\\">\\r\\n                <lf-radiobuttongroup #needsReview name=\\\"needsReview\\\" [(ngModel)]=\\\"needReview\\\"\\r\\n                    (change)=\\\"onNeedReviewChange($event)\\\" secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"needsReview\\\" [value]=\\\"true\\\" label=\\\"Yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"needsReview\\\" [value]=\\\"false\\\" label=\\\"No\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-12 col-xl-6\\\">\\r\\n            <lf-form-input [control]=\\\"noteReviewDate\\\" label=\\\"Review Date\\\"\\r\\n                i18n-label=\\\"@@policy.notes.addnotes.reviewdate\\\">\\r\\n                <ls-inputdate #noteReviewDate name=\\\"noteReviewDate\\\" [(ngModel)]=\\\"data.DiaryDate\\\"\\r\\n                    [disabled]=\\\"!needReview\\\" [required]=\\\"needReview\\\" secureComponent></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-12 col-xl-4\\\">\\r\\n            <lf-form-input [control]=\\\"reviewerTypeList\\\" label=\\\"Reviewer Type\\\"\\r\\n                i18n-label=\\\"@@policy.notes.addnotes.reviewertype\\\">\\r\\n                <lf-select #reviewerTypeList name=\\\"reviewerTypeList\\\"\\r\\n                    [items]=\\\"reviewerTypeListOptions | listItems: 'value':'Id'\\\" [(ngModel)]=\\\"data.UserType\\\"\\r\\n                    style=\\\"width: 100px\\\" (change)=\\\"onReviewerTypeChange($event)\\\" [disabled]=\\\"!needReview\\\"\\r\\n                    [required]=\\\"needReview\\\" [clearable]=\\\"false\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12 col-xl-5\\\">\\r\\n            <lf-form-input [control]=\\\"reviewerList\\\" label=\\\"Reviewer\\\" i18n-label=\\\"@@policy.notes.addnotes.reviewer\\\">\\r\\n                <lf-select #reviewerList name=\\\"reviewerList\\\" [items]=\\\"reviewerListOptions | listItems: 'label':'value'\\\"\\r\\n                    [(ngModel)]=\\\"data.ReferToUserId\\\" style=\\\"width:150px\\\" [disabled]=\\\"!needReview\\\"\\r\\n                    [required]=\\\"needReview\\\" [clearable]=\\\"false\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-xs-12 col-xl-7\\\">\\r\\n            <lf-form-input [control]=\\\"sendEmail\\\" label=\\\"Send Email\\\" i18n-label=\\\"@@policy.notes.addnotes.sendemail\\\">\\r\\n                <lf-radiobuttongroup #sendEmail name=\\\"sendEmail\\\" [(ngModel)]=\\\"data.EmailToList\\\" [disabled]=\\\"!needReview\\\"\\r\\n                    secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"sendEmail\\\" value=\\\"Yes\\\" label=\\\"Yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"sendEmail\\\" value=\\\"No\\\" label=\\\"No\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input [control]=\\\"noteTextArea\\\" [label]=\\\"noteFieldLabel\\\">\\r\\n                <lf-inputtextarea #noteTextArea name=\\\"noteTextArea\\\" rows=\\\"7\\\" [style]=\\\"{ width: '100%' }\\\"\\r\\n                    [(ngModel)]=\\\"data.Note\\\" secureComponent required></lf-inputtextarea>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <hr *ngIf=\\\"isSupplementalNote\\\" />\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"isSupplementalNote\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <div style=\\\"height: 150px; overflow-y: auto; border:1px solid grey\\\">\\r\\n                <ls-note noteTitle=\\\"Note\\\" [noteSubject]=\\\"parentNote.Topic\\\"\\r\\n                    [noteCreatedOn]=\\\"parentNote.AddedDate | dbDate\\\" [noteCreatedBy]=\\\"getAuthorName(parentNote)\\\"\\r\\n                    [note]=\\\"parentNote.Note\\\" i18n-noteTitle=\\\"@@policy.notes.addnotes.note\\\"></ls-note>\\r\\n                <div *ngFor=\\\"let supplementalNote of parentNote.SupplementalNotes\\\">\\r\\n                    <ls-supplemental-note noteTitle=\\\"Past Supplemental Notes\\\"\\r\\n                        [noteReferredTo]=\\\"getReferredToUserName(supplementalNote)\\\"\\r\\n                        [noteCreatedOn]=\\\"supplementalNote.AddedDate | dbDate: 'shortDateMediumTime'\\\"\\r\\n                        [noteCreatedBy]=\\\"getAuthorName(supplementalNote)\\\" [note]=\\\"supplementalNote.Note\\\"\\r\\n                        i18n-noteTitle=\\\"@@policy.notes.addnotes.supplementalnote\\\"></ls-supplemental-note>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { ViewModel, ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\r\nimport { ListItem } from 'life-core/model';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { DialogButtonType, DialogViewModelResult, ICardDialogViewModel } from 'life-core/component/dialog';\r\nimport { EmailUtil } from 'life-core/util/email';\r\nimport { ListUtil, NamePattern, NameFormatter } from 'life-core/util';\r\n\r\nimport {\r\n    ListDataService,\r\n    ListDataRequestBuilder,\r\n    ListsDataRequest,\r\n    ListDataUtil,\r\n    DataServiceParams,\r\n    UIServiceNames,\r\n    UIServiceMethods,\r\n    DataService,\r\n    ListDataItem\r\n} from 'ls-core/service';\r\nimport { DBDateUtil, MetadataUtil } from 'ls-core/util';\r\nimport { DTOLoadByPKRequest, DTOLoadByPKResponse } from 'ls-core/service/load-bypk';\r\nimport { LsRadioButtonValues } from 'ls-core/component/input';\r\nimport { AppSession, PolicySubscriber } from 'ls-core/session';\r\nimport { PolicyDTO, UserDTO, NoteDTO, DBDate, MetadataItem, InsuredDTO } from 'ls-core/model';\r\nimport { ApplicantListHelper, ApplicationCountersHelper, ActiveApplicantHelper } from 'business/policy/shared';\r\nimport { AddCaseNoteListDataResolver } from './add-case-note-list-data.resolver';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Component({\r\n    selector: 'add-case-note',\r\n    templateUrl: './add-case-note.component.html',\r\n    providers: [ParentChildRegistry, PolicySubscriber, EmailUtil]\r\n})\r\nexport class AddCaseNoteComponent extends ViewModel<NoteDTO> implements ICompose, ICardDialogViewModel {\r\n    public policy: PolicyDTO;\r\n    public subjectListOptions: Array<ListItem> = [];\r\n    public visibilityListOptions: Array<ListItem> = [];\r\n    public reviewerTypeListOptions: Array<ListDataItem> = [];\r\n    public reviewerListOptions: Array<ListItem> = [];\r\n    public applicantList: Array<ListItem> = [];\r\n    public dateCreated: number = Date.now();\r\n    public applicantId: number;\r\n    public needReview: boolean;\r\n    public note: string;\r\n    public agencyName: string;\r\n    public agentName: string;\r\n    public userName: string;\r\n    public serviceAssociateName: string;\r\n    public user: UserDTO;\r\n    public showSubjectFieldList: boolean;\r\n    public parentNote: NoteDTO;\r\n    public isSupplementalNote: boolean;\r\n    public isSubjectDisabled: boolean;\r\n    public isApplicantListDisabled: boolean;\r\n    public noteFieldLabel: string;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _resolvedData: any;\r\n    private _listDataService: ListDataService;\r\n    private _dataService: DataService;\r\n    private _emailUtil: EmailUtil;\r\n    private _noteStateModel: CaseNoteStateModel;\r\n    private _addCaseNoteListDataResolver: AddCaseNoteListDataResolver;\r\n    private _nameFormatter: NameFormatter;\r\n    private _applicationCountersHelper: ApplicationCountersHelper;\r\n    private _activeApplicantHelper: ActiveApplicantHelper;\r\n\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber, nameFormatter: NameFormatter, i18n: I18n) {\r\n        super(injector);\r\n        this._applicantListHelper = injector.get(ApplicantListHelper);\r\n        this._dataService = injector.get(DataService);\r\n        this._listDataService = injector.get(ListDataService);\r\n        this._emailUtil = injector.get(EmailUtil);\r\n        this._addCaseNoteListDataResolver = injector.get(AddCaseNoteListDataResolver);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.policy = p;\r\n        });\r\n        const appSession: AppSession = injector.get(AppSession);\r\n        this._applicationCountersHelper = injector.get(ApplicationCountersHelper);\r\n        this._activeApplicantHelper = injector.get(ActiveApplicantHelper);\r\n        this.user = appSession.user;\r\n        this._nameFormatter = nameFormatter;\r\n        this.i18n = i18n;\r\n        this.data = new NoteDTO();\r\n    }\r\n\r\n    public setState(stateData: any): void {\r\n        this._noteStateModel = stateData;\r\n        this.data = stateData.note;\r\n    }\r\n\r\n    public initData(): void {}\r\n\r\n    public setModel(model: any): void {\r\n        this._resolvedData = model.resolvedData;\r\n        this.isSupplementalNote = this.isCurrentNoteSupplementalNote(model.parameterData);\r\n        if (this.isSupplementalNote) {\r\n            this.setParentNoteInfo(model.parameterData);\r\n        }\r\n        this.setSubjectFieldAvailability();\r\n        if (this.showSubjectFieldList) {\r\n            this.loadSubjectList();\r\n        }\r\n        this.loadVisibilityList();\r\n        this.loadReviewerTypeList();\r\n        this.loadReviewerList();\r\n        this.setAgencyName();\r\n        this.setAgentName();\r\n        this.setNeedReview();\r\n        this.setServiceAssociateName();\r\n        this.setNoteFieldLabel();\r\n    }\r\n\r\n    private isCurrentNoteSupplementalNote(context: any): boolean {\r\n        return context && context.parentNote != undefined;\r\n    }\r\n\r\n    private setParentNoteInfo(context: any): void {\r\n        this.parentNote = context.parentNote;\r\n        this.data.ParentNoteId = this.parentNote.NoteId;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.loadApplicantList();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.initSubscribers();\r\n        this.setApplicantListAvailability();\r\n        this.setUserName();\r\n        this.setDefaultVisibilityOption();\r\n        this.setAuthor();\r\n    }\r\n\r\n    protected setDefaultVisibilityOption(): void {\r\n        this.data.Visibility = 'Internal';\r\n        this.onVisibilityChange(this.data.Visibility);\r\n    }\r\n\r\n    private setAuthor(): void {\r\n        this.data.Author = this.user.UserId;\r\n    }\r\n\r\n    private setNeedReview(): void {\r\n        if(this.isSupplementalNote && this.parentNote.DiaryDate != null &&  DBDateUtil.isDateSet(this.parentNote.DiaryDate))\r\n        {\r\n            this.needReview = true;\r\n            this.onNeedReviewChange(true);\r\n        }\r\n        else\r\n        {\r\n            this.needReview = false;\r\n        }         \r\n    }\r\n\r\n    private setDefaultReviewerType(): void {\r\n        if(this.isSupplementalNote && this.parentNote.UserType != null)\r\n        {\r\n            this.data.UserType = this.parentNote.UserType;            \r\n        }\r\n    }\r\n    private loadApplicantList(): void {\r\n        this.applicantList = this._applicantListHelper.getApplicantList(this.policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    public initSubscribers(): void {\r\n        this.trackSubscription(\r\n            this._activeApplicantHelper.activeApplicantIdObservable.subscribe(activeApplicantId => {\r\n                this.setActiveApplicant();\r\n            })\r\n        );\r\n    }\r\n\r\n    private setActiveApplicant(): void {\r\n        this.applicantId = this._applicantListHelper.getActiveApplicantIdOrDefault(this.policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    protected setApplicantListAvailability(): void {\r\n        // by default it's false. Will be set otherwise in other dialog component's if necessary such as Requirement\r\n        this.isApplicantListDisabled = false;\r\n    }\r\n\r\n    private setAgencyName(): void {\r\n        if (this.policy.Agencies_LazyLoad.length > 0) {\r\n            this.agencyName = this._nameFormatter.format(\r\n                NamePattern.FirstAndLastName,\r\n                this.policy.Agencies_LazyLoad[0].FirstName,\r\n                this.policy.Agencies_LazyLoad[0].LastName\r\n            );\r\n        }\r\n    }\r\n\r\n    private setAgentName(): void {\r\n        if (this.policy.Agents_LazyLoad.length > 0) {\r\n            this.agentName = this._nameFormatter.format(\r\n                NamePattern.LastAndFirstName,\r\n                this.policy.Agents_LazyLoad[0].FirstName,\r\n                this.policy.Agents_LazyLoad[0].LastName\r\n            );\r\n        }\r\n    }\r\n\r\n    private setUserName(): void {\r\n        this.userName = this._nameFormatter.format(\r\n            NamePattern.FirstAndLastName,\r\n            this.user.FirstName,\r\n            this.user.LastName\r\n        );\r\n    }\r\n\r\n    private setServiceAssociateName(): void {\r\n        this.serviceAssociateName = MetadataUtil.getLabelByValue(\r\n            this._resolvedData.metaData.service_associate,\r\n            this.policy.ServiceAssociateId.toString()\r\n        );\r\n    }\r\n\r\n    protected setSubjectFieldAvailability(): void {\r\n        this.isSubjectDisabled = false; // by default it's false. Will be set otherwise in other dialog component's if necessary such as Requirement\r\n\r\n        const systemMetadata: Array<MetadataItem> = this._resolvedData.metaData.System;\r\n        this.showSubjectFieldList =\r\n            systemMetadata.find(item => item.value == 'Notes_Subjectlines_Options').label == 'true';\r\n    }\r\n\r\n    protected loadSubjectList(): void {\r\n        const caseNotesSubjectLinesMetadata: Array<MetadataItem> = this._resolvedData.metaData.Notes_Subject_lines;\r\n        const caseNotesSubjectLines = caseNotesSubjectLinesMetadata.filter(subjectLine => subjectLine.label === 'Case');\r\n        this.subjectListOptions = ListUtil.convertToListItems(caseNotesSubjectLines, 'value', 'value');\r\n    }\r\n\r\n    private loadVisibilityList(): void {\r\n        const visibilityMetadata: Array<MetadataItem> = this._resolvedData.metaData.Visibility;\r\n        this.visibilityListOptions = ListDataUtil.convertToListItemsFromMetadataItems(visibilityMetadata);\r\n    }\r\n\r\n    private loadReviewerTypeList(): void {\r\n        this.reviewerTypeListOptions = this._resolvedData.listData.UserType;\r\n    }\r\n\r\n    private loadReviewerList(): void {\r\n        if (this._noteStateModel) {\r\n            this.reviewerListOptions = this._noteStateModel.reviewerListOptions;\r\n        }\r\n    }\r\n\r\n    public onReviewerTypeChange(reviewerTypeSelection: any): void {\r\n        this.getReviewerList().then(() => this.setDefaultReviewer());\r\n    }\r\n\r\n    private getReviewerList(): Promise<void> {\r\n        const request = this.getReviewerListDataRequest();\r\n        return this._listDataService.load(request).then(data => {\r\n            this.reviewerListOptions = ListDataUtil.convertToListItemArray(data.ReferToUserId);\r\n        });\r\n    }\r\n\r\n    private getReviewerListDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder: ListDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this.policy);\r\n        listDataRequestBuilder.addListRequestItem(this.data, 'ReferToUserId');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n\r\n    public onVisibilityChange(visibilitySelection: any): void {\r\n        if(!visibilitySelection && this.needReview)\r\n        {\r\n            this.data.Visibility = this.parentNote.Visibility;\r\n            this.setDefaultReviewerType();\r\n        }\r\n        else\r\n        {\r\n            this.data.UserType = 0;\r\n            this.data.ReferToUserId = -1;\r\n        }\r\n        // this method is not needed for base but for clients it maybe required\r\n        // as different lists might show up for internal vs external visibility selection\r\n        this.reloadReviewerTypeAndReviewerLists();\r\n    }\r\n\r\n    private setDefaultReviewer(): void {\r\n        if(this.isSupplementalNote)\r\n        {\r\n            this.data.ReferToUserId = this.reviewerListOptions.find(reviewer => reviewer.value == this.parentNote.Author)\r\n                ? this.parentNote.Author: -1;\r\n        }\r\n        else\r\n        {\r\n             this.data.ReferToUserId = -1;\r\n        }\r\n    }\r\n    private reloadReviewerTypeAndReviewerLists(): void {\r\n        this._addCaseNoteListDataResolver.context = this.data;\r\n        this._addCaseNoteListDataResolver.directResolve().then(listData => {\r\n            this.reviewerTypeListOptions = listData.UserType;\r\n            this.getReviewerList().then(() => {\r\n                this.setDefaultReviewer();\r\n                this._addCaseNoteListDataResolver.context = undefined;\r\n            });\r\n        });\r\n    }\r\n\r\n    public onApplicantChange(activeApplicant: any): void {\r\n        if (activeApplicant && activeApplicant.value) {\r\n            this._activeApplicantHelper.setActiveApplicantId(activeApplicant.value);\r\n        }\r\n    }\r\n\r\n    public onNeedReviewChange(value: boolean): void {\r\n        if (value) {\r\n            this.data.DiaryDate = this.getTodaysDate();\r\n            this.data.EmailToList = LsRadioButtonValues.NO_STRING;\r\n        } else {\r\n            this.data.DiaryDate = null;\r\n            this.data.EmailToList = '';\r\n            this.data.ReferToUserId = -1;\r\n            this.data.UserType = 0;\r\n        }\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId === DialogButtonType.ACCEPT) {\r\n            return this.validate().then(result => {\r\n                if (result == ViewValidationResult.pass) {\r\n                    this.addNote();\r\n                    if (this.needReview) {\r\n                        return this.handleNoteReview(result);\r\n                    }\r\n                    if (!this.needReview && this.isSupplementalNote) {\r\n                        this.undoReviewOnParentNote(); // blindly assuming that supplemental note is added because of review on parent note\r\n                    }\r\n                    return new DialogViewModelResult(this.data, result === ViewValidationResult.pass, this.isDirty());\r\n                }\r\n            });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    private undoReviewOnParentNote(): void {\r\n        this.parentNote.DiaryDate = null;\r\n        this.parentNote.UserType = 0;\r\n        this.parentNote.ReferToUserId = -1;\r\n        this.parentNote.EmailToList = LsRadioButtonValues.NO_STRING;\r\n    }\r\n\r\n    protected handleNoteReview(result: any): Promise<DialogViewModelResult> {\r\n        return this.getReviewerAsUserDTO().then(reviewerAsUserDTO => {\r\n            this.data.Topic = this.getNoteTopic(reviewerAsUserDTO);\r\n            if (this.data.EmailToList === LsRadioButtonValues.YES_STRING) {\r\n                this.sendEmail(this.getReviewerEmailAddress(reviewerAsUserDTO));\r\n            }\r\n            return new DialogViewModelResult(this.data, result === ViewValidationResult.pass, this.isDirty());\r\n        });\r\n    }\r\n\r\n    private getNoteTopic(reviewerAsUserDTO: UserDTO): string {\r\n        if (reviewerAsUserDTO && !this.isSupplementalNote) {\r\n            return this.buildReferredToNoteTopic(reviewerAsUserDTO.FirstName, reviewerAsUserDTO.LastName);\r\n        } else if (this.isSupplementalNote) {\r\n            return this.parentNote.Topic;\r\n        } else if (!this.isSupplementalNote) {\r\n            return this.data.Topic;\r\n        }\r\n    }\r\n\r\n    private getReviewerEmailAddress(reviewerAsUserDTO: UserDTO): string {\r\n        return reviewerAsUserDTO ? reviewerAsUserDTO.EmailAddress : '';\r\n    }\r\n\r\n    private getReviewerAsUserDTO(): Promise<UserDTO> {\r\n        if (this.data.ReferToUserId) {\r\n            const request = this.getReviewerAsUserDTORequest();\r\n            const serviceParams = this.getServiceParams(request);\r\n            return this._dataService.getData(serviceParams).then(response => {\r\n                const reviewerAsUserResponse = response.responsePayload as DTOLoadByPKResponse;\r\n                return reviewerAsUserResponse ? (reviewerAsUserResponse.dtoObject as UserDTO) : null;\r\n            });\r\n        }\r\n        return Promise.resolve(null);\r\n    }\r\n\r\n    private getReviewerAsUserDTORequest(): DTOLoadByPKRequest {\r\n        const reviewer = new UserDTO();\r\n        reviewer.UserId = this.data.ReferToUserId;\r\n\r\n        const request = new DTOLoadByPKRequest();\r\n        request._parentDTOObject = null;\r\n        request._workingDTOObject = reviewer;\r\n        request._eagerLoad = true;\r\n        return request;\r\n    }\r\n\r\n    private getServiceParams(request: DTOLoadByPKRequest): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.DTO_LOAD,\r\n            serviceMethod: UIServiceMethods.DTO_LOAD,\r\n            requestPayload: request\r\n        });\r\n    }\r\n\r\n    protected addNote(): void {\r\n        this.data.AddedDate = this.getTodaysDate();\r\n        this.data.UpdateDate = this.getTodaysDate();\r\n        this.data.UpdatedBy = this.user.UserId;\r\n        this.setPolicyPersonID();\r\n        this.data.NoteType = this.getNoteType();\r\n        if(this.isSupplementalNote)\r\n        {   \r\n            this.data.PrimaryAuthor = this.parentNote.PrimaryAuthor;            \r\n        }\r\n        else\r\n        {\r\n            this.data.PrimaryAuthor = this.user.UserId;\r\n        }\r\n        this.data.SupplementalNotes = [];\r\n        this.updateUserApplicationCounts();\r\n        this.changeManager.setIsDirty(true);\r\n    }\r\n\r\n    private setPolicyPersonID(): void {\r\n        const insured = this.getInsured();\r\n        if (insured) {\r\n            this.data.PolicyPersonId = insured.PolicyPersonId.toString();\r\n        }\r\n    }\r\n\r\n    private getTodaysDate(): DBDate {\r\n        return DBDateUtil.dateToDBDate(new Date());\r\n    }\r\n\r\n    private getNoteType(): string {\r\n        return this.needReview ? 'Refer' : 'Manual';\r\n    }\r\n\r\n    private getInsured(): InsuredDTO {\r\n        return this.policy.Insureds_LazyLoad.find(insured => insured.PersonId == this.applicantId);\r\n    }\r\n\r\n    private updateUserApplicationCounts(): void {\r\n        this._applicationCountersHelper.incrementManualActionCounter(this.policy);\r\n    }\r\n\r\n    private buildReferredToNoteTopic(reviewerFirstName: string, reviewerLastName: string): string {\r\n        const formattedReviewerName = this._nameFormatter.format(\r\n            NamePattern.LastAndFirstName,\r\n            reviewerFirstName,\r\n            reviewerLastName\r\n        );\r\n        return `Referred to: ${formattedReviewerName} - ${this.data.Topic}`;\r\n    }\r\n\r\n    private sendEmail(emailAddress: string): void {\r\n        this._emailUtil.sendEmail(emailAddress, this.data.Topic, this.buildEmailBody());\r\n    }\r\n\r\n    private buildEmailBody(): string {\r\n        return `Case Number: ${this.policy.PolicyNumber} %0D%0AInsured Name: ${this.getInsured().LastName}, ${\r\n            this.getInsured().FirstName\r\n        } %0D%0ANote text: ${this.data.Note}`;\r\n    }\r\n\r\n    public getState(): any {\r\n        const caseNoteModel = new CaseNoteStateModel();\r\n        caseNoteModel.needsReview = this.needReview;\r\n        caseNoteModel.reviewerListOptions = this.reviewerListOptions;\r\n        caseNoteModel.note = this.data;\r\n        return caseNoteModel;\r\n    }\r\n\r\n    public getAuthorName(note: NoteDTO): string {\r\n        const author = note.PrimaryAuthor ? note.PrimaryAuthor : note.Author;\r\n        return author ? ListUtil.getLabelByValue(this._resolvedData.metaData.aus_users, author.toString()) : '';\r\n    }\r\n\r\n    public getReferredToUserName(note: NoteDTO): string {\r\n        const referredToUser = note.ReferToUserId ? note.ReferToUserId : null;\r\n        return referredToUser\r\n            ? ListUtil.getLabelByValue(this._resolvedData.metaData.aus_users, referredToUser.toString())\r\n            : '';\r\n    }\r\n\r\n    private setNoteFieldLabel(): void {\r\n        this.noteFieldLabel = this.isSupplementalNote\r\n            ? this.i18n({ value: 'Supplemental Note', id: 'policy.notes.addnotes.supplementalnote.label' })\r\n            : this.i18n({ value: 'Note', id: 'policy.notes.addnotes.note.label' });\r\n    }\r\n}\r\n\r\nclass CaseNoteStateModel {\r\n    public needsReview: boolean;\r\n    public reviewerListOptions: Array<ListItem> = [];\r\n    public note: NoteDTO;\r\n}\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class AddCaseNotesAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const caseNotesAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.NOTE]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = caseNotesAuthorizationLevel;\r\n    }\r\n}\r\n","﻿export * from './add-case-note-data.resolver';\r\nexport * from './add-case-note-meta-data.resolver';\r\nexport * from './add-case-note-list-data.resolver';\r\nexport * from './add-case-note.component';\r\nexport * from './add-case-note-dialog';\r\n","import { Component, Type } from '@angular/core';\r\n\r\nimport { AddUWNoteDialog } from 'business/policy/note/add-note/uw-note';\r\nimport { AddMedicalConditionUWNoteComponent } from './add-medical-condition-uw-note.component';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\n@Component({\r\n    selector: 'add-medical-condition-uw-note-dialog',\r\n    template: `\r\n        <card-dialog [view]=\"view\" (dialogDismiss)=\"onDialogDismiss($event)\"></card-dialog>\r\n    `,\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class AddMedicalConditionUWNoteDialog extends AddUWNoteDialog {\r\n    public view: Type<AddMedicalConditionUWNoteComponent> = AddMedicalConditionUWNoteComponent;\r\n\r\n    // State Management\r\n    protected getStateValueKey(): string {\r\n        return 'medical_condition_uw_notes_dialog';\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\nimport { ParentChildRegistry } from 'life-core/view-model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { NoteTypes } from 'ls-core/model';\r\n\r\nimport { AddUWNoteComponent } from 'business/policy/note/add-note/uw-note';\r\n\r\n@Component({\r\n    selector: 'add-medical-condition-uw-note',\r\n    templateUrl: '../uw-note/add-uw-note.component.html',\r\n    providers: [ParentChildRegistry, PolicySubscriber]\r\n})\r\nexport class AddMedicalConditionUWNoteComponent extends AddUWNoteComponent {\r\n    protected getNoteType(): string {\r\n        return NoteTypes.MEDCON_NOTE;\r\n    }\r\n}\r\n","﻿export * from './add-medical-condition-uw-note.component';\r\nexport * from './add-medical-condition-uw-note-dialog';\r\n","import { Component, Type } from '@angular/core';\r\n\r\nimport { DialogResult } from 'life-core/component';\r\nimport { SaveDataResult } from 'life-core/service';\r\n\r\nimport { NoteDTO, RequirementDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\nimport { AddCaseNoteDialog } from 'business/policy/note/add-note/case-note';\r\nimport { AddRequirementNoteComponent } from './add-requirement-note.component';\r\n\r\n@Component({\r\n    selector: 'add-requirement-case-note-dialog',\r\n    template: `\r\n        <card-dialog [view]=\"view\" (dialogDismiss)=\"onDialogDismiss($event)\" secureComponent></card-dialog>\r\n    `,\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class AddRequirementCaseNoteDialog extends AddCaseNoteDialog {\r\n    public view: Type<AddRequirementNoteComponent> = AddRequirementNoteComponent;\r\n    private _activeRequirement: RequirementDTO;\r\n\r\n    protected onCardDialogOkClick(dialogResult: DialogResult): void {\r\n        this._activeRequirement = this.splitArea.context.requirement as RequirementDTO;\r\n        if (this.isSupplementalNoteAdded(dialogResult.returnValue)) {\r\n            this.addSupplementalNoteToParentNote(dialogResult.returnValue);\r\n        } else {\r\n            this.addNoteToRequirement(dialogResult.returnValue);\r\n        }\r\n        this.saveData().then((result: SaveDataResult) => {\r\n            // pass InsuredRequirementId back requirement component to select active requirement\r\n            dialogResult.returnValue = this._activeRequirement.InsuredRequirementId.toString();\r\n            this.onCardDialogButtonClick(dialogResult);\r\n        });\r\n    }\r\n\r\n    private addNoteToRequirement(newNote: NoteDTO): void {\r\n        const requirementInPolicy = this.policy.Requirements_LazyLoad.find(\r\n            req => req.RequirementCode == this._activeRequirement.RequirementCode\r\n        );\r\n        requirementInPolicy.Note = newNote;\r\n    }\r\n\r\n    // State Management\r\n    protected getStateValueKey(): string {\r\n        return 'requrement_case_notes_dialog';\r\n    }\r\n}\r\n","import { Component } from '@angular/core';\r\n\r\nimport { ParentChildRegistry } from 'life-core/view-model';\r\nimport { EmailUtil } from 'life-core/util/email';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\nimport { AddCaseNoteComponent } from 'business/policy/note/add-note/case-note';\r\nimport { ListUtil } from 'life-core/util';\r\n\r\n@Component({\r\n    selector: 'add-requirement-note',\r\n    templateUrl: '../case-note/add-case-note.component.html',\r\n    providers: [ParentChildRegistry, PolicySubscriber, EmailUtil]\r\n})\r\nexport class AddRequirementNoteComponent extends AddCaseNoteComponent {\r\n    private _requirementsList: any;\r\n    public setModel(model: any): void {\r\n        this._requirementsList = model.parameterData.requirementList;\r\n        super.setModel(model);\r\n        this.data.Topic = model.parameterData.requirement.RequirementCode;\r\n    }\r\n\r\n    protected loadSubjectList(): void {\r\n        this.subjectListOptions = ListUtil.convertToListItems(this._requirementsList, 'label', 'value');\r\n    }\r\n\r\n    protected addNote(): void {\r\n        if (this.showSubjectFieldList) {\r\n            this.data.Topic = !this.isSupplementalNote\r\n                ? this.subjectListOptions.find(subject => subject.value == this.data.Topic).label\r\n                : this.parentNote.Topic;\r\n        } else {\r\n            this.data.Topic = !this.isSupplementalNote ? this.data.Topic : this.parentNote.Topic;\r\n        }\r\n        super.addNote();\r\n    }\r\n\r\n    protected setSubjectFieldAvailability(): void {\r\n        super.setSubjectFieldAvailability();\r\n        this.isSubjectDisabled = true;\r\n    }\r\n\r\n    protected setApplicantListAvailability(): void {\r\n        this.isApplicantListDisabled = true;\r\n    }\r\n}\r\n","﻿export * from './add-requirement-case-note-dialog';\r\nexport * from './add-requirement-note.component';\r\n","import { Component, Type, Injector } from '@angular/core';\r\n\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { DialogResult } from 'life-core/component';\r\nimport { NoteDTO, ReviewMessageDTO } from 'ls-core/model';\r\n\r\nimport { AddCaseNoteDialog } from 'business/policy/note/add-note/case-note/add-case-note-dialog';\r\nimport { AddReviewMessageNoteComponent } from './add-review-message-note.component';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\n@Component({\r\n    selector: 'add-review-message-note-dialog',\r\n    template: `\r\n        <card-dialog [view]=\"view\" (dialogDismiss)=\"onDialogDismiss($event)\"></card-dialog>\r\n    `,\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class AddReviewMessageNoteDialog extends AddCaseNoteDialog {\r\n    public view: Type<AddReviewMessageNoteComponent> = AddReviewMessageNoteComponent;\r\n\r\n    constructor(injector: Injector, i18n: I18n, policySubscriber: PolicySubscriber) {\r\n        super(injector, i18n, policySubscriber);\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    protected onCardDialogOkClick(dialogResult: DialogResult): void {\r\n        if (this.isSupplementalNoteAdded(dialogResult.returnValue)) {\r\n            this.addSupplementalNoteToParentNote(dialogResult.returnValue);\r\n        } else {\r\n            this.addNoteToReviewMessage(dialogResult.returnValue);\r\n        }\r\n        this.saveData();\r\n        this.onCardDialogButtonClick(dialogResult);\r\n    }\r\n\r\n    protected getDialogTitle(): string {\r\n        return this.showSupplementalNote()\r\n            ? this.i18n({ value: 'Add Supplemental Note', id: 'policy.notes.addnotes.addsupplementalnotes' })\r\n            : this.i18n({ value: 'Add New Notes', id: 'policy.notes.addnotes.newnote.title' });\r\n    }\r\n\r\n    private addNoteToReviewMessage(newNote: NoteDTO): void {\r\n        const reviewMessage = this.splitArea.context.reviewMessage as ReviewMessageDTO;\r\n        reviewMessage.reviewNote = newNote;\r\n    }\r\n\r\n    // State Management\r\n    protected getStateValueKey(): string {\r\n        return 'review_message_notes_dialog';\r\n    }\r\n}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-xs-12 col-lg-3\\\">\\r\\n            <lf-form-input [control]=\\\"caseNumber\\\" label=\\\"Case #\\\" i18n-label=\\\"@@policy.notes.addreview.casenumber\\\">\\r\\n                <lf-statictext #caseNumber name=\\\"caseNumber\\\" [value]=\\\"policy.PolicyNumber\\\" secureComponent>\\r\\n                </lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-xs-12 col-lg-3\\\">\\r\\n            <lf-form-input [control]=\\\"caseManager\\\" label=\\\"Case Manager\\\"\\r\\n                i18n-label=\\\"@@policy.notes.addreview.casemanager\\\">\\r\\n                <lf-statictext #caseManager name=\\\"caseManager\\\" [value]=\\\"serviceAssociateName\\\" secureComponent>\\r\\n                </lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-xs-12 col-lg-3\\\">\\r\\n            <lf-form-input [control]=\\\"agency\\\" label=\\\"Agency\\\" i18n-label=\\\"@@policy.notes.addreview.agency\\\">\\r\\n                <lf-statictext #agency name=\\\"agency\\\" [value]=\\\"agencyName\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-xs-12 col-lg-3\\\">\\r\\n            <lf-form-input [control]=\\\"agent\\\" label=\\\"Agent\\\" i18n-label=\\\"@@policy.notes.addreview.agent\\\">\\r\\n                <lf-statictext #agent name=\\\"agent\\\" [value]=\\\"agentName\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-xs-12 col-lg-3\\\">\\r\\n            <lf-form-input [control]=\\\"createdOn\\\" label=\\\"Created On\\\" i18n-label=\\\"@@policy.notes.addreview.createdon\\\">\\r\\n                <lf-statictext #createdOn name=\\\"createdOn\\\" [value]=\\\"dateCreated | lfDate\\\" secureComponent>\\r\\n                </lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-xs-12 col-lg-3\\\">\\r\\n            <lf-form-input [control]=\\\"createdBy\\\" label=\\\"Created By\\\" i18n-label=\\\"@@policy.notes.addreview.createdby\\\">\\r\\n                <lf-statictext #createdBy name=\\\"createdBy\\\" [value]=\\\"userName\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-xs-12 col-lg-6\\\">\\r\\n            <lf-form-input [control]=\\\"applicant\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.notes.addreview.applicant\\\">\\r\\n                <lf-select #applicant name=\\\"applicant\\\" [items]=\\\"applicantList\\\" [(ngModel)]=\\\"applicantId\\\"\\r\\n                    [disabled]=\\\"isSupplementalNote || isApplicantListDisabled\\\" style=\\\"width:150px\\\" secureComponent>\\r\\n                </lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"!showSubjectFieldList && !isSupplementalNote\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input [control]=\\\"subject\\\" label=\\\"Subject\\\" i18n-label=\\\"@@policy.notes.addreview.subject\\\">\\r\\n                <lf-inputtext #subject name=\\\"subject\\\" [(ngModel)]=\\\"data.Topic\\\" [maxLength]=\\\"254\\\"\\r\\n                    [disabled]=\\\"isSubjectDisabled\\\" [style]=\\\"{width:'280px'}\\\" secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"showSubjectFieldList && !isSupplementalNote\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input [control]=\\\"subjectList\\\" label=\\\"Subject\\\" i18n-label=\\\"@@policy.notes.addreview.subject\\\">\\r\\n                <lf-select #subjectList name=\\\"subjectList\\\" [items]=\\\"subjectListOptions | listItems:'label':'value'\\\"\\r\\n                    [(ngModel)]=\\\"data.Topic\\\" [disabled]=\\\"isSubjectDisabled\\\" [style]=\\\"{width:'280px'}\\\"\\r\\n                    [clearable]=\\\"false\\\" secureComponent required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-xs-12 col-lg-12\\\">\\r\\n            <lf-form-input [control]=\\\"visibilityList\\\" label=\\\"Visibility\\\"\\r\\n                i18n-label=\\\"@@policy.notes.addreview.visibility\\\">\\r\\n                <lf-select #visibilityList name=\\\"visibilityList\\\" [items]=\\\"visibilityListOptions\\\"\\r\\n                    [(ngModel)]=\\\"data.Visibility\\\" style=\\\"width:200px\\\" (change)=\\\"onVisibilityChange($event)\\\"\\r\\n                    secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input [control]=\\\"needsReview\\\" label=\\\"Needs Review\\\"\\r\\n                i18n-label=\\\"@@policy.notes.addreview.needsreview\\\">\\r\\n                <lf-radiobuttongroup #needsReview name=\\\"needsReview\\\" [(ngModel)]=\\\"needReview\\\"\\r\\n                    (change)=\\\"onNeedReviewChange($event)\\\" secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"needsReview\\\" [value]=true label=\\\"Yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"needsReview\\\" [value]=false label=\\\"No\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-xs-12 col-xl-6\\\">\\r\\n            <lf-form-input [control]=\\\"noteReviewDate\\\" label=\\\"Review Date\\\"\\r\\n                i18n-label=\\\"@@policy.notes.addreview.reviewdate\\\">\\r\\n                <ls-inputdate #noteReviewDate name=\\\"noteReviewDate\\\" [(ngModel)]=\\\"data.DiaryDate\\\"\\r\\n                    [disabled]=\\\"!needReview\\\" [required]=\\\"needReview\\\" secureComponent></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-xs-12 col-xl-4\\\">\\r\\n            <lf-form-input [control]=\\\"reviewerTypeList\\\" label=\\\"Reviewer Type\\\"\\r\\n                i18n-label=\\\"@@policy.notes.addreview.reviewertype\\\">\\r\\n                <lf-select #reviewerTypeList name=\\\"reviewerTypeList\\\"\\r\\n                    [items]=\\\"reviewerTypeListOptions | listItems:'value':'Id'\\\" [(ngModel)]=\\\"data.UserType\\\"\\r\\n                    style=\\\"width: 100px\\\" (change)=\\\"onReviewerTypeChange($event)\\\" [disabled]=\\\"!needReview\\\"\\r\\n                    [required]=\\\"needReview\\\" [clearable]=\\\"false\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-xs-12 col-xl-5\\\">\\r\\n            <lf-form-input [control]=\\\"reviewerList\\\" label=\\\"Reviewer\\\" i18n-label=\\\"@@policy.notes.addreview.reviewer\\\">\\r\\n                <lf-select #reviewerList name=\\\"reviewerList\\\"\\r\\n                    [items]=\\\"reviewerListOptions | listItems:'label':'value' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.ReferToUserId\\\" style=\\\"width:120px\\\" [disabled]=\\\"!needReview\\\"\\r\\n                    [required]=\\\"needReview\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-xs-12 col-xl-7\\\">\\r\\n            <lf-form-input [control]=\\\"sendEmail\\\" label=\\\"Send Email\\\" i18n-label=\\\"@@policy.notes.addreview.sendemail\\\">\\r\\n                <lf-radiobuttongroup #sendEmail name=\\\"sendEmail\\\" [(ngModel)]=\\\"data.EmailToList\\\" [disabled]=\\\"!needReview\\\"\\r\\n                    secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"sendEmail\\\" value=\\\"Yes\\\" label=\\\"Yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"sendEmail\\\" value=\\\"No\\\" label=\\\"No\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input [control]=\\\"noteTextArea\\\" [label]=\\\"noteFieldLabel\\\">\\r\\n                <lf-inputtextarea #noteTextArea name=\\\"noteTextArea\\\" rows=\\\"7\\\" [style]=\\\"{width: '100%'}\\\"\\r\\n                    [(ngModel)]=\\\"data.Note\\\" secureComponent required></lf-inputtextarea>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <hr *ngIf=\\\"isSupplementalNote\\\" />\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"isSupplementalNote\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <div style=\\\"height: 150px; overflow-y: auto; border:1px solid grey\\\">\\r\\n                <ls-note noteTitle=\\\"Note\\\" [noteSubject]=\\\"parentNote.Topic\\\"\\r\\n                    [noteCreatedOn]=\\\"parentNote.AddedDate | dbDate\\\" [noteCreatedBy]=\\\"getAuthorName(parentNote)\\\"\\r\\n                    [note]=\\\"parentNote.Note\\\"></ls-note>\\r\\n                <div *ngFor=\\\"let supplementalNote of parentNote.SupplementalNotes\\\">\\r\\n                    <ls-supplemental-note noteTitle=\\\"Past Supplemental Notes\\\"\\r\\n                        [noteReferredTo]=\\\"getReferredToUserName(supplementalNote)\\\"\\r\\n                        [noteCreatedOn]=\\\"supplementalNote.AddedDate | dbDate : 'shortDateMediumTime'\\\"\\r\\n                        [noteCreatedBy]=\\\"getAuthorName(supplementalNote)\\\" [note]=\\\"supplementalNote.Note\\\">\\r\\n                    </ls-supplemental-note>\\r\\n                </div>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"activeReviewMessage && activeReviewMessage.MessageType == '0' && applicantId\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <checkable-messages [activeReviewMessage]=\\\"activeReviewMessage\\\" [selectedApplicantId]=\\\"applicantId\\\">\\r\\n            </checkable-messages>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, ViewChild } from '@angular/core';\r\n\r\nimport { ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\r\nimport { EmailUtil } from 'life-core/util/email';\r\nimport { DialogViewModelResult, DialogButtonType } from 'life-core/component/dialog';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { ListUtil } from 'life-core/util';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { ReviewMessageDTO, NoteDTO } from 'ls-core/model';\r\n\r\nimport { AddCaseNoteComponent } from 'business/policy/note/add-note/case-note';\r\nimport { ReviewMessagesType } from 'business/policy/worksheet/review-messages/review-messages-type';\r\nimport { CheckableMessagesComponent } from './checkable-messages/checkable-messages.component';\r\n\r\n@Component({\r\n    selector: 'add-review-message-note',\r\n    templateUrl: './add-review-message-note.component.html',\r\n    providers: [ParentChildRegistry, PolicySubscriber, EmailUtil]\r\n})\r\nexport class AddReviewMessageNoteComponent extends AddCaseNoteComponent {\r\n    public activeReviewMessage: ReviewMessageDTO;\r\n    @ViewChild(CheckableMessagesComponent)\r\n    public checkableMessagesComponent: CheckableMessagesComponent;\r\n\r\n    public setModel(model: any): void {\r\n        this.activeReviewMessage = model.parameterData.reviewMessage;\r\n        super.setModel(model);\r\n        this.data.Topic = this.showSubjectFieldList\r\n            ? this.activeReviewMessage.ReviewMessageId.toString()\r\n            : this.activeReviewMessage.Message;\r\n    }\r\n\r\n    protected setApplicantListAvailability(): void {\r\n        this.isApplicantListDisabled = true;\r\n    }\r\n\r\n    protected loadSubjectList(): void {\r\n        this.subjectListOptions = ListUtil.convertToListItems([this.activeReviewMessage], 'Message', 'ReviewMessageId');\r\n    }\r\n\r\n    protected setSubjectFieldAvailability(): void {\r\n        super.setSubjectFieldAvailability();\r\n        this.isSubjectDisabled = true;\r\n    }\r\n\r\n    protected addNote(): void {\r\n        if (this.showSubjectFieldList) {\r\n            this.data.Topic = !this.isSupplementalNote\r\n                ? this.subjectListOptions.find(subject => subject.value == this.data.Topic).label\r\n                : this.parentNote.Topic;\r\n        } else {\r\n            this.data.Topic = !this.isSupplementalNote ? this.data.Topic : this.parentNote.Topic;\r\n        }\r\n        super.addNote();\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId === DialogButtonType.ACCEPT) {\r\n            return this.validate().then(result => {\r\n                if (result == ViewValidationResult.pass) {\r\n                    this.addNote();\r\n                    if (this.needReview) {\r\n                        this.handleNoteReview(result);\r\n                    }\r\n                    if (this.isActiveReviewMessageCheckable()) {\r\n                        this.updateActiveReviewMessage();\r\n                    }\r\n                    if (this.isNoteAppliedToOtherCheckableMessages()) {\r\n                        this.assignNoteToOtherCheckableMessages();\r\n                    }\r\n                    return new DialogViewModelResult(this.data, result === ViewValidationResult.pass, this.isDirty());\r\n                }\r\n            });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    private isActiveReviewMessageCheckable(): boolean {\r\n        return this.activeReviewMessage.MessageType == ReviewMessagesType.CHECKABLE.toString();\r\n    }\r\n\r\n    private updateActiveReviewMessage(): void {\r\n        this.activeReviewMessage.MessageType = ReviewMessagesType.CHECKED_OFF.toString();\r\n        this.activeReviewMessage.CheckoffFlag = -1; // setup checked flag to on.\r\n    }\r\n\r\n    private isNoteAppliedToOtherCheckableMessages(): boolean {\r\n        return this.checkableMessagesComponent && this.checkableMessagesComponent.selectedMessages != undefined;\r\n    }\r\n\r\n    private assignNoteToOtherCheckableMessages(): void {\r\n        this.checkableMessagesComponent.selectedMessages.forEach(selectedReviewMessage => {\r\n            const newNote: NoteDTO = ObjectUtil.deepCopy(this.data) as NoteDTO;\r\n            newNote.Topic = selectedReviewMessage.Message;\r\n            selectedReviewMessage.reviewNote = newNote;\r\n            selectedReviewMessage.MessageType = ReviewMessagesType.CHECKED_OFF.toString();\r\n            selectedReviewMessage.CheckoffFlag = -1;\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class CheckableMessagesColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.getCheckableMessagesGridColumns();\r\n        return this.columns;\r\n    }\r\n\r\n    private getCheckableMessagesGridColumns(): void {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Message', id: 'policy.worksheet.reviewmsg.gridheader.message' }),\r\n            field: CheckableMessageGridFields.Message\r\n        });\r\n    }\r\n}\r\n\r\nconst CheckableMessageGridFields = {\r\n    Message: 'Message'\r\n};\r\n","module.exports = \"<label i18n=\\\"@@policy.notes.addnotes.checkableGroupPrompt\\\">Apply above note to Multiple Checkable Review Messages</label>\\r\\n<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid style=\\\"width: 100%;\\\" [gridOptions]=\\\"gridOptions\\\" [suppressRowClickSelection]=\\\"true\\\"\\r\\n        rowSelection=\\\"multiple\\\" (rowSelected)=\\\"onRowSelected($event)\\\">\\r\\n    </data-grid>\\r\\n</div>\"","import { Component, Injector, Injectable, Input } from '@angular/core';\n\nimport {\n    IDataGridOptions,\n    DataGridColumns,\n    IDataGridViewModel,\n    DataGridOptionsUtil,\n    DataGridCommonOptions\n} from 'life-core/component/grid';\nimport { ViewModel } from 'life-core/view-model';\nimport { ConvertUtil } from 'life-core/util/lang';\nimport { AuthorizationProvider } from 'life-core/authorization';\n\nimport { PolicyDTO, InsuredDTO, ReviewMessageDTO } from 'ls-core/model';\nimport { PolicySubscriber } from 'ls-core/session';\n\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\nimport { CheckableMessagesColumnsBuilder } from './checkable-messages-columns.builder';\nimport { ReviewMessagesType } from 'business/policy/worksheet/review-messages/review-messages-type';\nimport { ReviewMessagesNoteAuthorizationProvider } from '../review-message-note-authorization.provider';\n\n@Component({\n    selector: 'checkable-messages',\n    templateUrl: './checkable-messages.component.html',\n    providers: [\n        PolicySubscriber,\n        { provide: AuthorizationProvider, useClass: ReviewMessagesNoteAuthorizationProvider },\n        CheckableMessagesColumnsBuilder\n    ]\n})\n@Injectable()\nexport class CheckableMessagesComponent extends ViewModel<PolicyDataModel> implements IDataGridViewModel {\n    @Input()\n    public activeReviewMessage: ReviewMessageDTO;\n    @Input()\n    public selectedApplicantId: number;\n    public gridOptions: IDataGridOptions;\n    // private _policy: PolicyDTO;\n    private _selectedMessages: ReviewMessageDTO[];\n    private _gridColumnBuilder: CheckableMessagesColumnsBuilder;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        gridColumnBuilder: CheckableMessagesColumnsBuilder\n    ) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n        this._gridColumnBuilder = gridColumnBuilder;\n    }\n\n    public loadData(): Promise<void> {\n        this.gridOptions = this.getGridOptions();\n        return Promise.resolve();\n    }\n\n    public getGridOptions(): IDataGridOptions {\n        const gridColumns: DataGridColumns = this.getGridColumns();\n        return DataGridOptionsUtil.getGridOptions(\n            {\n                columnDefs: gridColumns.getLayout(),\n                rowData: this.getRowData(),\n                enableColResize: true,\n                domLayout: 'autoHeight',\n                showTotal: true,\n                checkboxColumn: true,\n                rowSelection: 'multiple',\n                getRowNodeId: function(data: any): string {\n                    return data.ReviewMessageId;\n                }\n            },\n            DataGridCommonOptions\n        );\n    }\n\n    public getGridColumns(): DataGridColumns {\n        const columnsBuilder = this._gridColumnBuilder;\n        return columnsBuilder.build();\n    }\n\n    private getRowData(): any {\n        return this.getCheckableMessages();\n    }\n\n    private getCheckableMessages(): Array<any> {\n        const selectedApplicant = this.getSelectedApplicant();\n        if (!selectedApplicant) return [];\n        return selectedApplicant.ReviewMessages_LazyLoad.filter(message => {\n            return (\n                message.ReviewMessageId != this.activeReviewMessage.ReviewMessageId &&\n                ConvertUtil.toNumber(message.MessageType) == ReviewMessagesType.CHECKABLE\n            );\n        });\n    }\n\n    private getSelectedApplicant(): InsuredDTO {\n        return this.data.policy.Insureds_LazyLoad.find(insured => insured.PersonId == this.selectedApplicantId);\n    }\n\n    public get selectedMessages(): ReviewMessageDTO[] {\n        return this._selectedMessages;\n    }\n\n    public onRowSelected(event: Event): void {\n        this._selectedMessages = this.gridOptions.api.getSelectedRows();\n    }\n}\n","﻿export * from './add-review-message-note-dialog';\r\nexport * from './add-review-message-note.component';\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { PrivilegeObjectType, SubsystemType, PrivilegeType } from 'ls-core/authorization';\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class ReviewMessagesNoteAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const tabReviewMessagesAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.REVIEWMESSAGECM, PrivilegeType.REVIEWMESSAGEUW]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = tabReviewMessagesAuthorizationLevel;\r\n    }\r\n}\r\n","import { Component, ViewChild, Injector, Type } from '@angular/core';\r\n\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { SplitPaneDialogViewModel } from 'life-core/component/layout/split';\r\nimport {\r\n    CardDialog,\r\n    CardDialogParams,\r\n    DialogResult,\r\n    DialogButton,\r\n    DialogButtonType,\r\n    ButtonActionType\r\n} from 'life-core/component';\r\nimport { ResolvedDataNames, ViewValidationResult } from 'life-core/view-model';\r\nimport { PolicyDTO, NoteDTO } from 'ls-core/model';\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { AppSession, PolicySubscriber } from 'ls-core/session';\r\n\r\nimport { AddUWNoteComponent } from './add-uw-note.component';\r\nimport { NotesMetaDataResolver } from 'business/policy/note/notes-meta-data.resolver';\r\nimport { NotesDataResolver } from 'business/policy/note/notes-data.resolver';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { AddUWNotesAuthorizationProvider } from './add-uw-notes-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'add-uw-note-dialog',\r\n    template: `\r\n        <card-dialog [view]=\"view\" (dialogDismiss)=\"onDialogDismiss($event)\" secureComponent></card-dialog>\r\n    `,\r\n    providers: [{ provide: AuthorizationProvider, useClass: AddUWNotesAuthorizationProvider }, PolicySubscriber]\r\n})\r\nexport class AddUWNoteDialog extends SplitPaneDialogViewModel {\r\n    public view: Type<AddUWNoteComponent> = AddUWNoteComponent;\r\n    protected policy: PolicyDTO;\r\n\r\n    @ViewChild(CardDialog)\r\n    protected cardDialog: CardDialog;\r\n\r\n    constructor(injector: Injector, i18n: I18n, policySubscriber: PolicySubscriber) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        policySubscriber.subscribe(this, policy => {\r\n            this.policy = policy;\r\n        });\r\n    }\r\n\r\n    protected getDialogParams(): CardDialogParams {\r\n        return {\r\n            title: this.i18n({ value: 'Add U/W Note', id: 'policy.notes.addnotes.uwnote.title' }),\r\n            buttons: [\r\n                new DialogButton({\r\n                    type: DialogButtonType.ACCEPT,\r\n                    actionType: ButtonActionType.DataChange,\r\n                    handler: dialogResult => {\r\n                        this.validate().then(validationResult => {\r\n                            if (validationResult == ViewValidationResult.pass) {\r\n                                this.onCardDialogOkClick(dialogResult);\r\n                            }\r\n                        });\r\n                    }\r\n                }),\r\n                new DialogButton({\r\n                    type: DialogButtonType.CANCEL,\r\n                    actionType: ButtonActionType.Presentation,\r\n                    handler: dialogResult => {\r\n                        this.onCardDialogButtonClick(dialogResult);\r\n                    }\r\n                })\r\n            ],\r\n            data: this.splitArea.context,\r\n            resolve: [\r\n                { resolveName: ResolvedDataNames.metaData, resolverClass: NotesMetaDataResolver },\r\n                { resolveName: ResolvedDataNames.data, resolverClass: NotesDataResolver }\r\n            ]\r\n        };\r\n    }\r\n\r\n    protected onCardDialogOkClick(dialogResult: DialogResult): void {\r\n        this.addNoteToPolicy(dialogResult.returnValue);\r\n        this.saveData();\r\n        this.onCardDialogButtonClick(dialogResult);\r\n    }\r\n\r\n    private addNoteToPolicy(newNote: NoteDTO): void {\r\n        this.policy.Notes_LazyLoad.push(newNote);\r\n    }\r\n\r\n    // State Management\r\n    protected getStateValueKey(): string {\r\n        return 'uw_notes_dialog';\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n\r\n    protected getDataToSave(): any {\r\n        return this.policy;\r\n    }\r\n}\r\n","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"caseNumber\\\" label=\\\"Case #\\\" i18n-label=\\\"@@policy.notes.addnotes.casenumber\\\">\\r\\n                <lf-statictext #caseNumber name=\\\"caseNumber\\\" [value]=\\\"policy.PolicyNumber\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-8\\\">\\r\\n            <lf-form-input [control]=\\\"applicant\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.addnotes.label.applicant\\\">\\r\\n                <lf-select #applicant name=\\\"applicant\\\" [items]=\\\"applicantList\\\" [(ngModel)]=\\\"applicantId\\\"\\r\\n                    (change)=\\\"onApplicantChange($event)\\\" [disabled]=\\\"isApplicantListDisabled\\\" secureComponent\\r\\n                    [clearable]=\\\"false\\\" style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"birthDate\\\" label=\\\"Date of Birth\\\" i18n-label=\\\"@@policy.notes.addnotes.birthdate\\\">\\r\\n                <lf-statictext #birthDate name=\\\"birthDate\\\" [value]=\\\"dateOfBirth | dbDate\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-8\\\" *ngIf=\\\"showApplicantStatus\\\">\\r\\n            <lf-form-input [control]=\\\"applicantStatus\\\" label=\\\"Applicant Status\\\" i18n-label=\\\"@@policy.notes.addnotes.applicantstatus\\\">\\r\\n                <lf-statictext #applicantStatus name=\\\"applicantStatus\\\" [value]=\\\"applicantStatusDescription\\\"\\r\\n                    secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"!showSubjectFieldList\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input [control]=\\\"subject\\\" label=\\\"Subject\\\" i18n-label=\\\"@@policy.notes.addnotes.subject\\\">\\r\\n                <lf-inputtext #subject name=\\\"subject\\\" [(ngModel)]=\\\"data.Topic\\\" [maxLength]=\\\"254\\\" [style]=\\\"{width:'300px'}\\\"\\r\\n                    secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"showSubjectFieldList\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"subjectList\\\" label=\\\"Subject\\\" i18n-label=\\\"@@policy.notes.addnotes.subject\\\">\\r\\n                <lf-select #subjectList name=\\\"subjectList\\\" [items]=\\\"subjectListOptions| listItems:'label':'value'\\\"\\r\\n                    [(ngModel)]=\\\"data.Topic\\\" style=\\\"width:300px\\\"  [clearable]=\\\"false\\\" secureComponent required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input [control]=\\\"note\\\" label=\\\"Note\\\" i18n-label=\\\"@@policy.notes.addnotes.note\\\">\\r\\n                <lf-inputtextarea #note name=\\\"note\\\" [(ngModel)]=\\\"data.Note\\\" secureComponent rows=\\\"10\\\" [style]=\\\"{width: '100%'}\\\"\\r\\n                    required></lf-inputtextarea>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { ParentChildRegistry, ViewValidationResult, ViewModel } from 'life-core/view-model';\r\nimport { ListItem } from 'life-core/model';\r\nimport { DialogButtonType, DialogViewModelResult, ICompose, ICardDialogViewModel } from 'life-core/component';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { PolicyDTO, NoteDTO, DBDate, MetadataItem, InsuredDTO, NoteTypes, DBDateCrypted } from 'ls-core/model';\r\nimport { AppSession, PolicySubscriber } from 'ls-core/session';\r\nimport { DBDateUtil } from 'ls-core/util';\r\nimport { ApplicantListHelper, ActiveApplicantHelper, ApplicationCountersHelper } from 'business/policy/shared';\r\n\r\nimport { AddUWNotesAuthorizationProvider } from './add-uw-notes-authorization.provider';\r\nimport { ListUtil } from 'life-core/util';\r\n\r\n@Component({\r\n    selector: 'add-uw-note',\r\n    templateUrl: './add-uw-note.component.html',\r\n    providers: [\r\n        PolicySubscriber,\r\n        ParentChildRegistry,\r\n        { provide: AuthorizationProvider, useClass: AddUWNotesAuthorizationProvider }\r\n    ]\r\n})\r\nexport class AddUWNoteComponent extends ViewModel<NoteDTO> implements ICompose, ICardDialogViewModel {\r\n    public applicantId: number;\r\n    public applicantList: ListItem[];\r\n    public dateOfBirth: DBDateCrypted;\r\n    public subjectListOptions: Array<ListItem> = [];\r\n    public showSubjectFieldList: boolean;\r\n    public showApplicantStatus: boolean;\r\n    public applicantStatusDescription: string;\r\n    public isApplicantListDisabled: boolean;\r\n    public policy: PolicyDTO;\r\n    private _resolvedData: any;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _activeApplicantHelper: ActiveApplicantHelper;\r\n    private _appSession: AppSession;\r\n    private _applicationCountersHelper: ApplicationCountersHelper;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        applicantListHelper: ApplicantListHelper,\r\n        appSession: AppSession\r\n    ) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n        policySubscriber.subscribe(this, policy => {\r\n            this.policy = policy;\r\n        });\r\n        this._applicantListHelper = applicantListHelper;\r\n        this._activeApplicantHelper = injector.get(ActiveApplicantHelper);\r\n        this._applicationCountersHelper = injector.get(ApplicationCountersHelper);\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        this._resolvedData = model.resolvedData;\r\n        this.setApplicantListAvailability(model.parameterData);\r\n        this.setSubjectFieldAvailability();\r\n        this.setApplicantStatusAvailability(model.parameterData);\r\n        this.setApplicantStatusDescription();\r\n        if (this.showSubjectFieldList) {\r\n            this.loadSubjectList();\r\n        }\r\n    }\r\n\r\n    private setApplicantListAvailability(context: any): void {\r\n        this.isApplicantListDisabled = context ? context.isApplicantListDisabled : false;\r\n    }\r\n\r\n    private setSubjectFieldAvailability(): void {\r\n        const systemMetadata: Array<MetadataItem> = this._resolvedData.metaData.System;\r\n        this.showSubjectFieldList =\r\n            systemMetadata.find(item => item.value == 'Notes_Subjectlines_Options').label == 'true';\r\n    }\r\n\r\n    private setApplicantStatusAvailability(context: any): void {\r\n        this.showApplicantStatus = context ? context.showApplicantStatus : true;\r\n    }\r\n\r\n    private setApplicantStatusDescription(): void {\r\n        const applicant = this._applicantListHelper.getActiveApplicantOrDefault(this.policy.Insureds_LazyLoad);\r\n        const applicantStatusMetadata: Array<MetadataItem> = this._resolvedData.metaData.applicant_status;\r\n        this.applicantStatusDescription = applicantStatusMetadata.find(\r\n            item => item.value === applicant.ApplicantStatus\r\n        ).label;\r\n    }\r\n\r\n    private loadSubjectList(): void {\r\n        const uwNotesSubjectLinesMetadata: Array<MetadataItem> = this._resolvedData.metaData.Notes_Subject_lines;\r\n        const uwNotesSubjectLines = uwNotesSubjectLinesMetadata.filter(subjectLine => subjectLine.label === 'U/W');\r\n        this.subjectListOptions = ListUtil.convertToListItems(uwNotesSubjectLines, 'value', 'value');\r\n    }\r\n\r\n    public initData(): void {\r\n        this.data = new NoteDTO();\r\n    }\r\n\r\n    public setupData(): void {\r\n        this.loadApplicantList();\r\n        this.initSubscribers();\r\n        this.setApplicantBirthDate();\r\n    }\r\n\r\n    private loadApplicantList(): void {\r\n        this.applicantList = this._applicantListHelper.getApplicantList(this.policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    public initSubscribers(): void {\r\n        this.trackSubscription(\r\n            this._activeApplicantHelper.activeApplicantIdObservable.subscribe(activeApplicantId => {\r\n                this.setActiveApplicant();\r\n            })\r\n        );\r\n    }\r\n\r\n    private setActiveApplicant(): void {\r\n        this.applicantId = this._applicantListHelper.getActiveApplicantIdOrDefault(this.policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    private setApplicantBirthDate(): void {\r\n        this.dateOfBirth = this.getInsured().BirthDate;\r\n    }\r\n\r\n    private getInsured(): InsuredDTO {\r\n        return this.policy.Insureds_LazyLoad.find(insured => insured.PersonId == this.applicantId);\r\n    }\r\n\r\n    public onApplicantChange(applicant: any): void {\r\n        if (applicant && applicant.value) {\r\n            this._activeApplicantHelper.setActiveApplicantId(this.applicantId);\r\n            this.setActiveApplicant();\r\n            this.setApplicantBirthDate();\r\n            this.setApplicantStatusDescription();\r\n        }\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId === DialogButtonType.ACCEPT) {\r\n            return this.validate().then(result => {\r\n                this.addNote();\r\n                return new DialogViewModelResult(this.data, result === ViewValidationResult.pass, this.isDirty());\r\n            });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    private addNote(): void {\r\n        this.data.AddedDate = this.getTodaysDate();\r\n        this.data.UpdateDate = this.getTodaysDate();\r\n        this.setPolicyPersonID();\r\n        this.data.NoteType = this.getNoteType();\r\n        this.data.Author = this._appSession.user.UserId;\r\n        this.updateUserApplicationCounts();\r\n        this.changeManager.setIsDirty(true);\r\n    }\r\n\r\n    protected getNoteType(): string {\r\n        return NoteTypes.WORKSHEET;\r\n    }\r\n\r\n    private setPolicyPersonID(): void {\r\n        const insured = this.getInsured();\r\n        if (insured) {\r\n            this.data.PolicyPersonId = insured.PolicyPersonId.toString();\r\n        }\r\n    }\r\n\r\n    private getTodaysDate(): DBDate {\r\n        return DBDateUtil.dateToDBDate(new Date());\r\n    }\r\n\r\n    private updateUserApplicationCounts(): void {\r\n        this._applicationCountersHelper.incrementManualActionCounter(this.policy);\r\n    }\r\n\r\n    public getState(): any {\r\n        const uwNoteModel = new UWNoteStateModel();\r\n        uwNoteModel.note = this.data;\r\n        return uwNoteModel;\r\n    }\r\n\r\n    public setState(stateData: any): void {\r\n        this.data = (stateData as UWNoteStateModel).note;\r\n    }\r\n}\r\n\r\nclass UWNoteStateModel {\r\n    public note: NoteDTO;\r\n}\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class AddUWNotesAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const uwNotesAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.NOTEUW]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = uwNotesAuthorizationLevel;\r\n    }\r\n}\r\n","﻿export * from './add-uw-note.component';\r\nexport * from './add-uw-note-dialog';\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\nimport { NotesComponentLevelPrivileges } from './notes-component-level-privileges';\r\n\r\n@Injectable()\r\nexport class CaseNotesAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const caseNotesAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.NOTE]\r\n        );\r\n\r\n        this.authorizationData.componentLevel[NotesComponentLevelPrivileges.AddCaseNote] = caseNotesAuthorizationLevel;\r\n        this.authorizationData.componentLevel[\r\n            NotesComponentLevelPrivileges.AddSupplementalNote\r\n        ] = caseNotesAuthorizationLevel;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-page-header\\\" i18n=\\\"@@policy.notes.casenotetitle\\\">Case Notes</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"applicant\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.notes.label.applicant\\\">\\r\\n\\t\\t\\t<!-- Use 'ngModelOption.standalone' to not add this control to NgForm to avoid saving data when applicant selection changes -->\\r\\n\\t\\t\\t<lf-select #applicant name=\\\"applicant\\\" [(ngModel)]=\\\"activeApplicantId\\\" [ngModelOptions]=\\\"{standalone: true}\\\" [items]=\\\"applicantList\\\"\\r\\n\\t\\t\\t (change)=\\\"onApplicantChange($event)\\\" [actionType]=\\\"filterDropdownActionType\\\" secureComponent [clearable]=\\\"false\\\"\\r\\n\\t\\t\\t style=\\\"width:200px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"sortByOption\\\" label=\\\"Order By\\\" i18n-label=\\\"@@policy.requirement.detail.orderedby\\\">\\r\\n\\t\\t\\t<!-- Use 'ngModelOption.standalone' to not add this control to NgForm to avoid saving data when note type selection changes -->\\r\\n\\t\\t\\t<lf-select #sortByOption name=\\\"sortByOption\\\" [(ngModel)]=\\\"selectedSortByOption\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n\\t\\t\\t [items]=\\\"listData.SortByOption\\\" (change)=\\\"onSortByOptionChange($event)\\\" [actionType]=\\\"filterDropdownActionType\\\"\\r\\n\\t\\t\\t [clearable]=\\\"false\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row col-12 justify-content-end pb-4\\\">\\r\\n\\t<lf-button id=\\\"addCaseNote\\\" name=\\\"addCaseNote\\\" label=\\\"Add Note\\\" i18n-label=\\\"@@policy.evidence.notes.addnotes.title\\\"\\r\\n\\t (onClick)=\\\"addCaseNote()\\\" [actionType]=\\\"addCaseNoteButtonActionType\\\" secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n\\t<lf-button id=\\\"printCaseNotes\\\" label=\\\"Print Case Notes\\\" i18n-label=\\\"@@policy.evidence.notes.printnotes.title\\\"\\r\\n\\t (onClick)=\\\"printNotes('case')\\\" secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n</div>\\r\\n<div *ngIf=\\\"activeApplicantId\\\" class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-12\\\">\\r\\n\\t\\t<note-list [selectedApplicantId]=\\\"activeApplicantId\\\" selectedNoteTypeCategory=\\\"Case\\\" [sortByOption]=\\\"selectedSortByOption\\\"\\r\\n\\t\\t [title]=\\\"title\\\" [activeNoteId]=\\\"activeNoteId\\\"></note-list>\\r\\n\\t</div>\\r\\n</div>\"","import { Injector, Component, ViewChild } from '@angular/core';\n\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { LfSplitPaneChannels } from 'life-core/component/layout/split';\nimport { ButtonActionType } from 'life-core/component';\nimport { ConvertUtil } from 'life-core/util/lang';\n\n\nimport { AutoNavigationManager, IAutoNavigation } from 'ls-core/auto-navigation';\nimport { PolicySubscriber } from 'ls-core/session';\nimport { LsAppConfig, SystemSetting } from 'ls-core/config';\nimport { InsuredDTO } from 'ls-core/model';\nimport { INavigationSequence } from 'ls-core/model/auto-navigation/navigation-sequence.interface';\nimport { NavigationTargetTypes, NavigationTarget } from 'ls-core/model/auto-navigation/navigation-target';\n\nimport { TabPolicySplitPaneAreas } from 'business/policy/tab';\nimport { NotesComponent } from './notes.component';\nimport { NoteListComponent } from './note-list/note-list.component';\nimport { CaseNotesAuthorizationProvider } from './case-notes-authorization.provider';\nimport { NoteUtil } from 'business/policy/shared';\nimport { AutoNavigationChannels } from 'business/shared/auto-navigation/auto-navigation-channels';\nimport { I18n } from 'life-core/i18n';\n\n@Component({\n    selector: 'case-notes',\n    templateUrl: './case-notes.component.html',\n    providers: [\n        PolicySubscriber,\n        AutoNavigationManager,\n        { provide: AuthorizationProvider, useClass: CaseNotesAuthorizationProvider }\n    ]\n})\nexport class CaseNotesComponent extends NotesComponent implements IAutoNavigation {\n    public title: string;\n    public addCaseNoteButtonActionType: ButtonActionType = ButtonActionType.DataChange;\n    public activeNoteId: number;\n    private _autoNavigationManager: AutoNavigationManager;\n    @ViewChild(NoteListComponent)\n    protected caseNoteListComponent: NoteListComponent;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        appConfig: LsAppConfig,\n        autoNavigationManager: AutoNavigationManager,\n        i18n: I18n\n    ) {\n        super(injector, policySubscriber, appConfig);\n        this._appConfig = appConfig;\n        this._autoNavigationManager = autoNavigationManager;\n        this.initializeAutoNavigationChannel();\n        this.i18n = i18n;\n    }\n\n    public initializeAutoNavigationChannel(): void {\n        this._autoNavigationManager.registerWithNavigationChannel(\n            AutoNavigationChannels.CaseNotes,\n            (sequence: INavigationSequence) => {\n                this.processNavigationSequence(sequence);\n            }\n        );\n    }\n\n    public processNavigationSequence(sequence: INavigationSequence): void {\n        const target = sequence.getNextNavigationTarget();\n        if (target && target.targetType === NavigationTargetTypes.CollectionItem) {\n            this.activeNoteId = ConvertUtil.toNumber(target.getParam(NavigationTarget.PARAM_TARGET_ID));\n            this._autoNavigationManager.continueNavigation(sequence, target, AutoNavigationChannels.CaseNotes);\n        }\n    }\n\n    public addCaseNote(): void {\n        this.messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, {\n            areaId: TabPolicySplitPaneAreas.AddCaseNote\n        });\n    }\n\n    protected get noteListComponent(): NoteListComponent {\n        return this.caseNoteListComponent;\n    }\n\n    protected setTitle(): void {\n        this.title = this.i18n({ value: 'Case Notes', id: '@@policy.notes.casenotes.paneltitle' });\n    }\n}\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class CombinedNotesAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const combinedNotesAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.COMBINEDNOTES]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = combinedNotesAuthorizationLevel;\r\n    }\r\n}\r\n","﻿import { Type } from '@angular/core';\n\nimport { IItemListComponentResolver, ItemListComponentResolver } from 'life-core/component/item-list';\n\nimport { NoteDTO } from 'ls-core/model';\n\nimport { NoteInfoComponent } from './note-info.component';\n\nexport class NoteComponentResolverHerlper {\n    public getResolver(editModeOnly: boolean): IItemListComponentResolver<NoteDTO> {\n        return new ItemListComponentResolver({\n            itemComponents: this.getItemComponentType(),\n            resolverField: null,\n            editModeOnly: editModeOnly\n        });\n    }\n\n    private getItemComponentType(): Type<any> {\n        return NoteInfoComponent;\n    }\n}\n","module.exports = \"<lf-panel [header]=\\\"panelHeader\\\" [iconVisible]=\\\"isIconVisible\\\" [iconClass]=\\\"iconClass\\\" [toggleable]=\\\"true\\\" panelType=\\\"secondary\\\"\\r\\n stateId=\\\"{{panelNoteType}}_{{index}}\\\" [state]=\\\"componentsState.get(panelNoteType + '_' + index)\\\" secureComponent>\\r\\n\\t<div class=\\\"itemContent\\\" [class.invalid]=\\\"item.invalid\\\">\\r\\n\\t\\t<div class=\\\"note\\\">\\r\\n\\t\\t\\t<compose [model]=\\\"item\\\" [componentType]=\\\"itemComponentType\\\"></compose>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</lf-panel>\"","import { Component, Injector, Type } from '@angular/core';\n\nimport { ItemViewModel } from 'life-core/component/item-list';\nimport { CompareResult } from 'life-core/util/lang';\nimport { IComponentResolver, ComponentResolver, ComponentMap, DateFormatter } from 'life-core/util';\nimport { I18n } from 'life-core/i18n';\n\nimport { NoteDTO, DBDate } from 'ls-core/model';\nimport { DBDateUtil } from 'ls-core/util';\n\nimport { NoteTypeCategories, NoteUtil } from 'business/policy/shared';\nimport { CaseNoteComponent, UWNoteComponent } from './type';\n\n@Component({\n    selector: 'note-info',\n    templateUrl: './note-info.component.html'\n})\nexport class NoteInfoComponent extends ItemViewModel<NoteDTO> {\n    public itemComponentType: Type<any>;\n    public panelHeader: string;\n    public iconClass: string;\n    public isIconVisible: boolean;\n    public panelNoteType: string;\n    private _componentMapResolver: IComponentResolver<string>;\n    private _dateFormatter: DateFormatter;\n\n    constructor(injector: Injector, dateFormatter: DateFormatter, i18n: I18n) {\n        super(injector);\n        this._componentMapResolver = this.getComponentMapResolver();\n        this._dateFormatter = dateFormatter;\n        this.i18n = i18n;\n    }\n\n    public loadData(): Promise<void> {\n        this.setItemComponentType(this.item.data.NoteType);\n        this.panelNoteType = `panel_note_${this.item.data.NoteType}`;\n        return Promise.resolve();\n    }\n\n    public setModel(model: any): void {\n        super.setModel(model);\n        this.setNotePanelHeader();\n    }\n\n    private getComponentMapResolver(): IComponentResolver<string> {\n        const componentMap: ComponentMap = new ComponentMap();\n        componentMap.add(NoteTypeCategories.CASE, CaseNoteComponent);\n        componentMap.add(NoteTypeCategories.UW, UWNoteComponent);\n        return new ComponentResolver<string>(componentMap);\n    }\n\n    private setItemComponentType(type: string): void {\n        const noteTypeCategory = NoteUtil.getNoteTypeCategory(type);\n        this.itemComponentType = this._componentMapResolver.resolve(noteTypeCategory);\n    }\n\n    private setNotePanelHeader(): void {\n        const noteTypeCategory = NoteUtil.getNoteTypeCategory(this.item.data.NoteType);\n        const createdDate = this._dateFormatter.format(this.item.data.AddedDate.dateAndTimeAsString);\n        const topic = this.item.data.Topic || '';\n        this.isIconVisible = this.shouldShowAlertIcon(this.item.data);\n        if (this.isIconVisible) {\n            this.iconClass = this.getAlertIcon(this.item.data);\n        }\n        this.panelHeader = `${this.i18n(\n            { value: 'Note - {{noteTypeCategory}}', id: 'policy.notes.panel.title.primary' },\n            { noteTypeCategory: noteTypeCategory }\n        )} ${this.i18n(\n            { value: 'Note, {{createdDate}}, {{topic}}', id: 'policy.notes.panel.title.secondary' },\n            { createdDate: createdDate, topic: topic }\n        )}`;\n    }\n\n    private getAlertIcon(note: NoteDTO): string {\n        return 'ls-note-alert-icon';\n    }\n\n    private shouldShowAlertIcon(note: NoteDTO): boolean {\n        if (note.SupplementalNotes.length > 0) {\n            return (\n                this.isNoteReviewDateTodayOrPast(note.DiaryDate) ||\n                this.isAnySupplementalNoteReviewDateTodayOrPast(note.SupplementalNotes)\n            );\n        }\n        return this.isNoteReviewDateTodayOrPast(note.DiaryDate);\n    }\n\n    private isNoteReviewDateTodayOrPast(reviewDate: DBDate): boolean {\n        return (\n            reviewDate &&\n            reviewDate.dateAndTimeAsString !== '' &&\n            DBDateUtil.compareDates(reviewDate, DBDateUtil.dateToDBDate(new Date())) == CompareResult.less\n        );\n    }\n\n    private isAnySupplementalNoteReviewDateTodayOrPast(supplementalNotes: NoteDTO[]): boolean {\n        return supplementalNotes.find(suppNote => this.isNoteReviewDateTodayOrPast(suppNote.DiaryDate)) !== undefined;\n    }\n}\n","module.exports = \".item .itemContent {\\n    padding: 0.3125rem;\\n    border-radius: 4px;\\n    -webkit-border-radius: 4px;\\n    -moz-border-radius: 4px;\\n}\\n\\n.item .itemContent.invalid {\\n    border-color: red;\\n}\\n\\n.bottom-margin {\\n    margin: 0.3125rem;\\n}\\n\\n.note:hover {\\n    border-color: #00467f;\\n}\\n\\n.note #validation-messages {\\n    margin: 0 0.625rem 0.9375rem 0.625rem;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS9ub3RlL25vdGUtbGlzdC9ub3RlLWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtJQUNJLG1CQUFtQjtJQUNuQixtQkFBbUI7SUFDbkIsMkJBQTJCO0lBQzNCLHdCQUF3QjtDQUMzQjs7QUFFRDtJQUNJLGtCQUFrQjtDQUNyQjs7QUFFRDtJQUNJLGtCQUFrQjtDQUNyQjs7QUFFRDtJQUNJLHNCQUFzQjtDQUN6Qjs7QUFFRDtJQUNJLHNDQUFzQztDQUN6QyIsImZpbGUiOiJzcmMvbGlmZXN1aXRlLWFwcC9idXNpbmVzcy9wb2xpY3kvbm90ZS9ub3RlLWxpc3Qvbm90ZS1saXN0LmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIuaXRlbSAuaXRlbUNvbnRlbnQge1xuICAgIHBhZGRpbmc6IDAuMzEyNXJlbTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cbi5pdGVtIC5pdGVtQ29udGVudC5pbnZhbGlkIHtcbiAgICBib3JkZXItY29sb3I6IHJlZDtcbn1cblxuLmJvdHRvbS1tYXJnaW4ge1xuICAgIG1hcmdpbjogMC4zMTI1cmVtO1xufVxuXG4ubm90ZTpob3ZlciB7XG4gICAgYm9yZGVyLWNvbG9yOiAjMDA0NjdmO1xufVxuXG4ubm90ZSAjdmFsaWRhdGlvbi1tZXNzYWdlcyB7XG4gICAgbWFyZ2luOiAwIDAuNjI1cmVtIDAuOTM3NXJlbSAwLjYyNXJlbTtcbn1cbiJdfQ== */\"","module.exports = \"<lf-panel [header]=\\\"title\\\" [toggleable]=\\\"false\\\" panelType=\\\"primary\\\" stateId=\\\"panel_notes\\\" [initCollapsed]=false secureComponent>\\r\\n\\t<item-list #refItemList id=\\\"item_list\\\" class=\\\"ls-note-item-list\\\" [oItems]=\\\"oItems\\\" [editModeOnly]=\\\"editModeOnly\\\" [buttons]=\\\"buttons\\\"\\r\\n\\t secureComponent></item-list>\\r\\n</lf-panel>\"","import { Injector, Input, Component, ViewChild } from '@angular/core';\n\nimport {\n    IItem,\n    CreateItemEventData,\n    ItemList,\n    ItemListViewModel,\n    IItemListComponentResolver\n} from 'life-core/component/item-list';\nimport { Logger } from 'life-core/logging';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { Identifiable, NoteDTO, PolicyDTO } from 'ls-core/model';\nimport { DBDateUtil } from 'ls-core/util';\nimport { SortByOptions } from 'ls-core/model/const/sort-order-types';\n\nimport {\n    NoteTypeCategories,\n    NoteUtil,\n    All_Applicants_Id,\n    PersonIdToPolicyPersonIdMapper\n} from 'business/policy/shared';\nimport { NoteComponentResolverHerlper } from '../note-component-resolver.helper';\n\n@Component({\n    selector: 'note-list',\n    templateUrl: './note-list.component.html',\n    styleUrls: ['./note-list.component.css'],\n    providers: [PolicySubscriber]\n})\nexport class NoteListComponent extends ItemListViewModel<NoteDTO> {\n    @Input()\n    public selectedApplicantId: string = All_Applicants_Id.toString();\n    @Input()\n    public selectedNoteTypeCategory: string = NoteTypeCategories.ALL;\n    @Input()\n    public sortByOption: string;\n    @Input()\n    public title: string = 'Notes';\n    @Input()\n    public activeNoteId: number;\n    public policy: PolicyDTO;\n    private _activeApplicantPolicyPersonId: number;\n\n    @ViewChild(ItemList)\n    public refItemList: ItemList<NoteDTO>;\n\n    constructor(injector: Injector, policySubscriber: PolicySubscriber, logger: Logger) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.onPolicyUpdate(p);\n        });\n        this.editModeOnly = true;\n    }\n\n    public onApplicantChange(selectedApplicant: string): void {\n        this.selectedApplicantId = selectedApplicant;\n        this.reloadItems();\n    }\n\n    public onNoteTypeCategoryChange(selectedNoteTypeCategory: string): void {\n        this.selectedNoteTypeCategory = selectedNoteTypeCategory;\n        this.reloadItems();\n    }\n\n    public onSortByOptionChange(sortByOption: string): void {\n        this.sortByOption = sortByOption;\n        this.reloadItems();\n    }\n\n    public refreshNotes(): void {\n        this.reloadItems();\n    }\n\n    protected setupNewItem(data: NoteDTO): IItem<NoteDTO> {\n        const item = super.setupNewItem(data);\n        item.selected = this.isActiveNote(data);\n        return item;\n    }\n\n    protected get itemDataIDPropertyName(): string {\n        return 'NoteId';\n    }\n\n    protected getItemList(): ItemList<NoteDTO> {\n        return this.refItemList;\n    }\n\n    protected getItems(): Promise<IItem<NoteDTO>[]> {\n        const items: IItem<NoteDTO>[] = [];\n        const filteredNotes = this.getFilteredNotes();\n        filteredNotes.forEach(note => {\n            items.push(this.setupNewItem(note));\n        });\n        return Promise.resolve(items);\n    }\n\n    protected getItemComponentResolver(): IItemListComponentResolver<NoteDTO> {\n        const resolverHelper = new NoteComponentResolverHerlper();\n        return resolverHelper.getResolver(this.editModeOnly);\n    }\n\n    protected createItem(eventData: CreateItemEventData<NoteDTO>): Promise<any> {\n        const note = new NoteDTO();\n        note.identifier = new Identifiable();\n        return Promise.resolve(note);\n    }\n\n    protected removeItem(item: IItem<NoteDTO>): Promise<boolean> {\n        this.policy.Notes_LazyLoad.splice(this.policy.Notes_LazyLoad.indexOf(item.data), 1);\n        return Promise.resolve(true);\n    }\n\n    private onPolicyUpdate(policy: PolicyDTO): void {\n        const reloading = !!this.policy;\n        this.policy = policy;\n        if (reloading) {\n            this.reloadItems();\n        }\n    }\n\n    private isActiveNote(data: NoteDTO): boolean {\n        return data.NoteId === this.activeNoteId;\n    }\n\n    private getFilteredNotes(): NoteDTO[] {\n        if (this.policy.Notes_LazyLoad == null) {\n            this.policy.Notes_LazyLoad = [];\n        }\n        this._activeApplicantPolicyPersonId = PersonIdToPolicyPersonIdMapper.getPolicyPersonIdFromPersonId(\n            Number(this.selectedApplicantId),\n            this.policy\n        );\n        const filteredItems = this.filterItems(this.policy.Notes_LazyLoad);\n        return this.sortItems(filteredItems);\n    }\n\n    private filterItems(items: NoteDTO[]): NoteDTO[] {\n        return items.filter(note => {\n            return this.filterByApplicantAndNoteType(note);\n        });\n    }\n\n    private filterByApplicantAndNoteType(note: NoteDTO): boolean {\n        return this.filterByApplicant(note) && this.filterByNoteType(note);\n    }\n\n    private filterByApplicant(note: NoteDTO): boolean {\n        return this.selectedApplicantId == All_Applicants_Id.toString()\n            ? true\n            : note.PolicyPersonId == this._activeApplicantPolicyPersonId;\n    }\n\n    private filterByNoteType(note: NoteDTO): boolean {\n        return this.selectedNoteTypeCategory == NoteTypeCategories.ALL\n            ? NoteUtil.isCaseOrUWNote(note.NoteType)\n            : NoteUtil.getNoteTypeCategory(note.NoteType) == this.selectedNoteTypeCategory;\n    }\n\n    private sortItems(items: NoteDTO[]): NoteDTO[] {\n        if (!this.sortByOption) {\n            return items;\n        }\n        return items.sort((a, b) => {\n            return this.sortItemsByOrder(a, b);\n        });\n    }\n\n    private sortItemsByOrder(a: NoteDTO, b: NoteDTO): number {\n        const compareResult = DBDateUtil.compareDates(a[sortByField], b[sortByField]);\n        return this.sortByOption == SortByOptions.ASC ? compareResult : -compareResult;\n    }\n}\n\nexport const NotesChannels = {\n    SelectedApplicantChange: 'selected-applicant-change',\n    NoteCategoryChange: 'note-category-change',\n    SortByOptionChange: 'sortby-option-change'\n};\n\nexport const sortByField = 'AddedDate';\n","export const NotesComponentLevelPrivileges = {\r\n    AddCaseNote: 'addCaseNote',\r\n    AddUWNote: 'addUWNote',\r\n    AddSupplementalNote: 'addSupplementalNote'\r\n};\r\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames, PolicyDTO } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared/data-resolver';\r\n\r\n@Injectable()\r\nexport class NotesDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const policy = this.resolvedData as PolicyDTO;\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(policy, DataCollectionNames.Insureds);\r\n        request.addLazyLoadItem(policy, DataCollectionNames.Notes);\r\n        return this.lazyDataLoader.batchLoad(request);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class NotesMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return [\r\n            'note_type',\r\n            'aus_users',\r\n            'applicant_status',\r\n            'Visibility',\r\n            'System',\r\n            'Notes_Subject_lines',\r\n            'SortByOption'\r\n        ];\r\n    }\r\n}\r\n","import { Injector } from '@angular/core';\n\nimport { ViewModel } from 'life-core/view-model';\nimport { ListItem } from 'life-core/model';\nimport { LfSplitPaneChannels, SplitPaneResult } from 'life-core/component/layout/split';\nimport { DropdownActionType } from 'life-core/component/input';\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\nimport { ObfuscateIdUtil } from 'life-core/util';\nimport { PolicySubscriber } from 'ls-core/session';\nimport { PolicyDTO, InsuredDTO } from 'ls-core/model';\nimport { All_Applicants_Id, ActiveApplicantHelper, ApplicantListHelper, NoteUtil } from 'business/policy/shared';\nimport { NoteListComponent } from './note-list/note-list.component';\nimport { DialogButtonType } from 'life-core/component';\nimport { TabPolicySplitPaneAreas } from 'business/policy/tab';\nimport { LsAppConfig, SystemSetting } from 'ls-core/config';\n\nexport abstract class NotesComponent extends ViewModel {\n    public policy: PolicyDTO;\n    public applicantList: ListItem[];\n    public sortByOptionList: ListItem[];\n    public activeApplicantId: string;\n    public selectedSortByOption: string;\n    public filterDropdownActionType: DropdownActionType = DropdownActionType.Presentation;\n\n    private _activeApplicantHelper: ActiveApplicantHelper;\n    private _applicantListHelper: ApplicantListHelper;\n    protected messagingService: IMessagingService;\n    protected _appConfig: LsAppConfig;\n\n    constructor(injector: Injector, policySubscriber: PolicySubscriber, appConfig: LsAppConfig) {\n        super(injector);\n        this._activeApplicantHelper = injector.get(ActiveApplicantHelper);\n        this._applicantListHelper = injector.get(ApplicantListHelper);\n        this.messagingService = injector.get(MessagingService);\n        policySubscriber.subscribe(this, p => {\n            this.policy = p;\n            this._appConfig = appConfig;\n        });\n    }\n\n    public loadData(): Promise<void> {\n        this.setApplicantList();\n        this.setResolvedMetaData();\n        this.setDefaultOrderByOption();\n        return Promise.resolve();\n    }\n\n    public printNotes(noteType: string): void {\n        const obfuscatedPolicyNumber = ObfuscateIdUtil.obfuscate(this.policy.PolicyNumber);\n        const obfuscatedPolicyPersonId = ObfuscateIdUtil.obfuscate(this.getInsured().PolicyPersonId.toString());\n        const LegacyUrl = this._appConfig.getSystemSetting(SystemSetting.LSLegacyUrl);\n        NoteUtil.launchNotePreviewReport(LegacyUrl, obfuscatedPolicyPersonId, obfuscatedPolicyNumber, noteType);\n    }\n\n    protected setupData(): void {\n        super.setupData();\n        this.initSubscribers();\n        this.setTitle();\n    }\n\n    protected abstract setTitle(): void;\n\n    private initSubscribers(): void {\n        this.subscriptionTracker.track(\n            this.messagingService.subscribeNewMessageOnly(LfSplitPaneChannels.RemoveSplitPaneArea, splitPaneResult => {\n                if (this.shouldRefreshNotes(splitPaneResult)) {\n                    this.noteListComponent.refreshNotes();\n                }\n            })\n        );\n        this.trackSubscription(\n            this._activeApplicantHelper.activeApplicantIdObservable.subscribe(activeApplicantId => {\n                this.setActiveApplicant(activeApplicantId);\n            })\n        );\n    }\n\n    private shouldRefreshNotes(splitPaneResult: SplitPaneResult): boolean {\n        return (\n            splitPaneResult.dialogResult &&\n            splitPaneResult.dialogResult.buttonId == DialogButtonType.OK &&\n            (splitPaneResult.areaId === TabPolicySplitPaneAreas.AddUWNote ||\n                splitPaneResult.areaId === TabPolicySplitPaneAreas.AddCaseNote ||\n                splitPaneResult.areaId === TabPolicySplitPaneAreas.AddCaseSupplementalNote)\n        );\n    }\n\n    private getInsured(): InsuredDTO {\n        return this.policy.Insureds_LazyLoad.find(insured => insured.PersonId == this.activeApplicantId);\n    }\n\n    private setApplicantList(): void {\n        this.applicantList = [];\n        this.applicantList.push(new ListItem('All Applicants', All_Applicants_Id.toString()));\n        const policyApplicants = this._applicantListHelper.getApplicantList(this.policy.Insureds_LazyLoad);\n        this.applicantList = this.applicantList.concat(policyApplicants);\n    }\n\n    private isMoreThanOneApplicant(): boolean {\n        return this.policy.Insureds_LazyLoad.length > 1;\n    }\n\n    private setActiveApplicant(activeApplicantIdValue: number): void {\n        this.activeApplicantId =\n            activeApplicantIdValue != null ? activeApplicantIdValue.toString() : All_Applicants_Id.toString();\n        this.filterNoteList();\n    }\n\n    protected abstract get noteListComponent(): NoteListComponent;\n\n    public onApplicantChange(selectedApplicant: any): void {\n        this.activeApplicantId = selectedApplicant.value;\n        if (this.activeApplicantId !== All_Applicants_Id.toString()) {\n            this._activeApplicantHelper.setActiveApplicantId(Number(this.activeApplicantId));\n        }\n        this.filterNoteList();\n    }\n\n    private filterNoteList(): void {\n        if (this.noteListComponent) {\n            this.noteListComponent.onApplicantChange(this.activeApplicantId);\n        }\n    }\n\n    public onSortByOptionChange(selectedSortByField: any): void {\n        this.selectedSortByOption = selectedSortByField.value;\n        this.noteListComponent.onSortByOptionChange(this.selectedSortByOption);\n    }\n    private setDefaultOrderByOption(): void {\n        const defaultOrderNewestToOldest = this._appConfig.getSystemSetting(\n            SystemSetting.DefaultNoteOrderNewestToOldest\n        );\n        if (defaultOrderNewestToOldest && defaultOrderNewestToOldest.toUpperCase() == 'TRUE') {\n            this.selectedSortByOption = NotesSortByOption.NewestToOldest;\n        } else {\n            this.selectedSortByOption = NotesSortByOption.OldestToNewest;\n        }\n    }\n}\n\nconst NotesSortByOption = {\n    NewestToOldest: '1',\n    OldestToNewest: '2'\n};\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { NoteInfoComponent } from './note-info.component';\r\nimport { CaseNotesComponent } from './case-notes.component';\r\nimport { UWNotesComponent } from './uw-notes.component';\r\nimport { NoteListComponent } from './note-list/note-list.component';\r\nimport { NotesDataResolver } from './notes-data.resolver';\r\nimport { NotesMetaDataResolver } from './notes-meta-data.resolver';\r\nimport { CaseNoteComponent, UWNoteComponent } from './type';\r\nimport {\r\n    AddCaseNoteComponent,\r\n    AddCaseNoteDialog,\r\n    AddCaseNoteDataResolver,\r\n    AddCaseNoteMetaDataResolver,\r\n    AddCaseNoteListDataResolver\r\n} from './add-note/case-note';\r\nimport { AddUWNoteDialog, AddUWNoteComponent } from './add-note/uw-note';\r\nimport { AddRequirementNoteComponent, AddRequirementCaseNoteDialog } from './add-note/requirement-case-note';\r\nimport {\r\n    AddMedicalConditionUWNoteDialog,\r\n    AddMedicalConditionUWNoteComponent\r\n} from 'business/policy/note/add-note/medical-condition-uw-note';\r\nimport {\r\n    AddReviewMessageNoteComponent,\r\n    AddReviewMessageNoteDialog\r\n} from 'business/policy/note/add-note/review-message-note';\r\nimport { CheckableMessagesComponent } from 'business/policy/note/add-note/review-message-note/checkable-messages/checkable-messages.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [\r\n        NoteListComponent,\r\n        CaseNotesComponent,\r\n        UWNotesComponent,\r\n        NoteInfoComponent,\r\n        CaseNoteComponent,\r\n        UWNoteComponent,\r\n        AddCaseNoteComponent,\r\n        AddCaseNoteDialog,\r\n        AddUWNoteComponent,\r\n        AddUWNoteDialog,\r\n        AddRequirementNoteComponent,\r\n        AddRequirementCaseNoteDialog,\r\n        AddMedicalConditionUWNoteComponent,\r\n        AddMedicalConditionUWNoteDialog,\r\n        CheckableMessagesComponent,\r\n        AddReviewMessageNoteComponent,\r\n        AddReviewMessageNoteDialog\r\n    ],\r\n    exports: [NoteListComponent, CaseNotesComponent, UWNotesComponent, NoteInfoComponent],\r\n    providers: [\r\n        NotesDataResolver,\r\n        NotesMetaDataResolver,\r\n        AddCaseNoteDataResolver,\r\n        AddCaseNoteMetaDataResolver,\r\n        AddCaseNoteListDataResolver\r\n    ],\r\n    entryComponents: [\r\n        NoteInfoComponent,\r\n        CaseNoteComponent,\r\n        UWNoteComponent,\r\n        AddCaseNoteComponent,\r\n        AddCaseNoteDialog,\r\n        AddUWNoteComponent,\r\n        AddUWNoteDialog,\r\n        AddRequirementNoteComponent,\r\n        AddRequirementCaseNoteDialog,\r\n        AddMedicalConditionUWNoteComponent,\r\n        AddMedicalConditionUWNoteDialog,\r\n        AddReviewMessageNoteComponent,\r\n        AddReviewMessageNoteDialog\r\n    ]\r\n})\r\nexport class NotesModule {}\r\n","module.exports = \".supplemental-note {\\n    height: 150px;\\n    overflow-y: auto;\\n    border: 1px solid grey;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS9ub3RlL3R5cGUvY2FzZS1ub3RlLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0lBQ2QsaUJBQWlCO0lBQ2pCLHVCQUF1QjtDQUMxQiIsImZpbGUiOiJzcmMvbGlmZXN1aXRlLWFwcC9idXNpbmVzcy9wb2xpY3kvbm90ZS90eXBlL2Nhc2Utbm90ZS5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLnN1cHBsZW1lbnRhbC1ub3RlIHtcbiAgICBoZWlnaHQ6IDE1MHB4O1xuICAgIG92ZXJmbG93LXk6IGF1dG87XG4gICAgYm9yZGVyOiAxcHggc29saWQgZ3JleTtcbn1cbiJdfQ== */\"","module.exports = \"<div *ngIf=\\\"showAddSupplementalButton\\\" class=\\\"row justify-content-end col-sm-12\\\" style=\\\"padding-bottom: 5px;\\\">\\r\\n    <lf-button id=\\\"addSupplementalNote\\\" name=\\\"addSupplementalNote\\\" label=\\\"Add Supplemental Note\\\" i18n-label=\\\"@@policy.notes.addnotes.addsupplementalnotes\\\"\\r\\n        (onClick)=\\\"addSupplementalNote()\\\" [actionType]=\\\"addSupplementalButtonActionType\\\" secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-2 col-xs-3\\\">\\r\\n        <lf-form-input [control]=\\\"createdOn\\\" label=\\\"Created On\\\" i18n-label=\\\"@@policy.notes.detail.addedon\\\">\\r\\n            <lf-statictext #createdOn name=\\\"createdOn_{{item.sequenceId}}\\\" [value]=\\\"data.AddedDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-2\\\">\\r\\n        <lf-form-input [control]=\\\"noteType\\\" label=\\\"Type\\\" i18n-label=\\\"@@policy.notes.label.notestype\\\">\\r\\n            <lf-statictext #noteType name=\\\"noteType_{{item.sequenceId}}\\\" [value]=\\\"getNoteTypeCategory(data.NoteType)\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-2\\\">\\r\\n        <lf-form-input [control]=\\\"applicant\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.notes.addnotes.applicant\\\">\\r\\n            <lf-statictext #applicant name=\\\"applicant_{{item.sequenceId}}\\\" [value]=\\\"applicantName\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-2\\\">\\r\\n        <lf-form-input [control]=\\\"createdBy\\\" label=\\\"Created By\\\" i18n-label=\\\"@@policy.notes.addnotes.author\\\">\\r\\n            <lf-statictext #createdBy name=\\\"createdBy_{{item.sequenceId}}\\\" [value]=\\\"getAuthorName(data)\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-2\\\">\\r\\n        <lf-form-input [control]=\\\"source\\\" label=\\\"Source\\\" i18n-label=\\\"@@policy.notes.detail.source\\\">\\r\\n            <lf-statictext #source name=\\\"source_{{item.sequenceId}}\\\" [value]=\\\"getNoteTypeValue(data.NoteType)\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-2\\\">\\r\\n        <lf-form-input [control]=\\\"visibility\\\" label=\\\"Visibility\\\" i18n-label=\\\"@@policy.notes.addnotes.visibility\\\">\\r\\n            <lf-statictext #visibility name=\\\"visibility_{{item.sequenceId}}\\\" [value]=\\\"data.Visibility\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <lf-form-input [control]=\\\"subject\\\" label=\\\"Subject\\\" i18n-label=\\\"@@policy.notes.detail.source\\\">\\r\\n            <lf-statictext #subject name=\\\"subject_{{item.sequenceId}}\\\" [value]=\\\"data.Topic\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-8\\\">\\r\\n        <lf-form-input [control]=\\\"note\\\" label=\\\"Note\\\" i18n-label=\\\"@@policy.notes.addnotes.note\\\">\\r\\n            <lf-statictext #note name=\\\"note_{{item.sequenceId}}\\\" [value]=\\\"data.Note\\\" [renderAsHtml]=\\\"false\\\"\\r\\n                secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-2\\\">\\r\\n        <lf-form-input [control]=\\\"updatedOn\\\" label=\\\"Last Updated\\\" i18n-label=\\\"@@policy.notes.detail.lastupdate\\\">\\r\\n            <lf-statictext #updatedOn name=\\\"updatedOn_{{item.sequenceId}}\\\" [value]=\\\"data.UpdateDate | dbDate:'shortDateMediumTime'\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\" *ngIf=\\\"data.SupplementalNotes.length > 0\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <div class=\\\"supplemental-note\\\">\\r\\n            <div *ngFor=\\\"let supplementalNote of data.SupplementalNotes\\\">\\r\\n                <ls-supplemental-note noteTitle=\\\"Supplemental Note\\\" i18n-noteTitle=\\\"@@policy.notes.detail.supplemental\\\"\\r\\n                    [noteReferredTo]=\\\"getReferredToUserName(supplementalNote)\\\" [noteCreatedOn]=\\\"supplementalNote.AddedDate | dbDate : 'shortDateMediumTime'\\\"\\r\\n                    [noteCreatedBy]=\\\"getAuthorName(supplementalNote)\\\" [note]=\\\"supplementalNote.Note\\\" secureComponent></ls-supplemental-note>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\n\nimport { ButtonActionType } from 'life-core/component';\nimport { LfSplitPaneChannels } from 'life-core/component/layout/split';\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\nimport { NoteDTO } from 'ls-core/model';\nimport { AppSession } from 'ls-core/session';\nimport { TabPolicySplitPaneAreas } from 'business/policy/tab';\nimport { NoteTypeComponent } from './note-type.component';\n\n@Component({\n    selector: 'case-note',\n    templateUrl: './case-note.component.html',\n    styleUrls: ['./case-note.component.css']\n})\nexport class CaseNoteComponent extends NoteTypeComponent {\n    public showAddSupplementalButton: boolean;\n    public addSupplementalButtonActionType: ButtonActionType = ButtonActionType.DataChange;\n\n    private _messagingService: IMessagingService;\n\n    constructor(injector: Injector, messagingService: MessagingService) {\n        super(injector);\n        this._messagingService = messagingService;\n        this.setShowAddSupplementalButton();\n    }\n\n    private setShowAddSupplementalButton(): void {\n        const appSession = this.injector.get(AppSession);\n        this.showAddSupplementalButton = appSession.isStandalone === false;\n    }\n\n    public addSupplementalNote(): void {\n        this._messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, {\n            areaId: TabPolicySplitPaneAreas.AddCaseSupplementalNote,\n            context: this.getSupplementalNoteContext()\n        });\n    }\n\n    private getSupplementalNoteContext(): CaseNoteContext {\n        const context = new CaseNoteContext();\n        context.parentNote = this.data;\n        return context;\n    }\n}\n\nexport class CaseNoteContext {\n    public parentNote: NoteDTO;\n}\n","﻿export * from './case-note.component';\r\nexport * from './uw-note.component';\r\n","import { Injector, Injectable } from '@angular/core';\n\nimport { ViewModel } from 'life-core/view-model';\nimport { ConvertUtil } from 'life-core/util/lang/convert.util';\nimport { ICompose } from 'life-core/component/compose';\nimport { IItem } from 'life-core/component/item-list';\nimport { AppSession } from 'ls-core/session';\nimport { ApplicantHelper, NoteUtil } from 'business/policy/shared';\nimport { ListUtil } from 'life-core/util';\nimport { NoteDTO } from 'ls-core/model';\n\n@Injectable()\nexport class NoteTypeComponent extends ViewModel<NoteDTO> implements ICompose {\n    public item: IItem<NoteDTO>;\n    public applicantName: string;\n    protected appSession: AppSession;\n\n    constructor(injector: Injector) {\n        super(injector);\n        this.appSession = injector.get(AppSession);\n    }\n\n    public setModel(model: any): void {\n        this.item = model;\n        this.data = this.item.data;\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedMetaData();\n        this.applicantName = this.getApplicantName();\n        return Promise.resolve();\n    }\n\n    public getApplicantName(): string {\n        const applicant = ApplicantHelper.getApplicantByPolicyPersonId(\n            this.appSession.policyDTO.Insureds_LazyLoad,\n            ConvertUtil.toNumber(this.data.PolicyPersonId)\n        );\n        return ApplicantHelper.getApplicantFullName(applicant);\n    }\n\n    public getNoteTypeCategory(noteType: string): string {\n        return NoteUtil.getNoteTypeCategory(noteType);\n    }\n\n    public getNoteTypeValue(noteType: string): string {\n        return noteType ? ListUtil.getLabelByValue(this.listData.note_type, noteType) : '';\n    }\n\n    public getAuthorName(note: NoteDTO): string {\n        const author = note.PrimaryAuthor ? note.PrimaryAuthor : note.Author;\n        return author ? ListUtil.getLabelByValue(this.listData.aus_users, author.toString()) : '';\n    }\n\n    public getReferredToUserName(note: NoteDTO): string {\n        const referredToUser = note.ReferToUserId ? note.ReferToUserId : null;\n        return referredToUser ? ListUtil.getLabelByValue(this.listData.aus_users, referredToUser.toString()) : '';\n    }\n}\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-2 col-xs-3\\\">\\r\\n        <lf-form-input [control]=\\\"createdOn\\\" label=\\\"Created On\\\" i18n-label=\\\"@@policy.notes.detail.addedon\\\">\\r\\n            <lf-statictext #createdOn name=\\\"createdOn_{{item.sequenceId}}\\\" [value]=\\\"data.AddedDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-2\\\">\\r\\n        <lf-form-input [control]=\\\"noteType\\\" label=\\\"Type\\\" i18n-label=\\\"@@policy.notes.label.notestype\\\">\\r\\n            <lf-statictext #noteType name=\\\"noteType_{{item.sequenceId}}\\\" [value]=\\\"getNoteTypeCategory(data.NoteType)\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-2\\\">\\r\\n        <lf-form-input [control]=\\\"applicant\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.notes.addnotes.applicant\\\">\\r\\n            <lf-statictext #applicant name=\\\"applicant_{{item.sequenceId}}\\\" [value]=\\\"applicantName\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-2\\\">\\r\\n        <lf-form-input [control]=\\\"createdBy\\\" label=\\\"Author\\\" i18n-label=\\\"@@policy.notes.addnotes.author\\\">\\r\\n            <lf-statictext #createdBy name=\\\"createdBy_{{item.sequenceId}}\\\" [value]=\\\"getAuthorName(data)\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n        <lf-form-input [control]=\\\"subject\\\" label=\\\"Subject\\\" i18n-label=\\\"@@policy.notes.detail.subject\\\">\\r\\n            <lf-statictext #subject name=\\\"subject_{{item.sequenceId}}\\\" [value]=\\\"data.Topic\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n        <lf-form-input [control]=\\\"note\\\" label=\\\"Note\\\" i18n-label=\\\"@@policy.notes.addnotes.note\\\">\\r\\n            <lf-statictext #note name=\\\"note_{{item.sequenceId}}\\\" [value]=\\\"data.Note\\\" [renderAsHtml]=\\\"false\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\n\nimport { NoteTypeComponent } from './note-type.component';\n\n@Component({\n    selector: 'uw-note',\n    templateUrl: './uw-note.component.html'\n})\nexport class UWNoteComponent extends NoteTypeComponent {\n    constructor(injector: Injector) {\n        super(injector);\n    }\n}\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\nimport { NotesComponentLevelPrivileges } from './notes-component-level-privileges';\r\n\r\n@Injectable()\r\nexport class UWNotesAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const uwNotesAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.NOTEUW]\r\n        );\r\n\r\n        this.authorizationData.componentLevel[NotesComponentLevelPrivileges.AddUWNote] = uwNotesAuthorizationLevel;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-page-header\\\" i18n=\\\"@@policy.notes.uwnotestitle\\\">UW Notes</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"applicant\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.notes.label.applicant\\\">\\r\\n\\t\\t\\t<!-- Use 'ngModelOption.standalone' to not add this control to NgForm to avoid saving data when applicant selection changes -->\\r\\n\\t\\t\\t<lf-select #applicant name=\\\"applicant\\\" [(ngModel)]=\\\"activeApplicantId\\\" [ngModelOptions]=\\\"{standalone: true}\\\" [items]=\\\"applicantList\\\"\\r\\n\\t\\t\\t (change)=\\\"onApplicantChange($event)\\\" [actionType]=\\\"filterDropdownActionType\\\" secureComponent [clearable]=\\\"false\\\"\\r\\n\\t\\t\\t style=\\\"width:200px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"sortByOption\\\" label=\\\"Order By\\\" i18n-label=\\\"@@policy.requirement.detail.orderedby\\\">\\r\\n\\t\\t\\t<!-- Use 'ngModelOption.standalone' to not add this control to NgForm to avoid saving data when note type selection changes -->\\r\\n\\t\\t\\t<lf-select #sortByOption name=\\\"sortByOption\\\" [(ngModel)]=\\\"selectedSortByOption\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n\\t\\t\\t [items]=\\\"listData.SortByOption\\\" (change)=\\\"onSortByOptionChange($event)\\\" [actionType]=\\\"filterDropdownActionType\\\"\\r\\n\\t\\t\\t [clearable]=\\\"false\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row col-12 justify-content-end pb-4\\\">\\r\\n\\t<lf-button id=\\\"addUWNote\\\" name=\\\"addUWNote\\\" label=\\\"Add Note\\\" i18n-label=\\\"@@policy.notes.addnotes.uwnote.button\\\"\\r\\n\\t (onClick)=\\\"addUWNote()\\\" [actionType]=\\\"addUWNoteButtonActionType\\\" secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n\\t<lf-button id=\\\"printUWNotes\\\" label=\\\"Print UW Notes\\\" i18n-label=\\\"@@policy.notes.printnotes.uwnote.button\\\" (onClick)=\\\"printNotes('worksheet')\\\"\\r\\n\\t secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n</div>\\r\\n<div *ngIf=\\\"activeApplicantId\\\" class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-12\\\">\\r\\n\\t\\t<note-list [selectedApplicantId]=\\\"activeApplicantId\\\" selectedNoteTypeCategory=\\\"UW\\\" [sortByOption]=\\\"selectedSortByOption\\\"\\r\\n\\t\\t [title]=\\\"title\\\"></note-list>\\r\\n\\t</div>\\r\\n</div>\"","import { Injector, Component, ViewChild } from '@angular/core';\n\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { ButtonActionType } from 'life-core/component';\nimport { LfSplitPaneChannels } from 'life-core/component/layout/split';\nimport { PolicySubscriber } from 'ls-core/session';\nimport { NotesComponent } from './notes.component';\nimport { NoteListComponent } from './note-list/note-list.component';\nimport { UWNotesAuthorizationProvider } from './uw-notes-authorization.provider';\nimport { TabPolicySplitPaneAreas } from 'business/policy/tab';\nimport { NoteUtil } from 'business/policy/shared';\nimport { LsAppConfig, SystemSetting } from 'ls-core/config';\nimport { InsuredDTO } from 'ls-core/model';\nimport { I18n } from 'life-core/i18n';\n\n@Component({\n    selector: 'uw-notes',\n    templateUrl: './uw-notes.component.html',\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: UWNotesAuthorizationProvider }]\n})\nexport class UWNotesComponent extends NotesComponent {\n    public title: string;\n    public addUWNoteButtonActionType: ButtonActionType = ButtonActionType.DataChange;\n\n    @ViewChild(NoteListComponent)\n    protected uwNoteListComponent: NoteListComponent;\n\n    constructor(injector: Injector, policySubscriber: PolicySubscriber, appConfig: LsAppConfig, i18n: I18n) {\n        super(injector, policySubscriber, appConfig);\n        this._appConfig = appConfig;\n        this.i18n = i18n;\n    }\n\n    public addUWNote(): void {\n        this.messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, {\n            areaId: TabPolicySplitPaneAreas.AddUWNote\n        });\n    }\n\n    protected get noteListComponent(): NoteListComponent {\n        return this.uwNoteListComponent;\n    }\n\n    protected setTitle(): void {\n        this.title = this.i18n({ value: 'UW Notes', id: '@@policy.notes.uwnotes.paneltitle' });\n    }\n}\n","module.exports = \"<note-list [title]=\\\"title\\\" [selectedApplicantId]=\\\"activeApplicantId\\\" [sortByOption]=\\\"selectedSortByOption\\\"\\r\\n    [selectedNoteTypeCategory]=\\\"selectedNoteTypeCategory\\\"></note-list>\"","import { Component, Injector, Injectable } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationLevel } from 'life-core/authorization';\r\nimport { ViewModel, ParentChildRegistry } from 'life-core/view-model';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { PolicyDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { SortByOptions } from 'ls-core/model/const/sort-order-types';\r\n\r\nimport { All_Applicants_Id, NoteTypeCategories } from 'business/policy/shared';\r\nimport { CaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\nimport { CaseNotesAuthorizationProvider } from '../case-notes-authorization.provider';\r\nimport { UWNotesAuthorizationProvider } from '../uw-notes-authorization.provider';\r\nimport { NotesComponentLevelPrivileges } from '../notes-component-level-privileges';\r\nimport { CombinedNotesAuthorizationProvider } from '../combined-notes-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'view-notes',\r\n    templateUrl: './view-notes.component.html',\r\n    providers: [\r\n        ParentChildRegistry,\r\n        PolicySubscriber,\r\n        { provide: AuthorizationProvider, useClass: CaseAuthorizationProvider },\r\n        CaseNotesAuthorizationProvider,\r\n        UWNotesAuthorizationProvider,\r\n        CombinedNotesAuthorizationProvider\r\n    ]\r\n})\r\n@Injectable()\r\nexport class ViewNotesComponent extends ViewModel {\r\n    public activeApplicantId: number = All_Applicants_Id;\r\n    public selectedSortByOption: string = SortByOptions.DESC;\r\n    public title: string;\r\n    public selectedNoteTypeCategory: string;\r\n\r\n    private _caseNotesAuthorizationProvider: CaseNotesAuthorizationProvider;\r\n    private _uwNotesAuthorizationProvider: UWNotesAuthorizationProvider;\r\n    private _combinedNotesAuthorizationProvider: CombinedNotesAuthorizationProvider;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        caseNotesAuthorizationProvider: CaseNotesAuthorizationProvider,\r\n        uwNotesAuthorizationProvider: UWNotesAuthorizationProvider,\r\n        combinedNotesAuthorizationProvider: CombinedNotesAuthorizationProvider,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        policySubscriber.subscribe(this, p => {\r\n            this.onPolicyUpdate(p);\r\n        });\r\n        this._caseNotesAuthorizationProvider = caseNotesAuthorizationProvider;\r\n        this._uwNotesAuthorizationProvider = uwNotesAuthorizationProvider;\r\n        this._combinedNotesAuthorizationProvider = combinedNotesAuthorizationProvider;\r\n        this.setNoteTypeCategory();\r\n    }\r\n\r\n    private onPolicyUpdate(policy: PolicyDTO): void {\r\n        this.title = this.getViewNotesTitle(policy.PolicyNumber);\r\n    }\r\n\r\n    private getViewNotesTitle(policyNumber: string): string {\r\n        return `${this.i18n(\r\n            { value: 'Notes - Case: {{policyNumber}}', id: 'policy.notes.viewnotes.title' },\r\n            { policyNumber: policyNumber }\r\n        )}`;\r\n    }\r\n\r\n    private setNoteTypeCategory(): void {\r\n        if ((this.hasCaseNotesPrivilege() && this.hasUwNotesPrivilege()) || this.hasCombinedNotesPrivilege()) {\r\n            this.selectedNoteTypeCategory = NoteTypeCategories.ALL;\r\n        } else if (this.hasCaseNotesPrivilege()) {\r\n            this.selectedNoteTypeCategory = NoteTypeCategories.CASE;\r\n        } else if (this.hasUwNotesPrivilege()) {\r\n            this.selectedNoteTypeCategory = NoteTypeCategories.UW;\r\n        }\r\n    }\r\n\r\n    private hasCaseNotesPrivilege(): boolean {\r\n        return (\r\n            this._caseNotesAuthorizationProvider.getAuthorizationData().componentLevel[\r\n                NotesComponentLevelPrivileges.AddCaseNote\r\n            ] > AuthorizationLevel.NONE\r\n        );\r\n    }\r\n\r\n    private hasUwNotesPrivilege(): boolean {\r\n        return (\r\n            this._uwNotesAuthorizationProvider.getAuthorizationData().componentLevel[\r\n                NotesComponentLevelPrivileges.AddUWNote\r\n            ] > AuthorizationLevel.NONE\r\n        );\r\n    }\r\n\r\n    private hasCombinedNotesPrivilege(): boolean {\r\n        return this._combinedNotesAuthorizationProvider.getAuthorizationData().defaultLevel > AuthorizationLevel.NONE;\r\n    }\r\n}\r\n","export * from './scratch-pad.component';\r\nexport * from './scratch-pad-dialog.component';\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\nimport { BaseViewDataResolver } from 'ls-core/view-model';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { UIServiceNames, UIServiceMethods, DataServiceParams } from 'ls-core/service';\r\nimport { ScratchPadDTO } from 'ls-core/model';\r\nimport { ScratchPadRequest } from './scratch-pad.request';\r\n\r\n@Injectable()\r\nexport class ScratchPadDataResolver extends BaseViewDataResolver {\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getServiceParams(): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.SCRATCH_PAD_SERVICE,\r\n            serviceMethod: UIServiceMethods.GET_DATA,\r\n            requestPayload: this.getRequestPayload()\r\n        });\r\n    }\r\n\r\n    private getRequestPayload(scratchPadDTO?: ScratchPadDTO): ScratchPadRequest {\r\n        const requestPayload = new ScratchPadRequest();\r\n        requestPayload.policyId = ConvertUtil.toNumber(this._appSession.policyDTO.PolicyId);\r\n        return requestPayload;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\nimport { ILogger, Logger } from 'life-core/logging';\r\nimport { DataService, DataServiceParams, UIServiceNames, UIServiceMethods } from 'ls-core/service';\r\nimport { ScratchPadDTO } from 'ls-core/model';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { DBDateUtil } from 'ls-core/util';\r\nimport { ScratchPadRequest } from './scratch-pad.request';\r\n\r\n@Injectable()\r\nexport class ScratchPadDataService {\r\n    private _appSession: AppSession;\r\n    private _dataService: DataService;\r\n    private _logger: ILogger;\r\n\r\n    constructor(dataService: DataService, appSession: AppSession, logger: Logger) {\r\n        this._dataService = dataService;\r\n        this._appSession = appSession;\r\n        this._logger = logger;\r\n    }\r\n\r\n    public updateScratchPad(scratchPadDTO: ScratchPadDTO): Promise<void> {\r\n        const serviceParams = this.getServiceParams(scratchPadDTO);\r\n        return this._dataService.updateData(serviceParams).then(response => {\r\n            // Below is temporary, it is used to check response. In future it will be removed.\r\n            if (response.responsePayload) {\r\n                this._logger.log('Scratch Pad data saved successfully.');\r\n            } else {\r\n                this._logger.log('Scratch Pad data save unsuccessful.');\r\n            }\r\n        });\r\n    }\r\n    private getServiceParams(scratchPadDTO: ScratchPadDTO): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.SCRATCH_PAD_SERVICE,\r\n            serviceMethod: UIServiceMethods.SET_DATA,\r\n            requestPayload: this.getRequestPayload(scratchPadDTO)\r\n        });\r\n    }\r\n\r\n    private getRequestPayload(scratchPadDTO: ScratchPadDTO): ScratchPadRequest {\r\n        const requestPayload = new ScratchPadRequest();\r\n        requestPayload.policyId = ConvertUtil.toNumber(this._appSession.policyDTO.PolicyId);\r\n        requestPayload.scratchPadDTO = this.createScratchPadDTO(scratchPadDTO);\r\n        return requestPayload;\r\n    }\r\n\r\n    private createScratchPadDTO(scratchPadDTO: ScratchPadDTO): ScratchPadDTO {\r\n        // If there is no AddedBy/AddedDate other also shouldn't be present.\r\n        if (!scratchPadDTO.AddedBy || !scratchPadDTO.AddedDate) {\r\n            scratchPadDTO.AddedBy = this._appSession.user.UserId;\r\n            scratchPadDTO.AddedDate = DBDateUtil.dateToDBDate(new Date());\r\n        } else {\r\n            scratchPadDTO.UpdatedBy = this._appSession.user.UserId;\r\n            scratchPadDTO.UpdatedDate = DBDateUtil.dateToDBDate(new Date());\r\n        }\r\n        return scratchPadDTO;\r\n    }\r\n}\r\n","module.exports = \"<card-dialog [view]=\\\"view\\\" (dialogDismiss)=\\\"onDialogDismiss($event)\\\" secureComponent></card-dialog>\"","﻿import { Component, Injector, Type, ViewChild } from '@angular/core';\r\n\r\nimport { SplitPaneDialogViewModel } from 'life-core/component/layout/split';\r\nimport {\r\n    DialogButton,\r\n    DialogButtonType,\r\n    CardDialog,\r\n    CardDialogParams,\r\n    CardDialogResult\r\n} from 'life-core/component/dialog';\r\nimport { ResolvedDataNames } from 'life-core/view-model/data-resolver';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { ButtonActionType } from 'life-core/component';\r\n\r\nimport { AppSession } from 'ls-core/session';\r\n\r\nimport { ScratchPadComponent } from './scratch-pad.component';\r\nimport { ScratchPadDataResolver } from './scratch-pad-data.resolver';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { CaseAuthorizationProvider } from '../shared/authorization';\r\n\r\n@Component({\r\n    selector: 'scratchpad-dialog',\r\n    templateUrl: './scratch-pad-dialog.component.html',\r\n    providers: [{ provide: AuthorizationProvider, useClass: CaseAuthorizationProvider }]\r\n})\r\nexport class ScratchPadDialogComponent extends SplitPaneDialogViewModel {\r\n    public view: Type<ScratchPadComponent> = ScratchPadComponent;\r\n\r\n    protected i18n: I18n;\r\n\r\n    private _caseNumber: string;\r\n\r\n    @ViewChild(CardDialog)\r\n    protected cardDialog: CardDialog;\r\n\r\n    constructor(injector: Injector, appSession: AppSession, i18n: I18n) {\r\n        super(injector);\r\n        this._caseNumber = appSession.policyDTO.PolicyNumber;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    protected getDialogParams(): CardDialogParams {\r\n        return {\r\n            title: this.i18n(\r\n                { value: 'Scratch Pad - {{caseNumber}}', id: 'component.scratchpad.title' },\r\n                { caseNumber: this._caseNumber.toString() }\r\n            ),\r\n            resolve: [{ resolveName: ResolvedDataNames.data, resolverClass: ScratchPadDataResolver }],\r\n            buttons: [\r\n                new DialogButton({\r\n                    type: DialogButtonType.OK,\r\n                    actionType: ButtonActionType.DataChange,\r\n                    handler: (dialogResult: CardDialogResult) => {\r\n                        this.onCardDialogButtonClick(dialogResult);\r\n                    }\r\n                }),\r\n                new DialogButton({\r\n                    type: DialogButtonType.CANCEL,\r\n                    handler: (dialogResult: CardDialogResult) => {\r\n                        this.onCardDialogButtonClick(dialogResult);\r\n                    }\r\n                })\r\n            ]\r\n        };\r\n    }\r\n\r\n    // State Management\r\n\r\n    protected getStateValueKey(): string {\r\n        return 'scratch_pad_dialog';\r\n    }\r\n}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"col\\\">\\r\\n        <lf-form-input [control]=\\\"scratch_pad\\\" label=\\\"\\\">\\r\\n            <lf-inputtextarea #scratch_pad name=\\\"scratch_pad\\\" [(ngModel)]=\\\"data.ScratchPadNote\\\" rows=\\\"10\\\" stateId=\\\"scratch_pad\\\"\\r\\n                [state]=\\\"componentsState.get('scratch_pad')\\\" [style]=\\\"{width: '100%'}\\\" secureComponent></lf-inputtextarea>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</form>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { ViewModel, ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { ICardDialogViewModel, DialogViewModelResult, DialogButtonType } from 'life-core/component/dialog';\r\n\r\nimport { ScratchPadDTO } from 'ls-core/model';\r\n\r\nimport { ScratchPadDataService } from './scratch-pad-data.service';\r\n\r\n@Component({\r\n    selector: 'scratchpad-component',\r\n    templateUrl: './scratch-pad.component.html',\r\n    providers: [ParentChildRegistry, ScratchPadDataService]\r\n})\r\nexport class ScratchPadComponent extends ViewModel<ScratchPadDTO> implements ICompose, ICardDialogViewModel {\r\n    private _scratchPadDataService: ScratchPadDataService;\r\n    private _stateData: ScratchPadStateModel;\r\n\r\n    constructor(injector: Injector, scratchPadDataService: ScratchPadDataService) {\r\n        super(injector);\r\n        this._scratchPadDataService = scratchPadDataService;\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        Object.assign(this.data, { ...model.resolvedData.data });\r\n        this.updateWithStateData();\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId == DialogButtonType.OK) {\r\n            return this.validate().then(validationResult => {\r\n                if (validationResult == ViewValidationResult.pass) {\r\n                    this._scratchPadDataService.updateScratchPad(this.data);\r\n                } else {\r\n                    return Promise.resolve(new DialogViewModelResult(null, false, false));\r\n                }\r\n            });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    public initData(): void {}\r\n\r\n    public getState(): any {\r\n        const stateData = new ScratchPadStateModel();\r\n        stateData.note = this.data.ScratchPadNote;\r\n        return stateData;\r\n    }\r\n\r\n    public setState(stateData: any): void {\r\n        this._stateData = stateData;\r\n    }\r\n\r\n    private updateWithStateData(): void {\r\n        if (this._stateData) {\r\n            this.data.ScratchPadNote = this._stateData.note;\r\n        }\r\n    }\r\n}\r\n\r\nclass ScratchPadStateModel {\r\n    public note: string;\r\n}\r\n","import { ScratchPadDTO } from 'ls-core/model';\r\n\r\nexport class ScratchPadRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.ScratchPadRequest, LifeSuite.UIServiceDTO';\r\n    public policyId: number;\r\n    public scratchPadDTO: ScratchPadDTO;\r\n}\r\n","export * from './base-policy-data.resolver';\r\nexport * from './tab-policy-data.resolver';\r\nexport * from './base-pk-data.resolver';\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods } from 'ls-core/service';\r\n\r\nimport { BasePolicyDataResolver } from 'business/policy/shared/data-resolver/base-policy-data.resolver';\r\n\r\n@Injectable()\r\nexport class RefreshPolicyDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected isPolicyLoaded(): boolean {\r\n        return false;\r\n    }\r\n\r\n    protected getServiceParams(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.REFRESH_DATA_SERVICE,\r\n            serviceMethod: UIServiceMethods.GET_DATA,\r\n            requestPayload: this.getPayLoad()\r\n        });\r\n    }\r\n\r\n    private getPayLoad(): RefreshDTORequest {\r\n        const request = new RefreshDTORequest();\r\n        request.rootDTOObject = this.appSession.policyDTO;\r\n        return request;\r\n    }\r\n}\r\n\r\nexport class RefreshDTORequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.RefreshDTORequest, LifeSuite.UIServiceDTO';\r\n\r\n    public rootDTOObject: any;\r\n}\r\n","﻿import { Injectable, Injector } from '@angular/core';\r\nimport { Router } from '@angular/router';\r\n\r\nimport { LsRoutePath } from 'ui/routing';\r\n\r\nimport { RoutePath } from 'life-core/routing';\r\nimport { AppCloseChannel } from 'life-core/handler/application/close-app.interface';\r\nimport { SaveTabHandler } from 'life-core/handler';\r\n\r\nimport { AppSession } from 'ls-core/session/app-session';\r\n\r\nimport { RefreshPolicyDataResolver } from './refresh-policy-data.resolver';\r\nimport { LogPerformanceDelegate } from 'business/policy/shared/log-performance/log-performance.delegate';\r\n\r\nimport { ViewValidationDelegate } from 'life-core/view-model/validation';\r\n\r\n@Injectable()\r\nexport class RefreshPolicyHandler extends SaveTabHandler {\r\n    private _router: Router;\r\n    private _appSession: AppSession;\r\n    private _policyResolver: RefreshPolicyDataResolver;\r\n    private _logPerformanceDelegate: LogPerformanceDelegate;\r\n    private _viewValidationDelegate: ViewValidationDelegate;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        router: Router,\r\n        appSession: AppSession,\r\n        policyResolver: RefreshPolicyDataResolver,\r\n        logPerformanceDelegate: LogPerformanceDelegate\r\n    ) {\r\n        super(injector);\r\n        this._router = router;\r\n        this._appSession = appSession;\r\n        this._policyResolver = policyResolver;\r\n        this._logPerformanceDelegate = logPerformanceDelegate;\r\n    }\r\n\r\n    public setViewValidationDelegate(delegate: ViewValidationDelegate): void {\r\n        this._viewValidationDelegate = delegate;\r\n    }\r\n    private loadPolicyAndRefreshPage(): void {\r\n        if (this._viewValidationDelegate) {\r\n            this._viewValidationDelegate.resetServerMessages();\r\n        }\r\n        this._policyResolver.directResolve().then(resolvedObject => {\r\n            this.refreshCurrentPage();\r\n        });\r\n    }\r\n    protected onSaveSucceed(): void {\r\n        this.refreshCurrentPage();\r\n    }\r\n\r\n    protected onNoNeedToSave(): void {\r\n        this.loadPolicyAndRefreshPage();\r\n    }\r\n\r\n    protected onSaveFailed(): void {\r\n        this.loadPolicyAndRefreshPage();\r\n    }\r\n\r\n    private refreshCurrentPage(): void {\r\n        const currentUrl = this._router.url;\r\n        const routePath = this.getRefreshableRoutePath(currentUrl);\r\n        if (routePath) {\r\n            let newUrl = currentUrl.substring(0, currentUrl.indexOf(routePath) + routePath.length);\r\n            if (!this.hasRefreshPartInUrl(currentUrl)) {\r\n                newUrl = this.addRefreshPartToUrl(newUrl);\r\n            }\r\n            this._router.navigateByUrl(newUrl).then(result => {\r\n                this.cancelCloseApp();\r\n            });\r\n        }\r\n        this._logPerformanceDelegate.log(false, this._appSession.policyDTO.PolicyNumber, 'caseRefresh');\r\n    }\r\n\r\n    private cancelCloseApp(): void {\r\n        this._messagingService.publish(AppCloseChannel.CancelClosingApplication);\r\n    }\r\n\r\n    private getRefreshableRoutePath(url: string): string {\r\n        return refreshableRoutePaths.find(path => url.includes(`/${path}`));\r\n    }\r\n\r\n    private hasRefreshPartInUrl(url: string): boolean {\r\n        return url.includes(`/${RoutePath.Refresh}`);\r\n    }\r\n\r\n    private addRefreshPartToUrl(url: string): string {\r\n        return `${url}/${RoutePath.Refresh}`;\r\n    }\r\n}\r\n\r\nconst refreshableRoutePaths = [\r\n    LsRoutePath.Worksheet,\r\n    LsRoutePath.Requirements,\r\n    LsRoutePath.Evidence,\r\n    LsRoutePath.Case,\r\n    LsRoutePath.Applicant,\r\n    LsRoutePath.RelatedCases,\r\n    LsRoutePath.PolicyDocuments\r\n];\r\n","﻿export * from './state/tab-policy-data-keys';\r\nexport * from './split-container/tab-policy-split-pane-areas';\r\n","﻿import { SplitPaneArea } from 'life-core/component/layout/split';\r\nimport { AddCaseNoteDialog } from 'business/policy/note/add-note/case-note';\r\nimport { ScratchPadDialogComponent } from 'business/policy/scratch-pad';\r\nimport { AddUWNoteDialog } from 'business/policy/note/add-note/uw-note';\r\nimport { AddRequirementCaseNoteDialog } from 'business/policy/note/add-note/requirement-case-note';\r\nimport { AddMedicalConditionUWNoteDialog } from 'business/policy/note/add-note/medical-condition-uw-note';\r\nimport { AddReviewMessageNoteDialog } from 'business/policy/note/add-note/review-message-note';\r\n\r\nexport const TabPolicySplitPaneAreas = {\r\n    AddCaseNote: 'add-case-note',\r\n    AddCaseSupplementalNote: 'add-case-supplemental-note',\r\n    AddUWNote: 'add-uw-note',\r\n    ScratchPad: 'scratch-pad',\r\n    AddRequirementCaseNote: 'add-req-case-note',\r\n    AddReviewMessageNote: 'add-review-message-note',\r\n    AddMedicalConditionUWNote: 'add-medical-condition-uw-note'\r\n};\r\n\r\nexport const SplitPaneAreaType = {\r\n    CASE_NOTE: 'caseNote',\r\n    UW_NOTE: 'uwNote',\r\n    SUPPLEMENTAL_NOTE: 'supplementalNote',\r\n    SCRATCH_PAD: 'scratchPad'\r\n};\r\n\r\nexport const TabPolicySplitPaneAreaDefs = {\r\n    [TabPolicySplitPaneAreas.AddCaseNote]: new SplitPaneArea({\r\n        id: TabPolicySplitPaneAreas.AddCaseNote,\r\n        type: SplitPaneAreaType.CASE_NOTE,\r\n        size: 75,\r\n        view: AddCaseNoteDialog\r\n    }),\r\n    [TabPolicySplitPaneAreas.AddCaseSupplementalNote]: new SplitPaneArea({\r\n        id: TabPolicySplitPaneAreas.AddCaseSupplementalNote,\r\n        type: SplitPaneAreaType.SUPPLEMENTAL_NOTE,\r\n        size: 75,\r\n        view: AddCaseNoteDialog\r\n    }),\r\n    [TabPolicySplitPaneAreas.AddUWNote]: new SplitPaneArea({\r\n        id: TabPolicySplitPaneAreas.AddUWNote,\r\n        type: SplitPaneAreaType.UW_NOTE,\r\n        size: 55,\r\n        view: AddUWNoteDialog\r\n    }),\r\n    [TabPolicySplitPaneAreas.ScratchPad]: new SplitPaneArea({\r\n        id: TabPolicySplitPaneAreas.ScratchPad,\r\n        type: SplitPaneAreaType.SCRATCH_PAD,\r\n        size: 45,\r\n        view: ScratchPadDialogComponent\r\n    }),\r\n    [TabPolicySplitPaneAreas.AddRequirementCaseNote]: new SplitPaneArea({\r\n        id: TabPolicySplitPaneAreas.AddRequirementCaseNote,\r\n        type: SplitPaneAreaType.CASE_NOTE,\r\n        size: 75,\r\n        view: AddRequirementCaseNoteDialog\r\n    }),\r\n    [TabPolicySplitPaneAreas.AddMedicalConditionUWNote]: new SplitPaneArea({\r\n        id: TabPolicySplitPaneAreas.AddMedicalConditionUWNote,\r\n        type: SplitPaneAreaType.UW_NOTE,\r\n        size: 75,\r\n        view: AddMedicalConditionUWNoteDialog\r\n    }),\r\n    [TabPolicySplitPaneAreas.AddReviewMessageNote]: new SplitPaneArea({\r\n        id: TabPolicySplitPaneAreas.AddReviewMessageNote,\r\n        type: SplitPaneAreaType.CASE_NOTE,\r\n        size: 75,\r\n        view: AddReviewMessageNoteDialog\r\n    })\r\n};\r\n","export const ReviewMessagesType = {\r\n    CHECKABLE: 0,\r\n    NOT_CHECKABLE: 1,\r\n    INFO_ONLY: 2,\r\n    INFO_PERM: 3,\r\n    CHECKED_OFF: 4\r\n}","export const AutoNavigationChannels = {\r\n    PolicyTab: 'policy-tab',\r\n    Requirement: 'requirement',\r\n    Evidence: 'evidence',\r\n    CaseNotes: 'case-notes'\r\n};\r\n","﻿export * from './split-component';\r\nexport * from './split-pane';\r\nexport * from './lf-split.model';\r\n","﻿export * from './lf-split-pane.model';\r\nexport * from './lf-split-pane.component';\r\nexport * from './lf-split-pane-channels';\r\nexport * from './vm/split-pane-container.vm';\r\nexport * from './vm/split-pane-dialog.vm';\r\n","﻿import { Type } from '@angular/core';\r\nimport { SplitArea } from '../lf-split.model';\r\n\r\nexport class SplitPaneArea extends SplitArea {\r\n    public view: Type<any>;\r\n    public context?: any;\r\n    public type?: string;\r\n    constructor({\r\n        id,\r\n        index,\r\n        type,\r\n        size,\r\n        view,\r\n        context,\r\n        visible\r\n    }: {\r\n        id: string;\r\n        index?: number;\r\n        type?: string;\r\n        size: number;\r\n        view: Type<any>;\r\n        context?: any;\r\n        visible?: boolean;\r\n    }) {\r\n        super({ id, index, size, visible });\r\n        this.view = view;\r\n        this.context = context;\r\n        this.type = type;\r\n    }\r\n}\r\n\r\nexport type SplitPaneAreaData = {\r\n    areaId: string;\r\n    context?: any;\r\n    type?: string;\r\n};\r\n\r\nexport class SplitPaneStateData {\r\n    public splitPaneSize: number;\r\n    public splitPaneAreas: SplitPaneArea[];\r\n}\r\n","﻿import { Injector } from '@angular/core';\r\n\r\nimport { ViewModel } from 'life-core/view-model';\r\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\r\nimport { TabStateManager, TabStateValueAccessor } from 'life-core/util';\r\nimport { ClickEventResolver } from 'life-core/component/shared/event/click-event.resolver';\r\nimport { SplitAreasInfo, GutterSize, GutterColor } from '../../lf-split.model';\r\nimport { SplitPaneArea, SplitPaneAreaData, SplitPaneStateData } from '../lf-split-pane.model';\r\nimport { LfSplitPaneComponent } from '../lf-split-pane.component';\r\nimport { LfSplitPaneChannels } from '../lf-split-pane-channels';\r\nimport { SplitPaneResult } from './split-pane-dialog.vm';\r\nimport { ConfirmDialog, DialogButton, DialogButtonType } from 'life-core/component';\r\nimport { SplitPaneContainerMessagesMapper } from './split-pane-container-messages.mapper';\r\n\r\nexport abstract class SplitPaneContainerViewModel extends ViewModel {\r\n    public containerAreasInfo: SplitAreasInfo;\r\n\r\n    public splitPaneAreas: SplitPaneArea[] = [];\r\n\r\n    public splitterVisible: boolean;\r\n\r\n    public splitContainerClass: string;\r\n\r\n    public gutterSize: number = GutterSize.large;\r\n\r\n    public gutterColor: string = GutterColor.default;\r\n\r\n    public dragGutterColor: string = GutterColor.drag;\r\n\r\n    public splitterMinimized: boolean = false;\r\n\r\n    protected abstract splitPane: LfSplitPaneComponent;\r\n\r\n    protected messagingService: IMessagingService;\r\n\r\n    protected splitPaneSize: number;\r\n\r\n    private _splitPaneStateValueAccessor: TabStateValueAccessor<SplitPaneStateData>;\r\n\r\n    private _gutterClickEventResolver: ClickEventResolver;\r\n\r\n    private _confirmDialog: ConfirmDialog;\r\n\r\n    private _splitPaneContainerMessagesMapper: SplitPaneContainerMessagesMapper;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.messagingService = injector.get(MessagingService);\r\n        this._confirmDialog = injector.get(ConfirmDialog);\r\n\r\n        this._splitPaneContainerMessagesMapper = injector.get(SplitPaneContainerMessagesMapper);\r\n        this.createStateValueAccessor(injector.get(TabStateManager));\r\n        this.initContainerAreas();\r\n        this.initSubscribers();\r\n        this.initClickEventResolver();\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        const splitPaneStateData = this._splitPaneStateValueAccessor.getValue();\r\n        if (splitPaneStateData) {\r\n            this.restoreSplitPaneState(splitPaneStateData);\r\n        } else {\r\n            this.setContainerSplitVisible(false);\r\n        }\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public addSplitArea(areaData: SplitPaneAreaData): SplitPaneArea {\r\n        if (this.splitPaneTypeAlreadyExists(areaData.areaId)) {\r\n            this.showSplitAreaExistMessage(areaData.areaId);\r\n            return;\r\n        }\r\n        if (!this.splitterVisible) {\r\n            this.showSplitter();\r\n        }\r\n        const splitPaneArea = this.createSplitPaneArea(areaData.areaId);\r\n        splitPaneArea.index = this.splitPaneAreas.length + 1;\r\n        splitPaneArea.context = areaData.context;\r\n        this.splitPaneAreas.push(splitPaneArea);\r\n        return splitPaneArea;\r\n    }\r\n\r\n    public removeSplitArea(splitPaneResult: SplitPaneResult): void {\r\n        const area = this.splitPaneAreas.find(area => area.id == splitPaneResult.areaId);\r\n        if (area) {\r\n            area.context = undefined;\r\n            this.splitPaneAreas.splice(this.splitPaneAreas.indexOf(area), 1);\r\n            if (this.splitPaneAreas.length == 0) {\r\n                this.hideSplitter();\r\n            }\r\n        }\r\n    }\r\n\r\n    public onSplitGutterDragStart(e: { gutterNum: number; sizes: Array<number> }): void {\r\n        this.gutterColor = GutterColor.drag;\r\n        this.splitPaneSize = e.sizes[1];\r\n    }\r\n\r\n    public onSplitGutterDragEnd(e: { gutterNum: number; sizes: Array<number> }): void {\r\n        this.gutterColor = GutterColor.default;\r\n        this.splitPaneSize = e.sizes[1];\r\n    }\r\n\r\n    public onSplitGutterClick(e: { gutterNum: number; sizes: Array<number> }): void {\r\n        this.gutterColor = GutterColor.default;\r\n        this._gutterClickEventResolver.onClick(e);\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        this.messagingService.closeChannel(LfSplitPaneChannels.AddSplitPaneArea);\r\n        this.messagingService.closeChannel(LfSplitPaneChannels.RemoveSplitPaneArea);\r\n        if (this.messagingService.channelExist(LfSplitPaneChannels.SplitPaneVisible)) {\r\n            this.messagingService.closeChannel(LfSplitPaneChannels.SplitPaneVisible);\r\n        }\r\n        if (this.messagingService.channelExist(LfSplitPaneChannels.SplitPaneHidden)) {\r\n            this.messagingService.closeChannel(LfSplitPaneChannels.SplitPaneHidden);\r\n        }\r\n\r\n        this.saveSplitPaneState();\r\n    }\r\n\r\n    protected getErrorItemMessage(areaId: string): string {\r\n        return this._splitPaneContainerMessagesMapper.getMessage(areaId);\r\n    }\r\n\r\n    protected abstract getErrorItemDialogTitle(): string;\r\n\r\n    protected abstract createSplitPaneArea(areaId: string): SplitPaneArea;\r\n\r\n    protected handleSplitGutterClick(e: { gutterNum: number; sizes: Array<number> }): void {\r\n        const SplitPaneMinimizedSize = 0.5;\r\n        if (this.splitterVisible) {\r\n            this.splitterMinimized = !this.splitterMinimized;\r\n            this.splitPaneSize = this.splitterMinimized ? SplitPaneMinimizedSize : this.splitPaneInitialSize;\r\n            this.setContainerAreasSize(this.splitPaneSize);\r\n            this.containerAreasInfo.right.size = this.splitPaneSize;\r\n        }\r\n    }\r\n\r\n    protected handleSplitGutterDoubleClick(e: { gutterNum: number; sizes: Array<number> }): void {}\r\n\r\n    protected abstract getContainerAreasInfo(): SplitAreasInfo;\r\n\r\n    protected abstract setContainerAreasSize(splitPaneSize: number): void;\r\n\r\n    protected abstract get splitPaneInitialSize(): number;\r\n\r\n    protected abstract getSplitAreaType(areaId: string): string;\r\n\r\n    // State management\r\n    protected abstract get splitPaneStateValueKey(): string;\r\n\r\n    private createStateValueAccessor(tabStateManager: TabStateManager): void {\r\n        this._splitPaneStateValueAccessor = new TabStateValueAccessor<SplitPaneStateData>(\r\n            tabStateManager,\r\n            this.splitPaneStateValueKey\r\n        );\r\n    }\r\n\r\n    private saveSplitPaneState(): void {\r\n        if (this.splitterVisible) {\r\n            const splitPaneStateData = new SplitPaneStateData();\r\n            splitPaneStateData.splitPaneSize = this.splitPaneSize;\r\n            splitPaneStateData.splitPaneAreas = this.splitPaneAreas;\r\n            this._splitPaneStateValueAccessor.setValue(splitPaneStateData);\r\n        }\r\n    }\r\n\r\n    private restoreSplitPaneState(splitPaneStateData: SplitPaneStateData): void {\r\n        this.splitPaneSize = splitPaneStateData.splitPaneSize;\r\n        this.setContainerAreasSize(this.splitPaneSize);\r\n        this.splitPaneAreas = splitPaneStateData.splitPaneAreas;\r\n        this.setContainerSplitVisible(this.splitPaneAreas.length > 0);\r\n    }\r\n\r\n    private initSubscribers(): void {\r\n        this.subscriptionTracker.track(\r\n            this.messagingService.subscribe(LfSplitPaneChannels.AddSplitPaneArea, (value: SplitPaneAreaData) => {\r\n                if (this.addSplitArea(value)) {\r\n                    this.publishSplitPaneVisibleMessage();\r\n                }\r\n            })\r\n        );\r\n\r\n        this.subscriptionTracker.track(\r\n            this.messagingService.subscribe(LfSplitPaneChannels.RemoveSplitPaneArea, splitPaneResult => {\r\n                this.removeSplitArea(splitPaneResult);\r\n                this.publishSplitPaneHiddenMessage();\r\n            })\r\n        );\r\n    }\r\n\r\n    private publishSplitPaneVisibleMessage(): void {\r\n        if (this.isSplitPaneVisible()) {\r\n            this.messagingService.publish(LfSplitPaneChannels.SplitPaneVisible);\r\n        }\r\n    }\r\n\r\n    private publishSplitPaneHiddenMessage(): void {\r\n        if (this.isSplitPaneHidden()) {\r\n            this.messagingService.publish(LfSplitPaneChannels.SplitPaneHidden);\r\n        }\r\n    }\r\n\r\n    private isSplitPaneVisible(): boolean {\r\n        return this.splitPaneAreas.length === 1;\r\n    }\r\n\r\n    private isSplitPaneHidden(): boolean {\r\n        return this.splitPaneAreas.length === 0;\r\n    }\r\n\r\n    private splitPaneTypeAlreadyExists(areaId: string): boolean {\r\n        const areaType = this.getSplitAreaType(areaId);\r\n        return this.splitPane && this.splitPane.hasSplitArea(areaId, areaType);\r\n    }\r\n\r\n    private showSplitAreaExistMessage(areaId: string): void {\r\n        this._confirmDialog.open({\r\n            message: this.getErrorItemMessage(areaId),\r\n            title: this.getErrorItemDialogTitle(),\r\n            buttons: [new DialogButton({ type: DialogButtonType.OK })]\r\n        });\r\n    }\r\n\r\n    private initContainerAreas(): void {\r\n        this.splitPaneSize = this.splitPaneInitialSize;\r\n        this.containerAreasInfo = this.getContainerAreasInfo();\r\n        this.setContainerAreasSize(this.splitPaneInitialSize);\r\n    }\r\n\r\n    private initClickEventResolver(): void {\r\n        this._gutterClickEventResolver = new ClickEventResolver(\r\n            event => this.handleSplitGutterClick(event),\r\n            event => this.handleSplitGutterClick(event)\r\n        );\r\n    }\r\n\r\n    private showSplitter(): void {\r\n        this.setContainerSplitVisible(true);\r\n    }\r\n    private hideSplitter(): void {\r\n        this.setContainerSplitVisible(false);\r\n    }\r\n\r\n    private setContainerSplitVisible(visible: boolean): void {\r\n        if (visible) {\r\n            this.splitterVisible = true;\r\n            this.splitContainerClass = 'tab-split-container';\r\n        } else {\r\n            this.splitterVisible = false;\r\n            this.splitContainerClass = 'tab-no-split-container';\r\n        }\r\n    }\r\n}\r\n","﻿import { Injector } from '@angular/core';\r\n\r\nimport { ViewModel, ValidationRenderType, ViewValidationResult } from 'life-core/view-model';\r\nimport {\r\n    CardDialog,\r\n    CardDialogParams,\r\n    CardDialogResult,\r\n    DialogData,\r\n    ICardDialogViewModel,\r\n    DialogResult\r\n} from 'life-core/component/dialog';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { MessagingService } from 'life-core/messaging';\r\nimport { TabStateManager, TabStateValueAccessor } from 'life-core/util/tab-state';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { SplitPaneArea } from '../lf-split-pane.model';\r\nimport { LfSplitPaneChannels } from '../lf-split-pane-channels';\r\n\r\nexport abstract class SplitPaneDialogViewModel extends ViewModel implements ICompose {\r\n    public dialogData: DialogData;\r\n\r\n    protected abstract cardDialog: CardDialog;\r\n    protected i18n: I18n;\r\n\r\n    protected splitArea: SplitPaneArea;\r\n    protected messagingService: MessagingService;\r\n    protected tabStateManager: TabStateManager;\r\n    protected stateValueAccessor: TabStateValueAccessor<any>;\r\n    private _dialogClosing: boolean = false;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.messagingService = injector.get(MessagingService);\r\n        this.tabStateManager = injector.get(TabStateManager);\r\n        this.stateValueAccessor = this.createStateValueAccessor();\r\n    }\r\n\r\n    public ngAfterContentInit(): void {\r\n        super.ngAfterContentInit();\r\n        this.cardDialog.open(this.getDialogParams()).then(_ => {\r\n            this.setupCardDialogData();\r\n            this.dialogData = this.cardDialog.data;\r\n        });\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        this.splitArea = model as SplitPaneArea;\r\n    }\r\n\r\n    public getDialogComponent<TComp>(): TComp {\r\n        return this.cardDialog.getContentComponent<TComp>();\r\n    }\r\n\r\n    public validate(validationRenderType?: ValidationRenderType): Promise<ViewValidationResult> {\r\n        return this.getDialogComponent<ViewModel>().validate(validationRenderType);\r\n    }\r\n\r\n    public onDialogDismiss(e: Event): void {\r\n        this.closeDialog();\r\n    }\r\n\r\n    protected closeDialog(dialogResult?: CardDialogResult): void {\r\n        this.cardDialog.close();\r\n        this._dialogClosing = true;\r\n        this.messagingService.publish(\r\n            LfSplitPaneChannels.RemoveSplitPaneArea,\r\n            new SplitPaneResult(this.splitArea.id, dialogResult)\r\n        );\r\n    }\r\n\r\n    protected onCardDialogButtonClick(dialogResult: CardDialogResult): void {\r\n        if (dialogResult.closeDialog) {\r\n            this.closeDialog(dialogResult);\r\n        }\r\n    }\r\n\r\n    protected abstract getDialogParams(): CardDialogParams;\r\n\r\n    protected onCardDialogOkClick(dialogResult: DialogResult): void {}\r\n\r\n    private setupCardDialogData(): void {\r\n        const stateData = this.stateValueAccessor.getValue();\r\n        if (stateData) {\r\n            this.restoreState(stateData);\r\n        } else {\r\n            this.initCardDialogData();\r\n        }\r\n    }\r\n\r\n    private initCardDialogData(): void {\r\n        this.getDialogComponent<ICardDialogViewModel>().initData();\r\n    }\r\n\r\n    // State Management\r\n\r\n    protected abstract getStateValueKey(): string;\r\n\r\n    private createStateValueAccessor(): TabStateValueAccessor<any> {\r\n        return new TabStateValueAccessor<any>(this.tabStateManager, this.getStateValueKey());\r\n    }\r\n\r\n    private saveState(): void {\r\n        this.stateValueAccessor.setValue(this.getDialogComponent<ICardDialogViewModel>().getState());\r\n    }\r\n\r\n    private restoreState(stateData: any): void {\r\n        this.getDialogComponent<ICardDialogViewModel>().setState(stateData);\r\n    }\r\n\r\n    private deleteState(): void {\r\n        this.stateValueAccessor.deleteValue();\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        if (this._dialogClosing) {\r\n            this.deleteState();\r\n        } else {\r\n            this.saveState();\r\n        }\r\n        super.ngOnDestroy();\r\n    }\r\n}\r\n\r\nexport class SplitPaneResult {\r\n    public areaId: string;\r\n    public dialogResult: DialogResult;\r\n\r\n    constructor(areaId: string, dialogResult: DialogResult) {\r\n        this.areaId = areaId;\r\n        this.dialogResult = dialogResult;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class EmailUtil {\r\n    public sendEmail(receiver: string, subject: string, body: string): void {\r\n        window.open(`mailto:${receiver}&subject=${subject}&body=${body}`, '_self');\r\n    }\r\n}\r\n","﻿export * from './email.util';\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\r\nimport { NavigationTarget, INavigationSequence } from 'ls-core/model/auto-navigation';\r\n\r\n/**\r\n * AutoNavigation Manager is responsible for:\r\n *  - registering/un registering with auto navigation channel;\r\n *  - going through navigation steps within auto navigation sequence;\r\n *\r\n */\r\n@Injectable()\r\nexport class AutoNavigationManager {\r\n    private _messagingService: IMessagingService;\r\n\r\n    constructor(messagingService: MessagingService) {\r\n        this._messagingService = messagingService;\r\n    }\r\n\r\n    /**\r\n     * Registers navigator with auto navigation channel\r\n     * @param callBack\r\n     *\r\n     */\r\n    public registerWithNavigationChannel(channelId: string, callBack: any): void {\r\n        this._messagingService.subscribeOnce(channelId, callBack);\r\n    }\r\n\r\n    /**\r\n     * Un registers navigator with auto navigation channel\r\n     * @param callBack\r\n     *\r\n     */\r\n    public unregisterWithNavigationChannel(channelId: string): void {\r\n        this._messagingService.closeChannel(channelId);\r\n    }\r\n\r\n    /**\r\n     * Runs next navigation step from the auto-navigation sequence\r\n     * by updating sequence and re-publishing it for the next navigation target.\r\n     * This method may need to be called before the next target's mediator is instantiated,\r\n     * so the mediator is notified with already updated navigation sequence.\r\n     * @param sequence\r\n     * @param processedNavigationTarget\r\n     * @param channelId channelId for next navigation target or\r\n     * channelId of previous navigation target which needs to be closed\r\n     *\r\n     */\r\n    public continueNavigation(\r\n        sequence: INavigationSequence,\r\n        processedNavigationTarget: NavigationTarget,\r\n        channelId: string\r\n    ): void {\r\n        sequence.removeNavigationTarget(processedNavigationTarget);\r\n        // close previous navigation channel\r\n        if (sequence.length === 0) {\r\n            this.unregisterWithNavigationChannel(channelId);\r\n        } else if (sequence.length > 0) {\r\n            this._messagingService.publish(channelId, sequence.clone());\r\n        }\r\n    }\r\n}\r\n","import { INavigationSequence, NavigationTarget, NavigationTargetTypes } from 'ls-core/model/auto-navigation';\r\n\r\n// for future use\r\n\r\nexport class AutoNavigationProcessor {\r\n    constructor() {}\r\n\r\n    public navigationSequenceProcessor(sequence: INavigationSequence): void {\r\n        const target = sequence.getNextNavigationTarget();\r\n        if (target) {\r\n            switch (target.targetType) {\r\n                case NavigationTargetTypes.Tab: {\r\n                    this.processTabNavigationTarget(target);\r\n                    break;\r\n                }\r\n                case NavigationTargetTypes.SubTab: {\r\n                    this.processSubTabNavigationTarget(target);\r\n                    break;\r\n                }\r\n                case NavigationTargetTypes.Popup: {\r\n                    this.processPopupNavigationTarget(target);\r\n                    break;\r\n                }\r\n                case NavigationTargetTypes.Route: {\r\n                    this.processRouteNavigationTarget(target);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private processTabNavigationTarget(target: NavigationTarget): void {\r\n        // TODO\r\n    }\r\n    private processSubTabNavigationTarget(target: NavigationTarget): void {\r\n        // TODO\r\n    }\r\n    private processPopupNavigationTarget(target: NavigationTarget): void {\r\n        // TODO\r\n    }\r\n    private processRouteNavigationTarget(target: NavigationTarget): void {\r\n        // TODO\r\n    }\r\n}\r\n","export * from './auto-navigation.interface';\r\nexport * from './auto-navigation-manager';\r\nexport * from './navigation-sequence-factory';\r\nexport * from './navigation-sequence-type';\r\nexport * from './auto-navigation-processor';\r\n","import { INavigationSequence, NavigationTarget, NavigationTargetTypes } from 'ls-core/model/auto-navigation';\r\nimport { RequirementProxy, ReferralProxyDTO } from 'ls-core/model';\r\nimport { NavigationSequence } from 'ls-core/model/auto-navigation/navigation-sequence';\r\n\r\nimport { NavigationSequenceType } from './navigation-sequence-type';\r\n\r\nconst NavigatorID = {\r\n    PolicyTab: 'PolicyTab',\r\n    Requirements: 'Requirements',\r\n    Mib: 'MIB'\r\n};\r\n\r\nfunction createNavigationTarget(\r\n    navigatorId: string,\r\n    targetType: NavigationTargetTypes = NavigationTargetTypes.Tab\r\n): NavigationTarget {\r\n    const navigationTarget = new NavigationTarget();\r\n    navigationTarget.navigatorId = navigatorId;\r\n    navigationTarget.targetType = targetType;\r\n    return navigationTarget;\r\n}\r\n\r\nfunction createNavigationSequenceForNotesAndMessages(target: any): INavigationSequence {\r\n    const navigationSequence: INavigationSequence = new NavigationSequence();\r\n    navigationSequence.addNavigationTarget(createNavigationTarget(NavigatorID.PolicyTab));\r\n    return navigationSequence;\r\n}\r\n\r\nfunction createNavigationSequenceForRequirements(target: any): INavigationSequence {\r\n    const requirement: RequirementProxy = target as RequirementProxy;\r\n    const navigationSequence: INavigationSequence = new NavigationSequence();\r\n    const navigationTarget = createNavigationTarget(NavigatorID.Requirements, NavigationTargetTypes.CollectionItem);\r\n    navigationTarget.addParam(NavigationTarget.PARAM_PERSON_ID, requirement.PolicyPersonId);\r\n    navigationTarget.addParam(NavigationTarget.PARAM_COLLECTION_ITEM_ID, requirement.InsuredRequirementId.toString());\r\n    navigationSequence.addNavigationTarget(navigationTarget);\r\n\r\n    return navigationSequence;\r\n}\r\n\r\nfunction createNavigationSequenceForNotes(target: any): INavigationSequence {\r\n    const note: ReferralProxyDTO = target as ReferralProxyDTO;\r\n    const navigationSequence: INavigationSequence = new NavigationSequence();\r\n    const navigationTarget = createNavigationTarget(NavigatorID.PolicyTab, NavigationTargetTypes.CollectionItem);\r\n    navigationTarget.addParam(NavigationTarget.PARAM_TARGET_ID, note.NoteId);\r\n    navigationSequence.addNavigationTarget(navigationTarget);\r\n\r\n    return navigationSequence;\r\n}\r\n\r\nfunction createNavigationSequenceForMIBEvidence(target: any): INavigationSequence {\r\n    const navigationSequence: INavigationSequence = new NavigationSequence();\r\n    const navigationTarget = createNavigationTarget(NavigatorID.Mib);\r\n    navigationTarget.addParam(NavigationTarget.PARAM_TARGET_ID, 'tabMIB');\r\n    navigationSequence.addNavigationTarget(navigationTarget);\r\n    return navigationSequence;\r\n}\r\n\r\nconst NavigationSequenceMap = {\r\n    [NavigationSequenceType.NOTES]: createNavigationSequenceForNotes,\r\n    [NavigationSequenceType.REQUIREMENTS]: createNavigationSequenceForRequirements,\r\n    [NavigationSequenceType.MIB]: createNavigationSequenceForMIBEvidence,\r\n    [NavigationSequenceType.REVIEW_MESSAGES]: createNavigationSequenceForNotesAndMessages\r\n};\r\n\r\nexport class NavigationSequenceFactory {\r\n    constructor() {}\r\n\r\n    public static getNavigationSequence(target: any, sequenceType: string): INavigationSequence {\r\n        const navigationSequenceCreationHandler = NavigationSequenceMap[sequenceType];\r\n        return navigationSequenceCreationHandler(target);\r\n    }\r\n}\r\n","export enum NavigationSequenceType {\r\n    NOTES = 'notes',\r\n    REQUIREMENTS = 'requirements',\r\n    REVIEW_MESSAGES = 'reviewMessages',\r\n    MIB = 'mib'\r\n}\r\n","export * from './navigation-sequence.interface';\r\nexport * from './navigation-sequence';\r\nexport * from './navigation-target';\r\n","import { INavigationSequence } from './navigation-sequence.interface';\r\nimport { NavigationTarget } from './navigation-target';\r\n\r\nexport class NavigationSequence implements INavigationSequence {\r\n    private _navigationTargets: NavigationTarget[];\r\n\r\n    constructor() {\r\n        this._navigationTargets = [];\r\n    }\r\n\r\n    public addNavigationTarget(item: NavigationTarget): NavigationTarget {\r\n        this._navigationTargets.push(item);\r\n        return item;\r\n    }\r\n\r\n    /**\r\n     * Returns clone of navigation sequence\r\n     * @return cloned NavigationSequence object\r\n     *\r\n     */\r\n    public clone(): INavigationSequence {\r\n        const sequence = new NavigationSequence();\r\n        sequence._navigationTargets = [...this._navigationTargets];\r\n        return sequence;\r\n    }\r\n\r\n    /**\r\n     * Returns next navigation target from the navigation sequence\r\n     * @return navigation target\r\n     *\r\n     */\r\n    public getNextNavigationTarget(): NavigationTarget {\r\n        return this._navigationTargets.length > 0 ? this._navigationTargets[0] : null;\r\n    }\r\n\r\n    /**\r\n     * Length of navigation sequence\r\n     * @return length value\r\n     *\r\n     */\r\n    public get length(): number {\r\n        return this._navigationTargets.length;\r\n    }\r\n\r\n    /**\r\n     * Removes navigation target from navigation sequence\r\n     * @param item - navigation target object to remove\r\n     *\r\n     */\r\n    public removeNavigationTarget(item: NavigationTarget): void {\r\n        const removeIndex = this._navigationTargets.findIndex(target => target.navigatorId === item.navigatorId);\r\n        this._navigationTargets.splice(removeIndex, 1);\r\n    }\r\n}\r\n","/**\r\n * NavigationTarget defines a single navigation step in auto-navigation sequence\r\n *\r\n */\r\nexport class NavigationTarget {\r\n    public static PARAM_TARGET_ID: string = 'targetId';\r\n    public static PARAM_PERSON_ID: string = 'personId';\r\n    public static PARAM_COLLECTION_ITEM_ID: string = 'collectionItemId';\r\n\r\n    private _navigatorId: string;\r\n    private _targetType: string;\r\n    private _params: Map<string, string>;\r\n\r\n    constructor() {\r\n        this._params = new Map();\r\n    }\r\n\r\n    /**\r\n     * Id of the class implementing navigation step\r\n     * described in this navigation target\r\n     * @return class Id\r\n     *\r\n     */\r\n    public get navigatorId(): string {\r\n        return this._navigatorId;\r\n    }\r\n\r\n    public set navigatorId(value: string) {\r\n        this._navigatorId = value;\r\n    }\r\n\r\n    /**\r\n     * Type of the navigation target: Tab, SubTab, Popup, etc.\r\n     * @return\r\n     *\r\n     */\r\n    public get targetType(): string {\r\n        return this._targetType;\r\n    }\r\n\r\n    public set targetType(value: string) {\r\n        this._targetType = value;\r\n    }\r\n\r\n    /**\r\n     * Adds parameter to the collection describing navigation target\r\n     * @param key\r\n     * @param value\r\n     * @return boolean value indicating whether parameter was added successfully\r\n     *\r\n     */\r\n    public addParam(key: any, value: any): boolean {\r\n        if (key == null || value == null || this._params.has(key)) {\r\n            return false;\r\n        } else {\r\n            this._params.set(key, value);\r\n            return true;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Removes parameter from the collection describing navigation target\r\n     * @param key\r\n     * @return parameter being removed\r\n     *\r\n     */\r\n    public removeParam(key: any): string {\r\n        let value = '';\r\n        if (this._params.has(key)) {\r\n            value = this._params.get(key);\r\n            this._params.delete(key);\r\n        }\r\n        return value;\r\n    }\r\n\r\n    /**\r\n     * Retrieves parameter from the collection describing navigation target\r\n     * @param key\r\n     * @return parameter that corresponds to the provided key\r\n     *\r\n     */\r\n    public getParam(key: any): string {\r\n        let value = '';\r\n        if (this._params.has(key)) {\r\n            value = this._params.get(key);\r\n        }\r\n        return value;\r\n    }\r\n}\r\n\r\nexport enum NavigationTargetTypes {\r\n    Tab = 'targetTypeTab',\r\n    SubTab = 'targetTypeSubTab',\r\n    Popup = 'targetTypePopup',\r\n    CollectionItem = 'targetTypeCollectionItem',\r\n    Route = 'targetTypeRoute'\r\n}\r\n"],"sourceRoot":""}