{"version":3,"sources":["webpack:///./src/lifesuite-app/business/policy/applicant/add-applicant/add-applicant-birthdate-validator.ts","webpack:///./src/lifesuite-app/business/policy/applicant/add-applicant/add-applicant-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/add-applicant/add-applicant-listdata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/add-applicant/add-applicant.component.css","webpack:///./src/lifesuite-app/business/policy/applicant/add-applicant/add-applicant.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/add-applicant/add-applicant.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/add-applicant/add-applicant.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/add-applicant/index.ts","webpack:///./src/lifesuite-app/business/policy/applicant/applicant-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/applicant/applicant-channel.ts","webpack:///./src/lifesuite-app/business/policy/applicant/applicant-detail/applicant-detail.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/applicant-detail/applicant-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/applicant-info-data.initializer.ts","webpack:///./src/lifesuite-app/business/policy/applicant/applicant-info-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/applicant-info-list-data.initializer.ts","webpack:///./src/lifesuite-app/business/policy/applicant/applicant-info-list-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/applicant-info.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/applicant-info.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/applicant-meta-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/applicant.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/add-coverage/add-coverage-listdata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/add-coverage/add-coverage.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/add-coverage/add-coverage.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/add-coverage/add-coverage.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/add-coverage/index.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/applicant-coverages.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/applicant-coverages.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/applicant-coverages.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/applicant-coverage-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/applicant-coverage.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/applicant-coverage.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/applicant-coverage.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/beneficiary-grid-column.builder.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/beneficiary-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/beneficiary.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/beneficiary.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/beneficiary.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/beneficiary.util.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/beneficiary-detail-editor.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/beneficiary-detail-editor.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/beneficiary-dialog-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/beneficiary-dialog-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/index.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/type/beneficiary-type.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/type/company/beneficiary-company.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/type/company/beneficiary-company.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/type/estate/beneficiary-estate.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/type/estate/beneficiary-estate.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/type/index.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/type/partnership/beneficiary-partnership.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/type/partnership/beneficiary-partnership.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/type/person/beneficiary-person.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/beneficiary/detail/type/person/beneficiary-person.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/add-benefit/add-benefit-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/add-benefit/add-benefit-listdata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/add-benefit/add-benefit.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/add-benefit/add-benefit.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/add-benefit/add-benefit.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/add-benefit/index.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-component.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-info.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-info.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-list.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-list.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-party/benefit-party-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-party/benefit-party-item.factory.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-party/benefit-party.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-party/benefit-party.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-party/benefit-party.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-party/detail/benefit-party-detail-editor.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-party/detail/benefit-party-detail-editor.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit-party/detail/benefit-party-listdata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/benefit/benefit.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/funds/detail/funds-list-detail-editor.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/funds/detail/funds-list-detail-editor.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/funds/detail/funds-list-dialog-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/funds/funds-list-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/funds/funds-list-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/funds/funds-list.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/funds/funds-list.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/funds/funds-list.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverage/index.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/coverages-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/form/applicant-coverages-fields.loader.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/form/index.ts","webpack:///./src/lifesuite-app/business/policy/applicant/coverages/form/plan-applicant-coverage-form-fields.ts","webpack:///./src/lifesuite-app/business/policy/applicant/family-history/detail/family-history-detail-editor.html","webpack:///./src/lifesuite-app/business/policy/applicant/family-history/detail/family-history-detail-editor.ts","webpack:///./src/lifesuite-app/business/policy/applicant/family-history/detail/family-history-dialog-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/family-history/family-history-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/applicant/family-history/family-history-grid-column.builder.ts","webpack:///./src/lifesuite-app/business/policy/applicant/family-history/family-history-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/applicant/family-history/family-history.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/family-history/family-history.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/family-history/family-history.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/financial-data/applicant-financial-data.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/financial-data/applicant-financial-data.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/financial-data/applicant-financial-data.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/forms/applicant-forms-grid-column.builder.ts","webpack:///./src/lifesuite-app/business/policy/applicant/forms/applicant-forms-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/applicant/forms/applicant-forms-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/forms/applicant-forms.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/forms/applicant-forms.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/forms/applicant-forms.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/forms/detail/applicant-forms-dialog-detail-editor.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/forms/detail/applicant-forms-dialog-detail-editor.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/information/applicant-action/applicant-action-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/applicant/information/applicant-action/applicant-action.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/information/applicant-action/applicant-action.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/information/applicant-information-header.builder.ts","webpack:///./src/lifesuite-app/business/policy/applicant/information/applicant-information.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/information/applicant-information.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/information/applicant-information.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/information/birthdate-validator.delegate.ts","webpack:///./src/lifesuite-app/business/policy/applicant/other-insurance-cases/detail/other-insurance-cases-detail-editor.html","webpack:///./src/lifesuite-app/business/policy/applicant/other-insurance-cases/detail/other-insurance-cases-detail-editor.ts","webpack:///./src/lifesuite-app/business/policy/applicant/other-insurance-cases/detail/other-insurance-cases-dialog-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/other-insurance-cases/other-insurance-cases-grid-column.builder.ts","webpack:///./src/lifesuite-app/business/policy/applicant/other-insurance-cases/other-insurance-cases-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/applicant/other-insurance-cases/other-insurance-cases.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/other-insurance-cases/other-insurance-cases.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/other-insurance-cases/other-insurance-cases.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/personal-information/applicant-personal-info.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/personal-information/applicant-personal-info.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/personal-information/applicant-personal-info.module.ts","webpack:///./src/lifesuite-app/business/policy/applicant/physician-information/detail/physician-information-detail-editor.html","webpack:///./src/lifesuite-app/business/policy/applicant/physician-information/detail/physician-information-detail-editor.ts","webpack:///./src/lifesuite-app/business/policy/applicant/physician-information/detail/physician-information-dialog-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/physician-information/detail/physician-information-dialog-meta-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/applicant/physician-information/physician-information-grid-column.builder.ts","webpack:///./src/lifesuite-app/business/policy/applicant/physician-information/physician-information-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/applicant/physician-information/physician-information.component.html","webpack:///./src/lifesuite-app/business/policy/applicant/physician-information/physician-information.component.ts","webpack:///./src/lifesuite-app/business/policy/applicant/physician-information/physician-information.module.ts","webpack:///./src/lifesuite-app/business/policy/case-log/case-log-view-data-keys.ts","webpack:///./src/lifesuite-app/business/policy/case-log/case-log.component.html","webpack:///./src/lifesuite-app/business/policy/case-log/case-log.component.ts","webpack:///./src/lifesuite-app/business/policy/case-log/case-log.module.ts","webpack:///./src/lifesuite-app/business/policy/case-log/datasource/case-log-list-grid-datasource.ts","webpack:///./src/lifesuite-app/business/policy/case-log/datasource/log-entry-paged-request.service.ts","webpack:///./src/lifesuite-app/business/policy/case-log/filter/case-log-filter.component.html","webpack:///./src/lifesuite-app/business/policy/case-log/filter/case-log-filter.component.ts","webpack:///./src/lifesuite-app/business/policy/case-log/filter/case-log-filter.model.ts","webpack:///./src/lifesuite-app/business/policy/case-log/filter/case-log-filter.service.ts","webpack:///./src/lifesuite-app/business/policy/case-log/filter/case-log-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/case-log/list/case-log-list-column.builder.ts","webpack:///./src/lifesuite-app/business/policy/case-log/list/case-log-list.component.html","webpack:///./src/lifesuite-app/business/policy/case-log/list/case-log-list.component.ts","webpack:///./src/lifesuite-app/business/policy/case/agency/agency-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/case/agency/agency-info.component.html","webpack:///./src/lifesuite-app/business/policy/case/agency/agency-info.component.ts","webpack:///./src/lifesuite-app/business/policy/case/agency/agency.component.html","webpack:///./src/lifesuite-app/business/policy/case/agency/agency.component.ts","webpack:///./src/lifesuite-app/business/policy/case/agency/agency.module.ts","webpack:///./src/lifesuite-app/business/policy/case/agent/agent-component-resolver.helper.ts","webpack:///./src/lifesuite-app/business/policy/case/agent/agent-info.component.html","webpack:///./src/lifesuite-app/business/policy/case/agent/agent-info.component.ts","webpack:///./src/lifesuite-app/business/policy/case/agent/agent-list.component.css","webpack:///./src/lifesuite-app/business/policy/case/agent/agent-list.component.html","webpack:///./src/lifesuite-app/business/policy/case/agent/agent-list.component.ts","webpack:///./src/lifesuite-app/business/policy/case/agent/agent-service/agent.service.ts","webpack:///./src/lifesuite-app/business/policy/case/agent/agent-service/index.ts","webpack:///./src/lifesuite-app/business/policy/case/agent/agent.module.ts","webpack:///./src/lifesuite-app/business/policy/case/agent/type/agent-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/case/agent/type/agent-person.component.html","webpack:///./src/lifesuite-app/business/policy/case/agent/type/agent-person.component.ts","webpack:///./src/lifesuite-app/business/policy/case/agent/type/agent-type.component.ts","webpack:///./src/lifesuite-app/business/policy/case/agent/type/index.ts","webpack:///./src/lifesuite-app/business/policy/case/association/case-association-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/case/association/case-association-info.component.html","webpack:///./src/lifesuite-app/business/policy/case/association/case-association-info.component.ts","webpack:///./src/lifesuite-app/business/policy/case/association/case-association.component.html","webpack:///./src/lifesuite-app/business/policy/case/association/case-association.component.ts","webpack:///./src/lifesuite-app/business/policy/case/association/case-association.module.ts","webpack:///./src/lifesuite-app/business/policy/case/case-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/case/case-info.component.html","webpack:///./src/lifesuite-app/business/policy/case/case-info.component.ts","webpack:///./src/lifesuite-app/business/policy/case/case-list-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/case/case-meta-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/case/case.module.ts","webpack:///./src/lifesuite-app/business/policy/case/distribution/case-distribution.component.html","webpack:///./src/lifesuite-app/business/policy/case/distribution/case-distribution.component.ts","webpack:///./src/lifesuite-app/business/policy/case/distribution/case-distribution.module.ts","webpack:///./src/lifesuite-app/business/policy/case/employer/case-employer-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/case/employer/case-employer.component.html","webpack:///./src/lifesuite-app/business/policy/case/employer/case-employer.component.ts","webpack:///./src/lifesuite-app/business/policy/case/employer/case-employer.module.ts","webpack:///./src/lifesuite-app/business/policy/case/employer/info/case-employer-info.component.html","webpack:///./src/lifesuite-app/business/policy/case/employer/info/case-employer-info.component.ts","webpack:///./src/lifesuite-app/business/policy/case/index.ts","webpack:///./src/lifesuite-app/business/policy/case/information/case-info-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/case/information/case-information.component.html","webpack:///./src/lifesuite-app/business/policy/case/information/case-information.component.ts","webpack:///./src/lifesuite-app/business/policy/case/information/case-information.module.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/owner-component-resolver.helper.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/owner-info.component.html","webpack:///./src/lifesuite-app/business/policy/case/owner/owner-info.component.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/owner-list.component.css","webpack:///./src/lifesuite-app/business/policy/case/owner/owner-list.component.html","webpack:///./src/lifesuite-app/business/policy/case/owner/owner-list.component.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/owner.module.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/type/base-owner-type.component.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/type/company/owner-company.component.html","webpack:///./src/lifesuite-app/business/policy/case/owner/type/company/owner-company.component.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/type/estate/owner-estate.component.html","webpack:///./src/lifesuite-app/business/policy/case/owner/type/estate/owner-estate.component.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/type/index.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/type/owner-type.component.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/type/partnership/owner-partnership.component.html","webpack:///./src/lifesuite-app/business/policy/case/owner/type/partnership/owner-partnership.component.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/type/person/owner-person.component.html","webpack:///./src/lifesuite-app/business/policy/case/owner/type/person/owner-person.component.ts","webpack:///./src/lifesuite-app/business/policy/case/owner/type/trust/owner-trust.component.html","webpack:///./src/lifesuite-app/business/policy/case/owner/type/trust/owner-trust.component.ts","webpack:///./src/lifesuite-app/business/policy/case/payment/case-payment.component.html","webpack:///./src/lifesuite-app/business/policy/case/payment/case-payment.component.ts","webpack:///./src/lifesuite-app/business/policy/case/payment/case-payment.module.ts","webpack:///./src/lifesuite-app/business/policy/case/payor/payor-info.component.html","webpack:///./src/lifesuite-app/business/policy/case/payor/payor-info.component.ts","webpack:///./src/lifesuite-app/business/policy/case/payor/payor-list.component.css","webpack:///./src/lifesuite-app/business/policy/case/payor/payor-list.component.html","webpack:///./src/lifesuite-app/business/policy/case/payor/payor-list.component.ts","webpack:///./src/lifesuite-app/business/policy/case/payor/payor.module.ts","webpack:///./src/lifesuite-app/business/policy/case/payor/type/index.ts","webpack:///./src/lifesuite-app/business/policy/case/payor/type/payor-company/payor-company.component.html","webpack:///./src/lifesuite-app/business/policy/case/payor/type/payor-company/payor-company.component.ts","webpack:///./src/lifesuite-app/business/policy/case/payor/type/payor-estate/payor-estate.component.html","webpack:///./src/lifesuite-app/business/policy/case/payor/type/payor-estate/payor-estate.component.ts","webpack:///./src/lifesuite-app/business/policy/case/payor/type/payor-partnership/payor-partnership.component.html","webpack:///./src/lifesuite-app/business/policy/case/payor/type/payor-partnership/payor-partnership.component.ts","webpack:///./src/lifesuite-app/business/policy/case/payor/type/payor-person/payor-person.component.html","webpack:///./src/lifesuite-app/business/policy/case/payor/type/payor-person/payor-person.component.ts","webpack:///./src/lifesuite-app/business/policy/case/payor/type/payor-trust/payor-trust.component.html","webpack:///./src/lifesuite-app/business/policy/case/payor/type/payor-trust/payor-trust.component.ts","webpack:///./src/lifesuite-app/business/policy/case/payor/type/payor-type.component.ts","webpack:///./src/lifesuite-app/business/policy/case/tpa/info/tpa-info.component.html","webpack:///./src/lifesuite-app/business/policy/case/tpa/info/tpa-info.component.ts","webpack:///./src/lifesuite-app/business/policy/case/tpa/tpa-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/case/tpa/tpa.component.html","webpack:///./src/lifesuite-app/business/policy/case/tpa/tpa.component.ts","webpack:///./src/lifesuite-app/business/policy/case/tpa/tpa.module.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/attached-documents/attached-documents-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/attached-documents/attached-documents.component.html","webpack:///./src/lifesuite-app/business/policy/documents/attachments/attached-documents/attached-documents.component.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/attachments-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/case-attachments-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/case-attachments-request.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/case-attachments.channel.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/case-attachments.component.html","webpack:///./src/lifesuite-app/business/policy/documents/attachments/case-attachments.component.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/case-attachments.module.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/case-attachments.resolver.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/documents-for-attachment/documents-for-attachment-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/documents-for-attachment/documents-for-attachment.component.html","webpack:///./src/lifesuite-app/business/policy/documents/attachments/documents-for-attachment/documents-for-attachment.component.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/documents-for-attachment/service-requests/case-documents-for-attachment.service.ts","webpack:///./src/lifesuite-app/business/policy/documents/attachments/index.ts","webpack:///./src/lifesuite-app/business/policy/documents/case-attachments.channel.ts","webpack:///./src/lifesuite-app/business/policy/documents/case-documents.component.html","webpack:///./src/lifesuite-app/business/policy/documents/case-documents.component.ts","webpack:///./src/lifesuite-app/business/policy/documents/case-documents.module.ts","webpack:///./src/lifesuite-app/business/policy/documents/documents-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/documents/index.ts","webpack:///./src/lifesuite-app/business/policy/documents/templates/case-templates-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/documents/templates/case-templates.component.html","webpack:///./src/lifesuite-app/business/policy/documents/templates/case-templates.component.ts","webpack:///./src/lifesuite-app/business/policy/documents/templates/case-templates.module.ts","webpack:///./src/lifesuite-app/business/policy/documents/templates/case-templates.service.ts","webpack:///./src/lifesuite-app/business/policy/documents/templates/index.ts","webpack:///./src/lifesuite-app/business/policy/documents/templates/list/case-template-list-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/documents/templates/list/case-template-list.component.html","webpack:///./src/lifesuite-app/business/policy/documents/templates/list/case-template-list.component.ts","webpack:///./src/lifesuite-app/business/policy/documents/templates/list/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/evidence-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/evidence/evidence-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/evidence-info-data.initializer.ts","webpack:///./src/lifesuite-app/business/policy/evidence/evidence-meta-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/evidence.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/evidence.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/evidence.module.ts","webpack:///./src/lifesuite-app/business/policy/evidence/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/detail/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/detail/lab-comments/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/detail/lab-comments/lab-comment-detail-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/detail/lab-comments/lab-comment-detail.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/lab/detail/lab-comments/lab-comment-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/detail/lab-detail.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/lab/detail/lab-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/detail/lab-results/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/detail/lab-results/lab-result-detail-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/detail/lab-results/lab-result-detail.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/lab/detail/lab-results/lab-result-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/lab-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/lab-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/lab-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/lab-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/lab-tab.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/lab/lab-tab.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/lab.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/lab/lab.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/lab/lab.module.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/add/medical-condition-data-list.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/add/medical-condition-data-list.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/add/medical-condition-detail-creator.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/add/medical-condition-detail-creator.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/add/medication-condition-data-list-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/dependent-inputs.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/edit/medical-condition-detail-editor.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/edit/medical-condition-detail-editor.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/medical-condition-dialog-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/medical-condition-list-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/detail/medical-condition-popup-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/medical-condition-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/medical-condition-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/medical-condition-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/medical-condition-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/medical-condition-meta-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/medical-condition-tab.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/medical-condition-tab.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/medical-condition.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/medical-condition.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/medical-condition.module.ts","webpack:///./src/lifesuite-app/business/policy/evidence/medical-condition/medical-condition.service.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/detail/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/detail/mib-coding-detail.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/detail/mib-coding-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding-submitted-status-type.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding-tab.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding-tab.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding-validation-result-icon.helper.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding-validation-result-type.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/mib-coding.service.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/submitted-codes/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/submitted-codes/mib-submitted-codes-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/submitted-codes/mib-submitted-codes.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-coding/submitted-codes/mib-submitted-codes.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-detail-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/detail/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/detail/item-detail/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/detail/item-detail/mib-report-codes-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/detail/item-detail/mib-report-item-detail.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/detail/item-detail/mib-report-item-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/detail/mib-report-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/detail/mib-report-detail-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/detail/mib-report-detail-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/detail/mib-report-detail.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/detail/mib-report-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/mib-report.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib-report/mib-report.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib.module.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/mib.resources.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/tab/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mib/tab/tabview-mib.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mib/tab/tabview-mib.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/detail/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/detail/mvr-detail.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/detail/mvr-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/detail/violations/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/detail/violations/mvr-detail-violations-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/detail/violations/mvr-detail-violations.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/detail/violations/mvr-detail-violations.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/mvr-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/mvr-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/mvr-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/mvr-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/mvr-tab.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/mvr-tab.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/mvr.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/mvr.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/mvr/mvr.module.ts","webpack:///./src/lifesuite-app/business/policy/evidence/paramedical/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/paramedical/paramedical-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/evidence/paramedical/paramedical-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/paramedical/paramedical.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/paramedical/paramedical.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/paramedical/paramedical.module.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/add/other-drug/detail/other-drug-medication-data-detail.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/add/other-drug/detail/other-drug-medication-data-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/add/other-drug/detail/other-medication-data-detail-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/add/other-drug/other-drug-medication-data-list.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/add/other-drug/other-drug-medication-data-list.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/add/other-medication-data-list-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/add/other-medication-data-list.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/add/other-medication-data-list.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/add/other-medication-detail-creator.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/add/other-medication-detail-creator.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/edit/other-medication-detail-editor.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/edit/other-medication-detail-editor.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/detail/other-medication-dialog-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/rx-detail-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/rx-other-medication-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/rx-other-medication-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/rx-other-medication-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/rx-other-medication-tab.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/rx-other-medication-tab.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/rx-other-medication.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/rx-other-medication.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/rx-other-medication.module.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-other-medication/rx-other-medication.service.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/physician/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/physician/physician-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/physician/physician.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/physician/physician.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/prescription-information/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/prescription-information/prescription-information-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/prescription-information/prescription-information.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/prescription-information/prescription-information.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/rx-detail/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/rx-detail/rx-detail-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/rx-detail/rx-detail.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/rx-detail/rx-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/rx-report-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/rx-report-lazydata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/rx-report-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/rx-report-util.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/rx-report.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-report/rx-report.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-rules/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-rules/rx-rules-summary/rx-rules-summary-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-rules/rx-rules-summary/rx-rules-summary.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-rules/rx-rules-summary/rx-rules-summary.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-rules/rx-rules.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-rules/rx-rules.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-rules/rx-usage/rx-usage-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-rules/rx-usage/rx-usage.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-rules/rx-usage/rx-usage.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-web-buttons/rx-web-buttons.component.css","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-web-buttons/rx-web-buttons.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx-web-buttons/rx-web-buttons.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx.constants.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/rx.module.ts","webpack:///./src/lifesuite-app/business/policy/evidence/rx/tab/tabview-rx.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/rx/tab/tabview-rx.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/tab/tabview-evidence.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/tab/tabview-evidence.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/detail/reasons/velogica-reasons-data-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/detail/reasons/velogica-reasons-data.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/detail/reasons/velogica-reasons-data.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/detail/velogica-detail.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/detail/velogica-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/index.ts","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/velogica-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/velogica-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/velogica-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/velogica-tab.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/velogica-tab.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/velogica.component.html","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/velogica.component.ts","webpack:///./src/lifesuite-app/business/policy/evidence/velogica/velogica.module.ts","webpack:///./src/lifesuite-app/business/policy/note/index.ts","webpack:///./src/lifesuite-app/business/policy/note/view-notes/index.ts","webpack:///./src/lifesuite-app/business/policy/policy-routing.module.ts","webpack:///./src/lifesuite-app/business/policy/policy.module.ts","webpack:///./src/lifesuite-app/business/policy/related-cases/index.ts","webpack:///./src/lifesuite-app/business/policy/related-cases/related-cases-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/related-cases/related-cases-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/related-cases/related-cases.component.html","webpack:///./src/lifesuite-app/business/policy/related-cases/related-cases.component.ts","webpack:///./src/lifesuite-app/business/policy/related-cases/related-cases.module.ts","webpack:///./src/lifesuite-app/business/policy/requirements/create-requirement-detail.html","webpack:///./src/lifesuite-app/business/policy/requirements/create-requirement-detail.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/authorization/basic-info-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/index.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/index.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-list/index.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-list/medical-provider-list-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-list/medical-provider-list.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-list/medical-provider-list.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-search.component.css","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-search.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-search.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-types/facility-name/index.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-types/facility-name/physician-facility-name.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-types/facility-name/physician-facility-name.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-types/index.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-types/physician-facility/index.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-types/physician-facility/physician-facility.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-types/physician-facility/physician-facility.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-types/physician-name/index.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-types/physician-name/physician-name.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-types/physician-name/physician-name.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider-types/physician-types.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-provider.service.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/medical-provider-search/medical-search-meta-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/requirement-detail-basic-info.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/detail/requirement-detail-basic-info.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/requirement-detail-context.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/requirement-detail-providers-info-meta-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/requirement-detail-providers-info.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/detail/requirement-detail-providers-info.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/requirements-tab.channels.ts","webpack:///./src/lifesuite-app/business/policy/requirements/detail/tab/tab-view-requirement-detail.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/detail/tab/tab-view-requirement-detail.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/history/evidence-status-list/evidence-status-list-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/requirements/history/evidence-status-list/evidence-status-list.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/history/evidence-status-list/evidence-status-list.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/history/evidence-status-list/index.ts","webpack:///./src/lifesuite-app/business/policy/requirements/history/index.ts","webpack:///./src/lifesuite-app/business/policy/requirements/history/requirement-history-meta-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/requirements/history/requirement-history.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/history/requirement-history.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/index.ts","webpack:///./src/lifesuite-app/business/policy/requirements/match/datasource/requirement-match-grid-datasource.ts","webpack:///./src/lifesuite-app/business/policy/requirements/match/index.ts","webpack:///./src/lifesuite-app/business/policy/requirements/match/requirement-filter.model.ts","webpack:///./src/lifesuite-app/business/policy/requirements/match/requirement-match-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/requirements/match/requirement-match-unmatch.type.ts","webpack:///./src/lifesuite-app/business/policy/requirements/match/requirement-match.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/match/requirement-match.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirement-constants.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirement-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirement-deactivate.guard.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirement-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirement-icon.helper.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirement-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirement-list-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirement-meta-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirement.component.html","webpack:///./src/lifesuite-app/business/policy/requirements/requirement.component.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirement.module.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirement.type.ts","webpack:///./src/lifesuite-app/business/policy/requirements/requirements-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/requirements/save-match-requirement-data.delegate.ts","webpack:///./src/lifesuite-app/business/policy/requirements/save-unmatch-requirement-data.delegate.ts","webpack:///./src/lifesuite-app/business/policy/scratch-pad/scratch-pad.module.ts","webpack:///./src/lifesuite-app/business/policy/shared/coverage-dynamic-form/base-coverage-form-fields.loader.ts","webpack:///./src/lifesuite-app/business/policy/shared/coverage-dynamic-form/coverage-form-data.builder.ts","webpack:///./src/lifesuite-app/business/policy/shared/coverage-dynamic-form/index.ts","webpack:///./src/lifesuite-app/business/policy/shared/coverage-dynamic-form/plan-coverage-form-fields.ts","webpack:///./src/lifesuite-app/business/policy/shared/master-detail/base-policy-dialog-detail.vm.ts","webpack:///./src/lifesuite-app/business/policy/shared/master-detail/index.ts","webpack:///./src/lifesuite-app/business/policy/shared/primary-coverage.util.ts","webpack:///./src/lifesuite-app/business/policy/shared/validator/agent-signed-date-validator.ts","webpack:///./src/lifesuite-app/business/policy/shared/validator/application-received-date-validator.ts","webpack:///./src/lifesuite-app/business/policy/tab/services/underwriter.service.ts","webpack:///./src/lifesuite-app/business/policy/tab/split-container/ls-split-container-messages.mapper.ts","webpack:///./src/lifesuite-app/business/policy/tab/split-container/tab-policy-split-container.component.html","webpack:///./src/lifesuite-app/business/policy/tab/split-container/tab-policy-split-container.component.scss","webpack:///./src/lifesuite-app/business/policy/tab/split-container/tab-policy-split-container.component.ts","webpack:///./src/lifesuite-app/business/policy/tab/tab-policy.component.html","webpack:///./src/lifesuite-app/business/policy/tab/tab-policy.component.ts","webpack:///./src/lifesuite-app/business/policy/tab/tab-policy.module.ts","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/delegates/index.ts","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/delegates/open-case-log-view.delegate.ts","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/delegates/open-help.delegate.ts","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/delegates/open-view-notes.delegate.ts","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/delegates/underwrite-case.delegate.ts","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/delegates/validation-button.delegate.ts","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/policy-toolbar-button-action.ts","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/policy-toolbar-button-type.ts","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/policy-toolbar.component.css","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/policy-toolbar.component.html","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/policy-toolbar.component.ts","webpack:///./src/lifesuite-app/business/policy/tab/toolbar/policy-toolbar.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/benefit.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/benefit.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/case-disp-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/case-disp-listdata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/case-disp-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/case-disp.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/case-disp.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/case-disp.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/change-disp/base-change-disposition.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/change-disp/change-disposition-listdata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/change-disp/change-disposition.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/change-disp/change-disposition.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/change-disp/index.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/amendment/amendment-grid-column.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/amendment/amendment-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/amendment/amendment.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/amendment/amendment.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/amendment/amendment.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/amendment/detail/amendment-detail-editor.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/amendment/detail/amendment-detail-editor.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/amendment/detail/amendment-dialog-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/benefit/benefit-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/benefit/benefit-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/benefit/benefit.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/benefit/benefit.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/benefit/benefit.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/benefit/detail/benefit-detail-editor.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/benefit/detail/benefit-detail-editor.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/benefit/detail/benefit-dialog-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/change-coverage-disp/change-coverage-disposition-listdata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/change-coverage-disp/change-coverage-disposition.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/change-coverage-disp/change-coverage-disposition.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/change-coverage-disp/coverage-validation/coverage-validation-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/change-coverage-disp/coverage-validation/coverage-validation-icon.helper.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/change-coverage-disp/coverage-validation/coverage-validation.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/change-coverage-disp/coverage-validation/coverage-validation.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/change-coverage-disp/coverage-validation/validation-message.type.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/change-coverage-disp/index.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/coverage-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/form/index.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/form/plan-worksheet-coverage-form-fields.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/form/worksheet-coverage-form-fields.loader.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/impairment/detail/impairment-detail-editor.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/impairment/detail/impairment-detail-editor.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/impairment/detail/impairment-dialog-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/impairment/impairment-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/impairment/impairment-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/impairment/impairment.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/impairment/impairment.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/impairment/impairment.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reinsurer/detail/reinsurer-detail-editor.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reinsurer/detail/reinsurer-detail-editor.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reinsurer/detail/reinsurer-dialog-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reinsurer/detail/reinsurer-dialog-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reinsurer/reinsurer-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reinsurer/reinsurer-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reinsurer/reinsurer.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reinsurer/reinsurer.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reinsurer/reinsurer.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reopen-coverage/index.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reopen-coverage/reopen-coverage-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reopen-coverage/reopen-coverage.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reopen-coverage/reopen-coverage.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/reopen-coverage/reopen-coverage.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/worksheet-coverage.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/worksheet-coverage.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/coverage/worksheet-coverage.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/index.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/insured/insured-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/insured/insured-header.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/insured/insured.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/insured/insured.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/case-disp/policy-approval-authorization.delegate.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/base-debit-credit-grid-view-model.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/coronary-tests/coronary-tests-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/coronary-tests/coronary-tests.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/coronary-tests/coronary-tests.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/debit-credit-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/debit-credit-channels.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/debit-credit-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/debit-credit-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/debit-credit.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/debit-credit.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/debit-credit.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/index.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/other-risks/detail/other-risks-detail-editor.html","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/other-risks/detail/other-risks-detail-editor.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/other-risks/detail/other-risks-dialog-metadata.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/other-risks/other-risk-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/other-risks/other-risks-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/other-risks/other-risks-item-factory.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/other-risks/other-risks.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/other-risks/other-risks.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/other-risks/other-risks.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/medical-condition/medical-condition-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/medical-condition/medical-condition.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/medical-condition/medical-condition.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/medication/medication-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/medication/medication.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/medication/medication.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/risk-factor/risk-factor-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/risk-factor/risk-factor.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/risk-factor/risk-factor.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/system-generated.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/system-generated.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/system-generated/system-generated.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/user-generated/medical-condition/medical-condition-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/user-generated/medical-condition/medical-condition.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/user-generated/medical-condition/medical-condition.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/user-generated/medication/medication-grid-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/user-generated/medication/medication.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/user-generated/medication/medication.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/user-generated/user-generated.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/user-generated/user-generated.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/debit-credit/user-generated/user-generated.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/review-messages/review-message-data-context.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/review-messages/review-message-icon.helper.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/review-messages/review-messages-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/review-messages/review-messages-data.resolver.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/review-messages/review-messages-list-columns.builder.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/review-messages/review-messages.component.css","webpack:///./src/lifesuite-app/business/policy/worksheet/review-messages/review-messages.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/review-messages/review-messages.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/review-messages/review-messages.module.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/tab-worksheet-data-keys.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/tab/tabview-worksheet.component.html","webpack:///./src/lifesuite-app/business/policy/worksheet/tab/tabview-worksheet.component.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/tab/wosksheet-authorization.provider.ts","webpack:///./src/lifesuite-app/business/policy/worksheet/worksheet.module.ts","webpack:///./src/lifesuite-app/business/shared/master-detail/index.ts","webpack:///./src/lifesuite-app/business/shared/toolbar/index.ts","webpack:///./src/lifesuite-app/business/shared/toolbar/popover-dialog-params.map.ts","webpack:///./src/lifesuite-app/business/shared/toolbar/toolbar-button-action.ts","webpack:///./src/lifesuite-app/business/shared/toolbar/toolbar-button-type.ts","webpack:///./src/lifesuite-app/business/shared/toolbar/toolbar-setup.delegate.ts","webpack:///./src/lifesuite-app/business/shared/toolbar/toolbar-type.ts","webpack:///./src/lifesuite-app/business/shared/toolbar/toolbar.service.ts","webpack:///./src/lifesuite-app/life-core/component/optional-section/index.ts","webpack:///./src/lifesuite-app/life-core/component/optional-section/view-model/optional-section-detail.vm.ts","webpack:///./src/lifesuite-app/life-core/component/optional-section/view-model/optional-section.rc.ts","webpack:///./src/lifesuite-app/life-core/component/optional-section/view-model/optional-section.vm.ts","webpack:///./src/lifesuite-app/life-core/data-management/cancelable-data-manager.ts","webpack:///./src/lifesuite-app/life-core/data-management/index.ts","webpack:///./src/lifesuite-app/life-core/util/regex/lf-regular-expressions.ts","webpack:///./src/lifesuite-app/life-core/view-model/validation/input-value/index.ts","webpack:///./src/lifesuite-app/life-core/view-model/validation/input-value/input-value-validator.interface.ts","webpack:///./src/lifesuite-app/ls-core/component/master-detail/index.ts","webpack:///./src/lifesuite-app/ls-core/component/master-detail/manager/base-dto-item.factory.ts"],"names":[],"mappings":"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","file":"business-policy-policy-module.js","sourcesContent":["import { Injectable } from '@angular/core';\r\n\r\nimport { CompareResult } from 'life-core/util/lang';\r\nimport { InputValueValidationResult, InputValueValidator } from 'life-core/view-model/validation/input-value';\r\n\r\nimport { DBDate } from 'ls-core/model';\r\nimport { DBDateUtil } from 'ls-core/util';\r\nimport { AppSession } from 'ls-core/session';\r\n\r\n@Injectable()\r\nexport class AddApplicantBirthDateValidator implements InputValueValidator {\r\n    private _appSession: AppSession;\r\n\r\n    constructor(appSession: AppSession) {\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    public validate(applicantBirthDate: DBDate): InputValueValidationResult {\r\n        return this.isBirthDateValid(applicantBirthDate)\r\n            ? InputValueValidationResult.pass\r\n            : InputValueValidationResult.fail;\r\n    }\r\n\r\n    private isBirthDateValid(applicantBirthDate: DBDate): boolean {\r\n        return (\r\n            this.isApplicationReceivedDateValid(applicantBirthDate) && this.isAgentSignedDateValid(applicantBirthDate)\r\n        );\r\n    }\r\n\r\n    private isApplicationReceivedDateValid(applicantBirthDate: DBDate): boolean {\r\n        return (\r\n            DBDateUtil.compareDates(this._appSession.policyDTO.ReceiveDate, applicantBirthDate) ===\r\n            CompareResult.greater\r\n        );\r\n    }\r\n\r\n    private isAgentSignedDateValid(applicantBirthDate: DBDate): boolean {\r\n        return (\r\n            !this.agentSignedDateExists() ||\r\n            DBDateUtil.compareDates(this._appSession.policyDTO.AgentSignedDate, applicantBirthDate) ===\r\n                CompareResult.greater\r\n        );\r\n    }\r\n\r\n    private agentSignedDateExists(): boolean {\r\n        return DBDateUtil.isDateSet(this._appSession.policyDTO.AgentSignedDate);\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n// import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { DataCollectionNames, InsuredDTO, PolicyDTO } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { AppSession } from 'ls-core/session';\r\n\r\nimport { ApplicantListHelper, BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class AddApplicantDataResolver extends BasePolicyDataResolver {\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession, applicantListHelper: ApplicantListHelper) {\r\n        super(injector);\r\n        this._applicantListHelper = applicantListHelper;\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const policy = this._appSession.policyDTO;\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.getActiveApplicant(policy), DataCollectionNames.Applications);\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n\r\n    private getActiveApplicant(policy: PolicyDTO): InsuredDTO {\r\n        return this._applicantListHelper.getActiveApplicantOrDefault(policy.Insureds_LazyLoad);\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { InsuredDTO, CoverageDTO, PolicyDTO } from 'ls-core/model';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\nimport { ListsDataRequest, ListDataRequestBuilder } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\n\r\nimport { ApplicantListHelper } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class AddApplicantListDataResolver extends BaseListDataResolver {\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession, applicantListHelper: ApplicantListHelper) {\r\n        super(injector);\r\n        this._applicantListHelper = applicantListHelper;\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const applicant = ObjectUtil.createObjectOfType<InsuredDTO>(\r\n            this.getActiveApplicant(),\r\n            InsuredDTO\r\n        ) as InsuredDTO;\r\n        const coverage = ObjectUtil.createObjectOfType<CoverageDTO>(\r\n            applicant.Coverages_LazyLoad[0],\r\n            CoverageDTO\r\n        ) as CoverageDTO;\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this.policy);\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'Title');\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'Suffix');\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'Sex');\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'RelationshipToInsured');\r\n        listDataRequestBuilder.addListRequestItem(coverage, 'PlanCodeId');\r\n\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n\r\n    private getActiveApplicant(): InsuredDTO {\r\n        return this._applicantListHelper.getActiveApplicantOrDefault(this.policy.Insureds_LazyLoad) as InsuredDTO;\r\n    }\r\n\r\n    private get policy(): PolicyDTO {\r\n        return this._appSession.policyDTO;\r\n    }\r\n}\r\n","module.exports = \".lf-page-subheader {\\r\\n    font-size: 0.85rem;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS9hcHBsaWNhbnQvYWRkLWFwcGxpY2FudC9hZGQtYXBwbGljYW50LmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxtQkFBbUI7Q0FDdEIiLCJmaWxlIjoic3JjL2xpZmVzdWl0ZS1hcHAvYnVzaW5lc3MvcG9saWN5L2FwcGxpY2FudC9hZGQtYXBwbGljYW50L2FkZC1hcHBsaWNhbnQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi5sZi1wYWdlLXN1YmhlYWRlciB7XHJcbiAgICBmb250LXNpemU6IDAuODVyZW07XHJcbn1cclxuIl19 */\"","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"lf-page-subheader\\\" i18n=\\\"@@applicant.popup.label.coverage\\\">Coverage</div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Product\\\" i18n-label=\\\"@@applicant.popup.label.product\\\" [control]=\\\"product\\\">\\r\\n                <lf-select #product name=\\\"product\\\" [(ngModel)]=\\\"policyCoverage.PlanCodeId\\\" [items]=\\\"resolvedData.listData?.PlanCodeId | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    secureComponent style=\\\"width:250px\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Face Amount\\\" i18n-label=\\\"@@applicant.popup.label.faceamount\\\" [control]=\\\"faceAmount\\\">\\r\\n                <lf-inputnumber #faceAmount name=\\\"faceAmount\\\" [(ngModel)]=\\\"policyCoverage.Amount\\\" [allowNegative]=\\\"false\\\"\\r\\n                    [maxLength]=\\\"10\\\" secureComponent required></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <br />\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"lf-page-subheader\\\" i18n=\\\"@@applicant.popup.label.applicant\\\">Applicant</div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Title\\\" i18n-label=\\\"@@applicant.popup.label.title\\\" [control]=\\\"title\\\">\\r\\n                <lf-select #title name=\\\"title\\\" [(ngModel)]=\\\"applicant.Title\\\" [items]=\\\"resolvedData.listData?.Title | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"First Name\\\" i18n-label=\\\"@@applicant.popup.label.firstname\\\" [control]=\\\"firstName\\\">\\r\\n                <lf-inputtext #firstName name=\\\"firstName\\\" [(ngModel)]=\\\"applicant.FirstName\\\" maxLength=\\\"20\\\"\\r\\n                    secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Middle Name\\\" i18n-label=\\\"@@applicant.popup.label.middlename\\\" [control]=\\\"middleName\\\">\\r\\n                <lf-inputtext #middleName name=\\\"middleName\\\" [(ngModel)]=\\\"applicant.MiddleName\\\" maxLength=\\\"20\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Last Name\\\" i18n-label=\\\"@@applicant.popup.label.lastname\\\" [control]=\\\"lastName\\\">\\r\\n                <lf-inputtext #lastName name=\\\"lastName\\\" [(ngModel)]=\\\"applicant.LastName\\\" maxLength=\\\"50\\\" secureComponent\\r\\n                    required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Suffix\\\" i18n-label=\\\"@@applicant.popup.label.suffix\\\" [control]=\\\"suffix\\\">\\r\\n                <lf-select #suffix name=\\\"suffix\\\" [(ngModel)]=\\\"applicant.Suffix\\\" [items]=\\\"resolvedData.listData?.Suffix | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Birth Date\\\" i18n-label=\\\"@@applicant.popup.label.birthdate\\\" [control]=\\\"birthDate\\\">\\r\\n                <ls-inputdatecrypted #birthDate name=\\\"birthDate\\\" [(ngModel)]=\\\"applicant.BirthDate\\\" [maxDate]=\\\"maxBirthDate\\\"\\r\\n                    (ngModelChange)=\\\"onApplicantBirthDateChange()\\\" secureComponent container=\\\"dialog\\\" required></ls-inputdatecrypted>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Gender\\\" i18n-label=\\\"@@applicant.popup.label.gender\\\" [control]=\\\"gender\\\">\\r\\n                <lf-select #gender name=\\\"gender\\\" [(ngModel)]=\\\"applicant.Sex\\\" [items]=\\\"resolvedData.listData?.Sex | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    required secureComponent style=\\\"width:150px\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Relation\\\" i18n-label=\\\"@@applicant.popup.label.relation\\\" [control]=\\\"relation\\\">\\r\\n                <lf-select #relation name=\\\"relation\\\" [(ngModel)]=\\\"applicant.RelationshipToInsured\\\" [items]=\\\"resolvedData.listData?.RelationshipToInsured | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    secureComponent style=\\\"width:150px\\\" container=\\\"dialog\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Medical Authorization\\\" i18n-label=\\\"@@applicant.popup.label.medicalauth\\\" [control]=\\\"medicalAuthorization\\\">\\r\\n                <lf-radiobuttongroup #medicalAuthorization name=\\\"medicalAuthorization\\\" [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].MedicalAuthorizationFlag\\\"\\r\\n                    secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"medicalAuthorization\\\" value=1 label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"medicalAuthorization\\\" value=0 label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","﻿import { Component, Injector, Injectable } from '@angular/core';\r\n\r\nimport { ViewModel, ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { IDialogViewModel, DialogData, DialogButtonType } from 'life-core/component/dialog';\r\nimport { DialogViewModelResult, ConfirmDialog, DialogResult, DialogButton } from 'life-core/component';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { InputValueValidationResult } from 'life-core/view-model/validation/input-value/input-value-validator.interface';\r\n\r\nimport { DataServiceParams, DataService, UIServiceNames, UIServiceMethods } from 'ls-core/service';\r\nimport { PolicyDTO, InsuredDTO, ApplicationInfoDTO, DataCollectionNames, DBDate } from 'ls-core/model';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { PolicyCoverageDTO } from 'ls-core/model/dto/policy-coverage.dto';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { ExpandTreeType } from 'ls-core/service/lazy-load';\r\nimport { DBDateUtil } from 'ls-core/util';\r\n\r\nimport { ApplicantAuthorizationProvider } from 'business/policy/applicant/applicant-authorization.provider';\r\nimport { AddApplicantBirthDateValidator } from 'business/policy/applicant/add-applicant/add-applicant-birthdate-validator';\r\n\r\n\r\n@Component({\r\n    selector: 'add-applicant.component',\r\n    templateUrl: './add-applicant.component.html',\r\n    styleUrls: ['./add-applicant.component.css'],\r\n    providers: [\r\n        ParentChildRegistry,\r\n        { provide: AuthorizationProvider, useClass: ApplicantAuthorizationProvider },\r\n        AddApplicantBirthDateValidator\r\n    ]\r\n})\r\n@Injectable()\r\nexport class AddApplicantComponent extends ViewModel implements ICompose, IDialogViewModel {\r\n    public resolvedData: any;\r\n    public applicant: InsuredDTO;\r\n    public policyCoverage: PolicyCoverageDTO;\r\n    public maxBirthDate: Date;\r\n    private _dataService: DataService;\r\n    private _appSession: AppSession;\r\n    private _policy: PolicyDTO;\r\n    private _addApplicantBirthDateValidator: AddApplicantBirthDateValidator;\r\n    private _confirmDialog: ConfirmDialog;\r\n    constructor(\r\n        injector: Injector,\r\n        appSession: AppSession,\r\n        i18n: I18n,\r\n        dataService: DataService,\r\n        addApplicantBirthDateValidator: AddApplicantBirthDateValidator,\r\n        confirmDialog: ConfirmDialog\r\n    ) {\r\n        super(injector);\r\n        this._dataService = dataService;\r\n        this._appSession = appSession;\r\n        this._policy = this._appSession.policyDTO;\r\n        this.applicant = new InsuredDTO();\r\n        this.policyCoverage = new PolicyCoverageDTO();\r\n        this.maxBirthDate = this.setBirthDateLimit();\r\n        this.i18n = i18n;\r\n        this._addApplicantBirthDateValidator = addApplicantBirthDateValidator;\r\n        this._confirmDialog = confirmDialog;\r\n    }\r\n\r\n    public setModel(model: DialogData): void {\r\n        this.resolvedData = model.resolvedData;\r\n    }\r\n\r\n    public ngOnInit(): void {\r\n        super.ngOnInit();\r\n        const application = new ApplicationInfoDTO();\r\n        this.applicant.Applications_LazyLoad = [application];\r\n    }\r\n\r\n    public onApplicantBirthDateChange(): void {\r\n        if (\r\n            this.applicantBirthDateExists() &&\r\n            this._addApplicantBirthDateValidator.validate(this.applicant.BirthDate) === InputValueValidationResult.fail\r\n        ) {\r\n            this.showValidationMsgDialog().then(() => {\r\n                this.resetBirthDate();\r\n            });\r\n        }\r\n    }\r\n\r\n    private applicantBirthDateExists(): boolean {\r\n        return DBDateUtil.isDateSet(this.applicant.BirthDate);\r\n    }\r\n\r\n    private showValidationMsgDialog(): Promise<DialogResult> {\r\n        return this._confirmDialog.open({\r\n            message: this.i18n({\r\n                value: 'Birth date cannot be greater than Application Received Date or Agent Signed Date.',\r\n                id: 'policy.applicantinfo.dialog.datevalidation.message'\r\n            }),\r\n            title: this.i18n({ value: 'Validation message', id: 'policy.applicantinfo.dialog.datevalidation.title' }),\r\n            buttons: [new DialogButton({ type: DialogButtonType.OK })]\r\n        });\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId == DialogButtonType.ACCEPT) {\r\n            return this.validate().then(result => {\r\n                if (result == ViewValidationResult.pass) {\r\n                    return this.addApplicantAndCoverage().then(addApplicantAndCoverageResponse => {\r\n                        return new DialogViewModelResult({\r\n                            newApplicantId: addApplicantAndCoverageResponse.insuredPersonId,\r\n                            updatedPolicy: addApplicantAndCoverageResponse.policyDTO\r\n                        });\r\n                    });\r\n                } else {\r\n                    return new DialogViewModelResult(null, false);\r\n                }\r\n            });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    private resetBirthDate(): void {\r\n        this.applicant.BirthDate = null;\r\n    }\r\n\r\n    private addApplicantAndCoverage(): Promise<NewInsuredAndCoverageResponse> {\r\n        this.setAdditionalData();\r\n        const serviceParams: DataServiceParams = this.getAddApplicantAndCoverageServiceParams();\r\n        return this._dataService.getData(serviceParams).then(response => {\r\n            return response.responsePayload as NewInsuredAndCoverageResponse;\r\n        });\r\n    }\r\n\r\n    private setAdditionalData(): void {\r\n        // needed as its mentioned in flex code\r\n        this.policyCoverage.ApprovedAmount = this.policyCoverage.Amount;\r\n    }\r\n\r\n    private getAddApplicantAndCoverageServiceParams(): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.ADD_APPLICANT_AND_COVERAGE_SERVICE,\r\n            serviceMethod: UIServiceMethods.ADD_APPLICANT_AND_COVERAGE_METHOD,\r\n            requestPayload: this.getAddApplicantAndCoverageServicePayload()\r\n        });\r\n    }\r\n\r\n    private getAddApplicantAndCoverageServicePayload(): NewInsuredAndCoverageRequest {\r\n        const request = new NewInsuredAndCoverageRequest();\r\n        request.policyID = Number(this._policy.PolicyId);\r\n        request.insuredDTO = this.applicant;\r\n        request.policyCoverageDTO = this.policyCoverage;\r\n        request.expandTree = this.getExpandTree();\r\n        return request;\r\n    }\r\n\r\n    private setBirthDateLimit(): Date {\r\n        const today = new Date().getDate();\r\n        const currentMonth = new Date().getMonth();\r\n        const currentYear = new Date().getFullYear();\r\n        return new Date(currentYear, currentMonth, today - 1);\r\n    }\r\n\r\n    protected getExpandTree(): ExpandTreeType {\r\n        const policyDTOLoadTree = new NTree<string>('Policy');\r\n        {\r\n            const insuredDTOLoadTree = policyDTOLoadTree.AddChild(DataCollectionNames.Insureds);\r\n            {\r\n                const coveragesNode = insuredDTOLoadTree.AddChildren([DataCollectionNames.Coverages]);\r\n            }\r\n            // adding below lazyloaded collections to policy since it's needed by policyquickinfo panel.\r\n            const agentDTOLoadTree = policyDTOLoadTree.AddChild(DataCollectionNames.Agents);\r\n            {\r\n                const phonesNode = agentDTOLoadTree.AddChildren([DataCollectionNames.Phones]);\r\n            }\r\n            const agencyDTOLoadTree = policyDTOLoadTree.AddChild(DataCollectionNames.Agencies);\r\n            const requirementsDTOLoadTree = policyDTOLoadTree.AddChild(DataCollectionNames.Requirements);\r\n            // adding below lazyloaded collections since it's needed for Benefits section\r\n            const coveragesDTOLoadTree = policyDTOLoadTree.AddChild(DataCollectionNames.PolicyCoverages);\r\n            {\r\n                const benefitsNode = coveragesDTOLoadTree.AddChild(DataCollectionNames.Benefits);\r\n            }\r\n        }\r\n        return policyDTOLoadTree;\r\n    }\r\n}\r\n\r\nexport class NewInsuredAndCoverageRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.NewInsuredAndCoverageRequest, LifeSuite.UIServiceDTO';\r\n\r\n    public policyID: number;\r\n    public insuredDTO: InsuredDTO;\r\n    public policyCoverageDTO: PolicyCoverageDTO;\r\n    public expandTree: NTree<string>;\r\n}\r\n\r\nexport class NewInsuredAndCoverageResponse {\r\n    public readonly $type: string =\r\n        'life.ls.ui.ria.dto.responses.NewInsuredAndCoverageResponse, LifeSuite.UIServiceDTO';\r\n\r\n    public policyDTO: PolicyDTO;\r\n    public insuredPersonId: any;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { AddApplicantComponent } from './add-applicant.component';\r\nimport { AddApplicantDataResolver } from './add-applicant-data.resolver';\r\nimport { AddApplicantListDataResolver } from './add-applicant-listdata.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [AddApplicantComponent],\r\n    exports: [AddApplicantComponent],\r\n    entryComponents: [AddApplicantComponent],\r\n    providers: [AddApplicantListDataResolver, AddApplicantDataResolver]\r\n})\r\nexport class AddApplicantModule {}\r\n","﻿export * from './add-applicant-listdata.resolver';\r\nexport * from './add-applicant-data.resolver';\r\nexport * from './add-applicant.component';\r\nexport * from './add-applicant.module';","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService, AuthorizationLevel } from 'life-core/authorization';\r\n\r\nimport { PrivilegeObjectType, SubsystemType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class ApplicantAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const defaultAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.CASE]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = defaultAuthorizationLevel;\r\n\r\n        if (defaultAuthorizationLevel < AuthorizationLevel.EDIT) {\r\n            this.authorizationData.componentLevel['addApplicantButton'] = AuthorizationLevel.VIEW;\r\n        }\r\n    }\r\n}\r\n","export const ApplicantChannel = {\r\n    ApplicantNameChange: 'applicant-name-changed'\r\n};\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <applicant-information></applicant-information>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <ls-applicant-coverages></ls-applicant-coverages>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <applicant-personal-info></applicant-personal-info>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <applicant-financial-data></applicant-financial-data>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <physician-information></physician-information>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <family-history></family-history>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <other-insurance-cases></other-insurance-cases>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <applicant-forms></applicant-forms>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector, Injectable } from '@angular/core';\n\nimport { ViewModel } from 'life-core/view-model';\n\n@Component({\n    selector: 'applicant-detail',\n    templateUrl: './applicant-detail.component.html'\n})\n@Injectable()\nexport class ApplicantDetailComponent extends ViewModel {\n    constructor(injector: Injector) {\n        super(injector);\n    }\n}\n","import { InsuredDTO } from 'ls-core/model/dto/insured.dto';\r\nimport { LsRadioButtonValues } from 'ls-core/component/input/radiobutton/ls-radiobutton-values';\r\n\r\nexport class ApplicantInfoDataInitializer {\r\n    private _applicant: InsuredDTO;\r\n\r\n    constructor(applicant: InsuredDTO) {\r\n        this._applicant = applicant;\r\n    }\r\n\r\n    public initializeData(): void {\r\n        this._applicant.Applications_LazyLoad[0].HippaAuthorizationFlag =\r\n            this._applicant.Applications_LazyLoad[0].HippaAuthorizationFlag || LsRadioButtonValues.UNDEFINED_NUMBER;\r\n\r\n        this._applicant.Applications_LazyLoad[0].AirmilesFlag =\r\n            this._applicant.Applications_LazyLoad[0].AirmilesFlag || LsRadioButtonValues.UNDEFINED_NUMBER;\r\n\r\n        this._applicant.Applications_LazyLoad[0].MedicalAuthorizationFlag =\r\n            this._applicant.Applications_LazyLoad[0].MedicalAuthorizationFlag || LsRadioButtonValues.UNDEFINED_NUMBER;\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { DataCollectionNames, CoverageDTO, InsuredDTO } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\n\r\nimport { BasePolicyDataResolver, ApplicantListHelper } from 'business/policy/shared';\r\nimport { ApplicantCoveragesFieldsLoader } from './coverages/form';\r\nimport { ApplicantInfoDataInitializer } from 'business/policy/applicant/applicant-info-data.initializer';\r\n\r\n@Injectable()\r\nexport class ApplicantInfoDataResolver extends BasePolicyDataResolver {\r\n    private _applicantCoveragesFieldsLoader: ApplicantCoveragesFieldsLoader;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        applicantListHelper: ApplicantListHelper,\r\n        applicantCoveragesFieldsLoader: ApplicantCoveragesFieldsLoader\r\n    ) {\r\n        super(injector);\r\n        this._applicantCoveragesFieldsLoader = applicantCoveragesFieldsLoader;\r\n        this._applicantListHelper = applicantListHelper;\r\n    }\r\n\r\n    protected resolveData(route?: ActivatedRouteSnapshot, state?: RouterStateSnapshot): Promise<any> {\r\n        return super.resolveData(route, state);\r\n    }\r\n\r\n    protected resolveAdditionalData(): Promise<any> {\r\n        return super.resolveAdditionalData().then(result => {\r\n            return this.loadFormFields().then(_ => {\r\n                this.initData();\r\n                return Promise.resolve(this.resolvedData);\r\n            });\r\n        });\r\n    }\r\n\r\n    private initData(): void {\r\n        if (this.resolvedData && this.resolvedData.Insureds_LazyLoad) {\r\n            const applicantInfoDataInitializer = new ApplicantInfoDataInitializer(this.getActiveApplicant());\r\n            applicantInfoDataInitializer.initializeData();\r\n        }\r\n    }\r\n\r\n    private getActiveApplicant(): InsuredDTO {\r\n        return this._applicantListHelper.getActiveApplicantOrDefault(this.resolvedData.Insureds_LazyLoad);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getLazyLoadTree());\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.PolicyCoverages, this.getCoverageLazyLoadTree());\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Requirements, this.getRequirementLazyLoadTree());\r\n        return this.lazyDataLoader.batchLoad(request);\r\n    }\r\n\r\n    private getLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            insuredDTOLoadTree.AddChildren([\r\n                DataCollectionNames.Addresses,\r\n                DataCollectionNames.Phones,\r\n                DataCollectionNames.RelatedPolicies,\r\n                DataCollectionNames.Medication,\r\n                DataCollectionNames.MedicalConditions\r\n            ]);\r\n            const coveragesNode = insuredDTOLoadTree.AddChild(DataCollectionNames.Coverages);\r\n            {\r\n                coveragesNode.AddChildren([\r\n                    DataCollectionNames.ImpairmentRestrictions,\r\n                    DataCollectionNames.Amendments,\r\n                    DataCollectionNames.Reinsurers,\r\n                    DataCollectionNames.WorksheetRows,\r\n                    DataCollectionNames.Beneficiaries,\r\n                    DataCollectionNames.FundAllocations\r\n                ]);\r\n            }\r\n            const applicationsNode = insuredDTOLoadTree.AddChild(DataCollectionNames.Applications);\r\n            {\r\n                applicationsNode.AddChildren([DataCollectionNames.TobaccoUses, DataCollectionNames.FamilyHistories]);\r\n            }\r\n            const partyRelationsNode = insuredDTOLoadTree.AddChild(DataCollectionNames.Relations);\r\n            {\r\n                partyRelationsNode.AddChildren([DataCollectionNames.Addresses, DataCollectionNames.Phones]);\r\n            }\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n\r\n    private getCoverageLazyLoadTree(): NTree<string> {\r\n        const coveragesDTOLoadTree = new NTree<string>(DataCollectionNames.PolicyCoverages);\r\n        {\r\n            const benefitsNode = coveragesDTOLoadTree.AddChild(DataCollectionNames.Benefits);\r\n            {\r\n                benefitsNode.AddChildren([DataCollectionNames.BenefitParties]);\r\n            }\r\n        }\r\n        return coveragesDTOLoadTree;\r\n    }\r\n\r\n    private loadFormFields(): Promise<void> {\r\n        return this._applicantCoveragesFieldsLoader.load(this.getAllInsuredCoverages(), this.policy);\r\n    }\r\n\r\n    private getAllInsuredCoverages(): Array<CoverageDTO> {\r\n        const coverages: Array<CoverageDTO> = [];\r\n        this.policy.Insureds_LazyLoad.forEach(insured => {\r\n            coverages.push(...insured.Coverages_LazyLoad);\r\n        });\r\n        return coverages;\r\n    }\r\n\r\n    private getRequirementLazyLoadTree(): NTree<string> {\r\n        const requirementDTOLoadTree = new NTree<string>(DataCollectionNames.Requirements);\r\n        {\r\n            requirementDTOLoadTree.AddChildren([DataCollectionNames.EvidenceStatuses]);\r\n        }\r\n\r\n        return requirementDTOLoadTree;\r\n    }\r\n}\r\n","﻿import {\r\n    AddressDTO,\r\n    AddressTypes,\r\n    PhoneTypes,\r\n    ApplicationInfoDTO,\r\n    TobaccoUseDTO,\r\n    InsuredDTO,\r\n    RelatedPolicyDTO,\r\n    ReviewMessageDTO,\r\n    CoverageDTO,\r\n    NoteDTO,\r\n    MedicalConditionDTO,\r\n    MedicationDTO,\r\n    FamilyHistoryDTO,\r\n    WorksheetRowDTO,\r\n    ImpairmentRestrictionDTO,\r\n    AmendmentDTO,\r\n    ReinsurerDTO\r\n} from 'ls-core/model';\r\nimport { CollectionUtil } from 'life-core/util';\r\nimport { AddressUtil, PhoneUtil } from 'ls-core/util';\r\n\r\nexport class ApplicantInfoListDataInitializer {\r\n    private _applicant: InsuredDTO;\r\n\r\n    constructor(applicant: InsuredDTO) {\r\n        this._applicant = applicant;\r\n    }\r\n\r\n    public initializeData(): void {\r\n        // Follow these rules to decide when to add first element to lazyload collections on Applicant page\r\n        // if collection is empty after lazyload:\r\n        //\r\n        // ADD items to collections requiring at least one item for the screen to show correctly.\r\n        // DO NOT add items to collections which can have 0 elements in them, such as Other Insured and Physician -\r\n        // by default they can be empty.\r\n        AddressUtil.addAddressIfCollectionEmpty(this._applicant.Addresses_LazyLoad, AddressTypes.RESIDENCE);\r\n\r\n        PhoneUtil.addPhoneIfNotFound(this._applicant.Phones_LazyLoad, PhoneTypes.HOME);\r\n        PhoneUtil.addPhoneIfNotFound(this._applicant.Phones_LazyLoad, PhoneTypes.WORK);\r\n        PhoneUtil.addPhoneIfNotFound(this._applicant.Phones_LazyLoad, PhoneTypes.CELL);\r\n\r\n        CollectionUtil.addItemIfCollectionEmpty<ApplicationInfoDTO>(\r\n            this._applicant.Applications_LazyLoad,\r\n            ApplicationInfoDTO\r\n        );\r\n        CollectionUtil.addItemIfCollectionEmpty<TobaccoUseDTO>(\r\n            this._applicant.Applications_LazyLoad[0].TobaccoUses_LazyLoad,\r\n            TobaccoUseDTO\r\n        );\r\n\r\n        this._applicant.Relations_LazyLoad.forEach(relation => {\r\n            AddressUtil.addAddressIfCollectionEmpty(relation.Addresses_LazyLoad, AddressTypes.BUSINESS);\r\n            AddressUtil.addAddressIfNotFound(relation.Addresses_LazyLoad, AddressTypes.BUSINESS);\r\n            PhoneUtil.addPhoneIfNotFound(relation.Phones_LazyLoad, PhoneTypes.BUSINESS);\r\n        });\r\n    }\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport {\r\n    AddressDTO,\r\n    ApplicationInfoDTO,\r\n    TobaccoUseDTO,\r\n    InsuredDTO,\r\n    RelatedPolicyDTO,\r\n    FamilyHistoryDTO,\r\n    BeneficiaryDTO,\r\n    FundAllocationDTO,\r\n    BenefitDTO,\r\n    PolicyDTO\r\n} from 'ls-core/model';\r\nimport { ListDataRequestBuilder, ListsDataRequest, ListDataItem } from 'ls-core/service';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\nimport { ListMap } from 'life-core/model';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\n\r\nimport { ApplicantListHelper } from 'business/policy/shared';\r\nimport { ApplicantInfoListDataInitializer } from './applicant-info-list-data.initializer';\r\n\r\n@Injectable()\r\nexport class ApplicantInfoListDataResolver extends BaseListDataResolver {\r\n    private _appSession: AppSession;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n\r\n    constructor(injector: Injector, appSession: AppSession, applicantListHelper: ApplicantListHelper) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n        this._applicantListHelper = applicantListHelper;\r\n    }\r\n\r\n    protected loadData(): Promise<ListMap<ListDataItem>> {\r\n        this.initListData();\r\n        return super.loadData();\r\n    }\r\n\r\n    private initListData(): void {\r\n        const applicantInfoListInitializer = new ApplicantInfoListDataInitializer(this.getActiveApplicant());\r\n        applicantInfoListInitializer.initializeData();\r\n    }\r\n\r\n    private getActiveApplicant(): InsuredDTO {\r\n        return this._applicantListHelper.getActiveApplicantOrDefault(this.policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const applicant = ObjectUtil.createObjectOfType<InsuredDTO>(\r\n            this.getActiveApplicant(),\r\n            InsuredDTO\r\n        ) as InsuredDTO;\r\n\r\n        const applicationInfo = ObjectUtil.createObjectOfType<ApplicationInfoDTO>(\r\n            applicant.Applications_LazyLoad[0],\r\n            ApplicationInfoDTO\r\n        ) as ApplicationInfoDTO;\r\n\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(applicant);\r\n\r\n        this.addApplicantInformationDataListRequestItems(applicant, applicationInfo, listDataRequestBuilder);\r\n        this.addPersonalInfoDataListRequestItems(applicant, applicationInfo, listDataRequestBuilder);\r\n        this.addFinancialDataListRequestItems(applicationInfo, listDataRequestBuilder);\r\n        this.addPhysicianInformationDataListRequestItems(listDataRequestBuilder);\r\n        this.addOtherInsuranceCasesDataListRequestItems(listDataRequestBuilder);\r\n        this.addFamilyHistoryListRequestItems(listDataRequestBuilder);\r\n        this.addBeneficiaryListRequestItems(listDataRequestBuilder);\r\n        this.addFundsListRequestItems(listDataRequestBuilder);\r\n        this.addBenefitListRequestItems(listDataRequestBuilder);\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n\r\n    // Applicant Info\r\n    private addApplicantInformationDataListRequestItems(\r\n        applicant: InsuredDTO,\r\n        applicationInfo: ApplicationInfoDTO,\r\n        listDataRequestBuilder: ListDataRequestBuilder\r\n    ): void {\r\n        const addressInfo = ObjectUtil.createObjectOfType<AddressDTO>(\r\n            applicant.Addresses_LazyLoad[0],\r\n            AddressDTO\r\n        ) as AddressDTO;\r\n\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'Title');\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'Suffix');\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'preferredPhoneTypeCode');\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'SignedCountryId');\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'SignedStateId');\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'applicantSignatureType');\r\n        listDataRequestBuilder.addListRequestItem(applicationInfo, 'DriversLicenseCountryId');\r\n        listDataRequestBuilder.addListRequestItem(applicationInfo, 'DriversLicenseState');\r\n        listDataRequestBuilder.addListRequestItem(applicationInfo, 'DriversLicenseStatus');\r\n        listDataRequestBuilder.addListRequestItem(addressInfo, 'CountryId');\r\n    }\r\n\r\n    // Coverages\r\n\r\n    // Personal Information\r\n    private addPersonalInfoDataListRequestItems(\r\n        applicant: InsuredDTO,\r\n        applicationInfo: ApplicationInfoDTO,\r\n        listDataRequestBuilder: ListDataRequestBuilder\r\n    ): void {\r\n        const tobaccoUseInfo = ObjectUtil.createObjectOfType<TobaccoUseDTO>(\r\n            applicant.Applications_LazyLoad[0].TobaccoUses_LazyLoad[0],\r\n            TobaccoUseDTO\r\n        ) as TobaccoUseDTO;\r\n\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'Sex');\r\n        listDataRequestBuilder.addListRequestItem(applicant, 'MaritalStatus');\r\n        listDataRequestBuilder.addListRequestItem(tobaccoUseInfo, 'TobaccoUseId');\r\n        listDataRequestBuilder.addListRequestItem(tobaccoUseInfo, 'TobaccoTypeId');\r\n        listDataRequestBuilder.addListRequestItem(applicationInfo, 'CitizenshipType');\r\n        listDataRequestBuilder.addListRequestItem(applicationInfo, 'CitizenshipCountryId');\r\n        listDataRequestBuilder.addListRequestItem(applicationInfo, 'ResidenceCountry');\r\n        listDataRequestBuilder.addListRequestItem(applicationInfo, 'BirthCountry');\r\n        listDataRequestBuilder.addListRequestItem(applicationInfo, 'BirthState');\r\n    }\r\n\r\n    // Financial Data\r\n    private addFinancialDataListRequestItems(\r\n        applicationInfo: ApplicationInfoDTO,\r\n        listDataRequestBuilder: ListDataRequestBuilder\r\n    ): void {\r\n        listDataRequestBuilder.addListRequestItem(applicationInfo, 'BusinessType');\r\n        listDataRequestBuilder.addListRequestItem(applicationInfo, 'Occupation');\r\n    }\r\n\r\n    // Physician Information\r\n    private addPhysicianInformationDataListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        // These _addressInfo lists are already loaded in addApplicantInformationDataListRequestItems().\r\n        // Should this use partyRelation.Addresses_LazyLoad?\r\n        //listDataRequestBuilder.addListRequestItem(this._addressInfo, 'CountryId');\r\n        //listDataRequestBuilder.addListRequestItem(this._addressInfo, 'CountryStateId');\r\n    }\r\n\r\n    //Other Insurance Cases and Policy\r\n    private addOtherInsuranceCasesDataListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        const relatedPolicy: RelatedPolicyDTO = new RelatedPolicyDTO();\r\n        listDataRequestBuilder.addListRequestItem(relatedPolicy, 'Status');\r\n        listDataRequestBuilder.addListRequestItem(relatedPolicy, 'LineOfBusiness');\r\n        listDataRequestBuilder.addListRequestItem(relatedPolicy, 'PurposeOfCoverage');\r\n        listDataRequestBuilder.addListRequestItem(relatedPolicy, 'ReplacementType');\r\n    }\r\n\r\n    private addBenefitListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        const planCodes = new Array();\r\n        this.policy.PolicyCoverages_LazyLoad.forEach(coverage => {\r\n            if (planCodes.indexOf(coverage.PlanCodeId) < 0) {\r\n                planCodes.push(coverage.PlanCodeId);\r\n            }\r\n        });\r\n        let benefit: BenefitDTO;\r\n        planCodes.forEach(code => {\r\n            benefit = new BenefitDTO();\r\n            benefit.Note = code;\r\n            listDataRequestBuilder.setRootDTO(this.policy);\r\n            listDataRequestBuilder.addListRequestItem(benefit, 'BenefitId_' + code);\r\n        });\r\n    }\r\n\r\n    // Familiy History\r\n    public addFamilyHistoryListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        const familyHistoryDTO = new FamilyHistoryDTO();\r\n        listDataRequestBuilder.addListRequestItem(familyHistoryDTO, 'FamhistRelationshipCode');\r\n        listDataRequestBuilder.addListRequestItem(familyHistoryDTO, 'LivingStatus');\r\n    }\r\n    // Other Sections\r\n    //\t...\r\n    public addBeneficiaryListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        const beneficiaryDTO = new BeneficiaryDTO();\r\n        listDataRequestBuilder.addListRequestItem(beneficiaryDTO, 'PersonTypeId');\r\n        listDataRequestBuilder.addListRequestItem(beneficiaryDTO, 'RelationshipToInsuredCode');\r\n        listDataRequestBuilder.addListRequestItem(beneficiaryDTO, 'BeneficiaryType');\r\n    }\r\n\r\n    public addFundsListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        const fundAllocationDTO = new FundAllocationDTO();\r\n        listDataRequestBuilder.addListRequestItem(fundAllocationDTO, 'FundAllocationId');\r\n        listDataRequestBuilder.addListRequestItem(fundAllocationDTO, 'FundCode');\r\n    }\r\n\r\n    private get policy(): PolicyDTO {\r\n        return this._appSession.policyDTO;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-page-header\\\" i18n=\\\"@@mywork.applicantpreview.label.applicantInformation\\\">Applicant Information</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"applicantList\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.applicant.info.applicant\\\">\\r\\n\\t\\t\\t<div class=\\\"form-inline\\\">\\r\\n\\t\\t\\t\\t<!-- Use 'ngModelOption.standalone' to not add this control to NgForm to avoid saving data when applicant selection changes -->\\r\\n\\t\\t\\t\\t<lf-select #applicantList class=\\\"mr-2\\\" [(ngModel)]=\\\"selectedApplicantId\\\" [ngModelOptions]=\\\"{standalone: true}\\\" [items]=\\\"applicantListOptions\\\"\\r\\n\\t\\t\\t\\t (change)=\\\"onApplicantChange()\\\" [clearable]=\\\"false\\\" style=\\\"width:200px\\\" [actionType]=\\\"applicantDropdownActionType\\\"\\r\\n\\t\\t\\t\\t secureComponent></lf-select>&nbsp;\\r\\n\\t\\t\\t\\t<lf-button id=\\\"addApplicantButton\\\" name=\\\"addApplicantButton\\\" label=\\\"Add Applicant\\\" i18n-label=\\\"@@policy.applicant.info.addapplicant\\\"\\r\\n\\t\\t\\t\\t styleClass=\\\"btn btn-primary\\\" (onClick)=\\\"onAddApplicantClick()\\\" [actionType]=\\\"addButtonActionType\\\" secureComponent></lf-button>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<router-outlet></router-outlet>\"","import { Component, Injector, Injectable } from '@angular/core';\r\n\r\nimport { ViewModel, ResolvedDataNames } from 'life-core/view-model';\r\nimport { ListItem } from 'life-core/model';\r\nimport { ModalDialog, DialogButton, DialogButtonType, DialogSize, ButtonActionType } from 'life-core/component';\r\nimport { BaseSaveDataDelegate } from 'life-core/service';\r\nimport { AuthorizationProvider } from 'life-core/authorization/authorization.provider';\r\nimport { MessagingService } from 'life-core/messaging/messaging.service';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { ObfuscateIdUtil } from 'life-core/util';\r\nimport { DropdownActionType } from 'life-core/component/input';\r\n\r\nimport { SavePolicyDataDelegate, UIResponse } from 'ls-core/service';\r\nimport { PolicyDTO } from 'ls-core/model';\r\nimport { DTOObjectUtil } from 'ls-core/util';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { PolicySubscriber } from 'ls-core/session/policy-subscriber';\r\n\r\nimport { LsRoutePath } from 'ui/routing';\r\nimport { ActiveApplicantHelper, ApplicantListHelper } from 'business/policy/shared';\r\nimport { AddApplicantComponent, AddApplicantListDataResolver, AddApplicantDataResolver } from './add-applicant';\r\nimport { ApplicantAuthorizationProvider } from './applicant-authorization.provider';\r\nimport { ApplicantChannel } from 'business/policy/applicant/applicant-channel';\r\n\r\n@Component({\r\n    selector: 'applicant-info',\r\n    templateUrl: './applicant-info.component.html',\r\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: ApplicantAuthorizationProvider }]\r\n})\r\n@Injectable()\r\nexport class ApplicantInfoComponent extends ViewModel {\r\n    public applicantListOptions: Array<ListItem>;\r\n    public selectedApplicantId: number;\r\n    public addButtonActionType: ButtonActionType = ButtonActionType.DataChange;\r\n    public applicantDropdownActionType: DropdownActionType = DropdownActionType.Presentation;\r\n\r\n    private _policy: PolicyDTO;\r\n    private _activeApplicantHelper: ActiveApplicantHelper;\r\n    private _modalDialog: ModalDialog;\r\n    private _appSession: AppSession;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _messagingService: MessagingService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        modalDialog: ModalDialog,\r\n        messagingService: MessagingService,\r\n        activeApplicantHelper: ActiveApplicantHelper,\r\n        appSession: AppSession,\r\n        applicantListHelper: ApplicantListHelper,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, policy => {\r\n            this._policy = policy;\r\n            if (this.selectedApplicantId) {\r\n                this.rebindUIData();\r\n            }\r\n        });\r\n        this.applicantListOptions = new Array<ListItem>();\r\n        this._activeApplicantHelper = activeApplicantHelper;\r\n        this._modalDialog = modalDialog;\r\n        this._appSession = appSession;\r\n        this._applicantListHelper = applicantListHelper;\r\n        this.i18n = i18n;\r\n        this._messagingService = messagingService;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        // this.setResolvedData('policy');\r\n        this.loadApplicantList();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        super.ngAfterViewInit();\r\n        this.registerHandlers();\r\n    }\r\n\r\n    public registerHandlers(): void {\r\n        this.subscriptionTracker.track(\r\n            this._messagingService.subscribe(ApplicantChannel.ApplicantNameChange, updatedName => {\r\n                this.applicantListOptions.find(\r\n                    applicant => applicant.value == this.selectedApplicantId.toString()\r\n                ).label = updatedName;\r\n            })\r\n        );\r\n    }\r\n\r\n    private loadApplicantList(): void {\r\n        this.bindInsuredsToApplicantList();\r\n        this.initSubscribers();\r\n    }\r\n\r\n    private routeToApplicantDetailSection(): void {\r\n        this.routerAccessor.navigate(\r\n            [LsRoutePath.ApplicantDetail, ObfuscateIdUtil.obfuscate(this.selectedApplicantId.toString())],\r\n            true\r\n        );\r\n    }\r\n\r\n    private bindInsuredsToApplicantList(): void {\r\n        this.applicantListOptions = this._applicantListHelper.getApplicantList(this._policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    private initSubscribers(): void {\r\n        this.trackSubscription(\r\n            this._activeApplicantHelper.activeApplicantIdObservable.subscribe(activeApplicantId => {\r\n                this.setSelectedApplicant();\r\n            })\r\n        );\r\n    }\r\n\r\n    private setSelectedApplicant(): void {\r\n        this.selectedApplicantId = this._applicantListHelper.getActiveApplicantIdOrDefault(\r\n            this._policy.Insureds_LazyLoad\r\n        );\r\n        this.routeToApplicantDetailSection();\r\n    }\r\n\r\n    public onApplicantChange(): void {\r\n        this._activeApplicantHelper.setActiveApplicantId(this.selectedApplicantId);\r\n        this.routeToApplicantDetailSection();\r\n    }\r\n\r\n    protected rebindUIData(): void {\r\n        this.loadApplicantList();\r\n    }\r\n\r\n    protected getDataToSave(): any {\r\n        return this._policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): BaseSaveDataDelegate<PolicyDTO, UIResponse> {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n\r\n    public onAddApplicantClick(): void {\r\n        this.openAddApplicantDialog();\r\n    }\r\n\r\n    private openAddApplicantDialog(): void {\r\n        this._modalDialog\r\n            .open({\r\n                view: AddApplicantComponent,\r\n                resolve: [\r\n                    { resolveName: ResolvedDataNames.data, resolverClass: AddApplicantDataResolver },\r\n                    { resolveName: ResolvedDataNames.listData, resolverClass: AddApplicantListDataResolver }\r\n                ],\r\n                title: this.i18n({ value: 'Add Applicant & Coverage', id: 'applicant.popup.label.header.title' }),\r\n                buttons: [\r\n                    new DialogButton({ type: DialogButtonType.ACCEPT }),\r\n                    new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\r\n                ],\r\n                size: DialogSize.large\r\n            })\r\n            .then(dialogRef => {\r\n                dialogRef.result.then(result =>\r\n                    result.buttonId == DialogButtonType.ACCEPT\r\n                        ? this.onNewApplicantAndCoverageAdded(result.returnValue)\r\n                        : null\r\n                );\r\n            });\r\n    }\r\n\r\n    private onNewApplicantAndCoverageAdded(newApplicantResult: any): void {\r\n        const updatedPolicy: PolicyDTO = DTOObjectUtil.deepConvertObjectOfType(\r\n            newApplicantResult.updatedPolicy,\r\n            PolicyDTO\r\n        ) as PolicyDTO;\r\n        this._appSession.updatePolicy(updatedPolicy);\r\n        this.selectedApplicantId = newApplicantResult.newApplicantId;\r\n        this.onApplicantChange();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\nimport { CountryStateCodes } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class ApplicantMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return [...CountryStateCodes, 'plan_code', 'coverage_section_configuration', 'occupation', 'applicant_status'];\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { ApplicantInfoComponent } from './applicant-info.component';\r\nimport { ApplicantDetailComponent } from './applicant-detail/applicant-detail.component';\r\nimport { ApplicantPersonalInfoModule } from './personal-information/applicant-personal-info.module';\r\nimport { ApplicantInfoDataResolver } from './applicant-info-data.resolver';\r\nimport { ApplicantInfoListDataResolver } from './applicant-info-list-data.resolver';\r\nimport { ApplicantCoveragesModule } from './coverages/applicant-coverages.module';\r\nimport { ApplicantFinancialDataModule } from './financial-data/applicant-financial-data.module';\r\nimport { ApplicantInformationModule } from './information/applicant-information.module';\r\nimport { PhysicianInformationModule } from './physician-information/physician-information.module';\r\nimport { FamilyHistoryModule } from './family-history/family-history.module';\r\nimport { OtherInsuranceCasesModule } from './other-insurance-cases/other-insurance-cases.module';\r\nimport { AddApplicantModule } from './add-applicant';\r\nimport { ApplicantFormsModule } from './forms/applicant-forms.module';\r\nimport { ApplicantMetaDataResolver } from './applicant-meta-data.resolver';\r\nimport { ApplicationReceivedDateValidator } from '../shared/validator/application-received-date-validator';\r\nimport { AgentSignedDateValidator } from '../shared/validator/agent-signed-date-validator';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        LsComponentsModule,\r\n        ApplicantCoveragesModule,\r\n        ApplicantPersonalInfoModule,\r\n        ApplicantFinancialDataModule,\r\n        ApplicantInformationModule,\r\n        PhysicianInformationModule,\r\n        FamilyHistoryModule,\r\n        OtherInsuranceCasesModule,\r\n        AddApplicantModule,\r\n        ApplicantFormsModule\r\n    ],\r\n    declarations: [ApplicantInfoComponent, ApplicantDetailComponent],\r\n    providers: [\r\n        ApplicantInfoDataResolver,\r\n        ApplicantInfoListDataResolver,\r\n        ApplicantMetaDataResolver,\r\n        AgentSignedDateValidator,\r\n        ApplicationReceivedDateValidator\r\n    ]\r\n})\r\nexport class ApplicantModule {}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { InsuredDTO, CoverageDTO, PolicyDTO } from 'ls-core/model';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\nimport { ListsDataRequest, ListDataRequestBuilder } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\n\r\nimport { ApplicantListHelper } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class AddCoverageListDataResolver extends BaseListDataResolver {\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession, applicantListHelper: ApplicantListHelper) {\r\n        super(injector);\r\n        this._applicantListHelper = applicantListHelper;\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const applicant = ObjectUtil.createObjectOfType<InsuredDTO>(\r\n            this.getActiveApplicant(),\r\n            InsuredDTO\r\n        ) as InsuredDTO;\r\n        const coverage = ObjectUtil.createObjectOfType<CoverageDTO>(\r\n            applicant.Coverages_LazyLoad[0],\r\n            CoverageDTO\r\n        ) as CoverageDTO;\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this.policy);\r\n        listDataRequestBuilder.addListRequestItem(coverage, 'PlanCodeId');\r\n\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n\r\n    private getActiveApplicant(): InsuredDTO {\r\n        return this._applicantListHelper.getActiveApplicantOrDefault(this.policy.Insureds_LazyLoad) as InsuredDTO;\r\n    }\r\n\r\n    private get policy(): PolicyDTO {\r\n        return this._appSession.policyDTO;\r\n    }\r\n}\r\n","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input label=\\\"Select Product\\\" i18n-label=\\\"@@applicant.coverage.product\\\" [control]=\\\"product\\\">\\r\\n                <lf-select #product name=\\\"product\\\" [(ngModel)]=\\\"coverage.PlanCodeId\\\" required [items]=\\\"resolvedData.listData?.PlanCodeId | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    secureComponent style=\\\"width:250px\\\" class=\\\"lf-dialog-dropdown\\\" container=\\\"dialog\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { ViewModel, ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { IDialogViewModel, DialogData, DialogButtonType } from 'life-core/component/dialog';\r\nimport { DialogViewModelResult } from 'life-core/component';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport {\r\n    DataServiceParams,\r\n    DataService,\r\n    UIServiceNames,\r\n    UIServiceMethods,\r\n    DefaultDataService,\r\n    SetDefaultDataRequest\r\n} from 'ls-core/service';\r\nimport { PolicyDTO, InsuredDTO, CoverageDTO, Identifiable } from 'ls-core/model';\r\nimport { AppSession } from 'ls-core/session';\r\n\r\nimport { ApplicantListHelper, DTOAddRequest, DTOAddResponse, CoverageStatuses } from 'business/policy/shared';\r\nimport { ApplicantAuthorizationProvider } from 'business/policy/applicant/applicant-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'add-coverage.component',\r\n    templateUrl: './add-coverage.component.html',\r\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: ApplicantAuthorizationProvider }]\r\n})\r\nexport class AddCoverageComponent extends ViewModel implements ICompose, IDialogViewModel {\r\n    public resolvedData: any;\r\n    public applicant: InsuredDTO;\r\n    public coverage: CoverageDTO;\r\n    private _dataService: DataService;\r\n    private _appSession: AppSession;\r\n    private _policy: PolicyDTO;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _defaultDataService: DefaultDataService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        dataService: DataService,\r\n        applicantListHelper: ApplicantListHelper,\r\n        defaultDataService: DefaultDataService,\r\n        appSession: AppSession\r\n    ) {\r\n        super(injector);\r\n        this._dataService = dataService;\r\n        this._applicantListHelper = applicantListHelper;\r\n        this._defaultDataService = defaultDataService;\r\n        this._appSession = appSession;\r\n        this._policy = this._appSession.policyDTO;\r\n        this.coverage = new CoverageDTO();\r\n    }\r\n\r\n    public setModel(model: DialogData): void {\r\n        this.resolvedData = model.resolvedData;\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.setApplicant();\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this.applicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId == DialogButtonType.ACCEPT) {\r\n            return this.validate().then(result => {\r\n                if (result == ViewValidationResult.pass) {\r\n                    return this.addCoverage();\r\n                } else {\r\n                    return new DialogViewModelResult(null, false);\r\n                }\r\n            });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    private addCoverage(): Promise<DialogViewModelResult> {\r\n        return this.setDefaultCoverageData().then(() => {\r\n            const serviceParams: DataServiceParams = this.getAddCoverageServiceParams();\r\n            return this._dataService.getData(serviceParams).then(response => {\r\n                const addCoverageResponse = response.responsePayload as DTOAddResponse;\r\n                return new DialogViewModelResult({ updatedPolicy: addCoverageResponse.rootDTOobject });\r\n            });\r\n        });\r\n    }\r\n\r\n    private setDefaultCoverageData(): Promise<void> {\r\n        this.coverage.identifier = new Identifiable();\r\n        const defaultDataRequest = new SetDefaultDataRequest(this._policy, this.coverage, '');\r\n        return this._defaultDataService.setDefaultData(defaultDataRequest).then(data => {\r\n            Object.assign(this.coverage, data.workingDTO as CoverageDTO);\r\n            this.setAdditionalCoverageData();\r\n        });\r\n    }\r\n\r\n    private setAdditionalCoverageData(): void {\r\n        // needed as its mentioned in flex code\r\n        // to be used if additional defaulting is required when other sections are added\r\n        this.coverage.CoverageStatus = CoverageStatuses.PENDING;\r\n    }\r\n\r\n    private getAddCoverageServiceParams(): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.ADD_DTO_DATA_SERVICE,\r\n            serviceMethod: UIServiceMethods.GET_DATA,\r\n            requestPayload: this.getAddCoverageServicePayload()\r\n        });\r\n    }\r\n\r\n    private getAddCoverageServicePayload(): DTOAddRequest {\r\n        const request = new DTOAddRequest();\r\n        request.rootDTOObject = this._policy;\r\n        request.parentDTOObject = this.applicant;\r\n        request.workingDTOObject = this.coverage;\r\n        return request;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { AddCoverageComponent } from './add-coverage.component';\r\nimport { AddCoverageListDataResolver } from './add-coverage-listdata.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [AddCoverageComponent],\r\n    exports: [AddCoverageComponent],\r\n    entryComponents: [AddCoverageComponent],\r\n    providers: [AddCoverageListDataResolver]\r\n})\r\nexport class AddCoverageModule {}\r\n","﻿export * from './add-coverage-listdata.resolver';\r\nexport * from './add-coverage.component';\r\nexport * from './add-coverage.module';","module.exports = \"<lf-panel header=\\\"Coverages\\\" i18n-header=\\\"@@policy.applicant.info.coverages\\\" [toggleable]=\\\"true\\\" panelType=\\\"primary\\\"\\r\\n    class=\\\"label-appearance\\\" stateId=\\\"panel_applicantCoverages\\\"\\r\\n    [state]=\\\"componentsState.get('panel_applicantCoverages')\\\" [initCollapsed]=true secureComponent>\\r\\n    <div class=\\\"row justify-content-end btn-padding\\\">\\r\\n        <lf-button id=\\\"addCoverageButton\\\" name=\\\"addCoverageButton\\\" label=\\\"Add Coverage\\\"\\r\\n            i18n-label=\\\"@@applicant.coverage.add\\\" (onClick)=\\\"onAddCoverageClick($event)\\\"\\r\\n            [actionType]=\\\"addCoverageActionType\\\" secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" *ngFor=\\\"let coverage of applicant.Coverages_LazyLoad; let i=index\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <ls-applicant-coverage [coverage]=\\\"coverage\\\" [index]=\\\"i\\\"></ls-applicant-coverage>\\r\\n        </div>\\r\\n    </div>\\r\\n</lf-panel>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { ViewModel, ResolvedDataNames } from 'life-core/view-model';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { DialogButton, ModalDialog, DialogButtonType } from 'life-core/component/dialog';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { ButtonActionType } from 'life-core/component';\r\n\r\nimport { InsuredDTO, PolicyDTO } from 'ls-core/model';\r\nimport { PolicySubscriber, AppSession } from 'ls-core/session';\r\n\r\nimport { ApplicantListHelper } from 'business/policy/shared';\r\nimport { AddCoverageComponent, AddCoverageListDataResolver } from 'business/policy/applicant/coverages/add-coverage';\r\nimport { CoveragesAuthorizationProvider } from './coverages-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'ls-applicant-coverages',\r\n    templateUrl: './applicant-coverages.component.html',\r\n    styles: [\r\n        `\r\n            .btn-padding {\r\n                padding: 0.625rem 0 0.3125rem 0;\r\n            }\r\n        `\r\n    ],\r\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: CoveragesAuthorizationProvider }]\r\n})\r\nexport class ApplicantCoveragesComponent extends ViewModel {\r\n    public applicant: InsuredDTO;\r\n    public addCoverageActionType: ButtonActionType = ButtonActionType.DataChange;\r\n\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _policy: PolicyDTO;\r\n    private _modalDialog: ModalDialog;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        modalDialog: ModalDialog,\r\n        appSession: AppSession,\r\n        applicantListHelper: ApplicantListHelper,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this._applicantListHelper = applicantListHelper;\r\n        policySubscriber.subscribe(this, policy => {\r\n            this._policy = policy;\r\n            this.setApplicant();\r\n        });\r\n        this._modalDialog = modalDialog;\r\n        this._appSession = appSession;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this.applicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    public onAddCoverageClick(event: any): void {\r\n        this.openAddCoverageDialog();\r\n    }\r\n\r\n    private openAddCoverageDialog(): void {\r\n        this._modalDialog\r\n            .open({\r\n                view: AddCoverageComponent,\r\n                resolve: [{ resolveName: ResolvedDataNames.listData, resolverClass: AddCoverageListDataResolver }],\r\n                title: this.i18n({ value: 'Add Coverage', id: 'applicant.coverage.add' }),\r\n                buttons: [\r\n                    new DialogButton({ type: DialogButtonType.ACCEPT }),\r\n                    new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\r\n                ]\r\n            })\r\n            .then(dialogRef => {\r\n                dialogRef.result.then(result =>\r\n                    result.buttonId == DialogButtonType.ACCEPT ? this.onNewCoverageAdded(result.returnValue) : null\r\n                );\r\n            });\r\n    }\r\n\r\n    private onNewCoverageAdded(newCoverageResult: any): void {\r\n        const policyDTO = ObjectUtil.createObjectOfType<PolicyDTO>(\r\n            newCoverageResult.updatedPolicy,\r\n            PolicyDTO\r\n        ) as PolicyDTO;\r\n        this._appSession.updatePolicy(policyDTO);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { ApplicantCoveragesComponent } from './applicant-coverages.component';\r\nimport { PlanApplicantCoverageFormFields, ApplicantCoveragesFieldsLoader } from './form';\r\nimport { ApplicantCoverageModule } from './coverage';\r\nimport { AddCoverageModule } from './add-coverage';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule, ApplicantCoverageModule, AddCoverageModule],\r\n    declarations: [ApplicantCoveragesComponent],\r\n    exports: [ApplicantCoveragesComponent],\r\n    entryComponents: [ApplicantCoveragesComponent],\r\n    providers: [PlanApplicantCoverageFormFields, ApplicantCoveragesFieldsLoader]\r\n})\r\nexport class ApplicantCoveragesModule {}\r\n","import { Injectable, Injector, SkipSelf, Optional, Self } from '@angular/core';\r\n\r\nimport {\r\n    AuthorizationProvider,\r\n    AuthorizationService,\r\n    AuthorizationLevel,\r\n    AuthorizationProviderHost\r\n} from 'life-core/authorization';\r\n\r\nimport { CoverageDTO } from 'ls-core/model';\r\nimport { PrivilegeObjectType, SubsystemType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { CoverageStatuses } from 'business/policy/shared';\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class ApplicantCoverageAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        @Self()\r\n        @Optional()\r\n        authorizationProviderHost: AuthorizationProviderHost,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this.authorizationProviderHost = authorizationProviderHost;\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const coverageAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.CASE]\r\n        );\r\n        const coverage = this.authorizationProviderHost.getAuthorizationProviderContext() as CoverageDTO;\r\n        this.authorizationData.componentLevel['fundList'] =\r\n            coverageAuthorizationLevel < AuthorizationLevel.EDIT ? AuthorizationLevel.VIEW : coverageAuthorizationLevel;\r\n\r\n        this.authorizationData.defaultLevel = this.getDefaultAuthorizationLevel(coverageAuthorizationLevel, coverage);\r\n    }\r\n\r\n    private getDefaultAuthorizationLevel(\r\n        coverageAuthorizationLevel: AuthorizationLevel,\r\n        coverage: CoverageDTO\r\n    ): AuthorizationLevel {\r\n        return this.isCoverageClosed(coverage) || coverageAuthorizationLevel === AuthorizationLevel.VIEW\r\n            ? AuthorizationLevel.VIEW\r\n            : AuthorizationLevel.EDIT;\r\n    }\r\n\r\n    private isCoverageClosed(coverage: CoverageDTO): boolean {\r\n        return (\r\n            coverage.CoverageStatus == CoverageStatuses.CANCELLED ||\r\n            coverage.CoverageStatus == CoverageStatuses.DECLINED ||\r\n            coverage.CoverageStatus == CoverageStatuses.WITHDRAWN ||\r\n            coverage.CoverageStatus == CoverageStatuses.APPROVED\r\n        );\r\n    }\r\n}\r\n","module.exports = \"<lf-panel [header]=\\\"panelHeader\\\" [toggleable]=\\\"true\\\" panelType=\\\"secondary\\\" stateId=\\\"panel_applicantCoverage_{{index}}\\\"\\r\\n    [state]=\\\"componentsState.get('panel_applicantCoverage_'+index)\\\">\\r\\n    <dynamic-form [formFields]=\\\"formFields\\\" [formData]=\\\"formData\\\" [layoutConfig]=\\\"formLayoutConfig\\\" [form]=\\\"rootForm\\\"\\r\\n        [index]=\\\"index\\\" secureComponent>\\r\\n    </dynamic-form>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12 pb-1\\\">\\r\\n            <benefit-list [coverage]=\\\"coverage\\\" *ngIf=\\\"showBenefitSection\\\"></benefit-list>\\r\\n        </div>\\r\\n        <div class=\\\"col-12 pb-1\\\">\\r\\n            <beneficiary [coverage]=\\\"coverage\\\" *ngIf=\\\"showBeneficiarySection\\\"></beneficiary>\\r\\n        </div>\\r\\n        <div class=\\\"col-12 pb-1\\\">\\r\\n            <funds-list [coverage]=\\\"coverage\\\" *ngIf=\\\"showFundsSection\\\"></funds-list>\\r\\n        </div>\\r\\n    </div>\\r\\n</lf-panel>\"","﻿import { Component, Input, Injector, forwardRef } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationProviderHost } from 'life-core/authorization';\r\nimport { FormLayoutConfig } from 'life-core/component/dynamic-form';\r\n\r\nimport { LsDynamicFormViewModel } from 'ls-core/component/dynamic-form';\r\nimport { CoverageDTO, PolicyDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\nimport { CoverageFormDataBuilder } from 'business/policy/shared/coverage-dynamic-form';\r\nimport { PlanApplicantCoverageFormFields } from 'business/policy/applicant/coverages/form';\r\n\r\nimport { ApplicantCoverageAuthorizationProvider } from './applicant-coverage-authorization.provider';\r\nimport { SectionAvailabilityHelper } from 'business/policy/shared';\r\nimport { LsRadioButtonValues } from 'ls-core/component/input';\r\n\r\n@Component({\r\n    selector: 'ls-applicant-coverage',\r\n    templateUrl: './applicant-coverage.component.html',\r\n    providers: [\r\n        PolicySubscriber,\r\n        { provide: AuthorizationProvider, useClass: ApplicantCoverageAuthorizationProvider },\r\n        { provide: AuthorizationProviderHost, useExisting: forwardRef(() => ApplicantCoverageComponent) }\r\n    ]\r\n})\r\nexport class ApplicantCoverageComponent extends LsDynamicFormViewModel implements AuthorizationProviderHost {\r\n    @Input() public coverage: CoverageDTO;\r\n    @Input() public index: string;\r\n    public formLayoutConfig: FormLayoutConfig = {\r\n        fieldsPerRow: 4\r\n    };\r\n    public panelHeader: string;\r\n    public showBenefitSection: boolean;\r\n    public showBeneficiarySection: boolean;\r\n    public showFundsSection: boolean;\r\n\r\n    public DEFAULT_AMOUNT: number = 0;\r\n\r\n    private _policy: PolicyDTO;\r\n    private _planApplicantCoverageFormFields: PlanApplicantCoverageFormFields;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        planApplicantCoverageFormFields: PlanApplicantCoverageFormFields\r\n    ) {\r\n        super(injector);\r\n        this._planApplicantCoverageFormFields = planApplicantCoverageFormFields;\r\n        policySubscriber.subscribe(this, p => {\r\n            this._policy = p;\r\n        });\r\n    }\r\n\r\n    public getAuthorizationProviderContext(): CoverageDTO {\r\n        return this.coverage;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        return super.loadData();\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.setSectionsVisibility();\r\n        this.setPanelHeader();\r\n    }\r\n\r\n    protected setFormFields(): Promise<void> {\r\n        this.formFields = this.copyFormFields(\r\n            this._planApplicantCoverageFormFields.get(this.coverage.PlanCodeId.toUpperCase())\r\n        );\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected setFormData(): void {\r\n        this.setDefaultDataForCoverage();\r\n        this.formData = CoverageFormDataBuilder.build(this._policy, this.coverage);\r\n    }\r\n\r\n    private setDefaultDataForCoverage(): void {\r\n        this.coverage.Amount = this.coverage.Amount || this.DEFAULT_AMOUNT;\r\n        this.coverage.OwnOcc = this.coverage.OwnOcc || LsRadioButtonValues.NO_NUMBER;\r\n        this.coverage.PastCoverageIndicator = this.coverage.PastCoverageIndicator || LsRadioButtonValues.NO_NUMBER;\r\n        this.coverage.PlannedPremium = this.coverage.PlannedPremium || this.DEFAULT_AMOUNT;\r\n        this.coverage.WebQuotedClass = this.coverage.WebQuotedClass || this.DEFAULT_AMOUNT.toString();\r\n        this.coverage.Cola = this.coverage.Cola || LsRadioButtonValues.NO_NUMBER;\r\n        this.coverage.ExchangeFlag = this.coverage.ExchangeFlag || LsRadioButtonValues.NO_NUMBER;\r\n    }\r\n\r\n    private setSectionsVisibility(): void {\r\n        const coverageLineOfBusiness = this.getCoverageLineOfBusiness();\r\n        this.showBeneficiarySection = SectionAvailabilityHelper.isSectionVisible(\r\n            this.listData.coverage_section_configuration,\r\n            coverageLineOfBusiness,\r\n            CoverageSections.Beneficiary\r\n        );\r\n        this.showBenefitSection = SectionAvailabilityHelper.isSectionVisible(\r\n            this.listData.coverage_section_configuration,\r\n            coverageLineOfBusiness,\r\n            CoverageSections.Benefit\r\n        );\r\n        this.showFundsSection = SectionAvailabilityHelper.isSectionVisible(\r\n            this.listData.coverage_section_configuration,\r\n            coverageLineOfBusiness,\r\n            CoverageSections.Funds\r\n        );\r\n    }\r\n\r\n    private getCoverageLineOfBusiness(): string {\r\n        return this.getPlanCode().externalCode.toLowerCase();\r\n    }\r\n\r\n    private getPlanCode(): any {\r\n        return this.listData.plan_code.find(plan => plan.value.toUpperCase() == this.coverage.PlanCodeId.toUpperCase());\r\n    }\r\n    private setPanelHeader(): void {\r\n        this.panelHeader = this.getPlanCode().label;\r\n    }\r\n}\r\n\r\nconst CoverageSections = {\r\n    Beneficiary: 'beneficiary',\r\n    Benefit: 'benefit',\r\n    Funds: 'funds'\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { ApplicantCoverageComponent } from './applicant-coverage.component';\r\nimport { BenefitModule } from './benefit/benefit.module';\r\nimport { BeneficiaryModule } from './beneficiary/beneficiary.module';\r\nimport { FundsListModule } from './funds/funds-list.module';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule, BenefitModule, BeneficiaryModule, FundsListModule],\r\n    declarations: [ApplicantCoverageComponent],\r\n    exports: [ApplicantCoverageComponent]\r\n})\r\nexport class ApplicantCoverageModule {}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { NamePattern } from 'life-core/util';\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\nimport { BeneficiaryUtil } from './beneficiary.util';\r\n\r\nconst BeneficiaryFields = {\r\n    FirstName: 'FirstName',\r\n    PersonTypeId: 'PersonTypeId',\r\n    BirthDate: 'BirthDate',\r\n    BenefitType: 'BenefitType',\r\n    RelationshipToInsuredCode: 'RelationshipToInsuredCode',\r\n    TaxId: 'TaxId',\r\n    Amount: 'Amount',\r\n    Percentage: 'Percentage',\r\n    BeneficiaryType: 'RoleId',\r\n    IrrevokableIndicator: 'IrrevokableIndicator'\r\n};\r\n\r\n@Injectable()\r\nexport class BeneficiaryGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _cellFormatters: CellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(\r\n        lsCellFormatters: LsCellFormatters,\r\n        cellFormatters: CellFormatters,\r\n        lsCellComparators: LsCellComparators,\r\n        i18n: I18n\r\n    ) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._cellFormatters = cellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Name', id: 'applicant.coverage.beneficiary.beneficiary' }),\r\n            field: BeneficiaryFields.FirstName,\r\n            width: 100,\r\n            valueFormatter: (params: any) =>\r\n                this._lsCellFormatters.nameCellFormatter(params, NamePattern.NameWithTitleSuffixAndMiddleInitial),\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Party Type', id: 'applicant.coverage.beneficiary.partytype' }),\r\n            field: BeneficiaryFields.PersonTypeId,\r\n            width: 100,\r\n            valueFormatter: this.getPartyTypeLabel\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'DOB/DOT', id: 'applicant.coverage.beneficiary.birthdate' }),\r\n            field: BeneficiaryFields.BirthDate,\r\n            width: 200,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Benefit Type', id: 'applicant.coverage.beneficiary.benefittype' }),\r\n            field: BeneficiaryFields.BenefitType,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Relation', id: 'applicant.coverage.beneficiary.relation' }),\r\n            field: BeneficiaryFields.RelationshipToInsuredCode,\r\n            width: 100,\r\n            valueFormatter: this.getRelationLabel,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Tax ID', id: 'applicant.coverage.beneficiary.taxid' }),\r\n            field: BeneficiaryFields.TaxId,\r\n            width: 150,\r\n            valueFormatter: this._lsCellFormatters.taxIdFormatter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Amount', id: 'applicant.coverage.beneficiary.amount' }),\r\n            field: BeneficiaryFields.Amount,\r\n            width: 100,\r\n            valueFormatter: this._cellFormatters.currencyCellFormatter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Share %', id: 'applicant.coverage.beneficiary.sharepercentwithspace' }),\r\n            field: BeneficiaryFields.Percentage,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'P/C', id: 'applicant.coverage.beneficiary.beneficiarytype' }),\r\n            field: BeneficiaryFields.BeneficiaryType,\r\n            width: 100,\r\n            valueFormatter: this.getBeneficiaryTypeLabel\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'R/I', id: 'applicant.coverage.beneficiary.irrevocable' }),\r\n            field: BeneficiaryFields.IrrevokableIndicator,\r\n            width: 100,\r\n            valueFormatter: this.getIrrevocableLabel\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getPartyTypeLabel(params: any): string {\r\n        if (params.node.data.PersonTypeId) {\r\n            return BeneficiaryUtil.convertToDropdownListAndGetLabel(\r\n                params.context.listData.PersonTypeId,\r\n                params.node.data.PersonTypeId\r\n            );\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private getRelationLabel(params: any): string {\r\n        if (params.node.data.RelationshipToInsuredCode) {\r\n            return BeneficiaryUtil.convertToDropdownListAndGetLabel(\r\n                params.context.listData.RelationshipToInsuredCode,\r\n                params.node.data.RelationshipToInsuredCode\r\n            );\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private getBeneficiaryTypeLabel(params: any): string {\r\n        if (params.node.data.RoleId) {\r\n            return BeneficiaryUtil.getLabelFromExternalCode(\r\n                params.context.listData.BeneficiaryType,\r\n                params.node.data.RoleId\r\n            );\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private getIrrevocableLabel(params: any): string {\r\n        return params.node.data.IrrevokableIndicator == '-1' ? 'Irrevocable' : 'Revocable';\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { BeneficiaryDTO, PartyTypes } from 'ls-core/model';\r\n\r\nexport const BeneficiaryType = {\r\n    Primary: '0',\r\n    DeathBenefit: 'Death Benefit'\r\n};\r\n\r\n@Injectable()\r\nexport class BeneficiaryItemFactory extends BaseDTOItemFactory<BeneficiaryDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<BeneficiaryDTO>): BeneficiaryDTO {\r\n        const beneficiary = new BeneficiaryDTO();\r\n        beneficiary.CoveragePersonId = this.getNextId(createItemParams.items, 'CoveragePersonId');\r\n        beneficiary.PersonTypeId = PartyTypes.PERSON;\r\n        beneficiary.BenefitType = BeneficiaryType.DeathBenefit;\r\n        beneficiary.BeneficiaryType = BeneficiaryType.Primary;\r\n        return beneficiary;\r\n    }\r\n}\r\n","module.exports = \"<master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\"\\r\\n    secureComponent [disabled]=\\\"disabled\\\">\\r\\n</master-detail>\"","import { Component, Injector, Input } from '@angular/core';\r\n\r\nimport {\r\n    RowManagementDelegate,\r\n    MasterDetailComponentResolver,\r\n    BaseDataManager,\r\n    MasterButton,\r\n    MasterButtonType\r\n} from 'life-core/component/master-detail';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { DirectDataResolve } from 'life-core/component/shared';\r\nimport { DialogSize } from 'life-core/component';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { BeneficiaryDTO, PolicyDTO, CoverageDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { BeneficiaryItemFactory } from './beneficiary-item-factory';\r\nimport { BasePolicyMasterDetailViewModel } from 'business/policy/shared';\r\nimport { BeneficiaryDialogDetailEditor } from './detail/beneficiary-detail-editor';\r\nimport { ResolvedDataNames } from 'life-core/view-model';\r\nimport { BeneficiaryGridColumnsBuilder } from './beneficiary-grid-column.builder';\r\nimport { BeneficiaryDialogDataResolver } from './detail';\r\nimport { BeneficiaryDialogMetaDataResolver } from './detail/beneficiary-dialog-metadata.resolver';\r\n\r\nexport function rowManagementDelegateFactory(\r\n    itemFactory: BeneficiaryItemFactory,\r\n    dataManager: BaseDataManager<BeneficiaryDTO>\r\n): RowManagementDelegate<BeneficiaryDTO> {\r\n    return new RowManagementDelegate({\r\n        itemName: 'Beneficiary',\r\n        itemIDPropertyName: 'CoveragePersonId',\r\n        itemFactory: itemFactory,\r\n        dataManager: dataManager\r\n    });\r\n}\r\n\r\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<BeneficiaryDTO> {\r\n    return new MasterDetailComponentResolver({\r\n        itemComponents: BeneficiaryDialogDetailEditor\r\n    });\r\n}\r\n\r\n@Component({\r\n    selector: 'beneficiary',\r\n    templateUrl: './beneficiary.component.html',\r\n    providers: [\r\n        PolicySubscriber,\r\n        BaseDataManager,\r\n        BeneficiaryItemFactory,\r\n        {\r\n            provide: RowManagementDelegate,\r\n            useFactory: rowManagementDelegateFactory,\r\n            deps: [BeneficiaryItemFactory, BaseDataManager]\r\n        },\r\n        {\r\n            provide: MasterDetailComponentResolver,\r\n            useFactory: itemComponentResolverFactory\r\n        },\r\n        BeneficiaryGridColumnsBuilder\r\n    ]\r\n})\r\nexport class BeneficiaryComponent extends BasePolicyMasterDetailViewModel<BeneficiaryDTO> {\r\n    @Input()\r\n    public coverage: CoverageDTO;\r\n    private _policy: PolicyDTO;\r\n\r\n    private _gridColumnsBuilder: BeneficiaryGridColumnsBuilder;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        gridColumnsBuilder: BeneficiaryGridColumnsBuilder,\r\n        policySubscriber: PolicySubscriber,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n        policySubscriber.subscribe(this, policy => {\r\n            this._policy = policy;\r\n        });\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        this.setResolvedListData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get showDetailAsPopup(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): BeneficiaryDTO[] {\r\n        return this.coverage.Beneficiaries_LazyLoad;\r\n    }\r\n\r\n    protected getRowNodeId(data: BeneficiaryDTO): Object {\r\n        return data.CoveragePersonId;\r\n    }\r\n\r\n    protected getItemDetailDialogResolve(item: BeneficiaryDTO): DirectDataResolve[] {\r\n        const context = { coverage: this.coverage, beneficiary: item };\r\n        return [\r\n            { resolveName: ResolvedDataNames.listData, resolverClass: BeneficiaryDialogDataResolver, context: context },\r\n            { resolveName: ResolvedDataNames.metaData, resolverClass: BeneficiaryDialogMetaDataResolver, context: item }\r\n        ];\r\n    }\r\n\r\n    protected getItemDetailDialogSize(): DialogSize {\r\n        return DialogSize.large;\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return this.i18n({ value: 'Beneficiary', id: 'policy.case.beneficiary.title' });\r\n    }\r\n\r\n    protected getPopupDetailButtons(): MasterButton<BeneficiaryDTO>[] {\r\n        return [\r\n            new MasterButton({ type: MasterButtonType.ADD }),\r\n            new MasterButton({ type: MasterButtonType.EDIT }),\r\n            new MasterButton({ type: MasterButtonType.DELETE })\r\n        ];\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { BeneficiaryComponent } from './beneficiary.component';\r\nimport { BeneficiaryDialogDetailEditor } from './detail/beneficiary-detail-editor';\r\nimport { BeneficiaryPersonComponent, BeneficiaryEstateComponent } from './detail/type';\r\nimport { BeneficiaryDialogMetaDataResolver, BeneficiaryDialogDataResolver } from './detail';\r\nimport { BeneficiaryCompanyComponent } from './detail/type/company/beneficiary-company.component';\r\nimport { BeneficiaryPartnershipComponent } from './detail/type/partnership/beneficiary-partnership.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [\r\n        BeneficiaryComponent,\r\n        BeneficiaryDialogDetailEditor,\r\n        BeneficiaryPersonComponent,\r\n        BeneficiaryEstateComponent,\r\n        BeneficiaryCompanyComponent,\r\n        BeneficiaryPartnershipComponent\r\n    ],\r\n    exports: [BeneficiaryComponent],\r\n    providers: [BeneficiaryDialogDataResolver, BeneficiaryDialogMetaDataResolver],\r\n    entryComponents: [\r\n        BeneficiaryDialogDetailEditor,\r\n        BeneficiaryPersonComponent,\r\n        BeneficiaryEstateComponent,\r\n        BeneficiaryCompanyComponent,\r\n        BeneficiaryPartnershipComponent\r\n    ]\r\n})\r\nexport class BeneficiaryModule {}\r\n","import { ListUtil } from 'life-core/util';\r\nimport { ListItem } from 'life-core/model';\r\nimport { MetadataUtil } from 'ls-core/util';\r\n\r\nexport class BeneficiaryUtil {\r\n    public static convertToDropdownListAndGetLabel(itemList: Array<any>, value: string): string {\r\n        const dropdownList: ListItem[] = ListUtil.convertToListItems(itemList);\r\n        return ListUtil.getLabelByValue(dropdownList, value);\r\n    }\r\n\r\n     public static getLabelFromExternalCode(itemList: Array<any>, value: string): string {\r\n        \r\n        return MetadataUtil.getValueByExternalCode(itemList, value);\r\n    }\r\n}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"partyType\\\" label=\\\"Party Type\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.beneficiarytype\\\">\\r\\n                <lf-select #partyType name=\\\"partyType\\\" [items]=\\\"resolvedData.listData.PersonTypeId | listItems:'value':'Id'\\\" [(ngModel)]=\\\"data.PersonTypeId\\\"\\r\\n                    (change)=\\\"onPartyTypeChange($event)\\\" [clearable]=\\\"false\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"benefitType\\\" label=\\\"Benefit Type\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.type\\\">\\r\\n                <lf-select #benefitType name=\\\"benefitType\\\" [items]=\\\"resolvedData.listData.BenefitType | listItems:'value':'Id'\\\" [(ngModel)]=\\\"data.BenefitType\\\"\\r\\n                    secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <compose [model]=\\\"{data:data, resolvedData:resolvedData}\\\" [componentType]=\\\"itemComponentType\\\"></compose>\\r\\n</form>\"","﻿import { Component, Injector, Type } from '@angular/core';\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { ParentChildRegistry } from 'life-core/view-model';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { IComponentResolver, ComponentMap, ComponentResolver } from 'life-core/util';\n\nimport { BeneficiaryDTO, PartyTypes } from 'ls-core/model';\n\nimport { BeneficiaryPersonComponent } from './type/person/beneficiary-person.component';\nimport { BeneficiaryEstateComponent } from './type/estate/beneficiary-estate.component';\nimport { BeneficiaryCompanyComponent } from './type/company/beneficiary-company.component';\nimport { BeneficiaryPartnershipComponent } from './type/partnership/beneficiary-partnership.component';\nimport { BeneficiaryType } from '../beneficiary-item-factory';\nimport { ApplicantAuthorizationProvider } from 'business/policy/applicant/applicant-authorization.provider';\n\nconst IndicatorTypes = {\n    IrrevocableIndicator: -1,\n    RevocableIndicator: 0\n};\n\n@Component({\n    selector: 'beneficiary-detail-editor',\n    templateUrl: './beneficiary-detail-editor.html',\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: ApplicantAuthorizationProvider }]\n})\nexport class BeneficiaryDialogDetailEditor extends BasePolicyDialogDetailViewModel<BeneficiaryDTO> {\n    public itemComponentType: Type<any>;\n    private _componentMapResolver: IComponentResolver<string>;\n\n    constructor(injector: Injector) {\n        super(injector);\n        this._componentMapResolver = this.getComponentMapResolver();\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedListData();\n        this.setResolvedMetaData();\n        this.setComponentType();\n        this.setIrrevocableIndicator();\n        return Promise.resolve();\n    }\n\n    public onPartyTypeChange(type: any): void {\n        this.form.reset({\n            irrevocableFlag: IndicatorTypes.RevocableIndicator,\n            benefitType: BeneficiaryType.DeathBenefit,\n            beneficiaryType: BeneficiaryType.Primary,\n            partyType: type.value\n        });\n        this.setItemComponentType(type.value);\n    }\n\n    private getComponentMapResolver(): IComponentResolver<string> {\n        const componentMap: ComponentMap = new ComponentMap();\n        componentMap.add(PartyTypes.PERSON, BeneficiaryPersonComponent);\n        componentMap.add(PartyTypes.ESTATE, BeneficiaryEstateComponent);\n        componentMap.add(PartyTypes.TRUST, BeneficiaryEstateComponent);\n        componentMap.add(PartyTypes.COMPANY, BeneficiaryCompanyComponent);\n        componentMap.add(PartyTypes.PARTNERSHIP, BeneficiaryPartnershipComponent);\n        return new ComponentResolver<string>(componentMap);\n    }\n\n    private setItemComponentType(type: string): void {\n        this.itemComponentType = this._componentMapResolver.resolve(type);\n    }\n\n    private setComponentType(): void {\n        if (!this.data.PersonTypeId) {\n            this.setItemComponentType(PartyTypes.PERSON);\n        } else {\n            this.setItemComponentType(this.data.PersonTypeId);\n        }\n    }\n\n    private setIrrevocableIndicator(): void {\n        this.data.IrrevokableIndicator =\n            this.data.IrrevokableIndicator == IndicatorTypes.IrrevocableIndicator\n                ? IndicatorTypes.IrrevocableIndicator\n                : IndicatorTypes.RevocableIndicator;\n    }\n}\n","﻿import { Injector, Injectable } from '@angular/core';\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { ListMap } from 'life-core/model';\r\nimport { BeneficiaryDTO } from 'ls-core/model';\r\nimport { ListDataRequestBuilder, ListsDataRequest, ListDataItem } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class BeneficiaryDialogDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    public getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        const beneficiaries = { PersonTypeId: null };\r\n        const beneficiaryDTO = ObjectUtil.createObjectOfType(beneficiaries, BeneficiaryDTO);\r\n        listDataRequestBuilder.addListRequestItem(beneficiaryDTO, 'PersonTypeId');\r\n        listDataRequestBuilder.addListRequestItem(beneficiaryDTO, 'RelationshipToInsuredCode');\r\n        listDataRequestBuilder.addListRequestItem(beneficiaryDTO, 'BeneficiaryType');\r\n        listDataRequestBuilder.addListRequestItem(beneficiaryDTO, 'Title');\r\n        listDataRequestBuilder.addListRequestItem(beneficiaryDTO, 'Suffix');\r\n        listDataRequestBuilder.addListRequestItem(beneficiaryDTO, 'BenefitType');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class BeneficiaryDialogMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['BenefitType'];\r\n    }\r\n}\r\n","export * from './beneficiary-detail-editor';\r\nexport * from './beneficiary-dialog-data.resolver';\r\nexport * from './beneficiary-dialog-metadata.resolver';\r\n","import { Injector, Injectable } from '@angular/core';\n\nimport { ViewModel } from 'life-core/view-model';\nimport { ICompose } from 'life-core/component/compose';\n\nimport { BeneficiaryDTO } from 'ls-core/model/dto/beneficiary.dto';\nimport { ListDataUtil } from 'ls-core/service';\n\n@Injectable()\nexport class BeneficiaryTypeComponent extends ViewModel<BeneficiaryDTO> implements ICompose {\n    public beneType:string = null;\n    constructor(injector: Injector) {\n        super(injector);\n    }\n\n    public setModel(model: any): void {\n        this.data = model.data;\n        this.listData = model.resolvedData.listData;\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedListData();\n        this.setResolvedMetaData();\n        return Promise.resolve();\n    }\n\n    protected setupData(): void {\n        //this.setBeneficiaryRoleId();\n        if(this.data.RoleId!=null)\n        {\n            this.beneType = ListDataUtil.getIdFromListDataByExternalCode(\n            this.listData.BeneficiaryType,\n            this.data.RoleId.toString()\n        );}\n    }\n\n    public onBeneficiaryTypeChange(): void {\n        this.setBeneficiaryRoleId();\n    }\n\n    private setBeneficiaryRoleId(): void {\n        this.data.RoleId = ListDataUtil.getExternalCodeFromListDataById(\n            this.listData.BeneficiaryType,\n            this.beneType)\n    }\n     \n}\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"companyName\\\" label=\\\"Company Name\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.companyname\\\">\\r\\n                <lf-inputtext #companyName name=\\\"companyName\\\" [(ngModel)]=\\\"data.LastName\\\" [maxLength]=\\\"250\\\"\\r\\n                    secureComponent required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"beneficiaryType\\\" label=\\\"Beneficiary Type\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.beneficiarytype\\\">\\r\\n                <lf-select #beneficiaryType name=\\\"beneficiaryType\\\" [items]=\\\"listData.BeneficiaryType | listItems:'value':'Id'\\\"\\r\\n                    [(ngModel)]=\\\"beneType\\\" (change)=\\\"onBeneficiaryTypeChange()\\\" secureComponent style=\\\"width:150px\\\"\\r\\n                    required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.taxid\\\">\\r\\n                <lf-inputtaxid #taxId name=\\\"taxId\\\" [(ngModel)]=\\\"data.TaxId\\\" secureComponent></lf-inputtaxid>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"amount\\\" label=\\\"Amount\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.amount\\\">\\r\\n                <lf-inputnumber #amount name=\\\"amount\\\" [(ngModel)]=\\\"data.Amount\\\" format=\\\"n0\\\" [allowNegative]=\\\"false\\\"\\r\\n                    [maxLength]=\\\"10\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"sharePct\\\" label=\\\"Share %\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.sharepercentwithspace\\\">\\r\\n                <lf-inputnumber #sharePct name=\\\"sharePct\\\" [max]=\\\"100 \\\" [(ngModel)]=\\\"data.Percentage\\\" [allowNegative]=\\\"false\\\"\\r\\n                    maxLength=\\\"5\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"relation\\\" label=\\\"Relation\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.relation\\\">\\r\\n                <lf-select #relation name=\\\"relation\\\" [items]=\\\"listData.RelationshipToInsuredCode | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.RelationshipToInsuredCode\\\" container=\\\"dialog\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Irrevocable\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.irrevocable\\\" [control]=\\\"irrevocableFlag\\\">\\r\\n                <lf-radiobuttongroup #irrevocableFlag name=\\\"irrevocableFlag\\\" [(ngModel)]=\\\"data.IrrevokableIndicator\\\"\\r\\n                    secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"irrevocableFlag\\\" value=\\\"-1\\\" label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"irrevocableFlag\\\" value=\\\"0\\\" label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { BeneficiaryTypeComponent } from '../beneficiary-type.component';\r\n\r\n@Component({\r\n    selector: 'beneficiary-company',\r\n    templateUrl: './beneficiary-company.component.html'\r\n})\r\nexport class BeneficiaryCompanyComponent extends BeneficiaryTypeComponent {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"trustName\\\" label=\\\"Trust/Estate Name\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.trustname\\\">\\r\\n                <lf-inputtext #trustName name=\\\"trustName\\\" [(ngModel)]=\\\"data.LastName\\\" [maxLength]=\\\"250\\\" secureComponent\\r\\n                    required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"trustDate\\\" label=\\\"Date of Trust/Estate\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.trustdate\\\">\\r\\n                <ls-inputdatecrypted #trustDate name=\\\"trustDate\\\" [(ngModel)]=\\\"data.BirthDate\\\" secureComponent [maxDate]=\\\"maxDate\\\"></ls-inputdatecrypted>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"beneficiaryType\\\" label=\\\"Beneficiary Type\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.beneficiarytype\\\">\\r\\n                <lf-select #beneficiaryType name=\\\"beneficiaryType\\\" [items]=\\\"listData.BeneficiaryType | listItems:'value':'Id'\\\"\\r\\n                    [(ngModel)]=\\\"beneType\\\" (change)=\\\"onBeneficiaryTypeChange()\\\" secureComponent required\\r\\n                    style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3 \\\">\\r\\n            <lf-form-input [control]=\\\"taxId \\\" label=\\\"Tax ID \\\" i18n-label=\\\"@@applicant.coverage.beneficiary.taxid\\\">\\r\\n                <lf-inputtaxid #taxId name=\\\"taxId \\\" [(ngModel)]=\\\"data.TaxId\\\" secureComponent></lf-inputtaxid>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"amount\\\" label=\\\"Amount\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.amount\\\">\\r\\n                <lf-inputnumber #amount name=\\\"amount\\\" [(ngModel)]=\\\"data.Amount\\\" secureComponent format=\\\"n0\\\"\\r\\n                    [allowNegative]=\\\"false\\\" [maxLength]=\\\"10\\\"></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"sharePct \\\" label=\\\"Share % \\\" i18n-label=\\\"@@applicant.coverage.beneficiary.sharepercentwithspace\\\">\\r\\n                <lf-inputnumber #sharePct name=\\\"sharePct \\\" [max]=\\\"100 \\\" [(ngModel)]=\\\"data.Percentage\\\" [allowNegative]=\\\"false\\\"\\r\\n                    maxLength=\\\"5\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"relation \\\" label=\\\"Relation \\\" i18n-label=\\\"@@applicant.coverage.beneficiary.relation\\\">\\r\\n                <lf-select #relation name=\\\"relation \\\" [items]=\\\"listData.RelationshipToInsuredCode | listItems: 'value':\\r\\n                    'Id' | emptyItem \\\"\\r\\n                    [(ngModel)]=\\\"data.RelationshipToInsuredCode\\\" container=\\\"dialog\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Irrevocable\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.irrevocable\\\" [control]=\\\"irrevocableFlag\\\">\\r\\n                <lf-radiobuttongroup #irrevocableFlag name=\\\"irrevocableFlag\\\" [(ngModel)]=\\\"data.IrrevokableIndicator\\\"\\r\\n                    secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"irrevocableFlag\\\" value=\\\"-1\\\" label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"irrevocableFlag\\\" value=\\\"0\\\" label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { BeneficiaryTypeComponent } from '../beneficiary-type.component';\r\n\r\n@Component({\r\n    selector: 'beneficiary-estate',\r\n    templateUrl: './beneficiary-estate.component.html'\r\n})\r\nexport class BeneficiaryEstateComponent extends BeneficiaryTypeComponent {\r\n    public maxDate: Date;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.maxDate = new Date();\r\n    }\r\n}\r\n","export * from './person/beneficiary-person.component';\r\nexport * from './estate/beneficiary-estate.component';\r\nexport * from './beneficiary-type.component';","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"title\\\" label=\\\"Title\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.title\\\">\\r\\n                <lf-select #title name=\\\"title\\\" [items]=\\\"listData.Title | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.Title\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"firstName\\\" label=\\\"First Name\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.firstname\\\">\\r\\n                <lf-inputtext #firstName name=\\\"firstName\\\" [(ngModel)]=\\\"data.FirstName\\\" [maxLength]=\\\"200\\\"\\r\\n                    secureComponent required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"middleName\\\" label=\\\"Middle Name\\\" i18n-label=\\\"@@applicant.coverage.middlename.trustname\\\">\\r\\n                <lf-inputtext #middleName name=\\\"middleName\\\" [(ngModel)]=\\\"data.MiddleName\\\" [maxLength]=\\\"100\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"lastName\\\" label=\\\"Last Name\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.lastname\\\">\\r\\n                <lf-inputtext #lastName name=\\\"lastName\\\" [(ngModel)]=\\\"data.LastName\\\" [maxLength]=\\\"200\\\" secureComponent\\r\\n                    required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"suffix\\\" label=\\\"Suffix\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.suffix\\\">\\r\\n                <lf-select #suffix name=\\\"suffix\\\" [items]=\\\"listData.Suffix | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.Suffix\\\" secureComponent style=\\\"width:70px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"birthDate\\\" label=\\\"Birth Date\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.birthdate\\\">\\r\\n                <ls-inputdatecrypted #birthDate name=\\\"birthDate\\\" [(ngModel)]=\\\"data.BirthDate\\\" [maxDate]=\\\"maxBirthDate\\\"\\r\\n                    container=\\\"dialog\\\" secureComponent></ls-inputdatecrypted>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"beneficiaryType\\\" label=\\\"Beneficiary Type\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.beneficiarytype\\\">\\r\\n                <lf-select #beneficiaryType name=\\\"beneficiaryType\\\" [items]=\\\"listData.BeneficiaryType | listItems:'value':'Id'\\\"\\r\\n                    [(ngModel)]=\\\"beneType\\\" (change)=\\\"onBeneficiaryTypeChange()\\\" secureComponent required\\r\\n                    style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.taxid\\\">\\r\\n                <lf-inputtaxid #taxId name=\\\"taxId\\\" [(ngModel)]=\\\"data.TaxId\\\" secureComponent></lf-inputtaxid>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"amount\\\" label=\\\"Amount\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.amount\\\">\\r\\n                <lf-inputnumber #amount name=\\\"amount\\\" [(ngModel)]=\\\"data.Amount\\\" maxLength=\\\"10\\\" format=\\\"n0\\\"\\r\\n                    [allowNegative]=\\\"false\\\" [maxLength]=\\\"10\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"sharePct\\\" label=\\\"Share %\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.sharepctwithspace\\\">\\r\\n                <lf-inputnumber #sharePct name=\\\"sharePct\\\" [max]=\\\"100\\\" [(ngModel)]=\\\"data.Percentage\\\" [allowNegative]=\\\"false\\\"\\r\\n                    maxLength=\\\"5\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"relation\\\" label=\\\"Relation\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.relation\\\">\\r\\n                <lf-select #relation name=\\\"relation\\\" [items]=\\\"listData.RelationshipToInsuredCode | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    container=\\\"dialog\\\" [(ngModel)]=\\\"data.RelationshipToInsuredCode\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Irrevocable\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.irrevocable\\\" [control]=\\\"irrevocableFlag\\\">\\r\\n                <lf-radiobuttongroup #irrevocableFlag name=\\\"irrevocableFlag\\\" [(ngModel)]=\\\"data.IrrevokableIndicator\\\"\\r\\n                    secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"irrevocableFlag\\\" value=\\\"-1\\\" label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"irrevocableFlag\\\" value=\\\"0\\\" label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { BeneficiaryTypeComponent } from '../beneficiary-type.component';\r\n\r\n@Component({\r\n    selector: 'beneficiary-partnership',\r\n    templateUrl: './beneficiary-partnership.component.html'\r\n})\r\nexport class BeneficiaryPartnershipComponent extends BeneficiaryTypeComponent {\r\n    public maxBirthDate: Date;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.maxBirthDate = this.setBirthDateLimit();\r\n    }\r\n\r\n    private setBirthDateLimit(): Date {\r\n        const today = new Date().getDate();\r\n        const currentMonth = new Date().getMonth();\r\n        const currentYear = new Date().getFullYear();\r\n        return new Date(currentYear, currentMonth, today - 1);\r\n    }\r\n}\r\n","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"title\\\" label=\\\"Title\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.title\\\">\\r\\n                <lf-select #title name=\\\"title\\\" [items]=\\\"listData.Title | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.Title\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"firstName\\\" label=\\\"First Name\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.firstname\\\">\\r\\n                <lf-inputtext #firstName name=\\\"firstName\\\" [(ngModel)]=\\\"data.FirstName\\\" [maxLength]=\\\"200\\\"\\r\\n                    secureComponent required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"middleName\\\" label=\\\"Middle Name\\\" i18n-label=\\\"@@applicant.coverage.middlename.trustname\\\">\\r\\n                <lf-inputtext #middleName name=\\\"middleName\\\" [(ngModel)]=\\\"data.MiddleName\\\" [maxLength]=\\\"100\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"lastName\\\" label=\\\"Last Name\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.lastname\\\">\\r\\n                <lf-inputtext #lastName name=\\\"lastName\\\" [(ngModel)]=\\\"data.LastName\\\" [maxLength]=\\\"100\\\" secureComponent\\r\\n                    required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"suffix\\\" label=\\\"Suffix\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.suffix\\\">\\r\\n                <lf-select #suffix name=\\\"suffix\\\" [items]=\\\"listData.Suffix | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.Suffix\\\" secureComponent style=\\\"width:70px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"birthDate\\\" label=\\\"Birth Date\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.birthdate\\\">\\r\\n                <ls-inputdatecrypted #birthDate name=\\\"birthDate\\\" [(ngModel)]=\\\"data.BirthDate\\\" [maxDate]=\\\"maxBirthDate\\\"\\r\\n                    secureComponent container=\\\"dialog\\\"></ls-inputdatecrypted>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"beneficiaryType\\\" label=\\\"Beneficiary Type\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.beneficiarytype\\\">\\r\\n                <lf-select #beneficiaryType name=\\\"beneficiaryType\\\" [items]=\\\"listData.BeneficiaryType | listItems:'value':'Id'\\\"\\r\\n                    [(ngModel)]=\\\"beneType\\\" (change)=\\\"onBeneficiaryTypeChange()\\\" secureComponent required\\r\\n                    style=\\\"width:150px\\\" container=\\\"dialog\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.taxid\\\">\\r\\n                <lf-inputtaxid #taxId name=\\\"taxId\\\" [(ngModel)]=\\\"data.TaxId\\\" secureComponent></lf-inputtaxid>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"amount\\\" label=\\\"Amount\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.amount\\\">\\r\\n                <lf-inputnumber #amount name=\\\"amount\\\" [(ngModel)]=\\\"data.Amount\\\" maxLength=\\\"10\\\" format=\\\"n0\\\"\\r\\n                    [allowNegative]=\\\"false\\\" [maxLength]=\\\"10\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"sharePct\\\" label=\\\"Share %\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.sharepctwithspace\\\">\\r\\n                <lf-inputnumber #sharePct name=\\\"sharePct\\\" [max]=\\\"100\\\" [(ngModel)]=\\\"data.Percentage\\\" [allowNegative]=\\\"false\\\"\\r\\n                    maxLength=\\\"5\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"relation\\\" label=\\\"Relation\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.relation\\\">\\r\\n                <lf-select #relation name=\\\"relation\\\" [items]=\\\"listData.RelationshipToInsuredCode | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.RelationshipToInsuredCode\\\" container=\\\"dialog\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input label=\\\"Irrevocable\\\" i18n-label=\\\"@@applicant.coverage.beneficiary.irrevocable\\\" [control]=\\\"irrevocableFlag\\\">\\r\\n                <lf-radiobuttongroup #irrevocableFlag name=\\\"irrevocableFlag\\\" [(ngModel)]=\\\"data.IrrevokableIndicator\\\"\\r\\n                    secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"irrevocableFlag\\\" value=\\\"-1\\\" label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"irrevocableFlag\\\" value=\\\"0\\\" label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { BeneficiaryTypeComponent } from '../beneficiary-type.component';\r\n\r\n@Component({\r\n    selector: 'beneficiary-person',\r\n    templateUrl: './beneficiary-person.component.html'\r\n})\r\nexport class BeneficiaryPersonComponent extends BeneficiaryTypeComponent {\r\n    public maxBirthDate: Date;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.maxBirthDate = this.setBirthDateLimit();\r\n    }\r\n\r\n    private setBirthDateLimit(): Date {\r\n        const today = new Date().getDate();\r\n        const currentMonth = new Date().getMonth();\r\n        const currentYear = new Date().getFullYear();\r\n        return new Date(currentYear, currentMonth, today - 1);\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { DataCollectionNames, BenefitDTO } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class AddBenefitDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const benefit = new BenefitDTO();\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(benefit, DataCollectionNames.BenefitParties);\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { BenefitDTO, PolicyCoverageDTO } from 'ls-core/model';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\nimport { ListsDataRequest, ListDataRequestBuilder, ListDataItem } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { ListMap } from 'life-core/model';\r\nimport { DirectDataResolverClass } from 'life-core/component';\r\n\r\n@Injectable()\r\nexport class AddBenefitListDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    private _appSession: AppSession;\r\n    public context?: any;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const policyCoverage: PolicyCoverageDTO = this.context as PolicyCoverageDTO;\r\n        // From LifeSuite 9.0\r\n        // There is no suitable attribute available on BenefitDTO so use note for this purpose\r\n        const benefit = new BenefitDTO();\r\n        benefit.Note = policyCoverage.PlanCodeId;\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        listDataRequestBuilder.addListRequestItem(benefit, 'BenefitId');\r\n\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Benefit\\\" i18n-label=\\\"@@applicant.covearge.benefit.benefit\\\" [control]=\\\"benefit\\\">\\r\\n                <lf-select #benefit name=\\\"benefit\\\" [(ngModel)]=\\\"benefitId\\\" [items]=\\\"resolvedData.listData?.BenefitId | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    style=\\\"width: 200px\\\" container=\\\"dialog\\\" secureComponent required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { ViewModel, ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\r\nimport { ICompose, IDialogViewModel, DialogViewModelResult, DialogData } from 'life-core/component';\r\nimport { DialogButton, ConfirmDialog, DialogButtonType } from 'life-core/component/dialog';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { BenefitDTO, PolicyCoverageDTO, Identifiable } from 'ls-core/model';\r\n\r\nimport { CoverageStatuses } from 'business/policy/shared';\r\nimport { ApplicantAuthorizationProvider } from 'business/policy/applicant/applicant-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'add-benefit.component',\r\n    templateUrl: './add-benefit.component.html',\r\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: ApplicantAuthorizationProvider }]\r\n})\r\nexport class AddBenefitComponent extends ViewModel implements ICompose, IDialogViewModel {\r\n    public resolvedData: any;\r\n    public benefitId: number;\r\n    private _benefit: BenefitDTO;\r\n    private _policyCoverage: PolicyCoverageDTO;\r\n    private _confirmDialog: ConfirmDialog;\r\n\r\n    constructor(injector: Injector, confirmDialog: ConfirmDialog, i18n: I18n) {\r\n        super(injector);\r\n        this._confirmDialog = confirmDialog;\r\n        this._benefit = new BenefitDTO();\r\n        this._benefit.identifier = new Identifiable();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public setModel(model: DialogData): void {\r\n        this.resolvedData = model.resolvedData;\r\n        this._policyCoverage = model.parameterData;\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId == DialogButtonType.ACCEPT) {\r\n            return this.validate().then(result => {\r\n                if (result == ViewValidationResult.pass) {\r\n                    if (!this.isExistingBenefit()) {\r\n                        this.addBenefit();\r\n                        return new DialogViewModelResult(this._benefit, true);\r\n                    } else {\r\n                        this.showDuplicateBenefitErrorMessage();\r\n                    }\r\n                } else {\r\n                    return new DialogViewModelResult(null, false);\r\n                }\r\n            });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    private isExistingBenefit(): boolean {\r\n        return this._policyCoverage.Benefits_LazyLoad.find(benefit => benefit.BenefitId == this.benefitId) != null;\r\n    }\r\n\r\n    private showDuplicateBenefitErrorMessage(): void {\r\n        this._confirmDialog.open({\r\n            message: this.i18n({\r\n                value: 'Benefit already exists. Pick a different one.',\r\n                id: 'applicant.coverage.benefit.alreadyexistsmsg'\r\n            }),\r\n            title: this.i18n({ value: 'Information', id: 'applicant.coverage.benefit.informationtitle' }),\r\n            buttons: [new DialogButton({ type: DialogButtonType.OK })]\r\n        });\r\n    }\r\n\r\n    private addBenefit(): void {\r\n        this._benefit.BenefitId = this.benefitId;\r\n        this._benefit.PolicyCoverageId = this._policyCoverage.PolicyCoverageId;\r\n        this._benefit.CoverageStatus = CoverageStatuses.PENDING;\r\n        this._benefit.BenefitParties_LazyLoad = [];\r\n        this._policyCoverage.Benefits_LazyLoad.push(this._benefit);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { AddBenefitComponent } from './add-benefit.component';\r\nimport { AddBenefitDataResolver } from './add-benefit-data.resolver';\r\nimport { AddBenefitListDataResolver } from './add-benefit-listdata.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [AddBenefitComponent],\r\n    exports: [AddBenefitComponent],\r\n    entryComponents: [AddBenefitComponent],\r\n    providers: [AddBenefitDataResolver, AddBenefitListDataResolver]\r\n})\r\nexport class AddBenefitModule {}\r\n","export * from './add-benefit-data.resolver';\r\nexport * from './add-benefit-listdata.resolver';\r\nexport * from './add-benefit.component';\r\nexport * from './add-benefit.module';","import { Type } from '@angular/core';\r\n\r\nimport { IItemListComponentResolver, ItemListComponentResolver } from 'life-core/component';\r\nimport { ItemComponentMap } from 'life-core/util/component-resolver';\r\n\r\nimport { BenefitDTO } from 'ls-core/model';\r\n\r\nimport { BenefitInfoComponent } from './benefit-info.component';\r\n\r\nexport class BenefitComponentResolver {\r\n    public getResolver(editModeOnly: boolean): IItemListComponentResolver<BenefitDTO> {\r\n        return new ItemListComponentResolver({\r\n            itemComponents: this.getItemViewModelTypeResolverMap(),\r\n            resolverField: null,\r\n            editModeOnly: editModeOnly\r\n        });\r\n    }\r\n\r\n    private getItemViewModelTypeResolverMap(): ItemComponentMap {\r\n        const componentMap: ItemComponentMap = new Map<string, Type<any>>();\r\n        componentMap.set('', BenefitInfoComponent);\r\n        return componentMap;\r\n    }\r\n}\r\n","module.exports = \"<div [hidden]=\\\"!item.visible\\\" [@fadeInOut]=\\\"item.visible\\\">\\r\\n    <div class=\\\"itemContent\\\" [class.invalid]=\\\"item.invalid\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-4\\\">\\r\\n                <lf-form-input label=\\\"Benefit\\\" [control]=\\\"benefitId\\\" i18n-label=\\\"@@aapplicant.coverage.benefit.benefit\\\">\\r\\n                    <lf-statictext #benefitId name=\\\"benefitId_{{item.sequenceId}}\\\" [value]=\\\"benefitName\\\"\\r\\n                        secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-4\\\">\\r\\n                <lf-form-input label=\\\"Amount\\\" [control]=\\\"amount\\\" i18n-label=\\\"@@applicant.coverage.benefit.amount\\\">\\r\\n                    <lf-inputnumber #amount name=\\\"amount_{{item.sequenceId}}\\\" [(ngModel)]=\\\"item.data.Amount\\\"\\r\\n                        [allowNegative]=\\\"false\\\" maxLength=\\\"10\\\" secureComponent></lf-inputnumber>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-4\\\">\\r\\n                <lf-form-input label=\\\"Duration\\\" [control]=\\\"duration\\\" i18n-label=\\\"@@applicant.coverage.benefit.duration\\\">\\r\\n                    <lf-inputnumber #duration name=\\\"duration_{{item.sequenceId}}\\\" [(ngModel)]=\\\"item.data.BenefitDuration\\\"\\r\\n                        format=\\\"n0\\\" decimals=\\\"0\\\" [allowNegative]=\\\"false\\\" maxLength=\\\"3\\\" secureComponent></lf-inputnumber>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-12\\\">\\r\\n                <lf-form-input label=\\\"Additional Information\\\" [control]=\\\"additionalInformation\\\" i18n-label=\\\"@@applicant.coverage.benefit.addlinfo\\\">\\r\\n                    <lf-inputtext #additionalInformation name=\\\"additionalInformation_{{item.sequenceId}}\\\" [(ngModel)]=\\\"item.data.Description\\\"\\r\\n                        [maxLength]=\\\"255\\\" secureComponent></lf-inputtext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-12 pb-1\\\">\\r\\n                <benefit-party [benefit]=\\\"item.data\\\"></benefit-party>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { ItemViewModel } from 'life-core/component/item-list';\r\nimport { ItemListAnimations } from 'life-core/component/item-list/animations/animations';\r\n\r\nimport { BenefitDTO, PolicyDTO } from 'ls-core/model';\r\nimport { AppSession } from 'ls-core/session';\r\n\r\nimport { AddBenefitListDataResolver } from './add-benefit/add-benefit-listdata.resolver';\r\nimport { ListDataUtil } from 'ls-core/service';\r\n\r\n@Component({\r\n    selector: 'benefit-info',\r\n    templateUrl: './benefit-info.component.html',\r\n    animations: ItemListAnimations\r\n})\r\nexport class BenefitInfoComponent extends ItemViewModel<BenefitDTO> {\r\n    public benefitName: string;\r\n    public resolvedData: any;\r\n\r\n    private _policy: PolicyDTO;\r\n    private _benefitListDataResolver: AddBenefitListDataResolver;\r\n\r\n    constructor(injector: Injector, appSession: AppSession, addBenefitListDataResolver: AddBenefitListDataResolver) {\r\n        super(injector);\r\n        this._policy = appSession.policyDTO;\r\n        this._benefitListDataResolver = addBenefitListDataResolver;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedListData();\r\n        this.setBenefitName();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private setBenefitName(): void {\r\n        const coverage = this._policy.PolicyCoverages_LazyLoad.find(\r\n            coverage => coverage.PolicyCoverageId === this.item.data.PolicyCoverageId\r\n        );\r\n        const listName = 'BenefitId_' + coverage.PlanCodeId;\r\n        if (this.listData[listName]) {\r\n            this.benefitName = ListDataUtil.getValueFromListDataById(\r\n                this.listData[listName],\r\n                this.item.data.BenefitId.toString()\r\n            );\r\n        } else {\r\n            this._benefitListDataResolver.context = coverage;\r\n            this._benefitListDataResolver.directResolve().then(data => {\r\n                this.benefitName = ListDataUtil.getValueFromListDataById(\r\n                    data.BenefitId,\r\n                    this.item.data.BenefitId.toString()\r\n                );\r\n            });\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<lf-panel header=\\\"Benefits\\\" i18n-header=\\\"@@applicant.coverage.benefit.benefit\\\" [toggleable]=\\\"true\\\" panelType=\\\"tertiary\\\"\\r\\n stateId=\\\"panel_benefit_party\\\" [state]=\\\"componentsState.get('panel_benefit_party')\\\">\\r\\n\\t<item-list name=\\\"benefitList\\\" #refItemList id=\\\"item_list\\\" [oItems]=\\\"oItems\\\" [editModeOnly]=\\\"editModeOnly\\\" [buttons]=\\\"buttons\\\"\\r\\n\\t secureComponent></item-list>\\r\\n</lf-panel>\"","import { ViewChild, Injector, Input, Component } from '@angular/core';\r\n\r\nimport { ItemListViewModel } from 'life-core/component/item-list';\r\nimport { ResolvedDataNames } from 'life-core/view-model';\r\nimport {\r\n    ItemList,\r\n    IItemListComponentResolver,\r\n    IItem,\r\n    CreateItemEventData,\r\n    ItemListButton,\r\n    ItemListButtonType\r\n} from 'life-core/component/item-list';\r\nimport {\r\n    DialogButton,\r\n    DialogButtonType,\r\n    ModalDialog,\r\n    ConfirmDialog,\r\n    DialogResult,\r\n    DialogSize\r\n} from 'life-core/component/dialog';\r\nimport { ButtonActionType } from 'life-core/component/shared';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { CoverageDTO, PolicyCoverageDTO, PolicyDTO, BenefitDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\nimport { BenefitComponentResolver } from './benefit-component.resolver';\r\nimport { AddBenefitComponent, AddBenefitListDataResolver } from './add-benefit';\r\n\r\n@Component({\r\n    selector: 'benefit-list',\r\n    templateUrl: './benefit-list.component.html',\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class BenefitListComponent extends ItemListViewModel<BenefitDTO> {\r\n    @ViewChild(ItemList)\r\n    public refItemList: ItemList<BenefitDTO>;\r\n    @Input()\r\n    public coverage: CoverageDTO;\r\n\r\n    private _policyCoverage: PolicyCoverageDTO;\r\n    private _policy: PolicyDTO;\r\n    private _modalDialog: ModalDialog;\r\n    private _confirmDialog: ConfirmDialog;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        modalDialog: ModalDialog,\r\n        confirmDialog: ConfirmDialog,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this.editModeOnly = true;\r\n        this._modalDialog = modalDialog;\r\n        this._confirmDialog = confirmDialog;\r\n        policySubscriber.subscribe(this, p => {\r\n            this.onPolicyUpdate(p);\r\n        });\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    private onPolicyUpdate(policy: PolicyDTO): void {\r\n        const reloading = !!this._policy;\r\n        this._policy = policy;\r\n        if (reloading) {\r\n            this.reloadItems();\r\n        }\r\n    }\r\n\r\n    protected getItemList(): ItemList<BenefitDTO> {\r\n        return this.refItemList;\r\n    }\r\n\r\n    protected getItemComponentResolver(): IItemListComponentResolver<BenefitDTO> {\r\n        const resolverHelper = new BenefitComponentResolver();\r\n        return resolverHelper.getResolver(this.editModeOnly);\r\n    }\r\n\r\n    protected getItems(): Promise<IItem<BenefitDTO>[]> {\r\n        const items: IItem<BenefitDTO>[] = [];\r\n        this._policyCoverage = this._policy.PolicyCoverages_LazyLoad.find(\r\n            coverage => coverage.PolicyCoverageId === this.coverage.PolicyCoverageId\r\n        );\r\n        if (!this._policyCoverage.Benefits_LazyLoad) {\r\n            this._policyCoverage.Benefits_LazyLoad = [];\r\n        }\r\n\r\n        this._policyCoverage.Benefits_LazyLoad.forEach(benefit => {\r\n            items.push(this.setupNewItem(benefit));\r\n        });\r\n        return Promise.resolve(items);\r\n    }\r\n\r\n    protected getButtons(): ItemListButton[] {\r\n        return [\r\n            new ItemListButton({\r\n                type: ItemListButtonType.ADD,\r\n                actionType: ButtonActionType.DataChange\r\n            }),\r\n            new ItemListButton({\r\n                type: ItemListButtonType.DELETE,\r\n                actionType: ButtonActionType.DataChange\r\n            })\r\n        ];\r\n    }\r\n\r\n    protected get itemDataIDPropertyName(): string {\r\n        return 'BenefitId';\r\n    }\r\n\r\n    protected createItem(eventData: CreateItemEventData<BenefitDTO>): Promise<any> {\r\n        return this.addBenefit();\r\n    }\r\n\r\n    private addBenefit(): Promise<any> {\r\n        return this._modalDialog\r\n            .open({\r\n                view: AddBenefitComponent,\r\n                data: this._policyCoverage,\r\n                resolve: [\r\n                    {\r\n                        resolveName: ResolvedDataNames.listData,\r\n                        resolverClass: AddBenefitListDataResolver,\r\n                        context: this._policyCoverage\r\n                    }\r\n                ],\r\n                title: this.i18n({ value: 'Select Benefit', id: 'applicant.coverage.benefit.title' }),\r\n                buttons: [\r\n                    new DialogButton({ type: DialogButtonType.ACCEPT }),\r\n                    new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\r\n                ],\r\n                size: DialogSize.small\r\n            })\r\n            .then(dialogRef => {\r\n                return dialogRef.result.then(result => {\r\n                    return result.returnValue;\r\n                });\r\n            });\r\n    }\r\n\r\n    protected removeItem(item: IItem<BenefitDTO>): Promise<boolean> {\r\n        return this.confirmBenefitRemoval(item).then(result => {\r\n            const shouldRemove = result.buttonId == DialogButtonType.OK;\r\n            if (shouldRemove) {\r\n                return this.removeBenefit(item).then(result => {\r\n                    return result;\r\n                });\r\n            }\r\n            return Promise.resolve(shouldRemove);\r\n        });\r\n    }\r\n\r\n    private confirmBenefitRemoval(item: IItem<BenefitDTO>): Promise<DialogResult> {\r\n        return this._confirmDialog.open({\r\n            message: this.i18n({\r\n                value: 'Are you sure you want to delete the selected item?',\r\n                id: 'policy.general.deletealertmsg'\r\n            }),\r\n            title: this.i18n({ value: 'Delete Benefit Confirmation', id: 'applicant.coverage.benefit.delete' }),\r\n            buttons: [\r\n                new DialogButton({ type: DialogButtonType.OK }),\r\n                new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\r\n            ]\r\n        });\r\n    }\r\n\r\n    private removeBenefit(item: IItem<BenefitDTO>): Promise<boolean> {\r\n        this._policyCoverage.Benefits_LazyLoad.splice(this._policyCoverage.Benefits_LazyLoad.indexOf(item.data), 1);\r\n        return Promise.resolve(true);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { MeasurementUtil, ListUtil, NamePattern } from 'life-core/util';\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { ListItem } from 'life-core/model';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\n@Injectable()\r\nexport class BenefitPartyGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(...params: any[]): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Name', id: 'applicant.coverage.benefit.benefitparty.name' }),\r\n            field: BenefitPartyGridFields.FullName,\r\n            width: 100,\r\n            valueFormatter: (params: any) =>\r\n                this._lsCellFormatters.nameCellFormatter(params, NamePattern.LastFirstAndMiddleInitial),\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'DOB', id: 'applicant.coverage.benefit.benefitparty.dob' }),\r\n            field: BenefitPartyGridFields.BirthDate,\r\n            width: 100,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Gender', id: 'applicant.coverage.benefit.benefitparty.gender' }),\r\n            field: BenefitPartyGridFields.Gender,\r\n            width: 100,\r\n            valueFormatter: this.getGender\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Height', id: 'applicant.coverage.benefit.benefitparty.height' }),\r\n            field: BenefitPartyGridFields.Height,\r\n            width: 100,\r\n            valueFormatter: this.getHeight\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Weight', id: 'applicant.coverage.benefit.benefitparty.weight' }),\r\n            field: BenefitPartyGridFields.Weight,\r\n            width: 100,\r\n            valueFormatter: this.getWeight\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Relation', id: 'applicant.coverage.benefit.benefitparty.relation' }),\r\n            field: BenefitPartyGridFields.Relation,\r\n            width: 100,\r\n            valueFormatter: this.getRelation,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Client ID', id: 'applicant.coverage.benefit.benefitparty.clientid' }),\r\n            field: BenefitPartyGridFields.ClientId,\r\n            width: 100\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getGender(params: any): string {\r\n        if (params.value) {\r\n            return params.value === 'M' ? 'Male' : 'Female';\r\n        }\r\n    }\r\n    private getHeight(params: any): string {\r\n        if (params.value) {\r\n            return `${MeasurementUtil.getFtFromHeight(params.value)} ft ${MeasurementUtil.getInchFromHeight(\r\n                params.value\r\n            )} in / ${MeasurementUtil.convertInchToCm(params.value)} cm`;\r\n        }\r\n    }\r\n\r\n    private getWeight(params: any): string {\r\n        if (params.value) {\r\n            return `${params.value} lb / ${MeasurementUtil.convertLbToKg(params.value)} kg`;\r\n        }\r\n    }\r\n\r\n    private getRelation(params: any): string {\r\n        if (params.node.data.RelationshipToInsuredCode) {\r\n            const RelationShipToInsuredDropDownList: ListItem[] = ListUtil.convertToListItems(\r\n                params.context.listData.RelationshipToInsuredCode\r\n            );\r\n            return ListUtil.getLabelByValue(\r\n                RelationShipToInsuredDropDownList,\r\n                params.node.data.RelationshipToInsuredCode\r\n            );\r\n        }\r\n        return '';\r\n    }\r\n}\r\n\r\nexport const BenefitPartyGridFields = {\r\n    FullName: 'FirstName',\r\n    BirthDate: 'BirthDate',\r\n    Gender: 'Sex',\r\n    Height: 'HeightInches',\r\n    Weight: 'WeightPounds',\r\n    Relation: 'RelationshipToInsuredCode',\r\n    ClientId: 'ClientId'\r\n};\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { BenefitPartyDTO, BenefitDTO } from 'ls-core/model';\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { Locale } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class BenefitPartyItemFactory extends BaseDTOItemFactory<BenefitPartyDTO> {\r\n    public newInstance(createItemParams: BenefitPartyCreateItemParams<BenefitPartyDTO>): BenefitPartyDTO {\r\n        const benefitPartyDTO = new BenefitPartyDTO();\r\n        benefitPartyDTO.BenefitId = createItemParams.benefit.BenefitId;\r\n        benefitPartyDTO.PolicyCoverageId = createItemParams.benefit.PolicyCoverageId;\r\n        benefitPartyDTO.PersonTypeId = 'Person';\r\n        benefitPartyDTO.PreferredLanguageCode = Locale.en_US.toLowerCase();\r\n        benefitPartyDTO.Addresses_LazyLoad = [];\r\n        benefitPartyDTO.Phones_LazyLoad = [];\r\n        benefitPartyDTO.Relations_LazyLoad = [];\r\n        benefitPartyDTO.PartyId = this.getNextId(createItemParams.items, 'PartyId');\r\n        // benefitPartyDTO.PersonId = this.getNextId(createItemParams.items, \"PersonId\");\r\n        return benefitPartyDTO;\r\n    }\r\n}\r\n\r\nexport interface BenefitPartyCreateItemParams<T> extends CreateItemParams<T> {\r\n    benefit: BenefitDTO;\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\" secureComponent\\r\\n        [disabled]=\\\"disabled\\\" style=\\\"width: 900px;\\\">\\r\\n    </master-detail>\\r\\n</div>\"","import { Injector, Component, Input } from '@angular/core';\r\n\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport {\r\n    BaseDataManager,\r\n    RowManagementDelegate,\r\n    MasterDetailComponentResolver,\r\n    CreateItemEventData\r\n} from 'life-core/component/master-detail';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { BenefitDTO, BenefitPartyDTO } from 'ls-core/model';\r\n\r\nimport { BasePolicyMasterDetailViewModel } from 'business/policy/shared';\r\nimport { BenefitPartyItemFactory, BenefitPartyCreateItemParams } from './benefit-party-item.factory';\r\nimport { BenefitPartyGridColumnsBuilder } from './benefit-party-grid-columns.builder';\r\nimport { BenefitPartyDetailEditor } from './detail/benefit-party-detail-editor';\r\nimport { DirectDataResolve, DialogSize } from 'life-core/component';\r\n\r\nimport { BenefitPartyListDataResolver } from './detail/benefit-party-listdata.resolver';\r\n\r\nexport function rowManagementDelegateFactory(\r\n    itemFactory: BenefitPartyItemFactory,\r\n    dataManager: BaseDataManager<BenefitPartyDTO>\r\n): RowManagementDelegate<BenefitPartyDTO> {\r\n    return new RowManagementDelegate({\r\n        itemName: 'BenefitParty',\r\n        itemIDPropertyName: 'PartyId',\r\n        itemFactory: itemFactory,\r\n        dataManager: dataManager\r\n    });\r\n}\r\n\r\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<BenefitPartyDTO> {\r\n    return new MasterDetailComponentResolver({\r\n        itemComponents: BenefitPartyDetailEditor\r\n    });\r\n}\r\n\r\n@Component({\r\n    selector: 'benefit-party',\r\n    templateUrl: './benefit-party.component.html',\r\n    providers: [\r\n        BaseDataManager,\r\n        BenefitPartyItemFactory,\r\n        {\r\n            provide: RowManagementDelegate,\r\n            useFactory: rowManagementDelegateFactory,\r\n            deps: [BenefitPartyItemFactory, BaseDataManager]\r\n        },\r\n        {\r\n            provide: MasterDetailComponentResolver,\r\n            useFactory: itemComponentResolverFactory\r\n        },\r\n        BenefitPartyGridColumnsBuilder\r\n    ]\r\n})\r\nexport class BenefitPartyComponent extends BasePolicyMasterDetailViewModel<BenefitPartyDTO> {\r\n    @Input() public benefit: BenefitDTO;\r\n    private _gridColumnsBuilder: BenefitPartyGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, benefitPartyGridColumnsBuilder: BenefitPartyGridColumnsBuilder, i18n: I18n) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        this._gridColumnsBuilder = benefitPartyGridColumnsBuilder;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedListData();\r\n        return Promise.resolve(null);\r\n    }\r\n\r\n    public get showDetailAsPopup(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return this.i18n({ value: 'Benefit Party', id: 'policy.case.benefitparty.title' });\r\n    }\r\n\r\n    protected loadItems(): BenefitPartyDTO[] {\r\n        return this.benefit.BenefitParties_LazyLoad;\r\n    }\r\n\r\n    protected getRowNodeId(data: BenefitPartyDTO): any {\r\n        return data.PartyId;\r\n    }\r\n    protected createItem(eventData: CreateItemEventData): Promise<BenefitPartyDTO> {\r\n        const newBenefitParty = this.rowManagementDelegate.addNewRow({\r\n            items: this.items,\r\n            benefit: this.benefit\r\n        } as BenefitPartyCreateItemParams<BenefitPartyDTO>);\r\n        return Promise.resolve(newBenefitParty);\r\n    }\r\n\r\n    protected getItemDetailDialogResolve(item: BenefitPartyDTO): DirectDataResolve[] {\r\n        return [\r\n            {\r\n                resolveName: 'listData',\r\n                resolverClass: BenefitPartyListDataResolver,\r\n                context: item\r\n            }\r\n        ];\r\n    }\r\n\r\n    protected getItemDetailDialogSize(): DialogSize | string {\r\n        return 'lg';\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { BenefitPartyComponent } from './benefit-party.component';\r\nimport { BenefitPartyDetailEditor } from './detail/benefit-party-detail-editor';\r\nimport { BenefitPartyListDataResolver } from './detail/benefit-party-listdata.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [BenefitPartyComponent, BenefitPartyDetailEditor],\r\n    exports: [BenefitPartyComponent, BenefitPartyDetailEditor],\r\n    providers: [BenefitPartyListDataResolver],\r\n    entryComponents: [BenefitPartyDetailEditor]\r\n})\r\nexport class BenefitPartyModule {}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"firstName\\\" label=\\\"First Name\\\" i18n-label=\\\"@@applicant.coverage.benefit.party.firstname\\\">\\r\\n                <lf-inputtext #firstName name=\\\"firstName\\\" [(ngModel)]=\\\"data.FirstName\\\" maxLength=\\\"250\\\" required\\r\\n                    [authorizationLevel]=\\\"authorizationData.defaultLevel\\\" [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"middleName\\\" label=\\\"Middle Name\\\" i18n-label=\\\"@@applicant.coverage.benefit.party.middlename\\\">\\r\\n                <lf-inputtext #middleName name=\\\"middleName\\\" [(ngModel)]=\\\"data.MiddleName\\\" maxLength=\\\"10\\\"\\r\\n                    [authorizationLevel]=\\\"\\r\\n                    authorizationData.defaultLevel\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"lastName\\\" label=\\\"Last Name\\\" i18n-label=\\\"@@applicant.coverage.benefit.party.lastname\\\">\\r\\n                <lf-inputtext #lastName name=\\\"lastName\\\" [(ngModel)]=\\\"data.LastName\\\" maxLength=\\\"250\\\" required\\r\\n                    [authorizationLevel]=\\\"\\r\\n                    authorizationData.defaultLevel\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"birthDate\\\" label=\\\"Birth Date\\\" i18n-label=\\\"@@applicant.coverage.benefit.party.birthdate\\\">\\r\\n                <ls-inputdatecrypted #birthDate name=\\\"birthDate\\\" [(ngModel)]=\\\"data.BirthDate\\\" [maxDate]=\\\"maxBirthDate\\\"\\r\\n                    container=\\\"dialog\\\" required></ls-inputdatecrypted>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"gender\\\" label=\\\"Gender\\\" i18n-label=\\\"@@applicant.coverage.benefit.party.gender\\\">\\r\\n                <lf-select #gender name=\\\"gender\\\" [(ngModel)]=\\\"data.Sex\\\" [items]=\\\"resolvedData.listData.Sex | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"height\\\" label=\\\"Height\\\" i18n-label=\\\"@@applicant.coverage.benefit.party.height\\\">\\r\\n                <lf-inputheight #height name=\\\"height\\\" [(ngModel)]=\\\"data.HeightInches\\\" maxLength=\\\"4\\\"></lf-inputheight>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"weight\\\" label=\\\"Weight\\\" i18n-label=\\\"@@applicant.coverage.benefit.party.weight\\\">\\r\\n                <lf-inputweight #weight name=\\\"weight\\\" [(ngModel)]=\\\"data.WeightPounds\\\" maxLength=\\\"4\\\"></lf-inputweight>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"relation\\\" label=\\\"Relation\\\" i18n-label=\\\"@@applicant.coverage.benefit.party.relation\\\">\\r\\n                <lf-select #relation name=\\\"relation\\\" [(ngModel)]=\\\"data.RelationshipToInsuredCode\\\" \\r\\n                [items]=\\\"resolvedData.listData.RelationshipToInsuredCode | listItems:'value':'Id' | emptyItem\\\"\\r\\n                container=\\\"dialog\\\" style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"clientID\\\" label=\\\"Client ID\\\" i18n-label=\\\"@@applicant.coverage.benefit.party.clientid\\\">\\r\\n                <lf-inputtext #clientID name=\\\"clientID\\\" maxLength=\\\"15\\\" [(ngModel)]=\\\"data.ClientId\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Injector, Component } from '@angular/core';\r\n\r\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\r\nimport { DialogViewModelResult } from 'life-core/component';\r\n\r\nimport { BenefitPartyDTO } from 'ls-core/model';\r\n\r\nimport { ApplicantAuthorizationProvider } from 'business/policy/applicant/applicant-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'benefit-party-detail-editor',\r\n    templateUrl: './benefit-party-detail-editor.html',\r\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: ApplicantAuthorizationProvider }]\r\n})\r\nexport class BenefitPartyDetailEditor extends BasePolicyDialogDetailViewModel<BenefitPartyDTO> {\r\n    public maxBirthDate: Date;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.maxBirthDate = this.setBirthDateLimit();\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedListData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (this.isDialogButtonTypeOK(buttonId)) {\r\n            const isDirty = this.isDirty();\r\n            return this.validate().then(result => {\r\n                return new DialogViewModelResult(this.data, result == ViewValidationResult.pass, isDirty);\r\n            });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    private setBirthDateLimit(): Date {\r\n        const today = new Date().getDate();\r\n        const currentMonth = new Date().getMonth();\r\n        const currentYear = new Date().getFullYear();\r\n        return new Date(currentYear, currentMonth, today - 1);\r\n    }\r\n}\r\n","﻿import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { ListMap } from 'life-core/model';\r\nimport { BenefitPartyDTO } from 'ls-core/model/dto';\r\nimport { ListDataRequestBuilder, ListsDataRequest, ListDataItem } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class BenefitPartyListDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    private _appSession: AppSession;\r\n    public context?: any;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    public getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        const benefitParty: BenefitPartyDTO = this.context as BenefitPartyDTO;\r\n        listDataRequestBuilder.addListRequestItem(benefitParty, 'Sex');\r\n        listDataRequestBuilder.addListRequestItem(benefitParty, 'RelationshipToInsuredCode');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { BenefitInfoComponent } from './benefit-info.component';\r\nimport { BenefitListComponent } from './benefit-list.component';\r\nimport { AddBenefitModule } from './add-benefit/add-benefit.module';\r\nimport { BenefitPartyModule } from './benefit-party/benefit-party.module';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule, AddBenefitModule, BenefitPartyModule],\r\n    declarations: [BenefitInfoComponent, BenefitListComponent],\r\n    exports: [BenefitInfoComponent, BenefitListComponent],\r\n    entryComponents: [BenefitInfoComponent],\r\n    providers: []\r\n})\r\nexport class BenefitModule {}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\" style=\\\"height: 200px\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Name\\\" [control]=\\\"fundName\\\" i18n-label=\\\"@@applicant.coverage.funds.name\\\">\\r\\n                <lf-select #fundName name=\\\"fundName\\\" [(ngModel)]=\\\"data.FundCode\\\" [items]=\\\"resolvedData.listData | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    secureComponent style=\\\"width:150px\\\" [disabled]=\\\"isFundSelectionDisabled\\\" container=\\\"dialog\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"%Allocation\\\" [control]=\\\"allocation\\\" i18n-label=\\\"@@applicant.coverage.funds.allocation\\\">\\r\\n                <lf-inputnumber format=\\\"n2\\\" #allocation [max]=\\\"100\\\" name=\\\"allocation\\\" [(ngModel)]=\\\"data.PercentAllocation\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent required></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector, Injectable } from '@angular/core';\r\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\r\nimport { ParentChildRegistry } from 'life-core/view-model';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { FundAllocationDTO } from 'ls-core/model';\r\n\r\nimport { ApplicantAuthorizationProvider } from 'business/policy/applicant/applicant-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'funds-list-detail-editor',\r\n    templateUrl: './funds-list-detail-editor.html',\r\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: ApplicantAuthorizationProvider }]\r\n})\r\n@Injectable()\r\nexport class FundsListDialogDetailEditor extends BasePolicyDialogDetailViewModel<FundAllocationDTO> {\r\n    public isFundSelectionDisabled: boolean;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.disableFundSelection();\r\n    }\r\n    private disableFundSelection(): void {\r\n        if (this.data.FundCode) {\r\n            this.isFundSelectionDisabled = true;\r\n        }\r\n    }\r\n}\r\n","import { DirectResolve } from 'life-core/view-model/data-resolver';\r\nimport { ListMap } from 'life-core/model';\r\n\r\nimport { ListDataItem } from 'ls-core/service';\r\n\r\nexport class FundsListDialogDataResolver implements DirectResolve<ListMap<ListDataItem>> {\r\n    public context: any;\r\n\r\n    constructor() {}\r\n\r\n    public directResolve(): ListMap<ListDataItem> {\r\n        return this.context.fundCodes.filter(this.isNonExistingFundPredicate.bind(this));\r\n    }\r\n\r\n    /**\r\n     * filters only funds which do not exist in fundsList or is an active fund\r\n     * @param item - each item in FundCodes\r\n     */\r\n    private isNonExistingFundPredicate(item: ListDataItem): boolean {\r\n        return (\r\n            this.context.activeFund.FundCode === item.Id ||\r\n            !this.context.fundList.find(fund => fund.FundCode === item.Id)\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class FundsListGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Name', id: 'applicant.coverage.funds.name' }),\r\n            field: FundsList.Name,\r\n            width: 50,\r\n            valueFormatter: this.getFundValueByCode\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: '%Allocation', id: 'applicant.coverage.funds.allocation' }),\r\n            field: FundsList.Allocation,\r\n            width: 50\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getFundValueByCode(params: any): string {\r\n        if (params.node.data.FundCode) {\r\n            const fund = params.context.listData.FundCode.find(item => item.Id === params.node.data.FundCode);\r\n            return fund.value;\r\n        }\r\n        return '';\r\n    }\r\n}\r\n\r\nconst FundsList = {\r\n    Name: 'FundCode',\r\n    Allocation: 'PercentAllocation'\r\n};\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { FundAllocationDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class FundAllocationItemFactory extends BaseDTOItemFactory<FundAllocationDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<FundAllocationDTO>): FundAllocationDTO {\r\n        const fundAllocation = new FundAllocationDTO();\r\n        fundAllocation.FundAllocationId = this.getNextId(createItemParams.items, 'FundAllocationId');\r\n        fundAllocation.FundCode = '';\r\n        return fundAllocation;\r\n    }\r\n}","module.exports = \"<master-detail name=\\\"fundList\\\" [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\"\\r\\n    secureComponent [disabled]=\\\"disabled\\\">\\r\\n</master-detail>\"","import { Component, Injector, Input } from '@angular/core';\r\n\r\nimport {\r\n    RowManagementDelegate,\r\n    MasterDetailComponentResolver,\r\n    BaseDataManager,\r\n    MasterButton,\r\n    MasterButtonType\r\n} from 'life-core/component/master-detail';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { DirectDataResolve } from 'life-core/component/shared';\r\nimport { DialogSize } from 'life-core/component';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { FundAllocationDTO, CoverageDTO } from 'ls-core/model';\r\n\r\nimport { BasePolicyMasterDetailViewModel } from 'business/policy/shared';\r\nimport { FundsListGridColumnsBuilder } from './funds-list-grid-columns.builder';\r\nimport { FundAllocationItemFactory } from './funds-list-item-factory';\r\nimport { FundsListDialogDataResolver } from './detail/funds-list-dialog-data.resolver';\r\nimport { FundsListDialogDetailEditor } from './detail/funds-list-detail-editor';\r\n\r\nexport function rowManagementDelegateFactory(\r\n    itemFactory: FundAllocationItemFactory,\r\n    dataManager: BaseDataManager<FundAllocationDTO>\r\n): any {\r\n    return new RowManagementDelegate({\r\n        itemName: 'Funds',\r\n        itemIDPropertyName: 'FundAllocationId',\r\n        itemFactory: itemFactory,\r\n        dataManager: dataManager\r\n    });\r\n}\r\n\r\nexport function itemComponentResolverFactory(): any {\r\n    return new MasterDetailComponentResolver({\r\n        itemComponents: FundsListDialogDetailEditor\r\n    });\r\n}\r\n\r\n@Component({\r\n    selector: 'funds-list',\r\n    templateUrl: './funds-list.component.html',\r\n    providers: [\r\n        BaseDataManager,\r\n        FundAllocationItemFactory,\r\n        {\r\n            provide: RowManagementDelegate,\r\n            useFactory: rowManagementDelegateFactory,\r\n            deps: [FundAllocationItemFactory, BaseDataManager]\r\n        },\r\n        {\r\n            provide: MasterDetailComponentResolver,\r\n            useFactory: itemComponentResolverFactory\r\n        },\r\n        FundsListGridColumnsBuilder\r\n    ]\r\n})\r\nexport class FundsListComponent extends BasePolicyMasterDetailViewModel<FundAllocationDTO> {\r\n    @Input()\r\n    public coverage: CoverageDTO;\r\n\r\n    private _gridColumnsBuilder: FundsListGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: FundsListGridColumnsBuilder, i18n: I18n) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedListData();\r\n        this.setResolvedMetaData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get showDetailAsPopup(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): FundAllocationDTO[] {\r\n        return this.coverage.FundAllocations_LazyLoad;\r\n    }\r\n\r\n    protected getRowNodeId(data: FundAllocationDTO): any {\r\n        return data.FundAllocationId;\r\n    }\r\n\r\n    protected getItemDetailDialogResolve(item: FundAllocationDTO): DirectDataResolve[] {\r\n        return [\r\n            {\r\n                resolveName: 'listData',\r\n                resolverClass: FundsListDialogDataResolver,\r\n                context: {\r\n                    activeFund: item,\r\n                    fundList: this.coverage.FundAllocations_LazyLoad,\r\n                    fundCodes: this.listData.FundCode\r\n                }\r\n            }\r\n        ];\r\n    }\r\n\r\n    protected getPopupDetailButtons(): MasterButton<FundAllocationDTO>[] {\r\n        return [\r\n            new MasterButton({ type: MasterButtonType.ADD }),\r\n            new MasterButton({ type: MasterButtonType.EDIT }),\r\n            new MasterButton({ type: MasterButtonType.DELETE })\r\n        ];\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return this.i18n({ value: 'Funds', id: 'policy.case.funds.title' });\r\n    }\r\n    protected getItemDetailDialogSize(): DialogSize | string {\r\n        return DialogSize.large;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { FundsListComponent } from './funds-list.component';\r\nimport { FundsListDialogDetailEditor } from './detail/funds-list-detail-editor';\r\nimport { FundsListDialogDataResolver } from './detail/funds-list-dialog-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [FundsListComponent, FundsListDialogDetailEditor],\r\n    exports: [FundsListComponent, FundsListDialogDetailEditor],\r\n    providers: [FundsListDialogDataResolver],\r\n    entryComponents: [FundsListDialogDetailEditor]\r\n})\r\nexport class FundsListModule {}\r\n","﻿export * from './applicant-coverage.component';\r\nexport * from './applicant-coverage.module';\r\n","import { Injectable, Injector, SkipSelf, Optional } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { PrivilegeObjectType, SubsystemType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\nimport { PolicyStatusCodes } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class CoveragesAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const addCoverageAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.ADDCOVERAGE]\r\n        );\r\n\r\n        if (this.policy.PolicyStatusCode === PolicyStatusCodes.CLOSED) {\r\n            this.authorizationData.componentLevel['addCoverageButton'] = addCoverageAuthorizationLevel;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { FormLoadFieldsService, LsFormTypes, DynamicFormFieldsManager } from 'ls-core/component/dynamic-form';\r\nimport { MetadataLoader } from 'ls-core/util';\r\n\r\nimport { BaseCoverageFormFieldsLoader } from 'business/policy/shared/coverage-dynamic-form';\r\nimport { PlanApplicantCoverageFormFields } from './plan-applicant-coverage-form-fields';\r\n\r\n@Injectable()\r\nexport class ApplicantCoveragesFieldsLoader extends BaseCoverageFormFieldsLoader {\r\n    constructor(\r\n        formLoadFieldsService: FormLoadFieldsService,\r\n        metadataLoader: MetadataLoader,\r\n        dynamicFormFieldsManager: DynamicFormFieldsManager,\r\n        planApplicantCoverageFormFields: PlanApplicantCoverageFormFields\r\n    ) {\r\n        super(formLoadFieldsService, metadataLoader, planApplicantCoverageFormFields, dynamicFormFieldsManager);\r\n    }\r\n\r\n    protected getFormType(): string {\r\n        return LsFormTypes.ApplicantCoverage;\r\n    }\r\n\r\n    protected getCoverageConfigurationCodeType(): string {\r\n        return 'coverage_field_configuration';\r\n    }\r\n}\r\n","﻿export * from './plan-applicant-coverage-form-fields';\r\nexport * from './applicant-coverages-fields.loader';\r\n\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { PlanCoverageFormFields } from 'business/policy/shared/coverage-dynamic-form';\r\n/**\r\n * Data holder class to store form field definitions per plan code\r\n */\r\n@Injectable()\r\nexport class PlanApplicantCoverageFormFields extends PlanCoverageFormFields {}\r\n","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"relationship\\\" label=\\\"Relationship\\\" i18n-label=\\\"@@applicant.info.family.relationship\\\">\\r\\n                <lf-select #relationship name=\\\"relationship\\\" [(ngModel)]=\\\"data.FamhistRelationshipCode\\\" [items]=\\\"resolvedData.listData.FamhistRelationshipCode | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    secureComponent style=\\\"width:150px\\\" container=\\\"dialog\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"status\\\" label=\\\"Status\\\" i18n-label=\\\"@@applicant.info.family.stats\\\">\\r\\n                <lf-select #status name=\\\"status\\\" [(ngModel)]=\\\"data.LivingStatus\\\" [items]=\\\"resolvedData.listData.LivingStatus | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    secureComponent style=\\\"width:150px\\\" container=\\\"dialog\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"age\\\" label=\\\"Age\\\" i18n-label=\\\"@@applicant.info.family.age\\\">\\r\\n                <lf-inputnumber #age name=\\\"age\\\" [(ngModel)]=\\\"data.Age\\\" maxLength=\\\"3\\\" format=\\\"n0\\\" decimals=\\\"0\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"cancerAge\\\" label=\\\"Cancer Age\\\" i18n-label=\\\"@@applicant.info.family.cancerage\\\">\\r\\n                <lf-inputnumber #cancerAge name=\\\"cancerAge\\\" [(ngModel)]=\\\"data.CancerAge\\\" maxLength=\\\"2\\\" format=\\\"n0\\\"\\r\\n                    [allowNegative]=\\\"false\\\" decimals=\\\"0\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"heartAge\\\" label=\\\"Heart Age\\\" i18n-label=\\\"@@applicant.info.family.heartage\\\">\\r\\n                <lf-inputnumber #heartAge name=\\\"heartAge\\\" [(ngModel)]=\\\"data.HeartDiseaseAge\\\" maxLength=\\\"3\\\" format=\\\"n0\\\"\\r\\n                    [allowNegative]=\\\"false\\\" decimals=\\\"0\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"otherAge\\\" label=\\\"Other Age\\\" i18n-label=\\\"@@applicant.info.family.otherage\\\">\\r\\n                <lf-inputnumber #otherAge name=\\\"otherAge\\\" [(ngModel)]=\\\"data.OtherDiseaseAge\\\" maxLength=\\\"3\\\" format=\\\"n0\\\"\\r\\n                    [allowNegative]=\\\"false\\\" decimals=\\\"0\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"reason\\\" label=\\\"Reason\\\" i18n-label=\\\"@@applicant.info.family.reason\\\">\\r\\n                <lf-inputtext #reason name=\\\"reason\\\" [(ngModel)]=\\\"data.Description\\\" maxLength=\\\"60\\\" secureComponent\\r\\n                    [style]=\\\"{width:'200px'}\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","﻿import { Component, Injector, Injectable } from '@angular/core';\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { FamilyHistoryDTO } from 'ls-core/model/dto';\nimport { ParentChildRegistry } from 'life-core/view-model';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { ApplicantAuthorizationProvider } from 'business/policy/applicant/applicant-authorization.provider';\n\n@Component({\n    selector: 'family-history-detail-editor',\n    templateUrl: './family-history-detail-editor.html',\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: ApplicantAuthorizationProvider }]\n})\n@Injectable()\nexport class FamilyHistoryDialogDetailEditor extends BasePolicyDialogDetailViewModel<FamilyHistoryDTO> {\n    constructor(injector: Injector) {\n        super(injector);\n    }\n}\n","﻿import { Injector, Injectable } from '@angular/core';\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { ListMap } from 'life-core/model';\r\nimport { ListDataRequestBuilder, ListDataItem, ListsDataRequest } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class FamilyHistoryDialogDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    public context: any;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    public getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        listDataRequestBuilder.addListRequestItem(this.context, 'FamhistRelationshipCode');\r\n        listDataRequestBuilder.addListRequestItem(this.context, 'LivingStatus');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService, AuthorizationLevel } from 'life-core/authorization';\r\n\r\nimport { PrivilegeObjectType, SubsystemType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class FamilyHistoryAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const fundListAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.CASE]\r\n        );\r\n\r\n        this.authorizationData.componentLevel['familyHistory'] =\r\n            fundListAuthorizationLevel < AuthorizationLevel.EDIT ? AuthorizationLevel.VIEW : fundListAuthorizationLevel;\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { ListDataUtil } from 'ls-core/service/list-data';\r\n\r\n@Injectable()\r\nexport class FamilyHistoryGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Relationship', id: 'applicant.info.family.relationship' }),\r\n            field: FamilyHistoryFields.FamhistRelationshipCode,\r\n            valueFormatter: this.getRelationship,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Status', id: 'applicant.info.family.status' }),\r\n            field: FamilyHistoryFields.LivingStatus,\r\n            valueFormatter: this.getStatus,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Age', id: 'applicant.info.family.age' }),\r\n            field: FamilyHistoryFields.Age,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Cancer Age', id: 'applicant.info.family.cancerage' }),\r\n            field: FamilyHistoryFields.CancerAge,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Heart Age', id: 'applicant.info.family.heartage' }),\r\n            field: FamilyHistoryFields.HeartAge,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Other Age', id: 'applicant.info.family.otherage' }),\r\n            field: FamilyHistoryFields.OtherAge,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Reason', id: 'applicant.info.family.reason' }),\r\n            field: FamilyHistoryFields.Description,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getRelationship(params: any): string {\r\n        return ListDataUtil.getValueFromListDataById(\r\n            params.context.listData.FamhistRelationshipCode,\r\n            params.node.data.FamhistRelationshipCode\r\n        );\r\n    }\r\n\r\n    private getStatus(params: any): string {\r\n        return ListDataUtil.getValueFromListDataById(\r\n            params.context.listData.LivingStatus,\r\n            params.node.data.LivingStatus\r\n        );\r\n    }\r\n}\r\n\r\nexport const FamilyHistoryFields = {\r\n    FamhistRelationshipCode: 'FamhistRelationshipCode',\r\n    LivingStatus: 'LivingStatus',\r\n    Age: 'Age',\r\n    CancerAge: 'CancerAge',\r\n    HeartAge: 'HeartDiseaseAge',\r\n    OtherAge: 'OtherDiseaseAge',\r\n    Description: 'Description'\r\n};\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { ListUtil } from 'life-core/util';\r\nimport { FamilyHistoryDTO } from 'ls-core/model/dto';\r\nimport { DBDate } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class FamilyHistoryItemFactory extends BaseDTOItemFactory<FamilyHistoryDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<FamilyHistoryDTO>): FamilyHistoryDTO {\r\n        const familyHistoryDTO = new FamilyHistoryDTO();\r\n        familyHistoryDTO.FamilyHistoryId = this.getNextId(createItemParams.items, \"FamilyHistoryId\");\r\n        return familyHistoryDTO;\r\n    }\r\n}","module.exports = \"<lf-panel header=\\\"Family History\\\" i18n-header=\\\"@@policy.applicant.familyHistory\\\" [toggleable]=\\\"true\\\" panelType=\\\"primary\\\"\\r\\n    stateId=\\\"panel_familyHistory\\\" [state]=\\\"componentsState.get('panel_familyHistory')\\\" [initCollapsed]=true\\r\\n    secureComponent>\\r\\n    <div class=\\\"row\\\">\\r\\n        <master-detail name=\\\"familyHistory\\\" [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\"\\r\\n            [showDetailAsPopup]=\\\"showDetailAsPopup\\\" secureComponent [disabled]=\\\"disabled\\\" style=\\\"width: 100%;\\\">\\r\\n        </master-detail>\\r\\n    </div>\\r\\n</lf-panel>\"","﻿import { Component, Injector } from '@angular/core';\n\nimport { RowManagementDelegate, MasterDetailComponentResolver, BaseDataManager } from 'life-core/component/master-detail';\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\nimport { DirectDataResolve } from 'life-core/component/shared';\nimport { DialogSize } from 'life-core/component/dialog';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { I18n } from 'life-core/i18n';\n\nimport { InsuredDTO, FamilyHistoryDTO, PolicyDTO } from 'ls-core/model';\nimport { PolicySubscriber } from 'ls-core/session';\n\nimport { BasePolicyMasterDetailViewModel, ApplicantListHelper } from 'business/policy/shared';\nimport { FamilyHistoryGridColumnsBuilder } from './family-history-grid-column.builder';\nimport { FamilyHistoryItemFactory } from './family-history-item-factory';\nimport { FamilyHistoryDialogDataResolver } from './detail/family-history-dialog-data.resolver';\nimport { FamilyHistoryDialogDetailEditor } from './detail/family-history-detail-editor';\nimport { FamilyHistoryAuthorizationProvider } from './family-history-authorization.provider';\n\nexport function rowManagementDelegateFactory(\n    itemFactory: FamilyHistoryItemFactory,\n    dataManager: BaseDataManager<FamilyHistoryDTO>\n): RowManagementDelegate<FamilyHistoryDTO> {\n    return new RowManagementDelegate({\n        itemName: 'Family History',\n        itemIDPropertyName: 'FamilyHistoryId',\n        itemFactory: itemFactory,\n        dataManager: dataManager\n    });\n}\n\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<FamilyHistoryDTO> {\n    return new MasterDetailComponentResolver({\n        itemComponents: FamilyHistoryDialogDetailEditor\n    });\n}\n\n@Component({\n    selector: 'family-history',\n    templateUrl: './family-history.component.html',\n    providers: [\n        PolicySubscriber,\n        BaseDataManager,\n        FamilyHistoryItemFactory,\n        {\n            provide: RowManagementDelegate,\n            useFactory: rowManagementDelegateFactory,\n            deps: [FamilyHistoryItemFactory, BaseDataManager]\n        },\n        {\n            provide: MasterDetailComponentResolver,\n            useFactory: itemComponentResolverFactory\n        },\n        FamilyHistoryGridColumnsBuilder,\n        { provide: AuthorizationProvider, useClass: FamilyHistoryAuthorizationProvider }\n    ]\n})\nexport class FamilyHistoryComponent extends BasePolicyMasterDetailViewModel<FamilyHistoryDTO> {\n    public applicant: InsuredDTO;\n    private _applicantListHelper: ApplicantListHelper;\n    private _policy: PolicyDTO;\n\n    private _gridColumnsBuilder: FamilyHistoryGridColumnsBuilder;\n\n    constructor(\n        injector: Injector,\n        gridColumnsBuilder: FamilyHistoryGridColumnsBuilder,\n        policySubscriber: PolicySubscriber,\n        applicantListHelper: ApplicantListHelper,\n        i18n: I18n\n    ) {\n        super(injector);\n        this.i18n = i18n;\n        this._gridColumnsBuilder = gridColumnsBuilder;\n        this._applicantListHelper = applicantListHelper;\n        policySubscriber.subscribe(this, policy => {\n            this._policy = policy;\n        });\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedListData();\n        this.setApplicant();\n        return Promise.resolve();\n    }\n\n    private setApplicant(): void {\n        this.applicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\n    }\n\n    public get showDetailAsPopup(): boolean {\n        return true;\n    }\n\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\n        return this._gridColumnsBuilder;\n    }\n\n    protected loadItems(): FamilyHistoryDTO[] {\n        return this.applicant.Applications_LazyLoad[0].FamilyHistories_LazyLoad;\n    }\n\n    protected getRowNodeId(data: FamilyHistoryDTO): Object {\n        return data.FamilyHistoryId;\n    }\n\n    protected getItemDetailDialogResolve(item: FamilyHistoryDTO): DirectDataResolve[] {\n        return [\n            {\n                resolveName: 'listData',\n                resolverClass: FamilyHistoryDialogDataResolver,\n                context: item\n            }\n        ];\n    }\n\n    protected getItemDetailDialogSize(): DialogSize {\n        return DialogSize.large;\n    }\n\n    protected getTitle(): string {\n        return this.i18n({ value: 'Family History', id: 'policy.case.familyHistory.title' });\n    }\n}\n","﻿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { FamilyHistoryComponent } from './family-history.component';\r\nimport { FamilyHistoryDialogDetailEditor } from './detail/family-history-detail-editor';\r\nimport { FamilyHistoryDialogDataResolver } from './detail/family-history-dialog-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [FamilyHistoryComponent, FamilyHistoryDialogDetailEditor],\r\n    exports: [FamilyHistoryComponent, FamilyHistoryDialogDetailEditor],\r\n    providers: [FamilyHistoryDialogDataResolver],\r\n    entryComponents: [FamilyHistoryDialogDetailEditor]\r\n})\r\nexport class FamilyHistoryModule {}\r\n","module.exports = \"<lf-panel header=\\\"Financial Data\\\" i18n-header=\\\"@@policy.applicant.findata.label.title\\\" [toggleable]=\\\"true\\\"\\r\\n    panelType=\\\"primary\\\" stateId=\\\"panel_applicantFinancialData\\\" class=\\\"label-appearance\\\"\\r\\n    [state]=\\\"componentsState.get('panel_applicantFinancialData')\\\" [initCollapsed]=true secureComponent>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Income\\\" i18n-label=\\\"@@policy.applicant.findata.label.income\\\"\\r\\n                [control]=\\\"incomeCurrentYear\\\">\\r\\n                <lf-inputnumber format=\\\"n2\\\" maxLength=\\\"10\\\" class=\\\"input-width\\\" #incomeCurrentYear\\r\\n                    name=\\\"incomeCurrentYear\\\" [(ngModel)]=\\\"applicationInfo.Income\\\" [allowNegative]=\\\"false\\\"\\r\\n                    secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Income Prior Year\\\" i18n-label=\\\"@@policy.applicant.findata.label.incomeprioryr\\\"\\r\\n                [control]=\\\"incomePrevYear\\\">\\r\\n                <lf-inputnumber format=\\\"n2\\\" maxLength=\\\"10\\\" class=\\\"input-width\\\" #incomePrevYear name=\\\"incomePriorYear\\\"\\r\\n                    [(ngModel)]=\\\"applicationInfo.IncomePrevYear\\\" [allowNegative]=\\\"false\\\" secureComponent>\\r\\n                </lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Total Household Income\\\" i18n-label=\\\"@@policy.applicant.findata.label.totalincome\\\"\\r\\n                [control]=\\\"totalHouseholdIncome\\\">\\r\\n                <lf-inputnumber format=\\\"n2\\\" maxLength=\\\"10\\\" class=\\\"input-width\\\" #totalHouseholdIncome\\r\\n                    name=\\\"totalHouseholdIncome\\\" [(ngModel)]=\\\"applicationInfo.TotalHouseholdIncome\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent>\\r\\n                </lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Unearned Income\\\" i18n-label=\\\"@@policy.applicant.findata.label.unearnedincome\\\"\\r\\n                [control]=\\\"unearnedIncome\\\">\\r\\n                <lf-inputnumber format=\\\"n2\\\" maxLength=\\\"10\\\" class=\\\"input-width\\\" #unearnedIncome name=\\\"unearnedIncome\\\"\\r\\n                    [(ngModel)]=\\\"applicationInfo.UnearnedIncome\\\" [allowNegative]=\\\"false\\\" secureComponent>\\r\\n                </lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Net Worth\\\" i18n-label=\\\"@@policy.applicant.findata.label.networth\\\"\\r\\n                [control]=\\\"netWorth\\\">\\r\\n                <lf-inputnumber format=\\\"n2\\\" maxLength=\\\"10\\\" class=\\\"input-width\\\" #netWorth name=\\\"netWorth\\\"\\r\\n                    [(ngModel)]=\\\"applicationInfo.NetWorth\\\" [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"bankruptcyDisposition\\\" label=\\\"Declared Bankruptcy\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.findata.label.declaredbankruptcy\\\">\\r\\n                <lf-radiobuttongroup #bankruptcyDisposition name=\\\"bankruptcyDisposition\\\"\\r\\n                    [(ngModel)]=\\\"applicationInfo.BankruptcyDisposition\\\" secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"bankruptcyDisposition\\\" value=\\\"Y\\\" label=\\\"Yes\\\"\\r\\n                            i18n-value=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"bankruptcyDisposition\\\" value=\\\"N\\\" label=\\\"No\\\"\\r\\n                            i18n-value=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Date Bankruptcy Discharged\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.findata.label.datebankruptcydischarged\\\"\\r\\n                [control]=\\\"bankruptcyDischargeDate\\\">\\r\\n                <ls-inputdate #bankruptcyDischargeDate name=\\\"bankruptcyDischargeDate\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicationInfo.BankruptcyDischargeDate\\\" secureComponent></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Years Business Owned\\\" i18n-label=\\\"@@policy.applicant.findata.label.yrsbusinessowned\\\"\\r\\n                [control]=\\\"businessOwnedYears\\\">\\r\\n                <lf-inputnumber format=\\\"n0\\\" decimals=\\\"0\\\" maxLength=\\\"3\\\" class=\\\"input-width\\\" #businessOwnedYears\\r\\n                    name=\\\"businessOwnedYears\\\" [(ngModel)]=\\\"applicationInfo.BusinessOwnedYears\\\" [allowNegative]=\\\"false\\\"\\r\\n                    secureComponent [autocomplete]=\\\"false\\\"></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Years Business in Existence\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.findata.label.yrsbusinessexists\\\" [control]=\\\"businessExistenceYears\\\">\\r\\n                <lf-inputnumber format=\\\"n0\\\" decimals=\\\"0\\\" maxLength=\\\"3\\\" class=\\\"input-width\\\" #businessExistenceYears\\r\\n                    name=\\\"businessExistenceYears\\\" [(ngModel)]=\\\"applicationInfo.BusinessExistenceYears\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Business Type\\\" i18n-label=\\\"@@policy.applicant.findata.label.businesstype\\\"\\r\\n                [control]=\\\"businessType\\\">\\r\\n                <lf-select #businessType name=\\\"businessType\\\" [(ngModel)]=\\\"applicationInfo.BusinessType\\\"\\r\\n                    [items]=\\\"listData.BusinessType | listItems:'value':'Id' | emptyItem\\\" secureComponent\\r\\n                    style=\\\"width:80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Employer Name\\\" i18n-label=\\\"@@policy.applicant.findata.label.employername\\\"\\r\\n                [control]=\\\"employer\\\">\\r\\n                <lf-inputtext #employer name=\\\"employer\\\" class=\\\"input-width\\\" [(ngModel)]=\\\"applicationInfo.Employer\\\"\\r\\n                    maxLength=\\\"100\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Employer Address\\\" i18n-label=\\\"@@policy.applicant.findata.label.employeraddress\\\"\\r\\n                [control]=\\\"employerAddress\\\">\\r\\n                <lf-inputtextarea class=\\\"lf-inputtextarea-width\\\" #employerAddress name=\\\"employerAddress\\\"\\r\\n                    [(ngModel)]=\\\"applicationInfo.EmployerAddress\\\" maxLength=\\\"1000\\\" secureComponent\\r\\n                    [autocomplete]=\\\"false\\\"></lf-inputtextarea>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Years at Employer\\\" i18n-label=\\\"@@policy.applicant.findata.label.yrsatemployer\\\"\\r\\n                [control]=\\\"yearsAtEmployer\\\">\\r\\n                <lf-inputnumber format=\\\"n0\\\" class=\\\"input-width\\\" decimals=\\\"0\\\" maxLength=\\\"2\\\" #yearsAtEmployer\\r\\n                    name=\\\"yearsAtEmployer\\\" [(ngModel)]=\\\"applicationInfo.YearsAtEmployer\\\" [allowNegative]=\\\"false\\\"\\r\\n                    secureComponent>\\r\\n                </lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Months at Employer\\\" i18n-label=\\\"@@policy.applicant.findata.label.monthsatemployer\\\"\\r\\n                [control]=\\\"monthsAtEmployer\\\">\\r\\n                <lf-inputnumber format=\\\"n0\\\" class=\\\"input-width\\\" decimals=\\\"0\\\" maxLength=\\\"2\\\" #monthsAtEmployer\\r\\n                    name=\\\"monthsAtEmployer\\\" [(ngModel)]=\\\"applicationInfo.MonthsAtEmployer\\\" [allowNegative]=\\\"false\\\"\\r\\n                    secureComponent>\\r\\n                </lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Occupation Code\\\" i18n-label=\\\"@@policy.applicant.findata.label.occupationcode\\\"\\r\\n                [control]=\\\"occupationCode\\\">\\r\\n                <lf-inputtext #occupationCode class=\\\"input-width\\\" name=\\\"occupationCode\\\"\\r\\n                    [(ngModel)]=\\\"applicationInfo.OccupationCode\\\" maxLength=\\\"50\\\" (blur)=\\\"onOccupationCodeBlur($event)\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Occupation\\\" i18n-label=\\\"@@policy.applicant.findata.label.occupation\\\"\\r\\n                [control]=\\\"occupation\\\">\\r\\n                <lf-select #occupation name=\\\"occupation\\\" [(ngModel)]=\\\"applicationInfo.Occupation\\\"\\r\\n                    [items]=\\\"listData.Occupation | listItems:'value':'Id' | emptyItem\\\" secureComponent\\r\\n                    style=\\\"width:80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Job Duties\\\" i18n-label=\\\"@@policy.applicant.findata.label.jobduties\\\"\\r\\n                [control]=\\\"jobDuties\\\">\\r\\n                <lf-inputtextarea class=\\\"lf-inputtextarea-width\\\" #jobDuties name=\\\"jobDuties\\\"\\r\\n                    [(ngModel)]=\\\"applicationInfo.JobDuties\\\" maxLength=\\\"150\\\" secureComponent></lf-inputtextarea>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Hire Date\\\" i18n-label=\\\"@@policy.applicant.findata.label.hiredate\\\"\\r\\n                [control]=\\\"employerHireDate\\\">\\r\\n                <ls-inputdate #employerHireDate name=\\\"employerHireDate\\\" [(ngModel)]=\\\"applicationInfo.EmployerHireDate\\\"\\r\\n                    class=\\\"input-date-width\\\" secureComponent></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"# of Hours Worked\\\" i18n-label=\\\"@@policy.applicant.findata.label.hoursworked\\\"\\r\\n                [control]=\\\"employerHoursWorked\\\">\\r\\n                <lf-inputnumber class=\\\"input-width\\\" format=\\\"n0\\\" decimals=\\\"0\\\" maxLength=\\\"2\\\" #employerHoursWorked\\r\\n                    name=\\\"employerHoursWorked\\\" [(ngModel)]=\\\"applicationInfo.EmployerHoursWorked\\\" [allowNegative]=\\\"false\\\"\\r\\n                    secureComponent>\\r\\n                </lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Monthly Expenses\\\" i18n-label=\\\"@@policy.applicant.findata.label.monthlyexpense\\\"\\r\\n                [control]=\\\"monthlyExpense\\\">\\r\\n                <lf-inputnumber class=\\\"input-width\\\" format=\\\"n2\\\" maxLength=\\\"10\\\" [max]=\\\"maxMonthlyExpensesValue\\\"\\r\\n                    #monthlyExpense name=\\\"monthlyExpense\\\" [(ngModel)]=\\\"applicationInfo.MonthlyExpense\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Business Ownership Percentage\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.findata.label.businessownershippct\\\" [control]=\\\"businessOwnershipPercent\\\">\\r\\n                <lf-inputnumber class=\\\"input-width\\\" format=\\\"n0\\\" decimals=\\\"0\\\" maxLength=\\\"3\\\" [max]=\\\"100\\\"\\r\\n                    #businessOwnershipPercent name=\\\"businessOwnershipPercent\\\"\\r\\n                    [(ngModel)]=\\\"applicationInfo.BusinessOwnershipPercent\\\" [allowNegative]=\\\"false\\\" secureComponent\\r\\n                    [autocomplete]=\\\"false\\\"></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</lf-panel>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { ViewModel } from 'life-core/view-model';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { DialogButton, DialogButtonType, ConfirmDialog, DialogResult } from 'life-core/component/dialog';\r\nimport { MAX_INTEGER32 } from 'life-core/util/lang';\r\n\r\nimport { PolicyDTO, CodeHolderDTO, ApplicationInfoDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { MetadataUtil } from 'ls-core/util';\r\n\r\nimport { ApplicantListHelper } from 'business/policy/shared';\r\n\r\n@Component({\r\n    selector: 'applicant-financial-data',\r\n    templateUrl: './applicant-financial-data.component.html',\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class ApplicantFinancialDataComponent extends ViewModel {\r\n    public applicationInfo: ApplicationInfoDTO;\r\n    public readonly maxMonthlyExpensesValue: number = MAX_INTEGER32;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _policy: PolicyDTO;\r\n    private _confirmDialog: ConfirmDialog;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        confirmDialog: ConfirmDialog,\r\n        applicantListHelper: ApplicantListHelper,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this._applicantListHelper = applicantListHelper;\r\n        this._confirmDialog = confirmDialog;\r\n\r\n        policySubscriber.subscribe(this, policy => {\r\n            this._policy = policy;\r\n        });\r\n        this.applicationInfo = new ApplicationInfoDTO();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.setResolvedListData();\r\n        this.setResolvedMetaData();\r\n        this.setApplicationInfo();\r\n    }\r\n\r\n    public onOccupationCodeBlur(occupationCode: any): void {\r\n        if (occupationCode.currentTarget.value) {\r\n            const codeHolderDTO: CodeHolderDTO = MetadataUtil.getItemByExternalCode(\r\n                this.listData.occupation,\r\n                occupationCode.currentTarget.value\r\n            );\r\n            if (codeHolderDTO && codeHolderDTO.CodeId) {\r\n                this.applicationInfo.Occupation = codeHolderDTO.CodeId;\r\n            } else {\r\n                this.showOccupationCodeNotDefinedMessageDialog().then(result => {\r\n                    if (result.buttonId === DialogButtonType.OK) {\r\n                        this.setFocusOnOccupationCode();\r\n                    }\r\n                    this.resetOccupationFields();\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    private setApplicationInfo(): void {\r\n        const activeApplicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n        if (activeApplicant.Applications_LazyLoad && activeApplicant.Applications_LazyLoad.length) {\r\n            this.applicationInfo = activeApplicant.Applications_LazyLoad[0];\r\n        }\r\n    }\r\n\r\n    private showOccupationCodeNotDefinedMessageDialog(): Promise<DialogResult> {\r\n        return this._confirmDialog.open({\r\n            message: this.i18n({\r\n                value: 'Occupation code is not defined. Please contact your administrator.',\r\n                id: 'sso.errmessage'\r\n            }),\r\n            title: this.i18n({ value: 'Information', id: 'applicant.coverage.message.title' }),\r\n            buttons: [new DialogButton({ type: DialogButtonType.OK })]\r\n        });\r\n    }\r\n\r\n    private setFocusOnOccupationCode(): void {\r\n        const formInput = this.getFormInputs().find(formInput => formInput.control.name === 'occupationCode');\r\n        formInput.control.setFocus();\r\n    }\r\n\r\n    private resetOccupationFields(): void {\r\n        this.applicationInfo.Occupation = '';\r\n        this.applicationInfo.OccupationCode = '';\r\n    }\r\n}\r\n","﻿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { ApplicantFinancialDataComponent } from './applicant-financial-data.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [ApplicantFinancialDataComponent],\r\n    exports: [ApplicantFinancialDataComponent],\r\n    entryComponents: [ApplicantFinancialDataComponent]\r\n})\r\nexport class ApplicantFinancialDataModule {}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst FormsFields = {\r\n    Label: 'Label',\r\n    QuestionText: 'QuestionText',\r\n    Answer: 'Answer',\r\n    Comment: 'Comment'\r\n};\r\n\r\n@Injectable()\r\nexport class ApplicantFormsGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: '',\r\n            field: '',\r\n            width: 100,\r\n            valueFormatter: this.getSequenceNumber\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Label', id: 'policy.applicant.form.question.label' }),\r\n            field: FormsFields.Label,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Question', id: 'policy.applicant.form.question.question' }),\r\n            field: FormsFields.QuestionText,\r\n            width: 200\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Answer', id: 'policy.applicant.form.question.answer' }),\r\n            field: FormsFields.Answer,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Comments', id: 'policy.applicant.form.question.comments' }),\r\n            field: FormsFields.Comment,\r\n            width: 100\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getSequenceNumber(params: any): string {\r\n        return params.node.rowIndex + 1;\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\n\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { ApplicantQuestionDTO } from 'ls-core/model/dto/applicant-question.dto';\r\n\r\n@Injectable()\r\nexport class ApplicantFormsItemFactory extends BaseDTOItemFactory<ApplicantQuestionDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<ApplicantQuestionDTO>): ApplicantQuestionDTO {\r\n        const applicantQuestion = new ApplicantQuestionDTO();\r\n        applicantQuestion.QuestionId = this.getNextId(createItemParams.items, 'QuestionId');\r\n        return applicantQuestion;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\nimport { ApplicantQuestionDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class ApplicantFormsMetaDataResolver extends BaseMetaDataResolver {\r\n    public context: ApplicantQuestionDTO;\r\n    protected getMetadataTypes(): string[] {\r\n        return [`Answer Set ${this.context.AnswerSetName}`];\r\n    }\r\n}\r\n","module.exports = \"<lf-panel header=\\\"Forms\\\" i18n-header=\\\"@@policy.applicant.forms.title\\\" [toggleable]=\\\"true\\\" panelType=\\\"primary\\\" stateId=\\\"panel_forms\\\"\\r\\n    [state]=\\\"componentsState.get('panel_forms')\\\" [initCollapsed]=true secureComponent>\\r\\n    <div class=\\\"row\\\">\\r\\n        <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\" secureComponent\\r\\n            [disabled]=\\\"disabled\\\" style=\\\"width: 100%;\\\">\\r\\n        </master-detail>\\r\\n    </div>\\r\\n</lf-panel>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport {\r\n    RowManagementDelegate,\r\n    MasterDetailComponentResolver,\r\n    BaseDataManager,\r\n    MasterButton,\r\n    MasterButtonType\r\n} from 'life-core/component/master-detail';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { ResolvedDataNames } from 'life-core/view-model';\r\nimport { DirectDataResolve, DialogSize } from 'life-core/component';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { ApplicantQuestionDTO, InsuredDTO, PolicyDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\nimport { BasePolicyMasterDetailViewModel, ApplicantListHelper } from 'business/policy/shared';\r\nimport { ApplicantFormsItemFactory } from './applicant-forms-item-factory';\r\nimport { ApplicantFormsGridColumnsBuilder } from './applicant-forms-grid-column.builder';\r\nimport { ApplicantFormsDialogDetailEditor } from './detail/applicant-forms-dialog-detail-editor.component';\r\nimport { ApplicantFormsMetaDataResolver } from 'business/policy/applicant/forms/applicant-forms-metadata.resolver';\r\n\r\nexport function rowManagementDelegateFactory(\r\n    itemFactory: ApplicantFormsItemFactory,\r\n    dataManager: BaseDataManager<ApplicantQuestionDTO>\r\n): RowManagementDelegate<ApplicantQuestionDTO> {\r\n    return new RowManagementDelegate({\r\n        itemName: 'applicantQuestion',\r\n        itemIDPropertyName: 'QuestionId',\r\n        itemFactory: itemFactory,\r\n        dataManager: dataManager\r\n    });\r\n}\r\n\r\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<ApplicantQuestionDTO> {\r\n    return new MasterDetailComponentResolver({\r\n        itemComponents: ApplicantFormsDialogDetailEditor\r\n    });\r\n}\r\n\r\n@Component({\r\n    selector: 'applicant-forms',\r\n    templateUrl: './applicant-forms.component.html',\r\n    providers: [\r\n        PolicySubscriber,\r\n        BaseDataManager,\r\n        ApplicantFormsItemFactory,\r\n        {\r\n            provide: RowManagementDelegate,\r\n            useFactory: rowManagementDelegateFactory,\r\n            deps: [ApplicantFormsItemFactory, BaseDataManager]\r\n        },\r\n        {\r\n            provide: MasterDetailComponentResolver,\r\n            useFactory: itemComponentResolverFactory\r\n        },\r\n        ApplicantFormsGridColumnsBuilder\r\n    ]\r\n})\r\nexport class ApplicantFormsComponent extends BasePolicyMasterDetailViewModel<ApplicantQuestionDTO> {\r\n    public applicant: InsuredDTO;\r\n    private _policy: PolicyDTO;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _gridColumnsBuilder: ApplicantFormsGridColumnsBuilder;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        gridColumnsBuilder: ApplicantFormsGridColumnsBuilder,\r\n        policySubscriber: PolicySubscriber,\r\n        applicantListHelper: ApplicantListHelper,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        this._applicantListHelper = applicantListHelper;\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n        policySubscriber.subscribe(this, policy => {\r\n            this._policy = policy;\r\n        });\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        this.setApplicant();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this.applicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    public get showDetailAsPopup(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): ApplicantQuestionDTO[] {\r\n        return this.applicant.ApplicantQuestions;\r\n    }\r\n\r\n    protected getRowNodeId(data: ApplicantQuestionDTO): any {\r\n        return data.QuestionId;\r\n    }\r\n\r\n    protected getItemDetailDialogResolve(item: ApplicantQuestionDTO): DirectDataResolve[] {\r\n        return [\r\n            { resolveName: ResolvedDataNames.metaData, resolverClass: ApplicantFormsMetaDataResolver, context: item }\r\n        ];\r\n    }\r\n\r\n    protected getItemDetailDialogSize(): DialogSize {\r\n        return DialogSize.large;\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return this.i18n({ value: 'Forms', id: 'policy.case.forms.title' });\r\n    }\r\n\r\n    protected getRemoveItemMessage(): string {\r\n        return '';\r\n    }\r\n\r\n    protected getPopupDetailButtons(): MasterButton<ApplicantQuestionDTO>[] {\r\n        return [new MasterButton({ type: MasterButtonType.EDIT })];\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { ApplicantFormsComponent } from './applicant-forms.component';\r\nimport { ApplicantFormsDialogDetailEditor } from './detail/applicant-forms-dialog-detail-editor.component';\r\nimport { ApplicantFormsMetaDataResolver } from './applicant-forms-metadata.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [ApplicantFormsComponent, ApplicantFormsDialogDetailEditor],\r\n    exports: [ApplicantFormsComponent],\r\n    providers: [ApplicantFormsMetaDataResolver],\r\n    entryComponents: [ApplicantFormsDialogDetailEditor]\r\n})\r\nexport class ApplicantFormsModule {}\r\n","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"label\\\" label=\\\"Label\\\" i18n-label=\\\"@@policy.applicant.form.question.label\\\">\\r\\n                <lf-statictext #label name=\\\"label\\\" [value]=\\\"data.Label\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"question\\\" label=\\\"Question\\\" i18n-label=\\\"@@policy.applicant.form.question.question\\\">\\r\\n                <lf-statictext #question name=\\\"question\\\" [value]=\\\"data.QuestionText\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"answer\\\" label=\\\"Answer\\\" i18n-label=\\\"@@policy.applicant.form.question.answer\\\">\\r\\n                <lf-select #answer name=\\\"answer\\\" [items]=\\\"listData.AnswerSet | listItems:'label':'label' | emptyItem\\\" [(ngModel)]=\\\"data.Answer\\\"\\r\\n                    secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"comment\\\" label=\\\"Comments\\\" i18n-label=\\\"@@policy.applicant.form.question.comments\\\">\\r\\n                <lf-inputtext #comment name=\\\"comment\\\" [(ngModel)]=\\\"data.Comment\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injectable, Injector } from '@angular/core';\r\n\r\nimport { ParentChildRegistry } from 'life-core/view-model';\r\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\r\nimport { DialogData } from 'life-core/component';\r\nimport { ListUtil } from 'life-core/util';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { ApplicantQuestionDTO } from 'ls-core/model';\r\n\r\nimport { ApplicantAuthorizationProvider } from 'business/policy/applicant/applicant-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'applicant-forms-dialog-detail-editor',\r\n    templateUrl: './applicant-forms-dialog-detail-editor.component.html',\r\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: ApplicantAuthorizationProvider }]\r\n})\r\n@Injectable()\r\nexport class ApplicantFormsDialogDetailEditor extends BasePolicyDialogDetailViewModel<ApplicantQuestionDTO> {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.listData.AnswerSet = new Array();\r\n    }\r\n\r\n    public setModel(model: DialogData): void {\r\n        super.setModel(model);\r\n        this.listData.AnswerSet = ListUtil.convertToListItems(\r\n            this.resolvedData.metaData[`Answer Set ${this.data.AnswerSetName}`],\r\n            'label',\r\n            'value'\r\n        );\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        if (this.isDirty()) {\r\n            this.data.IsModified = true;\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class ApplicantActionGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Actions', id: 'policy.applicant.info.applicantactions' }),\r\n            field: ApplicantActions.Action,\r\n            width: 40\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Count', id: 'policy.applicant.info.applicantcount' }),\r\n            field: ApplicantActions.Count,\r\n            width: 40\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nexport const ApplicantActions = {\r\n    Action: 'Action',\r\n    Count: 'Count'\r\n};\r\n","module.exports = \"<div class=\\\"col-12\\\">\\r\\n    <div class=\\\"col-12 pb-3\\\" style=\\\"padding-left:0; padding-right: 0;\\\">\\r\\n        <data-grid #dataGrid [ngStyle]=\\\"{width: '250px', height: '140px'}\\\" [gridOptions]=\\\"gridOptions\\\">\\r\\n        </data-grid>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector, Input } from '@angular/core';\r\n\r\nimport { InsuredDTO, ApplicationInfoDTO } from 'ls-core/model';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { ApplicantActionGridColumnsBuilder } from './applicant-action-grid-columns.builder';\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\n\r\n@Component({\r\n    selector: 'applicant-action',\r\n    templateUrl: './applicant-action.component.html',\r\n    providers: [PolicySubscriber, ApplicantActionGridColumnsBuilder]\r\n})\r\nexport class ApplicantActionComponent extends BasePolicyGridViewModel<ApplicationCount> {\r\n    private _gridColumnBuilder: ApplicantActionGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnBuilder: ApplicantActionGridColumnsBuilder) {\r\n        super(injector);\r\n        this._gridColumnBuilder = gridColumnBuilder;\r\n    }\r\n\r\n    @Input() public applications: Array<ApplicationInfoDTO>;\r\n\r\n    public loadItems(): ApplicationCount[] {\r\n        let applicationArray = [];\r\n        if (this.applications.length > 0) {\r\n            const underwriterCount = this.applications[0].UwCount\r\n                ? ConvertUtil.toNumber(this.applications[0].UwCount)\r\n                : 0;\r\n            const casemanagerCount = this.applications[0].CmCount\r\n                ? ConvertUtil.toNumber(this.applications[0].CmCount)\r\n                : 0;\r\n            applicationArray = [\r\n                { Action: 'UW', Count: underwriterCount },\r\n                { Action: 'CM', Count: casemanagerCount },\r\n                { Action: 'Total', Count: underwriterCount + casemanagerCount }\r\n            ];\r\n        }\r\n        return applicationArray;\r\n    }\r\n\r\n    public getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnBuilder;\r\n    }\r\n\r\n    public getRowNodeId(data: ApplicationCount): any {\r\n        return data.Action;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n}\r\n\r\nexport type ApplicationCount = { Action: string; Count: number };\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { NameFormatter, CurrencyFormatter } from 'life-core/util/formatter';\r\nimport { NamePattern } from 'life-core/util';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { InsuredDTO } from 'ls-core/model';\r\nimport { GetYesNoStringPipe } from 'ls-core/util';\r\n\r\nimport { HeaderItemSeparator } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class ApplicantInfoHeaderBuilder {\r\n    private _nameFormatter: NameFormatter;\r\n    private _currencyFormatter: CurrencyFormatter;\r\n    private i18n: I18n;\r\n\r\n    constructor(nameFormatter: NameFormatter, currencyFormatter: CurrencyFormatter, i18n: I18n) {\r\n        this._nameFormatter = nameFormatter;\r\n        this._currencyFormatter = currencyFormatter;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public getApplicantInfoHeader(insured: InsuredDTO, applicantStatus: any): string {\r\n        const coverage = insured.Coverages_LazyLoad ? insured.Coverages_LazyLoad[0] : null;\r\n\r\n        const insuredFullName = this._nameFormatter.format(\r\n            NamePattern.NameWithTitleSuffixAndMiddleInitial,\r\n            insured.FirstName,\r\n            insured.LastName,\r\n            insured.MiddleName,\r\n            insured.Title,\r\n            insured.Suffix\r\n        );\r\n        const uwAmount = insured.UnderwritingAmount ? insured.UnderwritingAmount : 0;\r\n        const formattedUWAmount = this._currencyFormatter.format(uwAmount);\r\n        return `\r\n        ${this.i18n(\r\n            {\r\n                value: 'Applicant Info: {{insuredFullName}}{{headerItemSeparator}}',\r\n                id: 'applicant.info.title'\r\n            },\r\n            { insuredFullName: insuredFullName, headerItemSeparator: HeaderItemSeparator }\r\n        )} ${this.i18n(\r\n            {\r\n                value: 'UW Amount: {{formattedUWAmount}}{{headerItemSeparator}}',\r\n                id: 'applicant.info.uwamt'\r\n            },\r\n            { formattedUWAmount: formattedUWAmount, headerItemSeparator: HeaderItemSeparator }\r\n        )} ${this.i18n(\r\n            {\r\n                value: 'Applicant Status: {{codeValue}}{{headerItemSeparator}}',\r\n                id: 'applicant.info.status'\r\n            },\r\n            { codeValue: applicantStatus.CodeValue, headerItemSeparator: HeaderItemSeparator }\r\n        )} ${this.i18n(\r\n            {\r\n                value: 'Issued Age: {{issuedAge}}{{headerItemSeparator}}',\r\n                id: 'applicant.info.issage'\r\n            },\r\n            { issuedAge: coverage ? coverage.issueAge : '', headerItemSeparator: HeaderItemSeparator }\r\n        )} ${this.i18n(\r\n            {\r\n                value: 'Smoker: {{isSmoker}}',\r\n                id: 'applicant.info.smoker'\r\n            },\r\n            { isSmoker: coverage ? new GetYesNoStringPipe().transform(coverage.IsSmoker) : '' }\r\n        )}\r\n\t\t`;\r\n    }\r\n}\r\n","module.exports = \"<lf-panel [header]=\\\"applicantPanelHeader\\\" [toggleable]=\\\"true\\\" panelType=\\\"primary\\\" stateId=\\\"panel_applicantInformation\\\"\\r\\n    [state]=\\\"componentsState.get('panel_applicantInformation')\\\" secureComponent class=\\\"label-appearance\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Title\\\" i18n-label=\\\"@@policy.applicant.info.title\\\" [control]=\\\"title\\\">\\r\\n                <lf-select #title name=\\\"title\\\" [(ngModel)]=\\\"applicant.Title\\\"\\r\\n                    [items]=\\\"listData.Title | listItems:'value':'Id' | emptyItem\\\" secureComponent style=\\\"width: 80%\\\">\\r\\n                </lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"First Name\\\" i18n-label=\\\"@@policy.applicant.info.firstname\\\" [control]=\\\"firstName\\\">\\r\\n                <lf-inputtext #firstName name=\\\"firstName\\\" class=\\\"input-width\\\" [(ngModel)]=\\\"applicant.FirstName\\\"\\r\\n                    (blur)=\\\"onApplicantNameChanged()\\\" maxLength=\\\"20\\\" secureComponent [autocomplete]=\\\"false\\\">\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Middle Name\\\" i18n-label=\\\"@@policy.applicant.info.middlename\\\" [control]=\\\"middleName\\\">\\r\\n                <lf-inputtext #middleName name=\\\"middleName\\\" class=\\\"input-width\\\" [(ngModel)]=\\\"applicant.MiddleName\\\"\\r\\n                    (blur)=\\\"onApplicantNameChanged()\\\" maxLength=\\\"20\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Last Name\\\" i18n-label=\\\"@@policy.applicant.info.lastname\\\" [control]=\\\"lastName\\\">\\r\\n                <lf-inputtext #lastName name=\\\"lastName\\\" class=\\\"input-width\\\" [(ngModel)]=\\\"applicant.LastName\\\"\\r\\n                    (blur)=\\\"onApplicantNameChanged()\\\" maxLength=\\\"50\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Suffix\\\" i18n-label=\\\"@@policy.applicant.info.suffix\\\" [control]=\\\"suffix\\\">\\r\\n                <lf-select #suffix name=\\\"suffix\\\" [(ngModel)]=\\\"applicant.Suffix\\\"\\r\\n                    [items]=\\\"listData.Suffix | listItems:'value':'Id' | emptyItem\\\" secureComponent style=\\\"width: 80%\\\">\\r\\n                </lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Birth Name\\\" i18n-label=\\\"@@policy.applicant.info.birthname\\\" [control]=\\\"birthName\\\">\\r\\n                <lf-inputtext #birthName name=\\\"birthName\\\" class=\\\"input-width\\\" [(ngModel)]=\\\"applicant.BirthName\\\"\\r\\n                    maxLength=\\\"15\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Birth Date\\\" i18n-label=\\\"@@policy.applicant.info.birthdate\\\" [control]=\\\"birthDate\\\">\\r\\n                <ls-inputdatecrypted #birthDate name=\\\"birthDate\\\" [(ngModel)]=\\\"applicant.BirthDate\\\"\\r\\n                    class='input-date-width' [maxDate]=\\\"maxBirthDate\\\" (ngModelChange)=\\\"onApplicantBirthDateChange()\\\"\\r\\n                    required secureComponent>\\r\\n                </ls-inputdatecrypted>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.applicant.info.taxid\\\" [control]=\\\"taxID\\\">\\r\\n                <lf-inputtaxid #taxID name=\\\"taxID\\\" class=\\\"input-width\\\" [(ngModel)]=\\\"applicant.TaxId\\\" secureComponent>\\r\\n                </lf-inputtaxid>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Client ID\\\" i18n-label=\\\"@@policy.applicant.info.clientid\\\" [control]=\\\"clientID\\\">\\r\\n                <lf-inputtext #clientID name=\\\"clientID\\\" class=\\\"input-width\\\" [(ngModel)]=\\\"applicant.ClientId\\\"\\r\\n                    maxLength=\\\"15\\\" secureComponent>\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Address\\\" i18n-label=\\\"@@policy.applicant.info.address\\\" [control]=\\\"addressLine1\\\">\\r\\n                <lf-inputtext #addressLine1 name=\\\"addressLine1\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"residenceAddress.AddressLine1\\\" maxLength=\\\"30\\\" secureComponent [autocomplete]=\\\"false\\\">\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"addressLine2\\\">\\r\\n                <lf-inputtext #addressLine2 name=\\\"addressLine2\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"residenceAddress.AddressLine2\\\" maxLength=\\\"30\\\" secureComponent [autocomplete]=\\\"false\\\">\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-2\\\">\\r\\n            <lf-form-input [control]=\\\"addressLine3\\\">\\r\\n                <lf-inputtext #addressLine3 name=\\\"addressLine3\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"residenceAddress.AddressLine3\\\" maxLength=\\\"30\\\" secureComponent [autocomplete]=\\\"false\\\">\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"City\\\" [control]=\\\"city\\\" i18n-label=\\\"@@policy.applicant.info.city\\\">\\r\\n                <lf-inputtext #city name=\\\"city\\\" class=\\\"input-width\\\" [(ngModel)]=\\\"residenceAddress.City\\\" maxLength=\\\"30\\\"\\r\\n                    secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Country\\\" [control]=\\\"countryId\\\" i18n-label=\\\"@@policy.applicant.info.country\\\">\\r\\n                <lf-select #countryId name=\\\"countryId\\\" [(ngModel)]=\\\"residenceAddress.CountryId\\\"\\r\\n                    [items]=\\\"listData.CountryId | listItems:'value':'Id' | emptyItem\\\" style=\\\"width:90%\\\" secureComponent>\\r\\n                </lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"State\\\" [control]=\\\"countryStateId\\\" i18n-label=\\\"@@policy.applicant.info.state\\\">\\r\\n                <lf-select #countryStateId name=\\\"countryStateId\\\" [(ngModel)]=\\\"residenceAddress.CountryStateId\\\"\\r\\n                    [items]=\\\"listData | stateListPicker: residenceAddress.CountryId |emptyItem | sortList\\\"\\r\\n                    style=\\\"width: 80%\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Postal Code\\\" [control]=\\\"postalCode\\\" i18n-label=\\\"@@policy.applicant.info.postalcode\\\">\\r\\n                <lf-inputzipcode #postalCode name=\\\"postalCode\\\" class=\\\"input-width\\\"\\r\\n                    [zipCodeType]=\\\"residenceAddress.CountryId | getZipCodeType\\\"\\r\\n                    [(ngModel)]=\\\"residenceAddress.PostalCode\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputzipcode>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Home Phone\\\" [control]=\\\"homePhone1\\\" i18n-label=\\\"@@policy.applicant.info.homephone\\\">\\r\\n                <ls-inputphone #homePhone1 name=\\\"homePhone1\\\" [(ngModel)]=\\\"homePhone\\\" secureComponent [extHidden]=\\\"true\\\">\\r\\n                </ls-inputphone>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Work Phone\\\" [control]=\\\"workPhone1\\\" i18n-label=\\\"@@policy.applicant.info.workphone\\\">\\r\\n                <ls-inputphone #workPhone1 name=\\\"workPhone1\\\" [(ngModel)]=\\\"workPhone\\\" secureComponent></ls-inputphone>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Cell Phone\\\" [control]=\\\"cellPhone1\\\" i18n-label=\\\"@@policy.applicant.info.cellphone\\\">\\r\\n                <ls-inputphone #cellPhone1 name=\\\"cellPhone1\\\" [(ngModel)]=\\\"cellPhone\\\" secureComponent [extHidden]=\\\"true\\\">\\r\\n                </ls-inputphone>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Preferred Location to Call\\\" [control]=\\\"phoneTypeCode\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.info.preferredloctocall\\\">\\r\\n                <lf-select #phoneTypeCode name=\\\"preferredLocationToCall\\\" [(ngModel)]=\\\"applicant.preferredPhoneTypeCode\\\"\\r\\n                    [items]=\\\"listData.preferredPhoneTypeCode | listItems:'value':'Id'\\\" style=\\\"width: 90%\\\"\\r\\n                    [clearable]=\\\"false\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Best Day to Call\\\" [control]=\\\"bestDayToCall\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.info.bestdaytocall\\\">\\r\\n                <lf-inputtext #bestDayToCall name=\\\"bestDayToCall\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].BestDayToCall\\\" maxLength=\\\"30\\\" secureComponent>\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Best Time to Call\\\" [control]=\\\"bestTimeToCall\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.info.besttimetocall\\\">\\r\\n                <lf-inputtext #bestTimeToCall name=\\\"bestTimeToCall\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].BestTimeToCall\\\" maxLength=\\\"30\\\" secureComponent>\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Locality\\\" [control]=\\\"locality\\\" i18n-label=\\\"@@policy.applicant.info.locality\\\">\\r\\n                <lf-inputtext #locality name=\\\"locality\\\" [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].Locality\\\"\\r\\n                    class=\\\"input-width\\\" maxLength=\\\"20\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Applicant Signature Type\\\" [control]=\\\"applicantSignatureType\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.info.applicantsignaturetype\\\">\\r\\n                <lf-select #applicantSignatureType name=\\\"applicantSignatureType\\\"\\r\\n                    [(ngModel)]=\\\"applicant.ApplicantSignatureType\\\"\\r\\n                    [items]=\\\"listData.applicantSignatureType | listItems:'value':'Id' | emptyItem\\\" secureComponent\\r\\n                    style=\\\"width: 90%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Email\\\" [control]=\\\"emailAddress\\\" i18n-label=\\\"@@policy.applicant.info.email\\\">\\r\\n                <lf-inputemail #emailAddress name=\\\"emailAddress\\\" [(ngModel)]=\\\"applicant.EmailAddress\\\" maxLength=\\\"100\\\"\\r\\n                    class=\\\"input-width\\\" secureComponent></lf-inputemail>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Airmiles\\\" i18n-label=\\\"@@policy.applicant.info.airmiles\\\" [control]=\\\"airmilesFlag\\\">\\r\\n                <lf-radiobuttongroup #airmilesFlag name=\\\"airmilesFlag\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].AirmilesFlag\\\" secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"airmilesFlag\\\" value=1 label=\\\"Yes\\\"\\r\\n                            i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"airmilesFlag\\\" value=0 label=\\\"No\\\"\\r\\n                            i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Airmiles Number\\\" i18n-label=\\\"@@policy.applicant.info.airmilesnumber\\\"\\r\\n                [control]=\\\"airmilesNumber\\\">\\r\\n                <lf-inputtext #airmilesNumber name=\\\"airmilesNumber\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].Airmiles\\\" maxLength=\\\"25\\\" secureComponent>\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Employee Number\\\" i18n-label=\\\"@@policy.applicant.info.employeenumber\\\"\\r\\n                [control]=\\\"employeeNumber\\\">\\r\\n                <lf-inputtext #employeeNumber name=\\\"employeeNumber\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].EmployeeNumber\\\" maxLength=\\\"14\\\" secureComponent>\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Medical Authorization\\\" i18n-label=\\\"@@policy.applicant.info.medauth\\\"\\r\\n                [control]=\\\"medicalAuthorizationFlag\\\">\\r\\n                <lf-radiobuttongroup #medicalAuthorizationFlag name=\\\"medicalAuthorizationFlag\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].MedicalAuthorizationFlag\\\" secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"medicalAuthorizationFlag\\\" value=1 label=\\\"Yes\\\"\\r\\n                            i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"medicalAuthorizationFlag\\\" value=0 label=\\\"No\\\"\\r\\n                            i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"HIPAA Authorization\\\" i18n-label=\\\"@@policy.applicant.info.hippaauth\\\"\\r\\n                [control]=\\\"hipaaAuthorizationFlag\\\">\\r\\n                <lf-radiobuttongroup #hipaaAuthorizationFlag name=\\\"hipaaAuthorizationFlag\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].HippaAuthorizationFlag\\\" secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"hipaaAuthorizationFlag\\\" value=1 label=\\\"Yes\\\"\\r\\n                            i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"hipaaAuthorizationFlag\\\" value=0 label=\\\"No\\\"\\r\\n                            i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Membership Number\\\" i18n-label=\\\"@@policy.applicant.info.membershipnumber\\\"\\r\\n                [control]=\\\"membershipNumber\\\">\\r\\n                <lf-inputtext #membershipNumber name=\\\"membershipNumber\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].MembershipNumber\\\" maxLength=\\\"10\\\" secureComponent>\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Driver's License Status\\\" i18n-label=\\\"@@policy.applicant.info.driverslicensestatus\\\"\\r\\n                [control]=\\\"driversLicenseStatus\\\">\\r\\n                <lf-select #driversLicenseStatus name=\\\"driversLicenseStatus\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].DriversLicenseStatus\\\"\\r\\n                    [items]=\\\"listData.DriversLicenseStatus | listItems:'value':'Id' | emptyItem\\\" secureComponent\\r\\n                    style=\\\"width: 80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Driver's License\\\" i18n-label=\\\"@@policy.applicant.info.licensenumber\\\"\\r\\n                [control]=\\\"driversLicenseNumber\\\">\\r\\n                <lf-inputtext #driversLicenseNumber name=\\\"driversLicenseNumber\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].DriversLicenseNumber\\\" (blur)=\\\"onDLDataChange()\\\"\\r\\n                    maxLength=\\\"20\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Driver's License Country\\\" i18n-label=\\\"@@policy.applicant.info.driverlicensecountry\\\"\\r\\n                [control]=\\\"driversLicenseCountryId\\\">\\r\\n                <lf-select #driversLicenseCountryId name=\\\"driversLicenseCountryId\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].DriversLicenseCountryId\\\"\\r\\n                    [items]=\\\"listData.DriversLicenseCountryId | listItems:'value':'Id' | emptyItem\\\" secureComponent\\r\\n                    style=\\\"width: 90%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Driver's License State\\\" i18n-label=\\\"@@policy.applicant.info.driverlicensestate\\\"\\r\\n                [control]=\\\"driversLicenseState\\\">\\r\\n                <lf-select #driversLicenseState name=\\\"driversLicenseState\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].DriversLicenseState\\\" (change)=\\\"onDLDataChange()\\\"\\r\\n                    [items]=\\\"listData | stateListPicker: applicant.Applications_LazyLoad[0].DriversLicenseCountryId | emptyItem | sortList\\\"\\r\\n                    secureComponent style=\\\"width: 80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"State ID Number\\\" i18n-label=\\\"@@policy.applicant.info.applicantstateid\\\"\\r\\n                [control]=\\\"stateId\\\">\\r\\n                <lf-inputtext #stateId class=\\\"input-width\\\" name=\\\"stateId\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].StateId\\\" maxLength=\\\"15\\\" secureComponent>\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Signed Country\\\" i18n-label=\\\"@@policy.applicant.info.signedcountry\\\"\\r\\n                [control]=\\\"signedCountryId\\\">\\r\\n                <lf-select #signedCountryId name=\\\"signedCountryId\\\" [(ngModel)]=\\\"applicant.SignedCountryId\\\"\\r\\n                    [items]=\\\"listData.SignedCountryId | listItems:'value':'Id' | emptyItem\\\" secureComponent\\r\\n                    style=\\\"width: 90%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Signed State\\\" i18n-label=\\\"@@policy.applicant.info.signedstate\\\"\\r\\n                [control]=\\\"signedStateId\\\">\\r\\n                <lf-select #signedStateId name=\\\"signedStateId\\\" [(ngModel)]=\\\"applicant.SignedStateId\\\"\\r\\n                    [items]=\\\"listData | stateListPicker: applicant.SignedCountryId | emptyItem | sortList\\\"\\r\\n                    secureComponent style=\\\"width: 90%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Additional UW Amount\\\" i18n-label=\\\"@@policy.applicant.info.addluwamount\\\"\\r\\n                [control]=\\\"additionalUWAmount\\\">\\r\\n                <lf-inputnumber #additionalUWAmount name=\\\"additionalUWAmount\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.AddUwAmt\\\" maxLength=\\\"12\\\" [max]=\\\"maxAdditionalUWAmount\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent>\\r\\n                </lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"MIB Filter Code\\\" i18n-label=\\\"@@policy.applicant.info.mibfiltercode\\\"\\r\\n                [control]=\\\"mibFilterCode\\\">\\r\\n                <lf-inputtext #mibFilterCode name=\\\"mibFilterCode\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].MibFilterCode\\\" maxLength=\\\"3\\\" secureComponent>\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input label=\\\"Req Auto Ordered?\\\" i18n-label=\\\"@@policy.applicant.info.reqautoordered\\\"\\r\\n                [control]=\\\"reqAutoOrdered\\\">\\r\\n                <lf-statictext #reqAutoOrdered name=\\\"reqAutoOrdered\\\" class=\\\"input-width\\\"\\r\\n                    [value]=\\\"applicant.UndAllowAutoApproval|getYesNoString:1\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <applicant-action [applications]=\\\"applications\\\"></applicant-action>\\r\\n    </div>\\r\\n</lf-panel>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { ViewModel } from 'life-core/view-model';\r\nimport { MessagingService } from 'life-core/messaging/messaging.service';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { NameUtil } from 'life-core/util';\r\nimport { InputValueValidationResult } from 'life-core/view-model/validation/input-value';\r\n\r\nimport { PolicyDTO, InsuredDTO, PhoneDTO, PhoneTypes, AddressDTO, AddressTypes, DBDate } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session/policy-subscriber';\r\nimport { AddressUtil, PhoneUtil } from 'ls-core/util/collection';\r\nimport { MetadataUtil, DBDateUtil } from 'ls-core/util';\r\n\r\nimport { ApplicantListHelper } from 'business/policy/shared';\r\nimport { ApplicantInfoHeaderBuilder } from './applicant-information-header.builder';\r\nimport { ApplicantChannel } from '../applicant-channel';\r\nimport { BirthDateValidatorDelegate } from './birthdate-validator.delegate';\r\nimport { ConfirmDialog, DialogResult, DialogButton, DialogButtonType } from 'life-core/component';\r\n\r\nconst maxUnderwritingAmount = 999999999999;\r\n\r\nconst hippaAuthorizationFlag = {\r\n    yes: 1,\r\n    no: 0\r\n};\r\n\r\n@Component({\r\n    selector: 'applicant-information',\r\n    templateUrl: './applicant-information.component.html',\r\n    providers: [PolicySubscriber, ApplicantInfoHeaderBuilder, BirthDateValidatorDelegate]\r\n})\r\nexport class ApplicantInformationComponent extends ViewModel {\r\n    public applicant: InsuredDTO;\r\n    public applicantPanelHeader: string;\r\n    public homePhone: PhoneDTO;\r\n    public workPhone: PhoneDTO;\r\n    public cellPhone: PhoneDTO;\r\n    public autoOrderValue: string;\r\n    public residenceAddress: AddressDTO;\r\n    public applications: Array<any>;\r\n    public maxLengthOfPostalCode: number;\r\n    public maxBirthDate: Date;\r\n    public maxAdditionalUWAmount: number;\r\n\r\n    private _policy: PolicyDTO;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _messagingService: MessagingService;\r\n    private _updatedApplicantName: string;\r\n    private _applicantInfoHeaderBuilder: ApplicantInfoHeaderBuilder;\r\n    private _birthDateValidatorDelegate: BirthDateValidatorDelegate;\r\n    private _confirmDialog: ConfirmDialog;\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        applicantListHelper: ApplicantListHelper,\r\n        messagingService: MessagingService,\r\n        applicantInfoHeaderBuilder: ApplicantInfoHeaderBuilder,\r\n        i18n: I18n,\r\n        birthDateValidatorDelegate: BirthDateValidatorDelegate,\r\n        confirmDialog: ConfirmDialog\r\n    ) {\r\n        super(injector);\r\n        this._applicantListHelper = applicantListHelper;\r\n        policySubscriber.subscribe(this, policy => {\r\n            this._policy = policy;\r\n        });\r\n        this._messagingService = messagingService;\r\n        this.setBirthDateLimit();\r\n        this._applicantInfoHeaderBuilder = applicantInfoHeaderBuilder;\r\n        this.maxBirthDate = this.setBirthDateLimit();\r\n        this.i18n = i18n;\r\n        this._birthDateValidatorDelegate = birthDateValidatorDelegate;\r\n        this._confirmDialog = confirmDialog;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setApplicant();\r\n        this.setupApplicantData();\r\n        this.setResolvedListData();\r\n        this.setResolvedMetaData();\r\n        this.setPanelHeader();\r\n        this.setApplicationsData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onDLDataChange(): void {\r\n        this._policy.Requirements_LazyLoad.forEach(requirement => {\r\n            if (requirement.RequirementCode == 'MVR') {\r\n                requirement.DLNumber = this.applicant.Applications_LazyLoad[0].DriversLicenseNumber;\r\n                requirement.DLState = this.applicant.Applications_LazyLoad[0].DriversLicenseState;\r\n            }\r\n        });\r\n    }\r\n\r\n    public onApplicantBirthDateChange(): void {\r\n        if (\r\n            this.applicantBirthDateExists() &&\r\n            this._birthDateValidatorDelegate.validate() === InputValueValidationResult.fail\r\n        ) {\r\n            this.showValidationMsgDialog().then(() => {\r\n                this.resetOriginalBirthDate();\r\n            });\r\n        }\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.setMaxUnderWritingAmount();\r\n        this.setHippaAuthorizationFlag();\r\n    }\r\n\r\n    private setMaxUnderWritingAmount(): void {\r\n        const underwritingAmount = this.applicant.UnderwritingAmount as number;\r\n        const additionalUnderwritingAmount = this.applicant.AddUwAmt as number;\r\n        this.maxAdditionalUWAmount = maxUnderwritingAmount - (underwritingAmount - additionalUnderwritingAmount);\r\n    }\r\n\r\n    private showValidationMsgDialog(): Promise<DialogResult> {\r\n        return this._confirmDialog.open({\r\n            message: this.i18n({\r\n                value: 'Birth date cannot be greater than Application Received Date or Agent Signed Date.',\r\n                id: 'policy.applicantinfo.dialog.datevalidation.message'\r\n            }),\r\n            title: this.i18n({ value: 'Validation message', id: 'policy.applicantinfo.dialog.datevalidation.title' }),\r\n            buttons: [new DialogButton({ type: DialogButtonType.OK })]\r\n        });\r\n    }\r\n\r\n    private resetOriginalBirthDate(): void {\r\n        this.applicant.BirthDate = null;\r\n    }\r\n\r\n    private setupApplicantData(): void {\r\n        this.setupAddresses();\r\n        this.setupPhones();\r\n    }\r\n\r\n    public onApplicantNameChanged(): void {\r\n        this.setUpdatedApplicantName();\r\n        this.publishNameChanges();\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        if (this._messagingService.channelExist(ApplicantChannel.ApplicantNameChange)) {\r\n            this._messagingService.closeChannel(ApplicantChannel.ApplicantNameChange);\r\n        }\r\n    }\r\n\r\n    private setupPhones(): void {\r\n        this.homePhone = PhoneUtil.getPhone(this.applicant.Phones_LazyLoad, PhoneTypes.HOME);\r\n        this.workPhone = PhoneUtil.getPhone(this.applicant.Phones_LazyLoad, PhoneTypes.WORK);\r\n        this.cellPhone = PhoneUtil.getPhone(this.applicant.Phones_LazyLoad, PhoneTypes.CELL);\r\n    }\r\n\r\n    private setUpdatedApplicantName(): void {\r\n        this._updatedApplicantName = NameUtil.getFullNameWithMiddleInitial({\r\n            firstName: this.applicant.FirstName,\r\n            middleName: this.applicant.MiddleName,\r\n            lastName: this.applicant.LastName\r\n        });\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this.applicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    private setPanelHeader(): void {\r\n        const applicantStatus = MetadataUtil.getItemByExternalCode(\r\n            this.listData.applicant_status,\r\n            this.applicant.ApplicantStatus\r\n        );\r\n        this.applicantPanelHeader = this._applicantInfoHeaderBuilder.getApplicantInfoHeader(\r\n            this.applicant,\r\n            applicantStatus\r\n        );\r\n    }\r\n\r\n    private setupAddresses(): void {\r\n        this.residenceAddress = AddressUtil.getAddress(this.applicant.Addresses_LazyLoad, AddressTypes.RESIDENCE);\r\n    }\r\n\r\n    private setApplicationsData(): void {\r\n        this.applications = this.applicant.Applications_LazyLoad;\r\n    }\r\n\r\n    private setBirthDateLimit(): Date {\r\n        const today = new Date().getDate();\r\n        const currentMonth = new Date().getMonth();\r\n        const currentYear = new Date().getFullYear();\r\n        return new Date(currentYear, currentMonth, today - 1);\r\n    }\r\n\r\n    private publishNameChanges(): void {\r\n        this._messagingService.publish(ApplicantChannel.ApplicantNameChange, this._updatedApplicantName);\r\n    }\r\n\r\n    private applicantBirthDateExists(): boolean {\r\n        return DBDateUtil.isDateSet(this.applicant.BirthDate);\r\n    }\r\n\r\n    private setHippaAuthorizationFlag(): void {\r\n        this.applicant.Applications_LazyLoad[0].HippaAuthorizationFlag =\r\n            this.applicant.Applications_LazyLoad[0].HippaAuthorizationFlag != 0\r\n                ? hippaAuthorizationFlag.yes\r\n                : hippaAuthorizationFlag.no;\r\n    }\r\n}\r\n","﻿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { ApplicantInformationComponent } from './applicant-information.component';\r\nimport { ApplicantActionComponent } from 'business/policy/applicant/information/applicant-action/applicant-action.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [ApplicantInformationComponent, ApplicantActionComponent],\r\n    exports: [ApplicantInformationComponent, ApplicantActionComponent],\r\n    entryComponents: []\r\n})\r\nexport class ApplicantInformationModule {}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { InputValueValidationResult, InputValueValidator } from 'life-core/view-model/validation/input-value';\r\n\r\nimport { ApplicationReceivedDateValidator } from 'business/policy/shared/validator/application-received-date-validator';\r\nimport { AgentSignedDateValidator } from 'business/policy/shared/validator/agent-signed-date-validator';\r\n\r\n@Injectable()\r\nexport class BirthDateValidatorDelegate implements InputValueValidator {\r\n    private _applicationReceivedDateValidator: ApplicationReceivedDateValidator;\r\n    private _agentSignedDateValidator: AgentSignedDateValidator;\r\n    constructor(\r\n        applicationReceivedDateValidator: ApplicationReceivedDateValidator,\r\n        agentSignedDateValidator: AgentSignedDateValidator\r\n    ) {\r\n        this._applicationReceivedDateValidator = applicationReceivedDateValidator;\r\n        this._agentSignedDateValidator = agentSignedDateValidator;\r\n    }\r\n\r\n    public validate(): InputValueValidationResult {\r\n        return this.isBirthdateValid() ? InputValueValidationResult.pass : InputValueValidationResult.fail;\r\n    }\r\n\r\n    private isBirthdateValid(): boolean {\r\n        return (\r\n            this._applicationReceivedDateValidator.validate() === InputValueValidationResult.pass &&\r\n            this._agentSignedDateValidator.validate() === InputValueValidationResult.pass\r\n        );\r\n    }\r\n}\r\n","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"company\\\" label=\\\"Company Name\\\" i18n-label=\\\"@@policy.applicant.otherInsurancePolicies.companyname\\\">\\r\\n                <lf-inputtext #company name=\\\"company\\\" [(ngModel)]=\\\"data.Company\\\" maxLength=\\\"50\\\" secureComponent\\r\\n                    required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"status\\\" label=\\\"Status\\\" i18n-label=\\\"@@policy.applicant.otherInsurancePolicies.status\\\">\\r\\n                <lf-select #status name=\\\"status\\\" [(ngModel)]=\\\"data.Status\\\" [items]=\\\"resolvedData.listData.Status | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    (change)=\\\"onStatusChange($event)\\\" (onKeydown)=\\\"onStatusChange($event)\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\" *ngIf=\\\"isReplacement\\\">\\r\\n            <lf-form-input [control]=\\\"replacementType\\\" label=\\\"Replacement Type\\\" i18n-label=\\\"@@policy.applicant.otherInsurancePolicies.replacementtype\\\">\\r\\n                <lf-select #replacementType name=\\\"replacementType\\\" [(ngModel)]=\\\"data.ReplacementType\\\" [items]=\\\"resolvedData.listData.ReplacementType | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"lineOfBusiness\\\" label=\\\"LOB\\\" i18n-label=\\\"@@policy.applicant.otherInsurancePolicies.lob\\\">\\r\\n                <lf-select #lineOfBusiness name=\\\"lineOfBusiness\\\" [(ngModel)]=\\\"data.LineOfBusiness\\\" [items]=\\\"resolvedData.listData.LineOfBusiness | listItems:'value':'Id' | emptyItem\\\"\\r\\n                container=\\\"dialog\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"purposeOfCoverage\\\" label=\\\"Purpose\\\" i18n-label=\\\"@@policy.applicant.otherInsurancePolicies.purpose\\\">\\r\\n                <lf-select #purposeOfCoverage name=\\\"purposeOfCoverage\\\" [(ngModel)]=\\\"data.PurposeOfCoverage\\\" [items]=\\\"resolvedData.listData.PurposeOfCoverage | listItems:'value':'Id' | emptyItem\\\"\\r\\n                container=\\\"dialog\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"policyNumber\\\" label=\\\"Policy #\\\" i18n-label=\\\"@@policy.applicant.otherInsurancePolicies.policynumber\\\">\\r\\n                <lf-inputtext #policyNumber name=\\\"policyNumber\\\" [(ngModel)]=\\\"data.PolicyNumber\\\" maxLength=\\\"20\\\"\\r\\n                    secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"issueDate\\\" label=\\\"Date Issued\\\" i18n-label=\\\"@@policy.applicant.otherInsurancePolicies.dateissued\\\">\\r\\n                <ls-inputdate #issueDate name=\\\"issueDate\\\" [(ngModel)]=\\\"data.IssueDate\\\" container=\\\"dialog\\\" secureComponent></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"amount\\\" label=\\\"Amount\\\" i18n-label=\\\"@@policy.applicant.otherInsurancePolicies.amount\\\">\\r\\n                <lf-inputnumber #amount name=\\\"amount\\\" maxLength=\\\"10\\\" [(ngModel)]=\\\"data.Amount\\\" format=\\\"n0\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent required></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"adbAmount\\\" label=\\\"ADB\\\" i18n-label=\\\"@@policy.applicant.otherInsurancePolicies.adb\\\">\\r\\n                <lf-inputnumber #adbAmount name=\\\"adbAmount\\\" maxLength=\\\"10\\\" [(ngModel)]=\\\"data.AdbAmount\\\" format=\\\"n0\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","﻿import { Component, Injector, Injectable } from '@angular/core';\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { ParentChildRegistry } from 'life-core/view-model';\nimport { RelatedPolicyDTO } from 'ls-core/model/dto';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { ApplicantAuthorizationProvider } from './../../applicant-authorization.provider';\n\n@Component({\n    selector: 'other-insurance-cases-detail-editor',\n    templateUrl: './other-insurance-cases-detail-editor.html',\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: ApplicantAuthorizationProvider }]\n})\n@Injectable()\nexport class OtherInsuranceCasesDialogDetailEditor extends BasePolicyDialogDetailViewModel<RelatedPolicyDTO> {\n    public isReplacement: boolean;\n\n    constructor(injector: Injector) {\n        super(injector);\n    }\n\n    public setModel(model: any): void {\n        super.setModel(model);\n        this.updateReplacementFlag();\n    }\n\n    public onStatusChange(selectedStatus: any): void {\n        this.updateReplacementFlag();\n    }\n\n    public updateReplacementFlag(): void {\n        this.isReplacement = this.data.Status == '2';\n        if (!this.isReplacement) {\n            this.data.ReplacementType = null;\n        }\n    }\n}\n","﻿import { Injector, Injectable } from '@angular/core';\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { ListMap } from 'life-core/model';\r\nimport { ListDataRequestBuilder, ListDataItem, ListsDataRequest } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class OtherInsuranceCasesDialogDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    public context: any;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    public getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        listDataRequestBuilder.addListRequestItem(this.context, 'Status');\r\n        listDataRequestBuilder.addListRequestItem(this.context, 'LineOfBusiness');\r\n        listDataRequestBuilder.addListRequestItem(this.context, 'PurposeOfCoverage');\r\n        listDataRequestBuilder.addListRequestItem(this.context, 'ReplacementType');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { ListItem } from 'life-core/model';\r\nimport { ListUtil } from 'life-core/util';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\n@Injectable()\r\nexport class OtherInsuranceCasesGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(\r\n        cellFormatters: CellFormatters,\r\n        lsCellFormatters: LsCellFormatters,\r\n        lsCellComparators: LsCellComparators,\r\n        i18n: I18n\r\n    ) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Company Name', id: 'policy.applicant.otherInsurancePolicies.companyname' }),\r\n            field: OtherInsuranceCasesFields.Company,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Status', id: 'policy.applicant.otherInsurancePolicies.status' }),\r\n            field: OtherInsuranceCasesFields.Status,\r\n            width: 80,\r\n            valueFormatter: this.getStatus\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Replacement Type',\r\n                id: 'policy.applicant.otherInsurancePolicies.replacementtype'\r\n            }),\r\n            field: OtherInsuranceCasesFields.ReplacementType,\r\n            width: 100,\r\n            valueFormatter: this.getReplacementType\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'LOB', id: 'policy.applicant.otherInsurancePolicies.lob' }),\r\n            field: OtherInsuranceCasesFields.LineOfBusiness,\r\n            width: 60,\r\n            valueFormatter: this.getLineOfBusinessLabel\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Purpose', id: 'policy.applicant.otherInsurancePolicies.purpose' }),\r\n            field: OtherInsuranceCasesFields.PurposeOfCoverage,\r\n            width: 90\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Policy #', id: 'policy.applicant.otherInsurancePolicies.policynbr' }),\r\n            field: OtherInsuranceCasesFields.PolicyNumber,\r\n            width: 90,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Date Issued', id: 'policy.applicant.otherInsurancePolicies.dateissued' }),\r\n            field: OtherInsuranceCasesFields.IssueDate,\r\n            width: 100,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Amount', id: 'policy.applicant.otherInsurancePolicies.amount' }),\r\n            field: OtherInsuranceCasesFields.Amount,\r\n            valueFormatter: this._cellFormatters.currencyCellFormatter,\r\n            width: 90\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'ADB', id: 'policy.applicant.otherInsurancePolicies.adb' }),\r\n            field: OtherInsuranceCasesFields.AdbAmount,\r\n            valueFormatter: this._cellFormatters.currencyCellFormatter,\r\n            width: 90\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getStatus(params: any): string {\r\n        if (params.node.data.Status) {\r\n            const statusDropdownList: ListItem[] = ListUtil.convertToListItems(params.context.listData.Status);\r\n            return ListUtil.getLabelByValue(statusDropdownList, params.node.data.Status);\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private getReplacementType(params: any): string {\r\n        if (params.node.data.ReplacementType) {\r\n            const replacementTypeDropdownList: ListItem[] = ListUtil.convertToListItems(\r\n                params.context.listData.ReplacementType\r\n            );\r\n            return ListUtil.getLabelByValue(replacementTypeDropdownList, params.node.data.ReplacementType);\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private getLineOfBusinessLabel(params: any): string {\r\n        if (params.node.data.LineOfBusiness) {\r\n            const lineOfBusinessDropdownList: ListItem[] = ListUtil.convertToListItems(\r\n                params.context.listData.LineOfBusiness\r\n            );\r\n            return ListUtil.getLabelByValue(lineOfBusinessDropdownList, params.node.data.LineOfBusiness);\r\n        }\r\n        return '';\r\n    }\r\n}\r\n\r\nexport const OtherInsuranceCasesFields = {\r\n    Company: 'Company',\r\n    Status: 'Status',\r\n    ReplacementType: 'ReplacementType',\r\n    LineOfBusiness: 'LineOfBusiness',\r\n    PurposeOfCoverage: 'PurposeOfCoverage',\r\n    PolicyNumber: 'PolicyNumber',\r\n    IssueDate: 'IssueDate',\r\n    Amount: 'Amount',\r\n    AdbAmount: 'AdbAmount'\r\n};\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { RelatedPolicyDTO } from 'ls-core/model/dto';\r\n\r\n@Injectable()\r\nexport class OtherInsuranceCasesItemFactory extends BaseDTOItemFactory<RelatedPolicyDTO> {\r\n    public newInstance(createItemParams: RelatedPolicyCreateItemParams<RelatedPolicyDTO>): RelatedPolicyDTO {\r\n        const relatedPolicyDTO = new RelatedPolicyDTO();\r\n        relatedPolicyDTO.SequenceNumber = this.getNextId(createItemParams.items, 'SequenceNumber');\r\n        relatedPolicyDTO.PolicyPersonId = createItemParams.policyPersonId;\r\n        return relatedPolicyDTO;\r\n    }\r\n}\r\nexport interface RelatedPolicyCreateItemParams<T> extends CreateItemParams<T> {\r\n    policyPersonId: any;\r\n}\r\n","module.exports = \"<lf-panel header=\\\"Other Insurance Cases and Policies\\\" i18n-header=\\\"@@policy.applicant.otherInsurancePolicies.title\\\" [toggleable]=\\\"true\\\"\\r\\n    panelType=\\\"primary\\\" stateId=\\\"panel_otherInsuranceCasesAndPolicies\\\" [state]=\\\"componentsState.get('panel_otherInsuranceCasesAndPolicies')\\\"\\r\\n    [initCollapsed]=true secureComponent>\\r\\n    <div class=\\\"row\\\">\\r\\n        <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\" secureComponent\\r\\n            [disabled]=\\\"disabled\\\" style=\\\"width: 100%;\\\">\\r\\n        </master-detail>\\r\\n    </div>\\r\\n</lf-panel>\"","﻿import { Component, Injector, Injectable } from '@angular/core';\n\nimport {\n    RowManagementDelegate,\n    MasterDetailComponentResolver,\n    BaseDataManager,\n    MasterButton,\n    MasterButtonType\n} from 'life-core/component/master-detail';\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\nimport { DirectDataResolve } from 'life-core/component/shared';\nimport { DialogSize, CreateItemEventData } from 'life-core/component';\nimport { I18n } from 'life-core/i18n';\n\nimport { InsuredDTO, RelatedPolicyDTO, PolicyDTO } from 'ls-core/model';\nimport { PolicySubscriber } from 'ls-core/session';\n\nimport { BasePolicyMasterDetailViewModel, ApplicantListHelper } from 'business/policy/shared';\nimport { OtherInsuranceCasesGridColumnsBuilder } from './other-insurance-cases-grid-column.builder';\nimport { OtherInsuranceCasesItemFactory, RelatedPolicyCreateItemParams } from './other-insurance-cases-item-factory';\nimport { OtherInsuranceCasesDialogDataResolver } from './detail/other-insurance-cases-dialog-data.resolver';\nimport { OtherInsuranceCasesDialogDetailEditor } from './detail/other-insurance-cases-detail-editor';\nimport { SetDefaultDataRequest, DefaultDataService } from 'ls-core/service';\n\nexport function rowManagementDelegateFactory(\n    itemFactory: OtherInsuranceCasesItemFactory,\n    dataManager: BaseDataManager<RelatedPolicyDTO>\n): RowManagementDelegate<RelatedPolicyDTO> {\n    return new RowManagementDelegate({\n        itemName: 'Other Insurance Cases And Policies',\n        itemIDPropertyName: 'SequenceNumber',\n        itemFactory: itemFactory,\n        dataManager: dataManager\n    });\n}\n\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<RelatedPolicyDTO> {\n    return new MasterDetailComponentResolver({\n        itemComponents: OtherInsuranceCasesDialogDetailEditor\n    });\n}\n\n@Component({\n    selector: 'other-insurance-cases',\n    templateUrl: './other-insurance-cases.component.html',\n    providers: [\n        PolicySubscriber,\n        BaseDataManager,\n        OtherInsuranceCasesItemFactory,\n        {\n            provide: RowManagementDelegate,\n            useFactory: rowManagementDelegateFactory,\n            deps: [OtherInsuranceCasesItemFactory, BaseDataManager]\n        },\n        {\n            provide: MasterDetailComponentResolver,\n            useFactory: itemComponentResolverFactory\n        },\n        OtherInsuranceCasesGridColumnsBuilder\n    ]\n})\n@Injectable()\nexport class OtherInsuranceCasesComponent extends BasePolicyMasterDetailViewModel<RelatedPolicyDTO> {\n    public applicant: InsuredDTO;\n    private _applicantListHelper: ApplicantListHelper;\n    private _policy: PolicyDTO;\n\n    private _gridColumnsBuilder: OtherInsuranceCasesGridColumnsBuilder;\n    private _defaultDataService: DefaultDataService;\n    constructor(\n        injector: Injector,\n        gridColumnsBuilder: OtherInsuranceCasesGridColumnsBuilder,\n        policySubscriber: PolicySubscriber,\n        applicantListHelper: ApplicantListHelper,\n        defaultDataService: DefaultDataService,\n        i18n: I18n\n    ) {\n        super(injector);\n        this.i18n = i18n;\n        this._gridColumnsBuilder = gridColumnsBuilder;\n        this._applicantListHelper = applicantListHelper;\n        this._defaultDataService = defaultDataService;\n        policySubscriber.subscribe(this, policy => {\n            this._policy = policy;\n        });\n    }\n\n    public loadData(): Promise<void> {\n        this.setApplicant();\n        this.setResolvedListData();\n        return Promise.resolve();\n    }\n\n    private setApplicant(): void {\n        this.applicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\n    }\n\n    public get showDetailAsPopup(): boolean {\n        return true;\n    }\n\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\n        return this._gridColumnsBuilder;\n    }\n\n    protected loadItems(): RelatedPolicyDTO[] {\n        return this.applicant.RelatedPolicies_LazyLoad;\n    }\n\n    protected getRowNodeId(data: RelatedPolicyDTO): Object {\n        return data.SequenceNumber;\n    }\n\n    protected createItem(eventData: CreateItemEventData<RelatedPolicyDTO>): Promise<RelatedPolicyDTO> {\n        const relatedPolicy: RelatedPolicyDTO = this.rowManagementDelegate.addNewRow({\n            items: this.items,\n            policyPersonId: this.getApplicantForNewRelatedPolicy()\n        } as RelatedPolicyCreateItemParams<RelatedPolicyDTO>);\n        const defaultDataRequest = new SetDefaultDataRequest(this._policy, relatedPolicy, '');\n        return this._defaultDataService.setDefaultData(defaultDataRequest).then(data => {\n            Object.assign(relatedPolicy, data.workingDTO as RelatedPolicyDTO);\n            return relatedPolicy;\n        });\n        // return Promise.resolve(relatedPolicy);\n    }\n\n    protected getItemDetailDialogResolve(item: RelatedPolicyDTO): DirectDataResolve[] {\n        return [\n            {\n                resolveName: 'listData',\n                resolverClass: OtherInsuranceCasesDialogDataResolver,\n                context: item\n            }\n        ];\n    }\n\n    protected getItemDetailDialogSize(): DialogSize {\n        return DialogSize.large;\n    }\n\n    protected getTitle(): string {\n        return this.i18n({ value: 'Other Insurance Cases And Policy', id: 'policy.case.otherInsurance.title' });\n    }\n\n    protected getPopupDetailButtons(): MasterButton<RelatedPolicyDTO>[] {\n        return [new MasterButton({ type: MasterButtonType.ADD }), new MasterButton({ type: MasterButtonType.EDIT })];\n    }\n\n    private getApplicantForNewRelatedPolicy(): Object {\n        return this.applicant.PolicyPersonId;\n    }\n}\n","﻿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { OtherInsuranceCasesComponent } from './other-insurance-cases.component';\r\nimport { OtherInsuranceCasesDialogDetailEditor } from './detail/other-insurance-cases-detail-editor';\r\nimport { OtherInsuranceCasesDialogDataResolver } from './detail/other-insurance-cases-dialog-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [OtherInsuranceCasesComponent, OtherInsuranceCasesDialogDetailEditor],\r\n    exports: [OtherInsuranceCasesComponent, OtherInsuranceCasesDialogDetailEditor],\r\n    providers: [OtherInsuranceCasesDialogDataResolver],\r\n    entryComponents: [OtherInsuranceCasesDialogDetailEditor]\r\n})\r\nexport class OtherInsuranceCasesModule {}\r\n","module.exports = \"<lf-panel header=\\\"Personal Information\\\" i18n-header=\\\"@@policy.applicant.personal.info.PersonalInformationTitle\\\"\\r\\n    [toggleable]=\\\"true\\\" panelType=\\\"primary\\\" stateId=\\\"panel_applicantPersonalInformation\\\" class=\\\"label-appearance\\\"\\r\\n    [state]=\\\"componentsState.get('panel_applicantPersonalInformation')\\\" [initCollapsed]=true secureComponent>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"residenceCountry\\\" label=\\\"Residence Country\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.ResidenceCountry\\\">\\r\\n                <lf-select #residenceCountry name=\\\"residenceCountry\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].ResidenceCountry\\\"\\r\\n                    [items]=\\\"listData.ResidenceCountry | listItems:'value':'Id' | emptyItem\\\" secureComponent\\r\\n                    style=\\\"width:80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"citizenship\\\" label=\\\"Citizenship\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.Citizenship\\\">\\r\\n                <lf-select #citizenship name=\\\"citizenship\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].CitizenshipCountryId\\\"\\r\\n                    [items]=\\\"listData.CitizenshipCountryId | listItems:'value':'Id' | emptyItem\\\" secureComponent\\r\\n                    style=\\\"width:80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"citizenshipStatus\\\" label=\\\"Citizenship Status\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.CitizenshipType\\\">\\r\\n                <lf-select #citizenshipStatus name=\\\"citizenshipStatus\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].CitizenshipType\\\"\\r\\n                    [items]=\\\"listData.CitizenshipType | listItems:'value':'Id' | emptyItem\\\" secureComponent\\r\\n                    style=\\\"width:80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"permResidentId\\\" label=\\\"Permanent Resident ID\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.ResidentId\\\">\\r\\n                <lf-inputtext #permResidentId name=\\\"permResidentId\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].ResidentId\\\" maxLength=\\\"10\\\" secureComponent\\r\\n                    maxLength=\\\"10\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\" row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"gender\\\" label=\\\"Gender\\\" i18n-label=\\\"@@policy.applicant.personal.info.Gender\\\">\\r\\n                <lf-select #gender name=\\\"gender\\\" [(ngModel)]=\\\"applicant.Sex\\\" [items]=\\\"listData.Sex | listItems:\\r\\n                    'value': 'Id' | emptyItem\\\" secureComponent style=\\\"width:80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"maritalStatus\\\" label=\\\"Marital Status\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.MaritalStatus\\\">\\r\\n                <lf-select #maritalStatus name=\\\"maritalStatus\\\" [(ngModel)]=\\\"applicant.MaritalStatus\\\" [items]=\\\"listData.MaritalStatus\\r\\n                    | listItems: 'value': 'Id' | emptyItem\\\" secureComponent style=\\\"width:80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"tobaccoUse\\\" label=\\\"Tobacco Use\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.TobaccoUse\\\">\\r\\n                <lf-select #tobaccoUse name=\\\"tobaccoUse\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].TobaccoUses_LazyLoad[0].TobaccoUseId\\\"\\r\\n                    [items]=\\\"listData.TobaccoUseId | listItems: 'value': 'Id' | emptyItem\\\" secureComponent\\r\\n                    style=\\\"width:80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"tobaccoType\\\" label=\\\"Tobacco Type\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.TobaccoType\\\">\\r\\n                <lf-select #tobaccoType name=\\\"tobaccoType\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].TobaccoUses_LazyLoad[0].TobaccoTypeId\\\"\\r\\n                    [items]=\\\"listData.TobaccoTypeId | listItems: 'value': 'Id' | emptyItem\\\" secureComponent\\r\\n                    style=\\\"width:80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"quitDate\\\" label=\\\"Quit Date\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.QuitDate\\\">\\r\\n                <ls-inputdate #quitDate name=\\\"quitDate\\\" class=\\\"input-date-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].TobaccoUses_LazyLoad[0].QuitDate\\\" secureComponent>\\r\\n                </ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"yearsSmoked\\\" label=\\\"Years Smoked\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.YearsSmoked\\\">\\r\\n                <lf-inputnumber format=\\\"d\\\" #yearsSmoked name=\\\"yearsSmoked\\\" maxLength=\\\"2\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].TobaccoUses_LazyLoad[0].YearsSmoked\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"unitsPerDay\\\" label=\\\"Units Per Day\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.UnitsPerDay\\\">\\r\\n                <lf-inputnumber format=\\\"d\\\" #unitsPerDay name=\\\"unitsPerDay\\\" maxLength=\\\"2\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].TobaccoUses_LazyLoad[0].PacksPerDay\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"birthCountry\\\" label=\\\"Birth Country\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.BirthCountry\\\">\\r\\n                <lf-select #birthCountry name=\\\"birthCountry\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].BirthCountry\\\"\\r\\n                    [items]=\\\"listData.BirthCountry | listItems: 'value': 'Id' | emptyItem\\\" secureComponent\\r\\n                    (change)=\\\"onBirthCountryChange()\\\" style=\\\"width:80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"birthState\\\" label=\\\"Birth State\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.BirthState\\\">\\r\\n                <lf-select #birthState name=\\\"birthState\\\" [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].BirthState\\\"\\r\\n                    [items]=\\\"listData | stateListPicker: applicant.Applications_LazyLoad[0].BirthCountry | emptyItem | sortList\\\"\\r\\n                    secureComponent style=\\\"width:80%\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"height\\\" label=\\\"Height\\\" i18n-label=\\\"@@policy.applicant.personal.info.Height\\\">\\r\\n                <lf-inputheight #height name=\\\"height\\\" [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].HeightInches\\\"\\r\\n                    class=\\\"input-width\\\" secureComponent></lf-inputheight>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"weight\\\" label=\\\"Weight\\\" i18n-label=\\\"@@policy.applicant.personal.info.Weight\\\">\\r\\n                <lf-inputweight #weight name=\\\"weight\\\" [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].WeightPounds\\\"\\r\\n                    class=\\\"input-width\\\" secureComponent></lf-inputweight>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"weightPreviousYear\\\" label=\\\"Weight Prev. Year\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.WeightPrevYear\\\">\\r\\n                <lf-inputweight #weightPreviousYear name=\\\"weightPreviousYear\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].WeghtPreviousYear\\\" secureComponent></lf-inputweight>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"weightChangeReason\\\" label=\\\"Weight Change Reason\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.WeightChangeReason\\\">\\r\\n                <lf-inputtext #weightChangeReason name=\\\"weightChangeReason\\\" class=\\\"input-width\\\"\\r\\n                    [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].ReasonForWeightChange\\\" maxLength=\\\"100\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"systolicBpReading\\\" label=\\\"Systolic BP Reading\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.SystolicBpReading\\\">\\r\\n                <lf-inputnumber format=\\\"d\\\" #systolicBpReading name=\\\"systolicBpReading\\\" maxLength=\\\"10\\\"\\r\\n                    class=\\\"input-width\\\" [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].SystolicBpReading\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"diastolicBpReading\\\" label=\\\"Diastolic BP Reading\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.DistolicBpReading\\\">\\r\\n                <lf-inputnumber format=\\\"d\\\" #diastolicBpReading name=\\\"diastolicBpReading\\\" maxLength=\\\"10\\\"\\r\\n                    class=\\\"input-width\\\" [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].DiastolicBpReading\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"cholestrolReading\\\" label=\\\"Cholesterol Reading\\\"\\r\\n                i18n-label=\\\"@@policy.applicant.personal.info.CholesterolReading\\\">\\r\\n                <lf-inputnumber format=\\\"d\\\" #cholestrolReading name=\\\"cholestrolReading\\\" maxLength=\\\"10\\\"\\r\\n                    class=\\\"input-width\\\" [(ngModel)]=\\\"applicant.Applications_LazyLoad[0].CholesterolReading\\\"\\r\\n                    [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</lf-panel>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { InsuredDTO, PolicyDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { ViewModel } from 'life-core/view-model';\r\n\r\nimport { ApplicantListHelper } from 'business/policy/shared';\r\n\r\n@Component({\r\n    selector: 'applicant-personal-info',\r\n    templateUrl: './applicant-personal-info.component.html',\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class ApplicantPersonalInfoComponent extends ViewModel {\r\n    public applicant: InsuredDTO;\r\n    private _policy: PolicyDTO;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber, applicantListHelper: ApplicantListHelper) {\r\n        super(injector);\r\n        this._applicantListHelper = applicantListHelper;\r\n        policySubscriber.subscribe(this, policy => {\r\n            this._policy = policy;\r\n        });\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setApplicant();\r\n        this.setResolvedListData();\r\n        this.setResolvedMetaData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onBirthCountryChange(): void {\r\n        this.resetBirthStateValue();\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this.applicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    private resetBirthStateValue(): void {\r\n        this.applicant.Applications_LazyLoad[0].BirthState = '';\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { ApplicantPersonalInfoComponent } from './applicant-personal-info.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [ApplicantPersonalInfoComponent],\r\n    exports: [ApplicantPersonalInfoComponent],\r\n    entryComponents: [ApplicantPersonalInfoComponent]\r\n})\r\nexport class ApplicantPersonalInfoModule {}\r\n","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"First Name\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.firstname\\\" [control]=\\\"firstName\\\">\\r\\n                <lf-inputtext #firstName name=\\\"firstName\\\" [(ngModel)]=\\\"data.FirstName\\\" maxLength=\\\"20\\\" secureComponent\\r\\n                    required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"Last Name\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.lastname\\\" [control]=\\\"lastName\\\">\\r\\n                <lf-inputtext #lastName name=\\\"lastName\\\" [(ngModel)]=\\\"data.LastName\\\" maxLength=\\\"50\\\" secureComponent\\r\\n                    required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"Primary Physician\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.primaryphysician\\\"\\r\\n                [control]=\\\"primaryPhysician\\\">\\r\\n                <lf-radiobuttongroup #primaryPhysician name=\\\"primaryPhysician\\\" [(ngModel)]=\\\"data.IsPrimaryPhysician\\\"\\r\\n                    (change)=\\\"setPrimaryPhysician()\\\" secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"primaryPhysician\\\" [value]=true label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"primaryPhysician\\\" [value]=false label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"Address\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.address\\\" [control]=\\\"addressLine1\\\">\\r\\n                <lf-inputtext #addressLine1 name=\\\"addressLine1\\\" [(ngModel)]=\\\"businessAddress.AddressLine1\\\" maxLength=\\\"100\\\"\\r\\n                    secureComponent required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input [control]=\\\"addressLine2\\\">\\r\\n                <lf-inputtext #addressLine2 name=\\\"addressLine2\\\" [(ngModel)]=\\\"businessAddress.AddressLine2\\\" maxLength=\\\"100\\\"\\r\\n                    secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"City\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.city\\\" [control]=\\\"city\\\">\\r\\n                <lf-inputtext #city name=\\\"city\\\" [(ngModel)]=\\\"businessAddress.City\\\" maxLength=\\\"30\\\" secureComponent\\r\\n                    required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"Country\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.country\\\" [control]=\\\"countryId\\\">\\r\\n                <lf-select #countryId name=\\\"countryId\\\" [(ngModel)]=\\\"businessAddress.CountryId\\\" [items]=\\\"resolvedData.listData.CountryId | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    container=\\\"dialog\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"State/Province\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.state\\\" [control]=\\\"countryStateId\\\">\\r\\n                <lf-select #countryStateId name=\\\"countryStateId\\\" [(ngModel)]=\\\"businessAddress.CountryStateId\\\" [items]=\\\"resolvedData.metaData | stateListPicker: businessAddress.CountryId |emptyItem | sortList\\\"\\r\\n                    container=\\\"dialog\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.postalcode\\\" [control]=\\\"postalCode\\\">\\r\\n                <lf-inputzipcode #postalCode name=\\\"postalCode\\\" [zipCodeType]=\\\"businessAddress.CountryId | getZipCodeType\\\"\\r\\n                    [(ngModel)]=\\\"businessAddress.PostalCode\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputzipcode>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-12\\\">\\r\\n            <lf-form-input label=\\\"Phone\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.phone\\\" [control]=\\\"phone\\\">\\r\\n                <ls-inputphone #phone name=\\\"phone\\\" [(ngModel)]=\\\"businessPhone\\\" secureComponent></ls-inputphone>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"Treatments\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.treatments\\\" [control]=\\\"treatments\\\">\\r\\n                <lf-inputtext #treatments name=\\\"treatments\\\" [(ngModel)]=\\\"data.Field1\\\" [maxLength]=\\\"255\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"Ongoing Treatments\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.ongoingtreatments\\\"\\r\\n                [control]=\\\"stillUnderTreatmentFlag\\\">\\r\\n                <lf-radiobuttongroup #stillUnderTreatmentFlag name=\\\"stillUnderTreatmentFlag\\\" [(ngModel)]=\\\"data.Field2\\\"\\r\\n                    secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"stillUnderTreatmentFlag\\\" [value]=1 label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"stillUnderTreatmentFlag\\\" [value]=0 label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"Last Visit Date\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.lastvisitdate\\\"\\r\\n                [control]=\\\"lastVisitDate\\\">\\r\\n                <lf-inputdate #lastVisitDate name=\\\"lastVisitDate\\\" [(ngModel)]=\\\"data.Field5\\\" [modelAsString]=\\\"true\\\"\\r\\n                    [stripTime]=\\\"true\\\" container=\\\"dialog\\\" secureComponent [maxDate]=\\\"maxLastVisitDate\\\"></lf-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"Last Visit Reason\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.lastvisitreason\\\"\\r\\n                [control]=\\\"lastVisitReason\\\">\\r\\n                <lf-inputtext #lastVisitReason name=\\\"lastVisitReason\\\" [(ngModel)]=\\\"data.Field4\\\" [maxLength]=\\\"50\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-4\\\">\\r\\n            <lf-form-input label=\\\"Findings\\\" i18n-label=\\\"@@policy.applicant.physicianInfo.findings\\\" [control]=\\\"findings\\\">\\r\\n                <lf-inputtext #findings name=\\\"findings\\\" [(ngModel)]=\\\"data.Field3\\\" [maxLength]=\\\"255\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","﻿import { Component, Injector, Injectable } from '@angular/core';\n\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\nimport { I18n } from 'life-core/i18n';\nimport { ICancelableDataManager, CancelableDataManager } from 'life-core/data-management';\nimport {\n    DialogButtonType,\n    DialogButton,\n    DialogResult,\n    ConfirmDialog,\n    DialogViewModelResult,\n    DialogData\n} from 'life-core/component/dialog';\nimport { AuthorizationProvider } from 'life-core/authorization';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { PartyRelationDTO, AddressDTO, AddressTypes, PhoneTypes, PhoneDTO, InsuredDTO, PolicyDTO } from 'ls-core/model';\nimport { AddressUtil, PhoneUtil } from 'ls-core/util';\n\nimport { ApplicantListHelper } from 'business/policy/shared';\nimport { ApplicantAuthorizationProvider } from './../../applicant-authorization.provider';\n\nconst DEFAULT_PERSON_TYPE = 'PHYSICIAN';\n\n@Component({\n    selector: 'physician-information-detail-editor',\n    templateUrl: './physician-information-detail-editor.html',\n    providers: [\n        ParentChildRegistry,\n        PolicySubscriber,\n        { provide: AuthorizationProvider, useClass: ApplicantAuthorizationProvider },\n        CancelableDataManager\n    ]\n})\n@Injectable()\nexport class PhysicianInformationDialogDetailEditor extends BasePolicyDialogDetailViewModel<PartyRelationDTO> {\n    public businessAddress: AddressDTO;\n    public businessPhone: PhoneDTO;\n    public maxLastVisitDate: Date;\n    protected confirmDialog: ConfirmDialog;\n    private _applicant: InsuredDTO;\n    private _policy: PolicyDTO;\n    private _cancelableDataManager: ICancelableDataManager<PartyRelationDTO>;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        applicantHelper: ApplicantListHelper,\n        confirmDialog: ConfirmDialog,\n        cancelableDataManager: CancelableDataManager,\n        i18n: I18n\n    ) {\n        super(injector);\n        this.maxLastVisitDate = new Date();\n        policySubscriber.subscribe(this, policy => {\n            this._policy = policy;\n        });\n        this._cancelableDataManager = cancelableDataManager as CancelableDataManager<PartyRelationDTO>;\n        this._applicant = applicantHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\n        this.confirmDialog = confirmDialog;\n        this.i18n = i18n;\n    }\n\n    public setModel(model: DialogData): void {\n        this.resolvedData = model.resolvedData;\n        this._cancelableDataManager.setItem(model.parameterData as PartyRelationDTO);\n        this.subscriptionTracker.track(\n            this._cancelableDataManager.getItem().subscribe(data => {\n                this.data = data;\n                this.setBusinessAddress();\n                this.setBusinessPhone();\n            })\n        );\n    }\n\n    public setPrimaryPhysician(): void {\n        if (this.data.IsPrimaryPhysician && this.hasPrimaryPhysicianAlready()) {\n            this.confirmPrimaryPhysicianChange().then(result => {\n                if (result.buttonId == DialogButtonType.CANCEL) {\n                    this.data.IsPrimaryPhysician = false;\n                }\n            });\n        }\n    }\n\n    private hasPrimaryPhysicianAlready(): boolean {\n        return this._applicant.Relations_LazyLoad.some(n => n.IsPrimaryPhysician && n.PersonId != this.data.PersonId);\n    }\n\n    protected confirmPrimaryPhysicianChange(): Promise<DialogResult> {\n        return this.confirmDialog.open({\n            title: this.i18n({ value: 'Primary Physician', id: 'policy.applicant.physicianInfo.primaryphysician' }),\n            message: this.i18n({\n                value:\n                    'A Physician is already assigned as Primary. Do you want to continue and designate this Physician as Primary?',\n                id: 'policy.applicant.physicianInfo.primaryphysicianalertmsg'\n            }),\n            buttons: [\n                new DialogButton({\n                    type: DialogButtonType.OK,\n                    options: { isDefault: true }\n                }),\n                new DialogButton({ type: DialogButtonType.CANCEL })\n            ]\n        });\n    }\n\n    protected beforeDialogClose(buttonId: string): void {\n        if (this.isDialogButtonTypeOK(buttonId)) {\n            console.log(`Date input from dialog - ${this.data.Field5}`);\n            if (this.data.IsPrimaryPhysician) {\n                const primary = this._applicant.Relations_LazyLoad.find(\n                    n => n.IsPrimaryPhysician && n.PersonId != this.data.PersonId\n                );\n                if (primary) {\n                    primary.IsPrimaryPhysician = false;\n                }\n            }\n            this.savePhysicianDataChanges();\n        } else {\n            this.cancelPhysicianDataChanges();\n        }\n    }\n\n    protected setupData(): void {\n        this.setResolvedListData();\n        this.setResolvedMetaData();\n        this.initializePhysicianData();\n    }\n\n    private savePhysicianDataChanges(): void {\n        this._cancelableDataManager.saveItem(this.data);\n    }\n\n    private cancelPhysicianDataChanges(): void {\n        this._cancelableDataManager.cancelItem(this.data);\n    }\n\n    private initializePhysicianData(): void {\n        this.data.IsPrimaryPhysician = this.data.IsPrimaryPhysician || false;\n        this.data.Field2 = this.data.Field2 || '0';\n        this.data.PersonTypeId = this.data.PersonTypeId || DEFAULT_PERSON_TYPE;\n    }\n\n    private setBusinessAddress(): void {\n        if (!this.data.Addresses_LazyLoad) {\n            this.data.Addresses_LazyLoad = new Array<AddressDTO>();\n        }\n\n        AddressUtil.addAddressIfNotFound(this.data.Addresses_LazyLoad, AddressTypes.BUSINESS);\n        this.businessAddress = AddressUtil.getAddress(this.data.Addresses_LazyLoad, AddressTypes.BUSINESS);\n    }\n\n    private setBusinessPhone(): void {\n        if (!this.data.Phones_LazyLoad) {\n            this.data.Phones_LazyLoad = new Array<PhoneDTO>();\n        }\n        PhoneUtil.addPhoneIfNotFound(this.data.Phones_LazyLoad, PhoneTypes.BUSINESS);\n        this.businessPhone = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.BUSINESS);\n    }\n}\n","﻿import { Injector, Injectable } from '@angular/core';\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { ListMap } from 'life-core/model';\r\nimport { AddressDTO } from 'ls-core/model/dto';\r\nimport { ListDataRequestBuilder, ListsDataRequest, ListDataItem } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class PhysicianInformationDialogDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    public getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        const addressDTO = ObjectUtil.createObjectOfType({ CountryId: null }, AddressDTO);\r\n        listDataRequestBuilder.addListRequestItem(addressDTO, 'CountryId');\r\n        listDataRequestBuilder.addListRequestItem(addressDTO, 'CountryStateId');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\nimport { CountryStateCodes } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class PhysicianInformationDialogMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return CountryStateCodes;\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { NamePattern, DateFormatter } from 'life-core/util';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { ListDataItem } from 'ls-core/service';\r\nimport { LsPhoneNumberPipe, GetYesNoStringPipe, AddressUtil } from 'ls-core/util';\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\nimport { AddressTypes, PhoneTypes, CountryCodes, MetadataItem } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class PhysicianInformationGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n    private _dateFormatter: DateFormatter;\r\n    constructor(\r\n        lsCellFormatters: LsCellFormatters,\r\n        lsCellComparators: LsCellComparators,\r\n        dateFormatter: DateFormatter,\r\n        i18n: I18n\r\n    ) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this._dateFormatter = dateFormatter;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Name', id: 'policy.applicant.physicianInfo.name' }),\r\n            field: PhysicianInformationFields.FullName,\r\n            width: 100,\r\n            valueFormatter: (params: any) =>\r\n                this._lsCellFormatters.nameCellFormatter(params, NamePattern.LastFirstAndMiddleInitial),\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Primary', id: 'policy.applicant.physicianInfo.primary' }),\r\n            field: PhysicianInformationFields.IsPrimaryPhysician,\r\n            width: 100,\r\n            valueFormatter: this.getYesNoString\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Address', id: 'policy.applicant.physicianInfo.address' }),\r\n            field: PhysicianInformationFields.FullAddress,\r\n            width: 200,\r\n            valueFormatter: params => this.getFullAddress(params),\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Phone', id: 'policy.applicant.physicianInfo.phone' }),\r\n            field: PhysicianInformationFields.Phone,\r\n            width: 100,\r\n            valueFormatter: this.formatPhone\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Treatments', id: 'policy.applicant.physicianInfo.treatment' }),\r\n            field: PhysicianInformationFields.Treatments,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Ongoing Treatments',\r\n                id: 'policy.applicant.physicianInfo.ongoingtreatments'\r\n            }),\r\n            field: PhysicianInformationFields.StillUnderTreatmentFlag,\r\n            width: 150,\r\n            valueFormatter: this.getYesNoString\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Last Visit Date', id: 'policy.applicant.physicianInfo.lastvisitdate' }),\r\n            field: PhysicianInformationFields.LastVisitDate,\r\n            width: 100,\r\n            // valueFormatter: params => {\r\n            //     debugger;\r\n            //     return this._dateFormatter.format(params.value);\r\n            // },\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Last Visit Reason', id: 'policy.applicant.physicianInfo.lastvisitreason' }),\r\n            field: PhysicianInformationFields.VisitReason,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Findings', id: 'policy.applicant.physicianInfo.finddings' }),\r\n            field: PhysicianInformationFields.Findings,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private formatPhone(params: any): string {\r\n        if (params.node.data.Phones_LazyLoad.length) {\r\n            const businessPhone = params.node.data.Phones_LazyLoad.find(\r\n                phone => phone.PhoneTypeCode == PhoneTypes.BUSINESS\r\n            );\r\n            if (businessPhone) {\r\n                return new LsPhoneNumberPipe().transform(businessPhone);\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private getFullAddress(params: any): string {\r\n        if (params.data.Addresses_LazyLoad && params.data.Addresses_LazyLoad.length > 0) {\r\n            const businessAddress = AddressUtil.getAddress(params.data.Addresses_LazyLoad, AddressTypes.BUSINESS);\r\n            if (businessAddress.CountryId) {\r\n                const stateName = this.getStateName(\r\n                    businessAddress.CountryStateId,\r\n                    params.context.listData[CountryCodes[businessAddress.CountryId]]\r\n                );\r\n\r\n                const countryName = this.getCountryName(\r\n                    businessAddress.CountryId,\r\n                    params.context.listData.SignedCountryId\r\n                );\r\n                return AddressUtil.getFullAddress(businessAddress, stateName, countryName);\r\n            }\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private getStateName(stateId: string, stateList: Array<MetadataItem>): string {\r\n        return stateId ? stateList.find(state => state.value === stateId).label : '';\r\n    }\r\n\r\n    private getCountryName(countryId: string, countryList: Array<ListDataItem>): string {\r\n        return countryId ? countryList.find(country => country.Id === countryId).value : '';\r\n    }\r\n\r\n    private getYesNoString(params: any): string {\r\n        if (params) {\r\n            return new GetYesNoStringPipe().transform(params.value);\r\n        }\r\n        return '';\r\n    }\r\n}\r\n\r\nexport const PhysicianInformationFields = {\r\n    FullName: 'FullName',\r\n    IsPrimaryPhysician: 'IsPrimaryPhysician',\r\n    FullAddress: 'FullAddress',\r\n    Phone: 'Phone',\r\n    Treatments: 'Field1',\r\n    StillUnderTreatmentFlag: 'Field2',\r\n    LastVisitDate: 'Field5',\r\n    VisitReason: 'Field4',\r\n    Findings: 'Field3'\r\n};\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { ListUtil } from 'life-core/util';\r\nimport { PartyRelationDTO, AddressDTO, AddressTypes, PhoneDTO, PhoneTypes } from 'ls-core/model';\r\nimport { DBDate } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class PhysicianInformationItemFactory extends BaseDTOItemFactory<PartyRelationDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<PartyRelationDTO>): PartyRelationDTO {\r\n        const partyRelationDTO = new PartyRelationDTO();\r\n        const businessAddress = new AddressDTO();\r\n        businessAddress.AddressTypeCode = AddressTypes.BUSINESS;\r\n        partyRelationDTO.Addresses_LazyLoad = [businessAddress];\r\n        const workPhone = new PhoneDTO();\r\n        workPhone.PhoneTypeCode = PhoneTypes.BUSINESS;\r\n        partyRelationDTO.Phones_LazyLoad = [workPhone];\r\n        partyRelationDTO.PersonId = this.getNextId(createItemParams.items, 'PersonId');\r\n        return partyRelationDTO;\r\n    }\r\n}\r\n","module.exports = \"<lf-panel header=\\\"Physician Information\\\" i18n-header=\\\"@@policy.applicant.physicianInfo.title\\\" [toggleable]=\\\"true\\\"\\r\\n    panelType=\\\"primary\\\" stateId=\\\"panel_physicianInformation\\\" [state]=\\\"componentsState.get('panel_physicianInformation')\\\"\\r\\n    [initCollapsed]=true secureComponent>\\r\\n    <div class=\\\"row col-12\\\">\\r\\n        <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\"\\r\\n            [showDetailAsPopup]=\\\"showDetailAsPopup\\\" secureComponent [disabled]=\\\"disabled\\\" style=\\\"width: 100%;\\\">\\r\\n        </master-detail>\\r\\n    </div>\\r\\n</lf-panel>\"","﻿import { Component, Injector } from '@angular/core';\r\nimport { ResolvedDataNames } from 'life-core/view-model';\r\n\r\nimport {\r\n    RowManagementDelegate,\r\n    MasterDetailComponentResolver,\r\n    BaseDataManager\r\n} from 'life-core/component/master-detail';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { DirectDataResolve } from 'life-core/component/shared';\r\nimport { DialogSize } from 'life-core/component/dialog';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { ICancelableDataManager } from 'life-core/data-management';\r\n\r\nimport { InsuredDTO, PartyRelationDTO, PolicyDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\nimport { BasePolicyMasterDetailViewModel, ApplicantListHelper } from 'business/policy/shared';\r\nimport { PhysicianInformationGridColumnsBuilder } from './physician-information-grid-column.builder';\r\nimport { PhysicianInformationItemFactory } from './physician-information-item-factory';\r\nimport { PhysicianInformationDialogDataResolver } from './detail/physician-information-dialog-data.resolver';\r\nimport { PhysicianInformationDialogDetailEditor } from './detail/physician-information-detail-editor';\r\nimport { PhysicianInformationDialogMetaDataResolver } from './detail/physician-information-dialog-meta-data.resolver';\r\n\r\nexport function rowManagementDelegateFactory(\r\n    itemFactory: PhysicianInformationItemFactory,\r\n    dataManager: BaseDataManager<PartyRelationDTO>\r\n): RowManagementDelegate<PartyRelationDTO> {\r\n    return new RowManagementDelegate({\r\n        itemName: 'Physician Information',\r\n        itemIDPropertyName: 'PersonId',\r\n        itemFactory: itemFactory,\r\n        dataManager: dataManager\r\n    });\r\n}\r\n\r\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<PartyRelationDTO> {\r\n    return new MasterDetailComponentResolver({\r\n        itemComponents: PhysicianInformationDialogDetailEditor\r\n    });\r\n}\r\n\r\n@Component({\r\n    selector: 'physician-information',\r\n    templateUrl: './physician-information.component.html',\r\n    providers: [\r\n        PolicySubscriber,\r\n        BaseDataManager,\r\n        PhysicianInformationItemFactory,\r\n        {\r\n            provide: RowManagementDelegate,\r\n            useFactory: rowManagementDelegateFactory,\r\n            deps: [PhysicianInformationItemFactory, BaseDataManager]\r\n        },\r\n        {\r\n            provide: MasterDetailComponentResolver,\r\n            useFactory: itemComponentResolverFactory\r\n        },\r\n        PhysicianInformationGridColumnsBuilder\r\n    ]\r\n})\r\nexport class PhysicianInformationComponent extends BasePolicyMasterDetailViewModel<PartyRelationDTO> {\r\n    public applicant: InsuredDTO;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _policy: PolicyDTO;\r\n    private _gridColumnsBuilder: PhysicianInformationGridColumnsBuilder;\r\n    private _cancelableDataManager: ICancelableDataManager<PartyRelationDTO>;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        gridColumnsBuilder: PhysicianInformationGridColumnsBuilder,\r\n        policySubscriber: PolicySubscriber,\r\n        applicantListHelper: ApplicantListHelper,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        this._applicantListHelper = applicantListHelper;\r\n        policySubscriber.subscribe(this, policy => {\r\n            this._policy = policy;\r\n        });\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        this.setApplicant();\r\n        this.setResolvedListData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this.applicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    public get showDetailAsPopup(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): PartyRelationDTO[] {\r\n        return this.applicant.Relations_LazyLoad;\r\n    }\r\n\r\n    protected getRowNodeId(data: PartyRelationDTO): any {\r\n        return data.PersonId;\r\n    }\r\n\r\n    protected showItemDetailDialog(item: PartyRelationDTO): Promise<PartyRelationDTO> {\r\n        return super.showItemDetailDialog(item);\r\n    }\r\n\r\n    protected getItemDetailDialogResolve(item: PartyRelationDTO): DirectDataResolve[] {\r\n        return [\r\n            {\r\n                resolveName: ResolvedDataNames.listData,\r\n                resolverClass: PhysicianInformationDialogDataResolver,\r\n                context: item\r\n            },\r\n            {\r\n                resolveName: ResolvedDataNames.metaData,\r\n                resolverClass: PhysicianInformationDialogMetaDataResolver,\r\n                context: item\r\n            }\r\n        ];\r\n    }\r\n\r\n    protected getItemDetailDialogSize(): DialogSize {\r\n        return DialogSize.large;\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return this.i18n({ value: 'Physician Information', id: 'policy.case.physician.title' });\r\n    }\r\n}\r\n","﻿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { PhysicianInformationComponent } from './physician-information.component';\r\nimport { PhysicianInformationDialogDetailEditor } from './detail/physician-information-detail-editor';\r\nimport { PhysicianInformationDialogDataResolver } from './detail/physician-information-dialog-data.resolver';\r\nimport { PhysicianInformationDialogMetaDataResolver } from './detail/physician-information-dialog-meta-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [PhysicianInformationComponent, PhysicianInformationDialogDetailEditor],\r\n    exports: [PhysicianInformationComponent, PhysicianInformationDialogDetailEditor],\r\n    providers: [PhysicianInformationDialogDataResolver, PhysicianInformationDialogMetaDataResolver],\r\n    entryComponents: [PhysicianInformationDialogDetailEditor]\r\n})\r\nexport class PhysicianInformationModule {}\r\n","﻿export const CaseLogViewDataKeys = {\r\n    CASE_LOG_FILTERS: 'case_log_filters'\r\n};\r\n","module.exports = \"<case-log-filter [context]=\\\"data\\\" (filterChange)=\\\"caseLogList.setCaseLogFilterModel($event)\\\"></case-log-filter>\\r\\n<case-log-list #caseLogList [context]=\\\"data\\\"></case-log-list>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider } from 'life-core/authorization/authorization.provider';\r\nimport { IDialogViewModel, DialogViewModelResult } from 'life-core/component/dialog/shared/dialog.interface';\r\nimport { DetailViewModel } from 'life-core/component/master-detail/view-model/detail.vm';\r\nimport { ParentChildRegistry } from 'life-core/view-model/parent-child-registry/parent-child-registry';\r\nimport { TabStateManager } from 'life-core/util/tab-state/tab-state.manager';\r\n\r\nimport { LogEntryProxyDTO } from 'ls-core/model/dto/log-entry-proxy.dto';\r\n\r\nimport { CaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Component({\r\n    selector: 'case-log',\r\n    templateUrl: './case-log.component.html',\r\n    providers: [\r\n        ParentChildRegistry,\r\n        TabStateManager,\r\n        { provide: AuthorizationProvider, useClass: CaseAuthorizationProvider }\r\n    ]\r\n})\r\nexport class CaseLogComponent extends DetailViewModel<LogEntryProxyDTO> implements IDialogViewModel {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        this.data = model.resolvedData;\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        return Promise.resolve(null);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { CaseLogComponent } from './case-log.component';\r\nimport { CaseLogListComponent } from './list/case-log-list.component';\r\nimport { CaseLogFilterComponent } from './filter/case-log-filter.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [CaseLogComponent, CaseLogListComponent, CaseLogFilterComponent],\r\n    providers: [],\r\n    entryComponents: [CaseLogComponent]\r\n})\r\nexport class CaseLogModule {}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { IGetRowsParams } from 'ag-grid-community';\r\n\r\nimport { IInfiniteGridDatasource } from 'life-core/component/grid';\r\n\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods, CompositeFilter } from 'ls-core/service';\r\n\r\nimport { BaseGridDataSource } from 'business/shared/grid/base-grid-data-source';\r\n\r\nimport { CaseLogFilterModel } from '../filter/case-log-filter.model';\r\nimport { LogEntryPagedRequest } from './log-entry-paged-request.service';\r\n\r\n@Injectable()\r\nexport class CaseLogListGridDataSource extends BaseGridDataSource implements IInfiniteGridDatasource {\r\n    private _caseLogListFilterModel: CaseLogFilterModel;\r\n\r\n    constructor(injector: Injector, caseLogFilterModel: CaseLogFilterModel) {\r\n        super(injector);\r\n        this._caseLogListFilterModel = caseLogFilterModel;\r\n    }\r\n\r\n    public updateFilter(caseLogListFilterModel: CaseLogFilterModel): void {\r\n        this._caseLogListFilterModel = caseLogListFilterModel;\r\n        this.resetRowCount();\r\n    }\r\n\r\n    protected getRowsServiceParams(params: IGetRowsParams): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.LOG_ENTRY_LISTDATA,\r\n            serviceMethod: UIServiceMethods.GET_DATA,\r\n            requestPayload: this.getRowsPayLoad(params)\r\n        });\r\n    }\r\n\r\n    protected getRowCountServiceParams(params: IGetRowsParams): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.LOG_ENTRY_COUNT_LISTDATA,\r\n            serviceMethod: UIServiceMethods.GET_COUNT,\r\n            requestPayload: this.getRowCountPayLoad(params)\r\n        });\r\n    }\r\n\r\n    private getRowsPayLoad(params: IGetRowsParams): LogEntryPagedRequest {\r\n        const filterCriterion = this.getFilterCriterion(params.filterModel);\r\n        const sortFields = this.getSortFieldsForSortModel(params.sortModel);\r\n        const numOfItems = params.endRow - params.startRow;\r\n        const request = this.buildRequestPayload(filterCriterion);\r\n        request.startIndex = params.startRow;\r\n        request.numItemsToFetch = numOfItems;\r\n        request.sortFields = sortFields;\r\n        return request;\r\n    }\r\n\r\n    private getRowCountPayLoad(params: IGetRowsParams): LogEntryPagedRequest {\r\n        const filterCriterion = this.getFilterCriterion(params.filterModel);\r\n        return this.buildRequestPayload(filterCriterion);\r\n    }\r\n\r\n    private buildRequestPayload(filterCriterion: CompositeFilter): LogEntryPagedRequest {\r\n        const request = new LogEntryPagedRequest({\r\n            policyId: this._caseLogListFilterModel.policyId,\r\n            applicantId: this._caseLogListFilterModel.applicantId,\r\n            filters: filterCriterion ? filterCriterion.filters : []\r\n        });\r\n        return request;\r\n    }\r\n}\r\n","import { PagedDataRequest, SortField } from 'ls-core/service';\r\n\r\nexport class LogEntryPagedRequest extends PagedDataRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.LogEntryPagedRequest, LifeSuite.UIServiceDTO';\r\n\r\n    public policyId: number;\r\n    public applicantId: number;\r\n\r\n    constructor({\r\n        policyId,\r\n        applicantId,\r\n        startIndex,\r\n        numItemsToFetch,\r\n        sortFields = null,\r\n        filters = null\r\n    }: {\r\n        policyId: number;\r\n        applicantId: number;\r\n        startIndex?: number;\r\n        numItemsToFetch?: number;\r\n        sortFields?: Array<SortField>;\r\n        filters?: any[];\r\n    }) {\r\n        super({ startIndex, numItemsToFetch, sortFields, filters });\r\n        this.policyId = policyId || 0;\r\n        this.applicantId = applicantId || 0;\r\n    }\r\n}\r\n","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"viewList\\\" label=\\\"View\\\" i18n-label=\\\"@@policy.case.log.view\\\">\\r\\n                <lf-select #viewList name=\\\"viewList\\\" [(ngModel)]=\\\"selectedView\\\" [items]=\\\"listData.MyWorkView\\\"\\r\\n                    [clearable]=\\\"false\\\" style=\\\"width:200px\\\" (change)=\\\"onViewChange($event)\\\" [clearable]=\\\"false\\\"\\r\\n                    [actionType]=\\\"filterDropdownActionType\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\" *ngIf=\\\"isApplicantDropDownVisible\\\">\\r\\n            <lf-form-input [control]=\\\"applicants\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.case.log.applicant\\\">\\r\\n                <lf-select #applicants name=\\\"applicants\\\" [items]=\\\"applicantsList | listItems:'label':'value'\\\"\\r\\n                    [(ngModel)]=\\\"selectedApplicantId\\\" style=\\\"width:200px\\\" (change)=\\\"onApplicantChange($event)\\\"\\r\\n                    [clearable]=\\\"false\\\" [actionType]=\\\"filterDropdownActionType\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector, EventEmitter, Output, Input } from '@angular/core';\r\n\r\nimport { ViewModel } from 'life-core/view-model/view-model';\r\nimport { TabStateValueAccessor } from 'life-core/util/tab-state/tab-state-value.accessor';\r\nimport { TabStateManager } from 'life-core/util/tab-state/tab-state.manager';\r\nimport { MessagingService } from 'life-core/messaging/messaging.service';\r\nimport { ListItem } from 'life-core/model';\r\nimport { ConvertUtil } from 'life-core/util/lang/convert.util';\r\nimport { DropdownActionType } from 'life-core/component/input';\r\n\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { PolicyDTO } from 'ls-core/model/dto/policy.dto';\r\nimport { MetadataItem } from 'ls-core/model/metadata/metadata.model';\r\n\r\nimport { ApplicantListHelper, All_Applicants_Id } from 'business/policy/shared';\r\nimport { PolicyViewType } from 'business/shared/view-type/policy-view-type';\r\nimport { CaseLogFilterModel } from './case-log-filter.model';\r\nimport { CaseLogFilterService } from './case-log-filter.service';\r\nimport { CaseLogViewDataKeys } from '../case-log-view-data-keys';\r\n\r\n@Component({\r\n    selector: 'case-log-filter',\r\n    templateUrl: './case-log-filter.component.html',\r\n    providers: [CaseLogFilterService]\r\n})\r\nexport class CaseLogFilterComponent extends ViewModel {\r\n    @Output()\r\n    public filterChange: EventEmitter<CaseLogFilterModel> = new EventEmitter<CaseLogFilterModel>();\r\n    @Input()\r\n    public context: any;\r\n    public filters: CaseLogFilterModel;\r\n    public applicantsList: Array<ListItem>;\r\n    public selectedView: PolicyViewType;\r\n    public isApplicantDropDownVisible: boolean;\r\n    public selectedApplicantId: string;\r\n    public filterDropdownActionType: DropdownActionType = DropdownActionType.Presentation;\r\n\r\n    private _policy: PolicyDTO;\r\n    private _filtersStateValueAccessor: TabStateValueAccessor<CaseLogFilterModel>;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        appSession: AppSession,\r\n        tabStateManager: TabStateManager,\r\n        applicantListHelper: ApplicantListHelper\r\n    ) {\r\n        super(injector);\r\n        this._policy = appSession.policyDTO;\r\n        this._applicantListHelper = applicantListHelper;\r\n        this.createStateValueAccessors(tabStateManager);\r\n        this.isApplicantDropDownVisible = false;\r\n        this.applicantsList = [];\r\n    }\r\n\r\n    public onViewChange(view: any): void {\r\n        this.toggleApplicantVisibility();\r\n        this.buildSearchCriteria();\r\n        if (view.label == 'Applicant') {\r\n            this.selectedApplicantId = All_Applicants_Id.toString();\r\n        }\r\n        this.emitFilterModelChange();\r\n    }\r\n\r\n    public onApplicantChange(selectedApplicant: any): void {\r\n        this.buildSearchCriteria(selectedApplicant.value);\r\n        this.emitFilterModelChange();\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        super.ngOnDestroy();\r\n        this._filtersStateValueAccessor.setValue(this.filters);\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.initFilters();\r\n        this.setDefaultView();\r\n        this.loadApplicantList();\r\n        this.setDefaultData();\r\n        this.buildSearchCriteria();\r\n        this.emitFilterModelChange();\r\n    }\r\n\r\n    private toggleApplicantVisibility(): void {\r\n        this.isApplicantDropDownVisible = this.selectedView == 0;\r\n    }\r\n\r\n    private initFilters(): void {\r\n        this.filters = this._filtersStateValueAccessor.hasValue()\r\n            ? this._filtersStateValueAccessor.getValue()\r\n            : (this.filters = new CaseLogFilterModel());\r\n    }\r\n\r\n    private createStateValueAccessors(tabStateManager: TabStateManager): void {\r\n        this._filtersStateValueAccessor = new TabStateValueAccessor<CaseLogFilterModel>(\r\n            tabStateManager,\r\n            CaseLogViewDataKeys.CASE_LOG_FILTERS\r\n        );\r\n    }\r\n\r\n    private setDefaultView(): void {\r\n        this.setViewDropDownListItems();\r\n        this.setViewListOption(this.listData['MyWorkViewDefault']);\r\n    }\r\n\r\n    private setViewDropDownListItems(): void {\r\n        if (this.context.metaData.MyWorkView) {\r\n            this.setListData(this.context.metaData);\r\n        }\r\n    }\r\n\r\n    private setViewListOption(defaultViewMetadata: MetadataItem[]): void {\r\n        this.selectedView = this.getCaseLogViewTypeFromMetadata(defaultViewMetadata);\r\n    }\r\n\r\n    private getCaseLogViewTypeFromMetadata(items: MetadataItem[]): PolicyViewType {\r\n        return items[0].label == 'Applicant' ? PolicyViewType.Case : PolicyViewType.Applicant;\r\n    }\r\n\r\n    private emitFilterModelChange(): void {\r\n        this.filterChange.emit(this.filters);\r\n    }\r\n\r\n    private loadApplicantList(): void {\r\n        if (this._policy.Insureds_LazyLoad) {\r\n            this.applicantsList = this._applicantListHelper.getApplicantList(this._policy.Insureds_LazyLoad, false);\r\n            this.applicantsList.unshift(new ListItem('All Applicants', All_Applicants_Id.toString()));\r\n        }\r\n    }\r\n\r\n    private setDefaultData(): void {\r\n        this.filters.policyId = ConvertUtil.toNumber(this._policy.PolicyId);\r\n    }\r\n\r\n    // Referred flex 9.0\r\n    private buildSearchCriteria(selectedApplicant?: number): void {\r\n        if (this.isApplicantDropDownVisible && selectedApplicant) {\r\n            this.filters.applicantId = selectedApplicant;\r\n        } else if (this.isApplicantDropDownVisible && !selectedApplicant) {\r\n            this.filters.applicantId = -1;\r\n        } else if (!this.isApplicantDropDownVisible && this.selectedView == 1) {\r\n            this.filters.applicantId = 0;\r\n        }\r\n    }\r\n}\r\n","export class CaseLogFilterModel {\r\n    public policyId: number;\r\n    public applicantId: number;\r\n\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods, DataService } from 'ls-core/service';\r\nimport { CaseLogFilterModel } from './case-log-filter.model';\r\nimport { LogEntryPagedRequest } from '../datasource/log-entry-paged-request.service';\r\n\r\n@Injectable()\r\nexport class CaseLogFilterService {\r\n    private _dataService: DataService;\r\n\r\n    constructor(dataService: DataService) {\r\n        this._dataService = dataService;\r\n    }\r\n\r\n    public loadCaseLogLists(caseLogFilterModel: CaseLogFilterModel): Promise<any> {\r\n        const serviceParams: DataServiceParams = this.getStatusServiceParams(caseLogFilterModel);\r\n        return this._dataService.getData(serviceParams).then(response => {\r\n            return response.responsePayload ? response.responsePayload : [];\r\n        });\r\n    }\r\n\r\n    protected getStatusServiceParams(caseLogFilterModel: CaseLogFilterModel): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.ALERT_COUNTS,\r\n            serviceMethod: UIServiceMethods.GET_DATA,\r\n            requestPayload: this.buildRequestPayload(caseLogFilterModel)\r\n        });\r\n    }\r\n\r\n    private buildRequestPayload(caseLogFilterModel: CaseLogFilterModel): LogEntryPagedRequest {\r\n        return new LogEntryPagedRequest({\r\n            policyId: caseLogFilterModel.policyId,\r\n            applicantId: caseLogFilterModel.applicantId\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class CaseLogMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['MyWorkView', 'MyWorkViewDefault', 'aus_users'];\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { I18n } from 'life-core/i18n';\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\n\r\nimport { LsCellFormatters } from 'ls-core/component/grid';\r\nimport { MetadataItem } from 'ls-core/model/metadata/metadata.model';\r\nimport { DateTimeFormatWidth } from 'life-core/util';\r\nimport { MetadataUtil } from 'ls-core/util/metadata';\r\n\r\nconst LogEntryFields = {\r\n    LogDate: 'LogDate',\r\n    LogText: 'LogText',\r\n    UserId: 'UserId'\r\n};\r\n\r\n@Injectable()\r\nexport class CaseLogListColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Date & Time', id: 'policy.case.log.date' }),\r\n            field: LogEntryFields.LogDate,\r\n            width: 40,\r\n            valueFormatter: params =>\r\n                this._lsCellFormatters.dateCellFormatter(params, DateTimeFormatWidth.ShortDateMediumTime)\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'User ID', id: 'policy.case.log.status' }),\r\n            field: LogEntryFields.UserId,\r\n            width: 40,\r\n            valueFormatter: this.getUserName\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Status Text', id: 'policy.case.log.userID' }),\r\n            field: LogEntryFields.LogText,\r\n            width: 100,\r\n            autoHeight: true,\r\n            tooltipField: LogEntryFields.LogText\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getUserName(params: any): string {\r\n        if (params.node.data && params.node.data.UserId) {\r\n            return MetadataUtil.getItemLabelByCode(\r\n                params.context.hostComponent.context.metaData.aus_users,\r\n                params.node.data.UserId\r\n            );\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 d-flex justify-content-between\\\">\\r\\n        <div class=\\\"lf-grid-title\\\">{{title}}</div>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid style=\\\"height: 400px;\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\"\\r\\n        (filterChange)=\\\"onFilterChange()\\\"></data-grid>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</div>\"","import { Component, Injector, Input } from '@angular/core';\r\n\r\nimport { ParentChildRegistry } from 'life-core/view-model/parent-child-registry/parent-child-registry';\r\nimport { DataGridColumns, BaseInfiniteGridViewModel } from 'life-core/component/grid';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session/policy-subscriber';\r\nimport { LogEntryProxyDTO } from 'ls-core/model/dto/log-entry-proxy.dto';\r\n\r\nimport { CaseLogFilterModel } from 'business/policy/case-log/filter/case-log-filter.model';\r\nimport { GridDataStateKeys } from 'business/shared/grid';\r\n\r\nimport { CaseLogListGridDataSource } from '../datasource/case-log-list-grid-datasource';\r\nimport { CaseLogListColumnsBuilder } from './case-log-list-column.builder';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Component({\r\n    selector: 'case-log-list',\r\n    templateUrl: './case-log-list.component.html',\r\n    providers: [\r\n        PolicySubscriber,\r\n        ParentChildRegistry,\r\n        CaseLogListColumnsBuilder,\r\n        CaseLogListGridDataSource,\r\n        CaseLogFilterModel\r\n    ]\r\n})\r\nexport class CaseLogListComponent extends BaseInfiniteGridViewModel<LogEntryProxyDTO> {\r\n    @Input()\r\n    public context: any;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        gridColumnsBuilder: CaseLogListColumnsBuilder,\r\n        gridDataSource: CaseLogListGridDataSource,\r\n        caseLogFilterModel: CaseLogFilterModel,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector, gridDataSource, gridColumnsBuilder);\r\n        this.filterModel = caseLogFilterModel;\r\n        this.enableFilter = false;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public setCaseLogFilterModel(value: CaseLogFilterModel): void {\r\n        this.filterModel = value;\r\n        this.onFilterModelReceived(value);\r\n    }\r\n\r\n    public getGridColumns(): DataGridColumns {\r\n        return this.getGridColumnsBuilder().build();\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.title = this.setGridTitle();\r\n    }\r\n\r\n    protected registerFilterChangeHandlers(): void {}\r\n\r\n    protected getGridStateKey(): string {\r\n        return GridDataStateKeys.CASE_LOG;\r\n    }\r\n\r\n    // no implementation needed\r\n    protected rowDataMatch(rowData1: LogEntryProxyDTO, rowData2: LogEntryProxyDTO): boolean {\r\n        return false;\r\n    }\r\n\r\n    // no implementation needed\r\n    protected openSelectedGridRow(): void {}\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'Case Log', id: 'policy.case.log.title' });\r\n    }\r\n}\r\n","﻿import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { IDefaultConstructor } from 'life-core/util/lang/object.util';\r\n\r\nimport { BaseModel, Identifiable, AgencyDTO } from 'ls-core/model';\r\nimport { ExpandTreeType, NTree } from 'ls-core/service/load-bypk';\r\nimport { DataCollectionNames } from 'ls-core/model';\r\n\r\nimport { BaseDTOPKDataResolver } from 'business/policy/shared/data-resolver/base-pk-data.resolver';\r\n\r\n@Injectable()\r\nexport class AgencyDataResolver extends BaseDTOPKDataResolver {\r\n    public agencyPersonId: number;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected get agency(): AgencyDTO {\r\n        return this.resolvedData;\r\n    }\r\n\r\n    protected getExpandTree(): ExpandTreeType {\r\n        const AgencyDTOLoadTree = new NTree<string>('');\r\n        {\r\n            AgencyDTOLoadTree.AddChildren([\r\n                DataCollectionNames.Addresses,\r\n                DataCollectionNames.Phones,\r\n                DataCollectionNames.Relations\r\n            ]);\r\n        }\r\n        return AgencyDTOLoadTree;\r\n    }\r\n\r\n    protected getWorkingIdentifier(): Identifiable {\r\n        const identifier = new Identifiable();\r\n        identifier.ClassNameMapped = AgencyDTO.Type;\r\n        identifier.ObjectID = this.agencyPersonId;\r\n        return identifier;\r\n    }\r\n\r\n    protected getCreateObjectType<AgencyDTO>(): IDefaultConstructor<any> {\r\n        return AgencyDTO;\r\n    }\r\n\r\n    protected getDataFromResponse(response: any): BaseModel {\r\n        return response.dtoObject;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"agency\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"agencyName\\\" label=\\\"Name\\\" i18n-label=\\\"@@policy.case.agency.name\\\">\\r\\n                <lf-select #agencyName name=\\\"agencyName\\\" [items]=\\\"listData['PersonId'] | listItems:'value':'Id'\\\"\\r\\n                    [(ngModel)]=\\\"data.PersonId\\\" [clearable]=\\\"false\\\" (change)=\\\"onAgencyChange($event)\\\" container=\\\"body\\\"\\r\\n                    secureComponent style=\\\"width:150px\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"agencyDataExist\\\">\\r\\n        <div class=\\\"row\\\" *ngIf=\\\"businessAddress\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"addressLine1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.agency.address\\\">\\r\\n                    <lf-statictext #addressLine1 name=\\\"addressLine1\\\" [value]=\\\"businessAddress.AddressLine1\\\"\\r\\n                        secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"addressLine2\\\">\\r\\n                    <lf-statictext #addressLine2 name=\\\"addressLine2\\\" [value]=\\\"businessAddress.AddressLine2\\\"\\r\\n                        secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"addressLine3\\\">\\r\\n                    <lf-statictext #addressLine3 name=\\\"addressLine3\\\" [value]=\\\"businessAddress.AddressLine3\\\"\\r\\n                        secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\" *ngIf=\\\"businessAddress\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.agency.city\\\">\\r\\n                    <lf-statictext #city name=\\\"city\\\" [value]=\\\"businessAddress.City\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.agency.country\\\">\\r\\n                    <lf-statictext #country name=\\\"country\\\" [value]=\\\"countryName\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.agency.state\\\">\\r\\n                    <lf-statictext #state name=\\\"state\\\" [value]=\\\"stateName\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.agency.postalcode\\\">\\r\\n                    <lf-statictext #postalCode name=\\\"postalCode\\\" [value]=\\\"businessAddress.PostalCode\\\" secureComponent>\\r\\n                    </lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"agencyNumber\\\" label=\\\"Agency Number\\\"\\r\\n                    i18n-label=\\\"@@policy.case.agency.agencynumber\\\">\\r\\n                    <lf-statictext #agencyNumber name=\\\"agencyNumber\\\" [value]=\\\"data.AgencyNumber\\\" secureComponent>\\r\\n                    </lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"email\\\" label=\\\"Email\\\" i18n-label=\\\"@@policy.case.agency.email\\\">\\r\\n                    <lf-statictext #email name=\\\"email\\\" [value]=\\\"data.EmailAddress\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax Id\\\" i18n-label=\\\"@@policy.case.agency.taxid\\\">\\r\\n                    <lf-statictext #taxId name=\\\"taxId\\\" [value]=\\\"data.TaxId | taxIdMask\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"phoneNumber\\\" label=\\\"Phone Number\\\"\\r\\n                    i18n-label=\\\"@@policy.case.agency.phonenumber\\\">\\r\\n                    <lf-statictext #phoneNumber name=\\\"phoneNumber\\\" [value]=\\\"workPhone | lsPhone\\\" secureComponent>\\r\\n                    </lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"faxNumber\\\" label=\\\"Fax Number\\\" i18n-label=\\\"@@policy.case.agency.faxnumber\\\">\\r\\n                    <lf-statictext #faxNumber name=\\\"faxNumber\\\" [value]=\\\"faxPhone | lsPhone\\\" secureComponent>\\r\\n                    </lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector, Injectable } from '@angular/core';\n\nimport { OptionalSectionDetailViewModel } from 'life-core/component/optional-section';\n\nimport { AppSession } from 'ls-core/session/app-session';\nimport { AgencyDTO, AddressDTO, PhoneDTO, AddressTypes, MetadataItem, PhoneTypes } from 'ls-core/model';\nimport { AddressUtil } from 'ls-core/util/collection/address.util';\nimport { PhoneUtil } from 'ls-core/util/collection/phone.util';\n\nimport { AgencyDataResolver } from './agency-data.resolver';\n\n@Component({\n    selector: 'agency-info',\n    templateUrl: './agency-info.component.html'\n})\n@Injectable()\nexport class AgencyInfoComponent extends OptionalSectionDetailViewModel {\n    public businessAddress: AddressDTO;\n    public workPhone: PhoneDTO;\n    public faxPhone: PhoneDTO;\n    public countryName: string;\n    public stateName: string;\n    public agencyDataExist: boolean;\n    private _appSession: AppSession;\n    private _agencyResolver: AgencyDataResolver;\n\n    constructor(injector: Injector, agencyDataResolver: AgencyDataResolver, appSession: AppSession) {\n        super(injector);\n        this._appSession = appSession;\n        this._agencyResolver = agencyDataResolver;\n    }\n\n    protected get agency(): AgencyDTO {\n        return this.data;\n    }\n\n    protected setupData(): void {\n        this.setResolvedMetaData();\n        this.setResolvedListData();\n        this.setAgencyDataExist();\n        this.setAddressDetails();\n        this.setPhoneDetails();\n        this.setFaxDetails();\n    }\n\n    private setAgencyDataExist(): void {\n        this.agencyDataExist = this.agencyDataExists();\n    }\n\n    private agencyDataExists(): boolean {\n        return !!this.data.PersonId;\n    }\n\n    public onAgencyChange(selectedAgency: any): void {\n        this.removeExistingAgency();\n        if (this.isAgencySelected(selectedAgency)) {\n            this.resolveAgencyData(selectedAgency);\n        } else {\n            this.resetAgencyData();\n        }\n    }\n\n    private removeExistingAgency(): void {\n        this.updateDeletedObjectsArray(this.getItem());\n        this.executeRemoveItem();\n        // This is required because without this the old record is not getting deleted from DB\n        this.changeManager.setIsDirty(true);\n    }\n\n    private getItem(): any {\n        return this._appSession.policyDTO.Agencies_LazyLoad[0];\n    }\n\n    private executeRemoveItem(): void {\n        this._appSession.policyDTO.Agencies_LazyLoad = [];\n    }\n\n    private updateDeletedObjectsArray(itemData: any): void {\n        if (this.changeManager != null && itemData) {\n            this.changeManager.deleteObject(itemData);\n        }\n    }\n\n    private isAgencySelected(selectedAgency: any): boolean {\n        return selectedAgency && selectedAgency.value;\n    }\n\n    private resetAgencyData(): void {\n        this.data.PersonId = null;\n        this.agencyDataExist = this.agencyDataExists();\n        this.businessAddress = new AddressDTO();\n        this.workPhone = new PhoneDTO();\n        this.faxPhone = new PhoneDTO();\n    }\n\n    private resolveAgencyData(selectedAgency: any): void {\n        this._agencyResolver.agencyPersonId = selectedAgency.value;\n        this._agencyResolver.directResolve().then(result => {\n            this.setAgencyData(result);\n            this.setAddressDetails();\n            this.setPhoneDetails();\n            this.setAgencyDataExist();\n            this.setFaxDetails();\n            this.updatePolicy();\n        });\n    }\n\n    private setAgencyData(result: any): void {\n        if (result.PersonId) {\n            this.data = result;\n        } else {\n            this.logger.log('Data issue. We must get PersonId back from DB when we are trying to get Agency details.');\n        }\n    }\n\n    private updatePolicy(): void {\n        // We are creating a new object as MT works only when you pass a personId and not other data.\n        // If you send all the data to MT while saving, it does not recognise the change and ultimately does not save data.\n        const agencyDTO = new AgencyDTO();\n        agencyDTO.PersonId = this.data.PersonId;\n        this._appSession.policyDTO.Agencies_LazyLoad.push(agencyDTO);\n    }\n\n    private setAddressDetails(): void {\n        this.businessAddress = this.getBusinessAddress();\n        this.countryName = this.getCountryLabel();\n        this.stateName = this.getStateLabel();\n    }\n\n    private getBusinessAddress(): AddressDTO {\n        return this.data.Addresses_LazyLoad != null && this.data.Addresses_LazyLoad.length > 0\n            ? AddressUtil.getAddress(this.data.Addresses_LazyLoad, AddressTypes.BUSINESS)\n            : new AddressDTO();\n    }\n\n    private setPhoneDetails(): void {\n        if (this.data.Phones_LazyLoad != null && this.data.Phones_LazyLoad.length > 0) {\n            this.workPhone = PhoneUtil.getPhone(this.data.Phones_LazyLoad, this.getPhoneTypeHavingData());\n        }\n    }\n\n    private getPhoneTypeHavingData(): string {\n        const phoneType = this.data.Phones_LazyLoad.find(phone => phone.PhoneTypeCode && phone.PhoneTypeCode != 'FAX');\n        return phoneType.PhoneTypeCode;\n    }\n\n    private setFaxDetails(): void {\n        this.faxPhone = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.FAX);\n    }\n    private getCountryLabel(): string {\n        if (this.businessAddress.CountryId) {\n            const country = this.listData.CountryId.find(address => address.Id === this.businessAddress.CountryId);\n            return country ? country.value : '';\n        }\n    }\n\n    private getStateLabel(): string {\n        if (this.businessAddress.CountryStateId) {\n            return this.businessAddress.CountryId === 'USA'\n                ? this.getStateName(this.listData.country_state_usa)\n                : this.getStateName(this.listData.country_state_canada);\n        }\n    }\n\n    private getStateName(stateList: MetadataItem[]): string {\n        const state = stateList.find(address => address.value === this.businessAddress.CountryStateId);\n        return state ? state.label : '';\n    }\n}\n","module.exports = \"<lf-panel header=\\\"Agency\\\" i18n-header=\\\"@@policy.case.agency.title\\\" panelType=\\\"primary\\\" [toggleable]=\\\"true\\\" stateId=\\\"panel_agency\\\"\\r\\n    [state]=\\\"componentsState.get('panel_agency')\\\" [initCollapsed]=true secureComponent>\\r\\n    <optional-section [dataExists]=\\\"dataExists\\\" [item]=\\\"item\\\" [itemComponentType]=\\\"itemComponentType\\\" (createItem)=\\\"createItem()\\\"\\r\\n        (removeItem)=\\\"removeItem()\\\" secureComponent>\\r\\n    </optional-section>\\r\\n</lf-panel>\"","import { Component, Injector, Injectable, Type } from '@angular/core';\n\nimport { OptionalSectionViewModel } from 'life-core/component/optional-section';\nimport { I18n } from 'life-core/i18n';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { AppSession } from 'ls-core/session/app-session';\nimport { Identifiable, AddressDTO, AddressTypes, AgencyDTO, PhoneDTO, PhoneTypes } from 'ls-core/model';\n\nimport { AgencyInfoComponent } from './agency-info.component';\n\n@Component({\n    selector: 'agency',\n    templateUrl: './agency.component.html',\n    providers: [PolicySubscriber]\n})\n@Injectable()\nexport class AgencyComponent extends OptionalSectionViewModel<AgencyDTO> {\n    private _appSession: AppSession;\n\n    constructor(injector: Injector, appSession: AppSession, i18n: I18n) {\n        super(injector);\n        this.i18n = i18n;\n        this._appSession = appSession;\n        this.updateProperties();\n    }\n\n    protected getItemComponentType(): Type<any> {\n        return AgencyInfoComponent;\n    }\n\n    protected getItem(): AgencyDTO {\n        return this._appSession.policyDTO.Agencies_LazyLoad && this._appSession.policyDTO.Agencies_LazyLoad.length > 0\n            ? this._appSession.policyDTO.Agencies_LazyLoad[0]\n            : this.data.AgencyData;\n    }\n\n    protected executeCreateItem(): void {\n        const agency = new AgencyDTO();\n        agency.identifier = new Identifiable();\n        agency.PersonId =\n            this._appSession.policyDTO.Agencies_LazyLoad && this._appSession.policyDTO.Agencies_LazyLoad.length > 0\n                ? this._appSession.policyDTO.Agencies_LazyLoad[0].PersonId\n                : null;\n        const businessAddress = new AddressDTO();\n        businessAddress.AddressTypeCode = AddressTypes.BUSINESS;\n        agency.Addresses_LazyLoad = [businessAddress];\n        const workPhone = new PhoneDTO();\n        workPhone.PhoneTypeCode = PhoneTypes.WORK;\n        agency.Phones_LazyLoad = [workPhone];\n        this.data.AgencyData = agency;\n    }\n\n    protected getTitle(): string {\n        return this.i18n({ value: 'Agency', id: 'policy.case.agency.title' });\n    }\n\n    protected executeRemoveItem(): void {\n        this._appSession.policyDTO.Agencies_LazyLoad = [];\n        this.data.AgencyData = null;\n    }\n}\n\nexport const componentName = 'Agency';\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { AgencyComponent } from './agency.component';\r\nimport { AgencyInfoComponent } from './agency-info.component';\r\nimport { AgencyDataResolver } from './agency-data.resolver';\r\nimport { CaseMetaDataResolver } from 'business/policy/case/case-meta-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [AgencyComponent, AgencyInfoComponent],\r\n    exports: [AgencyComponent],\r\n    entryComponents: [AgencyInfoComponent],\r\n    providers: [AgencyDataResolver, CaseMetaDataResolver]\r\n})\r\nexport class AgencyModule {}\r\n","﻿import { Type } from '@angular/core';\n\nimport { IItemListComponentResolver, ItemListComponentResolver } from 'life-core/component/item-list';\nimport { ItemComponentMap } from 'life-core/util/component-resolver';\n\nimport { PartyTypes, AgentDTO } from 'ls-core/model';\n\nimport { AgentInfoComponent } from './agent-info.component';\n\nexport class AgentComponentResolverHelper {\n    public getResolver(editModeOnly: boolean): IItemListComponentResolver<AgentDTO> {\n        return new ItemListComponentResolver({\n            itemComponents: this.getItemViewModelTypeResolverMap(),\n            resolverField: 'data.PersonTypeId',\n            editModeOnly: editModeOnly\n        });\n    }\n\n    private getItemViewModelTypeResolverMap(): ItemComponentMap {\n        const componentMap: ItemComponentMap = new Map<string, Type<any>>();\n        componentMap.set(PartyTypes.PERSON, AgentInfoComponent);\n        return componentMap;\n    }\n}\n","module.exports = \"<lf-panel header=\\\"Agent\\\" i18n-header=\\\"@@policy.case.agents.title\\\" [toggleable]=\\\"true\\\" panelType=\\\"secondary\\\" stateId=\\\"panel_agent_{{index}}\\\"\\r\\n [state]=\\\"componentsState.get('panel_agent_'+index)\\\" secureComponent>\\r\\n\\t<div [hidden]=\\\"!item.visible\\\" [@fadeInOut]=\\\"item.visible\\\">\\r\\n\\t\\t<div class=\\\"itemContent\\\" [class.invalid]=\\\"item.invalid\\\">\\r\\n\\t\\t\\t<div class=\\\"agent\\\">\\r\\n\\t\\t\\t\\t<compose [model]=\\\"item\\\" [componentType]=\\\"itemComponentType\\\"></compose>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</lf-panel>\"","import { Component, Injector, Type } from '@angular/core';\n\nimport { ItemViewModel } from 'life-core/component/item-list';\nimport { IComponentResolver, ComponentResolver, ComponentMap } from 'life-core/util';\nimport { ItemListAnimations } from 'life-core/component/item-list/animations/animations';\n\nimport { AgentPersonComponent } from './type';\nimport { PartyTypes, AgentDTO } from 'ls-core/model';\n\n@Component({\n    selector: 'agent-info',\n    templateUrl: './agent-info.component.html',\n    animations: ItemListAnimations\n})\nexport class AgentInfoComponent extends ItemViewModel<AgentDTO> {\n    public itemComponentType: Type<any>;\n\n    private _componentMapResolver: IComponentResolver<string>;\n\n    constructor(injector: Injector) {\n        super(injector);\n        this._componentMapResolver = this.getComponentMapResolver();\n    }\n\n    public setModel(model: any): any {\n        super.setModel(model);\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedListData();\n        this.setItemComponentType(this.item.data.PersonTypeId);\n        return Promise.resolve();\n    }\n\n    private getComponentMapResolver(): IComponentResolver<string> {\n        const componentMap: ComponentMap = new ComponentMap();\n        componentMap.add(PartyTypes.PERSON, AgentPersonComponent);\n        return new ComponentResolver<string>(componentMap);\n    }\n\n    private setItemComponentType(type: string): void {\n        this.itemComponentType = this._componentMapResolver.resolve(type);\n    }\n}\n","module.exports = \"/* test-item-list.css */\\n\\n.item .itemContent {\\n    padding: 0.3125rem;\\n    border-radius: 4px;\\n    -webkit-border-radius: 4px;\\n    -moz-border-radius: 4px;\\n}\\n\\n.item .itemContent.invalid {\\n    border-color: red;\\n}\\n\\n.bottom-margin {\\n    margin: 0.3125rem;\\n}\\n\\n.agent:hover {\\n    border-color: #00467f;\\n}\\n\\n.agent #validation-messages {\\n    margin: 0 0.625rem 0.9375rem 0.625rem;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS9jYXNlL2FnZW50L2FnZW50LWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3QkFBd0I7O0FBRXhCO0lBQ0ksbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQiwyQkFBMkI7SUFDM0Isd0JBQXdCO0NBQzNCOztBQUVEO0lBQ0ksa0JBQWtCO0NBQ3JCOztBQUVEO0lBQ0ksa0JBQWtCO0NBQ3JCOztBQUVEO0lBQ0ksc0JBQXNCO0NBQ3pCOztBQUVEO0lBQ0ksc0NBQXNDO0NBQ3pDIiwiZmlsZSI6InNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS9jYXNlL2FnZW50L2FnZW50LWxpc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRlc3QtaXRlbS1saXN0LmNzcyAqL1xuXG4uaXRlbSAuaXRlbUNvbnRlbnQge1xuICAgIHBhZGRpbmc6IDAuMzEyNXJlbTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cbi5pdGVtIC5pdGVtQ29udGVudC5pbnZhbGlkIHtcbiAgICBib3JkZXItY29sb3I6IHJlZDtcbn1cblxuLmJvdHRvbS1tYXJnaW4ge1xuICAgIG1hcmdpbjogMC4zMTI1cmVtO1xufVxuXG4uYWdlbnQ6aG92ZXIge1xuICAgIGJvcmRlci1jb2xvcjogIzAwNDY3Zjtcbn1cblxuLmFnZW50ICN2YWxpZGF0aW9uLW1lc3NhZ2VzIHtcbiAgICBtYXJnaW46IDAgMC42MjVyZW0gMC45Mzc1cmVtIDAuNjI1cmVtO1xufVxuIl19 */\"","module.exports = \"<lf-panel header=\\\"Agent\\\" i18n-header=\\\"@@policy.case.agents.title\\\" [toggleable]=\\\"true\\\" panelType=\\\"primary\\\" stateId=\\\"panel_agent\\\" [state]=\\\"componentsState.get('panel_agent')\\\"\\r\\n [initCollapsed]=true secureComponent>\\r\\n\\t<item-list #refItemList id=\\\"item_list\\\" [oItems]=\\\"oItems\\\" [editModeOnly]=\\\"editModeOnly\\\" [buttons]=\\\"buttons\\\" secureComponent></item-list>\\r\\n</lf-panel>\"","import { Injector, Component, ViewChild } from '@angular/core';\n\nimport { ConfirmDialog, DialogButton, DialogButtonType, DialogResult } from 'life-core/component/dialog';\nimport {\n    IItem,\n    ItemListButton,\n    ItemListButtonType,\n    CreateItemEventData,\n    ItemList,\n    ItemListViewModel,\n    IItemListComponentResolver\n} from 'life-core/component/item-list';\nimport { ButtonActionType } from 'life-core/component/shared';\nimport { I18n } from 'life-core/i18n';\n\nimport { DefaultDataService, SetDefaultDataRequest } from 'ls-core/service';\nimport { PolicySubscriber } from 'ls-core/session';\nimport { Identifiable, AgentDTO, PolicyDTO, AddressTypes, PhoneTypes, PartyTypes } from 'ls-core/model';\nimport { AddressUtil, PhoneUtil } from 'ls-core/util';\n\nimport { AgentComponentResolverHelper } from './agent-component-resolver.helper';\n\n@Component({\n    selector: 'case-agent-list',\n    templateUrl: './agent-list.component.html',\n    styleUrls: ['./agent-list.component.css'],\n    providers: [PolicySubscriber]\n})\nexport class AgentListComponent extends ItemListViewModel<AgentDTO> {\n    public title: string = 'Agent';\n    public policy: PolicyDTO;\n    @ViewChild(ItemList)\n    public refItemList: ItemList<AgentDTO>;\n    private _defaultDataService: DefaultDataService;\n    private _confirmDialog: ConfirmDialog;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        defaultDataService: DefaultDataService,\n        confirmDialog: ConfirmDialog,\n        i18n: I18n\n    ) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.onPolicyUpdate(p);\n        });\n        this._defaultDataService = defaultDataService;\n        this._confirmDialog = confirmDialog;\n        this.editModeOnly = true;\n        this.i18n = i18n;\n    }\n\n    protected get itemDataIDPropertyName(): string {\n        return 'PersonId';\n    }\n\n    protected getItemList(): ItemList<AgentDTO> {\n        return this.refItemList;\n    }\n\n    protected getButtons(): ItemListButton[] {\n        return [\n            new ItemListButton({\n                type: ItemListButtonType.ADD,\n                actionType: ButtonActionType.DataChange\n            }),\n            new ItemListButton({\n                type: ItemListButtonType.DELETE,\n                actionType: ButtonActionType.DataChange\n            })\n        ];\n    }\n\n    protected getItems(): Promise<IItem<AgentDTO>[]> {\n        const items: IItem<AgentDTO>[] = [];\n        if (this.policy.Agents_LazyLoad == null) {\n            this.policy.Agents_LazyLoad = [];\n        }\n        this.policy.Agents_LazyLoad.forEach(agent => {\n            items.push(this.setupNewItem(agent));\n        });\n        return Promise.resolve(items);\n    }\n\n    protected getItemComponentResolver(): IItemListComponentResolver<AgentDTO> {\n        const resolverHelper = new AgentComponentResolverHelper();\n        return resolverHelper.getResolver(this.editModeOnly);\n    }\n\n    protected createItem(eventData: CreateItemEventData<AgentDTO>): Promise<AgentDTO> {\n        const agent: AgentDTO = new AgentDTO();\n        agent.identifier = new Identifiable();\n        const defaultDataRequest = new SetDefaultDataRequest(this.policy, agent, '');\n        this.policy.Agents_LazyLoad.push(agent);\n\n        return this._defaultDataService.setDefaultData(defaultDataRequest).then(data => {\n            Object.assign(agent, data.workingDTO as AgentDTO);\n            agent.PersonTypeId = PartyTypes.PERSON;\n            agent.Addresses_LazyLoad = [AddressUtil.createAddress(AddressTypes.BUSINESS)];\n            agent.Phones_LazyLoad = [PhoneUtil.createPhone(PhoneTypes.WORK), PhoneUtil.createPhone(PhoneTypes.FAX)];\n            return agent;\n        });\n    }\n\n    protected removeItem(item: IItem<AgentDTO>): Promise<boolean> {\n        return this.confirmDelete().then(result => {\n            const isRemoved = result.buttonId == DialogButtonType.OK;\n            if (isRemoved) {\n                return this.executeRemove(item).then(result => {\n                    return result;\n                });\n            }\n            return Promise.resolve(isRemoved);\n        });\n    }\n\n    protected getAgentName(item: IItem<AgentDTO>): string {\n        const agentName = `${item.data.FirstName} ${item.data.LastName}`;\n        return item.data.LastName ? `agent ${agentName}` : 'agent';\n    }\n\n    private executeRemove(item: IItem<AgentDTO>): Promise<boolean> {\n        this.policy.Agents_LazyLoad.splice(this.policy.Agents_LazyLoad.indexOf(item.data), 1);\n        return Promise.resolve(true);\n    }\n\n    private confirmDelete(): Promise<DialogResult> {\n        return this._confirmDialog.open({\n            message: this.i18n({\n                value: 'Are you sure you want to delete the selected item?',\n                id: 'general.message.delete'\n            }),\n            title: this.i18n({ value: 'Delete Agent Confirmation', id: 'policy.case.agent.delete' }),\n            buttons: [\n                new DialogButton({ type: DialogButtonType.OK }),\n                new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\n            ]\n        });\n    }\n\n    private onPolicyUpdate(policy: PolicyDTO): void {\n        const reloading = !!this.policy;\n        this.policy = policy;\n        if (reloading) {\n            this.reloadItems();\n        }\n    }\n}\n","﻿import { Injector, Injectable } from '@angular/core';\r\nimport { DataService, DataServiceParams, UIServiceNames, UIServiceMethods } from 'ls-core/service';\r\nimport { BaseModel, BaseDTO, Identifiable } from 'ls-core/model';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\n\r\nexport type ExpandTreeType = NTree<string>;\r\n\r\n@Injectable()\r\nexport class AgentService {\r\n    private _dataService: DataService;\r\n\r\n    constructor(dataService: DataService) {\r\n        this._dataService = dataService;\r\n    }\r\n\r\n    public load(): Promise<any> {\r\n        const request = this.getRequest();\r\n        const serviceParams = this.getServiceParams(request);\r\n        return this._dataService.getData(serviceParams).then(response => {\r\n            return response.responsePayload;\r\n        });\r\n    }\r\n\r\n    private getServiceParams(request: AgentRequest): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.AGENT,\r\n            serviceMethod: UIServiceMethods.GET_DATA,\r\n            requestPayload: request\r\n        });\r\n    }\r\n\r\n    private getRequest(): AgentRequest {\r\n        const request = new AgentRequest();\r\n        return request;\r\n    }\r\n}\r\n\r\nexport class AgentRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.AgentRequest, LifeSuite.UIServiceDTO';\r\n\r\n    public agentNumber: string;\r\n}\r\n\r\nexport class DTOLoadByAgentResponse {\r\n    public dtoObject: BaseModel;\r\n}\r\n","﻿export * from './agent.service';  ","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { AgentListComponent } from './agent-list.component';\r\nimport { AgentInfoComponent } from './agent-info.component';\r\nimport { AgentPersonComponent } from './type';\r\nimport { AgentDataResolver } from './type/agent-data.resolver';\r\nimport { AgentService } from './agent-service';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [AgentInfoComponent, AgentListComponent, AgentPersonComponent],\r\n    exports: [AgentInfoComponent, AgentListComponent],\r\n    entryComponents: [AgentInfoComponent, AgentPersonComponent],\r\n    providers: [AgentDataResolver, AgentService]\r\n})\r\nexport class AgentModule {}\r\n","﻿import { Injector, Injectable } from '@angular/core';\r\nimport { BaseViewDataResolver } from 'ls-core/view-model';\r\nimport { AgentDTO } from 'ls-core/model';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods } from 'ls-core/service';\r\nimport { IDefaultConstructor } from 'life-core/util/lang';\r\nimport { AgentRequest } from 'business/policy/case/agent/agent-service';\r\n\r\n@Injectable()\r\nexport class AgentDataResolver extends BaseViewDataResolver {\r\n    public activeAgentNumber: string;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected get agent(): AgentDTO {\r\n        return this.resolvedData;\r\n    }\r\n\r\n    protected getServiceParams(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.AGENT,\r\n            serviceMethod: UIServiceMethods.GET_DATA,\r\n            requestPayload: this.getRequestPayload()\r\n        });\r\n    }\r\n\r\n    protected getCreateObjectType<AgentDTO>(): IDefaultConstructor<any> {\r\n        return AgentDTO;\r\n    }\r\n\r\n    private getRequestPayload(): AgentRequest {\r\n        const request = new AgentRequest();\r\n        request.agentNumber = this.activeAgentNumber;\r\n        return request;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"agentNumber\\\" label=\\\"Agent Number\\\" i18n-label=\\\"@@policy.case.agents.agentsnumber\\\">\\r\\n            <lf-inputtext #agentNumber name=\\\"agentNumber_{{item.sequenceId}}\\\" [(ngModel)]=\\\"activeAgentNumber\\\"\\r\\n                [maxLength]=\\\"20\\\" (blur)=\\\"onAgentNumberBlur($event)\\\" secureComponent required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"agentType\\\" label=\\\"Agent Type\\\" i18n-label=\\\"@@policy.case.agents.producertype\\\">\\r\\n            <lf-select #agentType name=\\\"agentType_{{item.sequenceId}}\\\" [items]=\\\"listData.ProducerType | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"data.ProducerType\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"internalPostalBox\\\" label=\\\"Internal Postal Box\\\" i18n-label=\\\"@@policy.case.agents.internalpostalbox\\\">\\r\\n            <lf-inputtext #internalPostalBox name=\\\"internalPostalBox_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.RoutingNumber\\\"\\r\\n                [maxLength]=\\\"30\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input [control]=\\\"firmName\\\" label=\\\"Firm Name\\\" i18n-label=\\\"@@policy.case.agents.firmname\\\">\\r\\n            <lf-inputtext #firmName name=\\\"firmName_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.FirmName\\\" [maxLength]=\\\"50\\\"\\r\\n                secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"title\\\" label=\\\"Title\\\" i18n-label=\\\"@@policy.case.agents.titlename\\\">\\r\\n            <lf-select #title name=\\\"agentTitle_{{item.sequenceId}}\\\" [items]=\\\"listData.Title | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"data.Title\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"firstName\\\" label=\\\"First Name\\\" i18n-label=\\\"@@policy.case.agents.firstname\\\">\\r\\n            <lf-inputtext #firstName name=\\\"agentFirstName_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.FirstName\\\" [maxLength]=\\\"250\\\"\\r\\n                secureComponent required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"middleName\\\" label=\\\"Middle Name\\\" i18n-label=\\\"@@policy.case.agents.middlename\\\">\\r\\n            <lf-inputtext #middleName name=\\\"agentMiddleName_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.MiddleName\\\"\\r\\n                [maxLength]=\\\"100\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input [control]=\\\"lastName\\\" label=\\\"Last Name\\\" i18n-label=\\\"@@policy.case.agents.lastname\\\">\\r\\n            <lf-inputtext #lastName name=\\\"agentLastName_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.LastName\\\" [maxLength]=\\\"250\\\"\\r\\n                secureComponent required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\">\\r\\n        <lf-form-input [control]=\\\"suffix\\\" label=\\\"Suffix\\\" i18n-label=\\\"@@policy.case.agents.suffix\\\">\\r\\n            <lf-select #suffix name=\\\"agentSuffix_{{item.sequenceId}}\\\" [items]=\\\"listData.Suffix | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"data.Suffix\\\" secureComponent style=\\\"width:70px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"commissionSplit\\\" label=\\\"Commission Splits\\\" i18n-label=\\\"@@policy.case.agents.commissionsplits\\\">\\r\\n            <lf-inputnumber #commissionSplit name=\\\"commissionSplit_{{item.sequenceId}}\\\" format=\\\"p0\\\" decimals=\\\"5\\\"\\r\\n                [(ngModel)]=\\\"data.CommissionSplit\\\" [allowNegative]=\\\"false\\\" [maxLength]=\\\"10\\\" [max]=\\\"2147483647\\\"\\r\\n                secureComponent></lf-inputnumber>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"commissionOption\\\" label=\\\"Commission Option\\\" i18n-label=\\\"@@policy.case.agents.commissionopt\\\">\\r\\n            <lf-inputtext #commissionOption name=\\\"commissionOption_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.CommissionOption\\\"\\r\\n                [maxLength]=\\\"20\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"commissionPct\\\" label=\\\"Commission %\\\" i18n-label=\\\"@@policy.case.agents.commissionpct\\\">\\r\\n            <lf-inputnumber #commissionPct format=\\\"n2\\\" decimals=\\\"2\\\" maxLength=\\\"10\\\" max=\\\"9999999\\\" name=\\\"commissionPct_{{item.sequenceId}}\\\"\\r\\n                [(ngModel)]=\\\"data.CommissionPct\\\" [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input [control]=\\\"levelFiveCode\\\" label=\\\"Level 5 Code\\\" i18n-label=\\\"@@policy.case.agents.level5code\\\">\\r\\n            <lf-inputtext #levelFiveCode name=\\\"levelFiveCode_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.Level5Code\\\"\\r\\n                maxLength=\\\"5\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.case.agents.taxid\\\">\\r\\n            <lf-inputtaxid #taxId name=\\\"agentTaxId_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.TaxId\\\" secureComponent></lf-inputtaxid>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Phone Number\\\" [control]=\\\"work\\\" i18n-label=\\\"@@policy.case.agents.phonenumber\\\">\\r\\n            <ls-inputphone #work name=\\\"work_{{item.sequenceId}}\\\" [(ngModel)]=\\\"workNumber\\\" secureComponent></ls-inputphone>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Fax Number\\\" [control]=\\\"fax\\\" i18n-label=\\\"@@policy.case.agents.faxnumber\\\">\\r\\n            <ls-inputphone #fax name=\\\"fax_{{item.sequenceId}}\\\" [(ngModel)]=\\\"faxNumber\\\" secureComponent></ls-inputphone>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input label=\\\"Email\\\" [control]=\\\"emailAddress\\\" i18n-label=\\\"@@policy.case.agents.email\\\">\\r\\n            <lf-inputemail #emailAddress name=\\\"emailAddress_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.EmailAddress\\\"\\r\\n                maxLength=\\\"100\\\" secureComponent></lf-inputemail>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.agents.address\\\">\\r\\n            <lf-inputtext #address1 name=\\\"agentAddress1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"businessAddress.AddressLine1\\\"\\r\\n                maxLength=\\\"100\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address2\\\" label=\\\"&nbsp;\\\" i18n-label=\\\"@@policy.case.agents.address\\\">\\r\\n            <lf-inputtext #address2 name=\\\"agentAddress2_{{item.sequenceId}}\\\" [(ngModel)]=\\\"businessAddress.AddressLine2\\\"\\r\\n                maxLength=\\\"100\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address3\\\" label=\\\"&nbsp;\\\" i18n-label=\\\"@@policy.case.agents.address\\\">\\r\\n            <lf-inputtext #address3 name=\\\"agentAddress3_{{item.sequenceId}}\\\" [(ngModel)]=\\\"businessAddress.AddressLine3\\\"\\r\\n                maxLength=\\\"100\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.agents.city\\\">\\r\\n            <lf-inputtext #city name=\\\"agentCity_{{item.sequenceId}}\\\" [(ngModel)]=\\\"businessAddress.City\\\" maxLength=\\\"30\\\"\\r\\n                secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.agents.country\\\">\\r\\n            <lf-select #country name=\\\"agentCountry_{{item.sequenceId}}\\\" [items]=\\\"listData.CountryId | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"businessAddress.CountryId\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.agents.state\\\">\\r\\n            <lf-select #state name=\\\"agentState_{{item.sequenceId}}\\\" [items]=\\\"listData | stateListPicker: businessAddress.CountryId | emptyItem | sortList\\\"\\r\\n                [(ngModel)]=\\\"businessAddress.CountryStateId\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.agents.postalcode\\\">\\r\\n            <lf-inputzipcode #postalCode name=\\\"agentPostalCode_{{item.sequenceId}}\\\" [zipCodeType]=\\\"businessAddress.CountryId | getZipCodeType\\\"\\r\\n                [(ngModel)]=\\\"businessAddress.PostalCode\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputzipcode>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\n\nimport { AddressDTO, AddressTypes, PhoneDTO, PhoneTypes, AgentDTO, Identifiable } from 'ls-core/model';\nimport { AddressUtil, PhoneUtil } from 'ls-core/util';\nimport { AgentTypeComponent } from './agent-type.component';\nimport { AgentDataResolver } from './agent-data.resolver';\n\n@Component({\n    selector: 'agent-person',\n    templateUrl: './agent-person.component.html'\n})\nexport class AgentPersonComponent extends AgentTypeComponent {\n    public businessAddress: AddressDTO;\n    public workNumber: PhoneDTO;\n    public faxNumber: PhoneDTO;\n    public agentDataExist: boolean;\n    public activeAgentNumber: string;\n    private _agentResolver: AgentDataResolver;\n\n    constructor(injector: Injector, agentDataResolver: AgentDataResolver) {\n        super(injector);\n        this._agentResolver = agentDataResolver;\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedListData();\n        this.setResolvedMetaData();\n        this.setLazyLoadProperties();\n        this.activeAgentNumber = this.data.AgentNumber;\n        return Promise.resolve();\n    }\n\n    public onAgentNumberBlur(event: any): void {\n        if (!this.isDataChanged(event)) {\n            return;\n        }\n        if (event.currentTarget.value) {\n            this.updateAgentDataByAgentNumber();\n        } else {\n            this.setupNewAgent();\n        }\n    }\n\n    private setupNewAgent(): void {\n        this.setupAgentData(new AgentDTO());\n    }\n    private isDataChanged(event: any): boolean {\n        return event.currentTarget.value != this.data.AgentNumber;\n    }\n    private setLazyLoadProperties(): void {\n        if (!this.data.Addresses_LazyLoad) {\n            this.data.Addresses_LazyLoad = new Array<AddressDTO>();\n        }\n        if (!this.data.Phones_LazyLoad) {\n            this.data.Phones_LazyLoad = new Array<PhoneDTO>();\n        }\n\n        AddressUtil.addAddressIfNotFound(this.data.Addresses_LazyLoad, AddressTypes.BUSINESS);\n        this.businessAddress = AddressUtil.getAddress(this.data.Addresses_LazyLoad, AddressTypes.BUSINESS);\n        PhoneUtil.addPhoneIfNotFound(this.data.Phones_LazyLoad, PhoneTypes.WORK);\n        this.workNumber = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.WORK);\n        PhoneUtil.addPhoneIfNotFound(this.data.Phones_LazyLoad, PhoneTypes.FAX);\n        this.faxNumber = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.FAX);\n    }\n\n    private agentDataExistCheck(): any {\n        return !!this.data.PersonId;\n    }\n\n    private updateAgentDataByAgentNumber(): void {\n        this._agentResolver.activeAgentNumber = this.activeAgentNumber;\n        this._agentResolver.directResolve().then(result => {\n            if (result == null || !result.PersonId) {\n                this.resetEmptyAgentData(this.data);\n            }\n            this.setupAgentData(result);\n            this.setFocusOn();\n        });\n    }\n\n    private resetEmptyAgentData(agent: AgentDTO): void {\n        if(agent != null)\n        {\n            agent.PersonId = null;\n            agent.PartyId = null;\n            agent.FirmName = '';\n            agent.FirstName = '';\n            agent.LastName = '';\n            agent.MiddleName = '';\n            agent.ProducerType = null;\n            agent.TaxId = '';\n            agent.Addresses_LazyLoad = null;\n            agent.Phones_LazyLoad = null;\n            agent.EmailAddress = '';\n            agent.RoutingNumber = '';\n            agent.CommissionOption = '';\n            agent.CommissionSplit = null;\n            agent.CommissionPct = '';\n            agent.Level5Code = '';\n            agent.Suffix = '';\n            this.setLazyLoadProperties();\n        }\n    }\n    private setupAgentData(agent: AgentDTO): void {\n        this.changeManager.deleteObject(this.data);       \n        Object.assign(this.data, agent);\n        this.data.identifier = new Identifiable();\n        this.data.AgentNumber = this.activeAgentNumber;\n        this.setLazyLoadProperties();\n        this.agentDataExist = this.agentDataExistCheck();\n    }\n\n    private setFocusOn(): void {\n        const formInput = this.getFormInputs().find(formInput => formInput.control.name.startsWith(\"agentNumber_\"));\n        formInput.control.setFocus();\n    }\n}\n","import { Injector, Injectable } from '@angular/core';\nimport { ViewModel } from 'life-core/view-model';\nimport { ICompose } from 'life-core/component/compose';\nimport { IItem } from 'life-core/component/item-list';\nimport { ListDataUpdater } from 'ls-core/service';\nimport { AgentDTO } from 'ls-core/model';\n\n@Injectable()\nexport class AgentTypeComponent extends ViewModel<AgentDTO> implements ICompose {\n    public item: IItem<AgentDTO>;\n\n    protected listDataUpdater: ListDataUpdater;\n\n    constructor(injector: Injector) {\n        super(injector);\n        this.listDataUpdater = injector.get(ListDataUpdater);\n    }\n\n    public setModel(model: any) {\n        this.item = model;\n        this.data = this.item.data;\n    }\n}\n","﻿export * from './agent-person.component';","﻿import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { IDefaultConstructor, ObjectUtil } from 'life-core/util/lang/object.util';\r\n\r\nimport { BaseModel, Identifiable, AssociationDTO } from 'ls-core/model';\r\nimport { ExpandTreeType, NTree } from 'ls-core/service/load-bypk';\r\nimport { DataCollectionNames } from 'ls-core/model';\r\n\r\nimport { BaseDTOPKDataResolver } from 'business/policy/shared/data-resolver/base-pk-data.resolver';\r\n\r\n@Injectable()\r\nexport class AssociationDataResolver extends BaseDTOPKDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected get association(): AssociationDTO {\r\n        return this.resolvedData;\r\n    }\r\n\r\n    protected setResolvedData(responsePayload: any): void {\r\n        const data: any = this.getDataFromResponse(responsePayload.dtoObject);\r\n        const dataType = this.getCreateObjectType();\r\n        this.resolvedData = dataType ? ObjectUtil.createObjectOfType(data, dataType) : data;\r\n    }\r\n\r\n    protected getExpandTree(): ExpandTreeType {\r\n        const associationDTOLoadTree = new NTree<string>('');\r\n        {\r\n            associationDTOLoadTree.AddChildren([DataCollectionNames.Addresses, DataCollectionNames.Phones]);\r\n        }\r\n        return associationDTOLoadTree;\r\n    }\r\n\r\n    protected getWorkingIdentifier(): Identifiable {\r\n        const identifier = new Identifiable();\r\n        identifier.ClassNameMapped = AssociationDTO.Type;\r\n        identifier.ObjectID = this.appSession.policyDTO.AssociationCode;\r\n        return identifier;\r\n    }\r\n\r\n    protected getCreateObjectType<AssociationDTO>(): IDefaultConstructor<any> {\r\n        return AssociationDTO;\r\n    }\r\n\r\n    protected getDataFromResponse(response: AssociationDTO): BaseModel {\r\n        return response;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"owner\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"associationCode\\\" label=\\\"Name\\\" i18n-label=\\\"@@policy.case.association.name\\\">\\r\\n                <lf-select #associationCode name=\\\"associationCode\\\" [items]=\\\"listData.Association_CompanyCode | listItems:'value':'Id'\\\"\\r\\n                    [clearable]=\\\"false\\\" [(ngModel)]=\\\"data.CompanyCode\\\" (change)=\\\"onCompanyCodeNameChange($event)\\\" secureComponent\\r\\n                    style=\\\"width:150px\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"associationDataExist\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"addressLine1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.association.address\\\">\\r\\n\\r\\n                    <lf-statictext #addressLine1 name=\\\"addressLine1\\\" [value]=\\\"businessAddress.AddressLine1\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"addressLine2\\\">\\r\\n                    <lf-statictext #addressLine2 name=\\\"addressLine2\\\" [value]=\\\"businessAddress.AddressLine2\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"addressLine3\\\">\\r\\n                    <lf-statictext #addressLine3 name=\\\"addressLine3\\\" [value]=\\\"businessAddress.AddressLine3\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.association.city\\\">\\r\\n                    <lf-statictext #city name=\\\"city\\\" [value]=\\\"businessAddress.City\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.association.country\\\">\\r\\n                    <lf-statictext #country name=\\\"country\\\" [value]=\\\"countryName\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.association.state\\\">\\r\\n                    <lf-statictext #state name=\\\"state\\\" [value]=\\\"stateName\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.association.postalcode\\\">\\r\\n                    <lf-statictext #postalCode name=\\\"postalCode\\\" [value]=\\\"businessAddress.PostalCode\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"companyCodeNumber\\\" label=\\\"Company Code Number\\\" i18n-label=\\\"@@policy.case.association.companycode\\\">\\r\\n                    <lf-statictext #companyCodeNumber name=\\\"companyCodeNumber\\\" [value]=\\\"data.CompanyCode\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax Id\\\" i18n-label=\\\"@@policy.case.association.taxid\\\">\\r\\n                    <lf-statictext #taxId name=\\\"taxId\\\" [value]=\\\"data.TaxId | taxIdMask\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"phoneNumber\\\" label=\\\"Phone Number\\\" i18n-label=\\\"@@policy.case.association.phonenumber\\\">\\r\\n                    <lf-statictext #phoneNumber name=\\\"phoneNumber\\\" [value]=\\\"workPhone | lsPhone\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"faxNumber\\\" label=\\\"Fax Number\\\" i18n-label=\\\"@@policy.case.association.faxnumber\\\">\\r\\n                    <lf-statictext #faxNumber name=\\\"faxNumber\\\" [value]=\\\"faxPhone | lsPhone\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"email\\\" label=\\\"Email\\\" i18n-label=\\\"@@policy.case.association.email\\\">\\r\\n                    <lf-statictext #email name=\\\"email\\\" [value]=\\\"data.EmailAddress\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"contactName\\\" label=\\\"Contact Name\\\" i18n-label=\\\"@@policy.case.association.contactname\\\">\\r\\n                    <lf-statictext #contactName name=\\\"contactName\\\" [value]=\\\"data.contactName\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"expirationDate\\\" label=\\\"Expiration Date\\\" i18n-label=\\\"@@policy.case.association.expirationdate\\\">\\r\\n                    <lf-statictext #expirationDate name=\\\"expirationDate\\\" [value]=\\\"data.assocExpirationDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","﻿import { Component, Injector, Injectable } from '@angular/core';\n\nimport { OptionalSectionDetailViewModel } from 'life-core/component/optional-section';\nimport { ListItem } from 'life-core/model/list.model';\n\nimport { AppSession } from 'ls-core/session/app-session';\nimport { AssociationDTO, AddressDTO, PhoneDTO, AddressTypes, PhoneTypes } from 'ls-core/model';\nimport { MetadataUtil } from 'ls-core/util/metadata/metadata.util';\nimport { ListDataUtil } from 'ls-core/service/list-data/list-data.util';\nimport { AddressUtil } from 'ls-core/util/collection/address.util';\nimport { PhoneUtil } from 'ls-core/util/collection/phone.util';\n\nimport { AssociationDataResolver } from './case-association-data.resolver';\n\n@Component({\n    selector: 'case-association-info',\n    templateUrl: './case-association-info.component.html'\n})\n@Injectable()\nexport class AssociationInfoComponent extends OptionalSectionDetailViewModel {\n    public businessAddress: AddressDTO;\n    public workPhone: PhoneDTO;\n    public faxPhone: PhoneDTO;\n    public associationDataExist: boolean;\n    public countryName: string;\n    public stateName: string;\n    private _appSession: AppSession;\n    private _associationResolver: AssociationDataResolver;\n\n    constructor(injector: Injector, AssociationDataResolver: AssociationDataResolver, appSession: AppSession) {\n        super(injector);\n        this._appSession = appSession;\n        this._associationResolver = AssociationDataResolver;\n        this.businessAddress = new AddressDTO();\n    }\n\n    protected get association(): AssociationDTO {\n        return this.data;\n    }\n\n    protected setupData(): void {\n        this.setResolvedListData();\n        this.associationDataExist = this.associationDataExists();\n        if (this.associationDataExist) {\n            this.setLazyLoadProperties();\n            this.setAssociationData();\n        }\n    }\n\n    private associationDataExists(): boolean {\n        return !!this.data.CompanyCode;\n    }\n\n    public onCompanyCodeNameChange(selectedCompanyCode: any): void {\n        if (selectedCompanyCode.value) {\n            this._appSession.policyDTO.AssociationCode = selectedCompanyCode.value;\n            this.resolveAssociationData();\n        } else {\n            this.association.CompanyCode = '';\n            this.associationDataExist = this.associationDataExists();\n            this._appSession.policyDTO.AssociationCode = null;\n        }\n    }\n\n    private resolveAssociationData(): void {\n        this._associationResolver.directResolve().then(result => {\n            this.data = result;\n            this.setLazyLoadProperties();\n            this.setAssociationData();\n            this.associationDataExist = this.associationDataExists();\n        });\n    }\n\n    private setLazyLoadProperties(): void {\n        if (this.association.Addresses_LazyLoad.length > 0) {\n            this.businessAddress = AddressUtil.getAddress(this.association.Addresses_LazyLoad, AddressTypes.BUSINESS);\n        }\n        if (this.association.Phones_LazyLoad.length > 0) {\n            this.workPhone = PhoneUtil.getPhone(this.association.Phones_LazyLoad, PhoneTypes.WORK);\n            if (!this.workPhone) {\n                this.workPhone = PhoneUtil.getPhone(this.association.Phones_LazyLoad, PhoneTypes.BUSINESS);\n                if (!this.workPhone) {\n                    this.workPhone = PhoneUtil.getPhone(this.association.Phones_LazyLoad, PhoneTypes.HOME);\n                }\n            }\n            this.faxPhone = PhoneUtil.getPhone(this.association.Phones_LazyLoad, PhoneTypes.FAX);\n        }\n    }\n\n    private setAssociationData(): void {\n        this.setCountryLabel();\n        this.setCountryStateLabel();\n        this.setAssocExpirationDate();\n    }\n\n    private setCountryLabel(): void {\n        const countryList: Array<ListItem> = ListDataUtil.convertToListItemArray(this.listData.CountryId);\n        this.countryName = MetadataUtil.getItemLabelByCode(countryList, this.businessAddress.CountryId);\n    }\n\n    private setCountryStateLabel(): void {\n        const stateList: Array<ListItem> = ListDataUtil.convertToListItemArray(this.listData.CountryStateId);\n        this.stateName = MetadataUtil.getItemLabelByCode(stateList, this.businessAddress.CountryStateId);\n    }\n\n    private setAssocExpirationDate(): void {\n        this.data.assocExpirationDate = this.data.ExpirationDate;\n    }\n}\n","module.exports = \"<lf-panel header=\\\"Association\\\" i18n-header=\\\"@@policy.case.association.title\\\" panelType=\\\"primary\\\" [toggleable]=\\\"true\\\" stateId=\\\"panel_association\\\"\\r\\n    [state]=\\\"componentsState.get('panel_association')\\\" [initCollapsed]=true secureComponent>\\r\\n    <optional-section [dataExists]=\\\"dataExists\\\" [item]=\\\"item\\\" [itemComponentType]=\\\"itemComponentType\\\" (createItem)=\\\"createItem()\\\"\\r\\n        (removeItem)=\\\"removeItem()\\\" secureComponent>\\r\\n    </optional-section>\\r\\n</lf-panel>\"","﻿import { Component, Injector, Injectable, Type } from '@angular/core';\n\nimport { OptionalSectionViewModel } from 'life-core/component/optional-section';\nimport { I18n } from 'life-core/i18n';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { Identifiable, AddressDTO, AddressTypes, AssociationDTO, PhoneDTO, PhoneTypes } from 'ls-core/model';\n\nimport { AssociationInfoComponent } from 'business/policy/case/association/case-association-info.component';\nimport { AssociationDataResolver } from './case-association-data.resolver';\n\n@Component({\n    selector: 'case-association',\n    templateUrl: './case-association.component.html',\n    providers: [PolicySubscriber]\n})\n@Injectable()\nexport class AssociationComponent extends OptionalSectionViewModel<AssociationDTO> {\n    private _associationResolver: AssociationDataResolver;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        i18n: I18n,\n        associationDataResolver: AssociationDataResolver\n    ) {\n        super(injector);\n        this.i18n = i18n;\n        this._associationResolver = associationDataResolver;\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n            if (this.data.policy.AssociationCode) {\n                this.resolveAssociationData();\n            }\n        });\n    }\n\n    private resolveAssociationData(): void {\n        this._associationResolver.directResolve().then(result => {\n            this.data.Association = result;\n            this.updateProperties();\n        });\n    }\n\n    protected getItemComponentType(): Type<any> {\n        return AssociationInfoComponent;\n    }\n\n    protected getItem(): AssociationDTO {\n        return this.data.Association;\n    }\n\n    protected executeCreateItem(): void {\n        const association = new AssociationDTO();\n        association.identifier = new Identifiable();\n        association.CompanyCode = this.data.policy.AssociationCode || '';\n        const businessAddress = new AddressDTO();\n        businessAddress.AddressTypeCode = AddressTypes.BUSINESS;\n        association.Addresses_LazyLoad = [businessAddress];\n        const workPhone = new PhoneDTO();\n        workPhone.PhoneTypeCode = PhoneTypes.WORK;\n        association.Phones_LazyLoad = [workPhone];\n        this.data.Association = association;\n    }\n\n    protected getTitle(): string {\n        return this.i18n({ value: 'Association', id: 'policy.case.association.title' });\n    }\n\n    //fake item, no need to delete on server\n    protected updateDeletedObjectArray(item: AssociationDTO): void {}\n\n    protected executeRemoveItem(): void {\n        this.data.policy.AssociationCode = null;\n        this.data.Association = null;\n        this.changeManager.setIsDirty(true);\n    }\n}\n","﻿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { AssociationComponent } from './case-association.component';\r\nimport { AssociationInfoComponent } from './case-association-info.component';\r\nimport { AssociationDataResolver } from './case-association-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [AssociationComponent, AssociationInfoComponent],\r\n    exports: [AssociationComponent],\r\n    entryComponents: [AssociationInfoComponent],\r\n    providers: [AssociationDataResolver]\r\n})\r\nexport class AssociationModule {}\r\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\n\r\n@Injectable()\r\nexport class CaseDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Owners, this.getOwnerLazyLoadTree());\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getInsuredLazyLoadTree());\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Payors, this.getPayorLazyLoadTree());\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Agencies, this.getAgencyLazyLoadTree());\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Agents, this.getAgentLazyLoadTree());\r\n        return this.lazyDataLoader.batchLoad(request);\r\n    }\r\n\r\n    private getOwnerLazyLoadTree(): NTree<string> {\r\n        const ownerDTOLoadTree = new NTree<string>(DataCollectionNames.Owners);\r\n        {\r\n            ownerDTOLoadTree.AddChild(DataCollectionNames.Addresses);\r\n            ownerDTOLoadTree.AddChild(DataCollectionNames.Phones);\r\n        }\r\n        return ownerDTOLoadTree;\r\n    }\r\n\r\n    private getInsuredLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            insuredDTOLoadTree.AddChildren([\r\n                DataCollectionNames.Addresses,\r\n                DataCollectionNames.Applications,\r\n                DataCollectionNames.Phones\r\n            ]);\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n\r\n    private getPayorLazyLoadTree(): NTree<string> {\r\n        const payorDTOLoadTree = new NTree<string>(DataCollectionNames.Payors);\r\n        {\r\n            payorDTOLoadTree.AddChild(DataCollectionNames.Addresses);\r\n        }\r\n        return payorDTOLoadTree;\r\n    }\r\n    private getAgencyLazyLoadTree(): NTree<string> {\r\n        const agecnyDTOLoadTree = new NTree<string>(DataCollectionNames.Agencies);\r\n        {\r\n            agecnyDTOLoadTree.AddChild(DataCollectionNames.Addresses);\r\n            agecnyDTOLoadTree.AddChild(DataCollectionNames.Phones);\r\n            agecnyDTOLoadTree.AddChild(DataCollectionNames.Relations);\r\n        }\r\n        return agecnyDTOLoadTree;\r\n    }\r\n    private getAgentLazyLoadTree(): NTree<string> {\r\n        const agentDTOLoadTree = new NTree<string>(DataCollectionNames.Agents);\r\n        {\r\n            agentDTOLoadTree.AddChildren([\r\n                DataCollectionNames.Addresses,\r\n                DataCollectionNames.Phones,\r\n                DataCollectionNames.Relations\r\n            ]);\r\n        }\r\n        return agentDTOLoadTree;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-page-header\\\" i18n=\\\"@@policy.case.info.title\\\">Case Information</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <case-information></case-information>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <owner-list></owner-list>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <payor-list></payor-list>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <case-payment></case-payment>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <case-distribution></case-distribution>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <case-association></case-association>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <case-employer *ngIf=\\\"visibleEmployer\\\"></case-employer>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <agency></agency>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <case-agent-list></case-agent-list>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 lf-panel-section\\\">\\r\\n        <tpa></tpa>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector, Injectable } from '@angular/core';\nimport { ViewModel } from 'life-core/view-model';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { PolicyDTO } from 'ls-core/model/dto';\nimport { PolicySubscriber } from 'ls-core/session';\nimport { MetadataUtil } from 'ls-core/util';\nimport { SavePolicyDataDelegate } from 'ls-core/service';\nimport { CaseAuthorizationProvider } from 'business/policy/shared/authorization';\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\n\n@Component({\n    selector: 'case-info',\n    templateUrl: './case-info.component.html',\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: CaseAuthorizationProvider }]\n})\n@Injectable()\nexport class CaseInfoComponent extends ViewModel<PolicyDataModel> {\n    public visibleEmployer: boolean;\n\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n    }\n    protected setupData(): void {\n        this.setResolvedMetaData();\n        this.setSectionsVisibility();\n    }\n    public setSectionsVisibility(): void {\n        const empVisiblity = MetadataUtil.getItemLabelByCode(this.listData['system'], 'CaseDisplayEmployer');\n        this.visibleEmployer = empVisiblity && empVisiblity.toUpperCase() == 'TRUE';\n    }\n    public loadData(): Promise<void> {\n        return Promise.resolve();\n    }\n\n    protected getDataToSave(): PolicyDTO {\n        return this.data.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n}\n","import { Injector, Injectable } from '@angular/core';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport {\r\n    AddressDTO,\r\n    ApplicationInfoDTO,\r\n    TPADTO,\r\n    OwnerDTO,\r\n    AssociationDTO,\r\n    EmployerDTO,\r\n    AgencyDTO,\r\n    AgentDTO,\r\n    PolicyDTO\r\n} from 'ls-core/model';\r\nimport { ListDataRequestBuilder, ListsDataRequest } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\nimport { PrimaryInsuredHelper } from './../shared';\r\n\r\n@Injectable()\r\nexport class CaseListDataResolver extends BaseListDataResolver {\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this.policy);\r\n\r\n        this.addOwnerListRequestItems(listDataRequestBuilder);\r\n        this.addPaymentInfoListRequestItems(listDataRequestBuilder);\r\n        this.addDistributionListRequestItems(listDataRequestBuilder);\r\n        this.addInformationListRequestItems(listDataRequestBuilder);\r\n        this.addEmployerListRequestItems(listDataRequestBuilder);\r\n        this.addAssociationListRequestItems(listDataRequestBuilder);\r\n        this.addTpaListRequestItems(listDataRequestBuilder);\r\n        this.addAgencyListRequestItems(listDataRequestBuilder);\r\n        this.addAgentListRequestItems(listDataRequestBuilder);\r\n        this.addPersonalInfoDataListRequestItems(listDataRequestBuilder);\r\n        // Other sections\r\n        //  ...\r\n\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n\r\n    private addOwnerListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        let ownerDTO: OwnerDTO;\r\n        if (this.policy.Owners_LazyLoad && this.policy.Owners_LazyLoad.length > 0) {\r\n            ownerDTO = this.policy.Owners_LazyLoad[0];\r\n        } else {\r\n            ownerDTO = new OwnerDTO();\r\n        }\r\n        listDataRequestBuilder.addListRequestItem(ownerDTO, 'PersonTypeId');\r\n        listDataRequestBuilder.addListRequestItem(ownerDTO, 'Title');\r\n        listDataRequestBuilder.addListRequestItem(ownerDTO, 'Suffix');\r\n        listDataRequestBuilder.addListRequestItem(ownerDTO, 'SubRoleId');\r\n        listDataRequestBuilder.addListRequestItem(ownerDTO, 'RelationshipToInsured');\r\n\r\n        let addressDTO: AddressDTO;\r\n        if (ownerDTO.Addresses_LazyLoad && ownerDTO.Addresses_LazyLoad.length > 0) {\r\n            addressDTO = ownerDTO.Addresses_LazyLoad[0] as AddressDTO;\r\n        } else {\r\n            addressDTO = new AddressDTO();\r\n        }\r\n        listDataRequestBuilder.addListRequestItem(addressDTO, 'CountryId');\r\n    }\r\n\r\n    private addPaymentInfoListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'PaymentModeCode');\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'CreditCardType');\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'PaymentMethodCode');\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'BankAccountType');\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'TrustCode');\r\n    }\r\n\r\n    private addDistributionListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'SourceInfo');\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'DistributorCode');\r\n    }\r\n\r\n    private addInformationListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'CompanyCode');\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'PreferredLanguageCode');\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'ApplicationType');\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'Priority');\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'UnderwriterId');\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'ServiceAssociateId');\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'TeamId');\r\n    }\r\n\r\n    private addAssociationListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        const associationDTO = { CompanyCode: this.policy.AssociationCode };\r\n        listDataRequestBuilder.addListRequestItem(\r\n            ObjectUtil.createObjectOfType(associationDTO, AssociationDTO),\r\n            'Association_CompanyCode'\r\n        );\r\n    }\r\n\r\n    private addEmployerListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        const employerDTO = { PersonId: this.policy.EmployerId };\r\n        listDataRequestBuilder.addListRequestItem(\r\n            ObjectUtil.createObjectOfType(employerDTO, EmployerDTO),\r\n            'Employer_CompanyCode'\r\n        );\r\n    }\r\n\r\n    private addTpaListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        const tpaDTO = { TpaCode: this.policy.TpaCode };\r\n        listDataRequestBuilder.addListRequestItem(ObjectUtil.createObjectOfType(tpaDTO, TPADTO), 'TpaCode');\r\n    }\r\n\r\n    private addAgencyListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        let agency: AgencyDTO;\r\n        if (this.policy.Agencies_LazyLoad && this.policy.Agencies_LazyLoad.length > 0) {\r\n            agency = this.policy.Agencies_LazyLoad[0] as AgencyDTO;\r\n        } else {\r\n            agency = new AgencyDTO();\r\n        }\r\n        const agencyDTO = { AgencyNumber: agency.AgencyNumber };\r\n        listDataRequestBuilder.addListRequestItem(ObjectUtil.createObjectOfType(agencyDTO, AgencyDTO), 'PersonId');\r\n    }\r\n\r\n    private addAgentListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        let agentDTO: AgentDTO;\r\n        if (this.policy.Agents_LazyLoad && this.policy.Agents_LazyLoad.length > 0) {\r\n            agentDTO = this.policy.Agents_LazyLoad[0];\r\n        } else {\r\n            agentDTO = new AgentDTO();\r\n        }\r\n        listDataRequestBuilder.addListRequestItem(agentDTO, 'AgentNumber');\r\n        listDataRequestBuilder.addListRequestItem(agentDTO, 'Title');\r\n        listDataRequestBuilder.addListRequestItem(agentDTO, 'Suffix');\r\n        listDataRequestBuilder.addListRequestItem(agentDTO, 'ProducerType');\r\n\r\n        let addressDTO: AddressDTO;\r\n        if (agentDTO.Addresses_LazyLoad && agentDTO.Addresses_LazyLoad.length > 0) {\r\n            addressDTO = agentDTO.Addresses_LazyLoad[0] as AddressDTO;\r\n        } else {\r\n            addressDTO = new AddressDTO();\r\n        }\r\n        listDataRequestBuilder.addListRequestItem(addressDTO, 'CountryId');\r\n        listDataRequestBuilder.addListRequestItem(addressDTO, 'CountryStateId');\r\n    }\r\n\r\n    // Personal Information\r\n    private addPersonalInfoDataListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        const primaryInsured = PrimaryInsuredHelper.getPrimaryInsured(this.policy);\r\n        let applicantInfoDTO: ApplicationInfoDTO;\r\n        if (primaryInsured.Applications_LazyLoad && primaryInsured.Applications_LazyLoad.length > 0) {\r\n            applicantInfoDTO = primaryInsured.Applications_LazyLoad[0] as ApplicationInfoDTO;\r\n        } else {\r\n            applicantInfoDTO = new ApplicationInfoDTO();\r\n        }\r\n        listDataRequestBuilder.addListRequestItem(applicantInfoDTO, 'CitizenshipCountryId');\r\n    }\r\n\r\n    private get policy(): PolicyDTO {\r\n        return this._appSession.policyDTO;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\nimport { CountryStateCodes } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class CaseMetaDataResolver extends BaseMetaDataResolver {\r\n  protected getMetadataTypes(): string[] {\r\n    return [...CountryStateCodes, 'country','system'];\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { OwnerModule } from './owner/owner.module';\r\nimport { CaseInfoComponent } from './case-info.component';\r\nimport { CaseDataResolver } from './case-data.resolver';\r\nimport { CaseListDataResolver } from './case-list-data.resolver';\r\nimport { CasePaymentModule } from './payment/case-payment.module';\r\nimport { PayorModule } from './payor/payor.module';\r\nimport { CaseDistributionModule } from './distribution/case-distribution.module';\r\nimport { CaseInformationModule } from './information/case-information.module';\r\nimport { EmployerModule } from './employer/case-employer.module';\r\nimport { TPAModule } from './tpa/tpa.module';\r\nimport { AgencyModule } from './agency/agency.module';\r\nimport { AssociationModule } from './association/case-association.module';\r\nimport { AgentModule } from './agent/agent.module';\r\nimport { CaseMetaDataResolver } from './case-meta-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        LsComponentsModule,\r\n        OwnerModule,\r\n        CasePaymentModule,\r\n        PayorModule,\r\n        CaseDistributionModule,\r\n        CaseInformationModule,\r\n        EmployerModule,\r\n        CaseInformationModule,\r\n        TPAModule,\r\n        AgencyModule,\r\n        AssociationModule,\r\n        AgentModule\r\n    ],\r\n    declarations: [CaseInfoComponent],\r\n    providers: [CaseDataResolver, CaseListDataResolver, CaseMetaDataResolver]\r\n})\r\nexport class CaseModule {}\r\n","module.exports = \"<lf-panel header=\\\"Distribution\\\" i18n-header=\\\"@@policy.case.distribution.title\\\" panelType=\\\"primary\\\" [toggleable]=\\\"true\\\"\\r\\n    stateId=\\\"panel_distribution\\\" [state]=\\\"componentsState.get('panel_distribution')\\\" [initCollapsed]=true\\r\\n    secureComponent>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"salesDirectorName\\\" label=\\\"Regional Sales Director\\\" i18n-label=\\\"@@policy.case.distribution.regSalesDir\\\">\\r\\n                <lf-inputtext #salesDirectorName name=\\\"salesDirectorName\\\" [(ngModel)]=\\\"data.policy.SalesDirectorName\\\"\\r\\n                    maxLength=\\\"255\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"salesDirectorCode\\\" label=\\\"Regional Sales Director Code\\\" i18n-label=\\\"@@policy.case.distribution.regSalesDirCode\\\">\\r\\n                <lf-inputtext #salesDirectorCode name=\\\"salesDirectorCode\\\" maxLength=\\\"10\\\" [(ngModel)]=\\\"data.policy.SalesDirectorCode\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"marketingCode\\\" label=\\\"Marketing Code\\\" i18n-label=\\\"@@policy.case.distribution.marketingCode\\\">\\r\\n                <lf-inputtext #marketingCode name=\\\"marketingCode\\\" maxLength=\\\"20\\\" [(ngModel)]=\\\"data.policy.MarketingCode\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"marketingOrganizationName\\\" label=\\\"Marketing Organization Name\\\" i18n-label=\\\"@@policy.case.distribution.marketingOrgName\\\">\\r\\n                <lf-inputtext #marketingOrganizationName name=\\\"marketingOrganizationName\\\" maxLength=\\\"50\\\" [(ngModel)]=\\\"data.policy.MarketingOrganizationName\\\"\\r\\n                    secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"agentTeamCode\\\" label=\\\"Agent Team Code\\\" i18n-label=\\\"@@policy.case.distribution.agentTeamCode\\\">\\r\\n                <lf-inputtext format=\\\"n0\\\" decimals=\\\"0\\\" #agentTeamCode name=\\\"agentTeamCode\\\" [maxLength]=\\\"5\\\" [(ngModel)]=\\\"data.policy.AgentTeamCode\\\"\\r\\n                    secureComponent [regExp]=\\\"numberRegex\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"agentStaffCode\\\" label=\\\"Agent Staff Code\\\" i18n-label=\\\"@@policy.case.distribution.agentStaffCode\\\">\\r\\n                <lf-inputtext format=\\\"n0\\\" decimals=\\\"0\\\" #agentStaffCode name=\\\"agentStaffCode\\\" [maxLength]=\\\"5\\\"\\r\\n                    [(ngModel)]=\\\"data.policy.AgentStaffCode\\\" secureComponent [regExp]=\\\"numberRegex\\\"></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"commissionOverride\\\" label=\\\"Commission Override\\\" i18n-label=\\\"@@policy.case.distribution.commissionOvr\\\">\\r\\n                <lf-checkbox #commissionOverride name=\\\"commissionOverride\\\" [(ngModel)]=\\\"data.policy.CommissionOverride\\\"\\r\\n                    secureComponent></lf-checkbox>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"leadNumberId\\\" label=\\\"Lead Number\\\" i18n-label=\\\"@@policy.case.distribution.leadNumber\\\">\\r\\n                <lf-inputtext #leadNumberId name=\\\"leadNumberId\\\" maxLength=\\\"15\\\" [(ngModel)]=\\\"data.policy.LeadNumberId\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"sourceInfo\\\" label=\\\"Source Information\\\" i18n-label=\\\"@@policy.case.distribution.sourceInformation\\\">\\r\\n                <lf-select #sourceInfo name=\\\"sourceInfo\\\" [items]=\\\"listData.SourceInfo | listItems:'value':'Id'\\\" [clearable]=\\\"false\\\"\\r\\n                    [(ngModel)]=\\\"data.policy.SourceInfo\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"applicationSourceType\\\" label=\\\"Application Source Type\\\" i18n-label=\\\"@@policy.case.distribution.appSourceType\\\">\\r\\n                <lf-statictext #applicationSourceType name=\\\"applicationSourceType\\\" [value]=\\\"data.policy.ApplicationSourceType\\\"\\r\\n                    secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"distributorCode\\\" label=\\\"Distribution Code\\\" i18n-label=\\\"@@policy.case.distribution.distCode\\\">\\r\\n                <lf-select #distributorCode name=\\\"distributorCode\\\" [items]=\\\"listData.DistributorCode | listItems:'value':'Id'\\\" [clearable]=\\\"false\\\"\\r\\n                    [(ngModel)]=\\\"data.policy.DistributorCode\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"alternateCaseId\\\" label=\\\"Alternate Policy Number\\\" i18n-label=\\\"@@policy.case.distribution.altPolicyNbr\\\">\\r\\n                <lf-inputtext #alternateCaseId name=\\\"alternateCaseId\\\" maxLength=\\\"20\\\" [(ngModel)]=\\\"data.policy.AlternateCaseId\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</lf-panel>\"","import { Component, Injector, Injectable } from '@angular/core';\nimport { ViewModel } from 'life-core/view-model';\n\nimport { PolicySubscriber } from 'ls-core/session';\n\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\n\n@Component({\n    selector: 'case-distribution',\n    templateUrl: './case-distribution.component.html',\n    providers: [PolicySubscriber]\n})\n@Injectable()\nexport class CaseDistributionComponent extends ViewModel<PolicyDataModel> {\n    public numberRegex: RegExp = /[0-9]/;\n\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedListData();\n        return Promise.resolve();\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { CaseDistributionComponent } from './case-distribution.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [CaseDistributionComponent],\r\n    exports: [CaseDistributionComponent]\r\n})\r\nexport class CaseDistributionModule {}\r\n","﻿import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { IDefaultConstructor, ObjectUtil } from 'life-core/util/lang/object.util';\r\n\r\nimport { BaseModel, Identifiable, EmployerDTO } from 'ls-core/model';\r\nimport { ExpandTreeType, NTree } from 'ls-core/service/load-bypk';\r\nimport { DataCollectionNames } from 'ls-core/model';\r\n\r\nimport { BaseDTOPKDataResolver } from 'business/policy/shared/data-resolver/base-pk-data.resolver';\r\n\r\n@Injectable()\r\nexport class EmployerDataResolver extends BaseDTOPKDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected get employer(): EmployerDTO {\r\n        return this.resolvedData;\r\n    }\r\n\r\n    protected setResolvedData(responsePayload: any): void {\r\n        const data: any = this.getDataFromResponse(responsePayload.dtoObject);\r\n        const dataType = this.getCreateObjectType();\r\n        this.resolvedData = dataType ? ObjectUtil.createObjectOfType(data, dataType) : data;\r\n    }\r\n\r\n    protected getExpandTree(): ExpandTreeType {\r\n        const EmployerDTOLoadTree = new NTree<string>('');\r\n        {\r\n            EmployerDTOLoadTree.AddChildren([DataCollectionNames.Addresses, DataCollectionNames.Phones]);\r\n        }\r\n        return EmployerDTOLoadTree;\r\n    }\r\n\r\n    protected getWorkingIdentifier(): Identifiable {\r\n        const identifier = new Identifiable();\r\n        identifier.ClassNameMapped = EmployerDTO.Type;\r\n        identifier.ObjectID = this.appSession.policyDTO.EmployerId;\r\n        return identifier;\r\n    }\r\n\r\n    protected getCreateObjectType<EmployerDTO>(): IDefaultConstructor<any> {\r\n        return EmployerDTO;\r\n    }\r\n\r\n    protected getDataFromResponse(response: EmployerDTO): BaseModel {\r\n        return response;\r\n    }\r\n}\r\n","module.exports = \"<lf-panel header=\\\"Employer\\\" i18n-header=\\\"@@policy.case.employer.title\\\" panelType=\\\"primary\\\" [toggleable]=\\\"true\\\" stateId=\\\"panel_employer\\\"\\r\\n    [state]=\\\"componentsState.get('panel_employer')\\\" [initCollapsed]=true secureComponent>\\r\\n    <optional-section [dataExists]=\\\"dataExists\\\" [item]=\\\"item\\\" [itemComponentType]=\\\"itemComponentType\\\" (createItem)=\\\"createItem()\\\"\\r\\n        (removeItem)=\\\"removeItem()\\\" secureComponent>\\r\\n    </optional-section>\\r\\n</lf-panel>\"","﻿import { Component, Injector, Injectable, Type } from '@angular/core';\n\nimport { OptionalSectionViewModel } from 'life-core/component/optional-section';\nimport { I18n } from 'life-core/i18n';\n\nimport { PolicySubscriber } from 'ls-core/session';\n\nimport { Identifiable, AddressDTO, AddressTypes, EmployerDTO, PhoneDTO, PhoneTypes } from 'ls-core/model';\nimport { EmployerInfoComponent } from './info/case-employer-info.component';\nimport { EmployerDataResolver } from './case-employer-data.resolver';\n\n@Component({\n    selector: 'case-employer',\n    templateUrl: './case-employer.component.html',\n    providers: [PolicySubscriber]\n})\n@Injectable()\nexport class EmployerComponent extends OptionalSectionViewModel<EmployerDTO> {\n    private _employerResolver: EmployerDataResolver;\n    constructor(injector: Injector, policySubscriber: PolicySubscriber, i18n: I18n, resolver: EmployerDataResolver) {\n        super(injector);\n        this.i18n = i18n;\n        this._employerResolver = resolver;\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n            if (this.data.policy.EmployerId) {\n                this.resolveEmployerData();\n            }\n        });\n    }\n\n    private resolveEmployerData(): void {\n        this._employerResolver.directResolve().then(result => {\n            this.data.Employer = result;\n            this.updateProperties();\n        });\n    }\n\n    protected getItemComponentType(): Type<any> {\n        return EmployerInfoComponent;\n    }\n\n    protected getItem(): EmployerDTO {\n        return this.data.Employer;\n    }\n\n    protected executeCreateItem(): void {\n        const employer = new EmployerDTO();\n        employer.identifier = new Identifiable();\n        employer.PersonId = this.data.policy.EmployerId || '';\n        const businessAddress = new AddressDTO();\n        businessAddress.AddressTypeCode = AddressTypes.BUSINESS;\n        employer.Addresses_LazyLoad = [businessAddress];\n        const workPhone = new PhoneDTO();\n        workPhone.PhoneTypeCode = PhoneTypes.WORK;\n        employer.Phones_LazyLoad = [workPhone];\n        this.data.Employer = employer;\n    }\n\n    protected getTitle(): string {\n        return this.i18n({ value: 'Employer', id: 'policy.case.employer.title' });\n    }\n\n    //fake item, no need to delete on server\n    protected updateDeletedObjectArray(item: EmployerDTO): void {}\n\n    protected executeRemoveItem(): void {\n        this.data.Employer = null;\n        this.data.policy.EmployerId = null;\n        this.changeManager.setIsDirty(true);\n    }\n}\n","﻿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { EmployerComponent } from './case-employer.component';\r\nimport { EmployerInfoComponent } from './info/case-employer-info.component';\r\nimport { EmployerDataResolver } from './case-employer-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [EmployerComponent, EmployerInfoComponent],\r\n    exports: [EmployerComponent],\r\n    entryComponents: [EmployerInfoComponent],\r\n    providers: [EmployerDataResolver]\r\n})\r\nexport class EmployerModule {}\r\n","module.exports = \"<div class=\\\"owner\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"employerId\\\" label=\\\"Name\\\" i18n-label=\\\"@@policy.case.employer.name\\\">\\r\\n                <lf-select #employerId name=\\\"employerId\\\" [items]=\\\"listData.Employer_CompanyCode | listItems:'value':'Id'\\\" [(ngModel)]=\\\"data.CompanyCode\\\"\\r\\n                    [clearable]=\\\"false\\\" (change)=\\\"onCompanyCodeNameChange($event)\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"\\r\\n                    style=\\\"width:150px\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"employerDataExist\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"addressLine1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.employer.address\\\">\\r\\n                    <lf-statictext #addressLine1 name=\\\"addressLine1\\\" [value]=\\\"businessAddress.AddressLine1\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"addressLine2\\\">\\r\\n                    <lf-statictext #addressLine2 name=\\\"addressLine2\\\" [value]=\\\"businessAddress.AddressLine2\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"addressLine3\\\">\\r\\n                    <lf-statictext #addressLine3 name=\\\"addressLine3\\\" [value]=\\\"businessAddress.AddressLine3\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.employer.city\\\">\\r\\n                    <lf-statictext #city name=\\\"city\\\" [value]=\\\"businessAddress.City\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.employer.country\\\">\\r\\n                    <lf-statictext #country name=\\\"country\\\" [value]=\\\"countryName\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.employer.state\\\">\\r\\n                    <lf-statictext #state name=\\\"state\\\" [value]=\\\"stateName\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.employer.postalcode\\\">\\r\\n                    <lf-statictext #postalCode name=\\\"postalCode\\\" [value]=\\\"businessAddress.PostalCode\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"companyCodeNumber\\\" label=\\\"Company Code Number\\\" i18n-label=\\\"@@policy.case.employer.companycode\\\">\\r\\n                    <lf-statictext #companyCodeNumber name=\\\"companyCodeNumber\\\" [value]=\\\"data.CompanyCode\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax Id\\\" i18n-label=\\\"@@policy.case.employer.taxid\\\">\\r\\n                    <lf-statictext #taxId name=\\\"taxId\\\" [value]=\\\"data.TaxId | taxIdMask\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"phoneNumber\\\" label=\\\"Phone Number\\\" i18n-label=\\\"@@policy.case.employer.phonenumber\\\">\\r\\n                    <lf-statictext #phoneNumber name=\\\"phoneNumber\\\" [value]=\\\"workPhone | lsPhone\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"faxNumber\\\" label=\\\"Fax Number\\\" i18n-label=\\\"@@policy.case.employer.faxnumber\\\">\\r\\n                    <lf-statictext #faxNumber name=\\\"faxNumber\\\" [value]=\\\"faxPhone | lsPhone\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"email\\\" label=\\\"Email\\\" i18n-label=\\\"@@policy.case.employer.email\\\">\\r\\n                    <lf-statictext #email name=\\\"email\\\" [value]=\\\"data.EmailAddress\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"contactName\\\" label=\\\"Contact Name\\\" i18n-label=\\\"@@policy.case.employer.contactname\\\">\\r\\n                    <lf-statictext #contactName name=\\\"contactName\\\" [value]=\\\"data.contactname\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","﻿import { Component, Injector } from '@angular/core';\n\nimport { OptionalSectionDetailViewModel } from 'life-core/component/optional-section';\n\nimport { AppSession } from 'ls-core/session/app-session';\nimport { AddressDTO, PhoneDTO, AddressTypes, PhoneTypes, PolicyDTO } from 'ls-core/model';\nimport { ListDataUtil, SavePolicyDataDelegate } from 'ls-core/service';\nimport { AddressUtil, PhoneUtil } from 'ls-core/util';\n\nimport { EmployerDataResolver } from '../case-employer-data.resolver';\n\n@Component({\n    selector: 'case-employer-info',\n    templateUrl: './case-employer-info.component.html'\n})\nexport class EmployerInfoComponent extends OptionalSectionDetailViewModel {\n    public businessAddress: AddressDTO;\n    public workPhone: PhoneDTO;\n    public faxPhone: PhoneDTO;\n    public employerDataExist: boolean;\n    public countryName: string;\n    public stateName: string;\n    private _appSession: AppSession;\n    private _employerResolver: EmployerDataResolver;\n\n    constructor(injector: Injector, employerDataResolver: EmployerDataResolver, appSession: AppSession) {\n        super(injector);\n        this._appSession = appSession;\n        this._employerResolver = employerDataResolver;\n        this.businessAddress = new AddressDTO();\n    }\n\n    public onCompanyCodeNameChange(selectedCompanyCode: any): void {\n        if (selectedCompanyCode.value) {\n            if (this.listData.Employer_CompanyCode) {\n                const employerId = ListDataUtil.getExternalCodeFromListDataById(\n                    this.listData.Employer_CompanyCode,\n                    selectedCompanyCode.value\n                );\n                // since employer id does not exist, updating appSession with Employer Id\n                this._appSession.policyDTO.EmployerId = employerId;\n                this.resolveEmployerData();\n            }\n        } else {\n            this.data.PersonId = null;\n            this._appSession.policyDTO.EmployerId = null;\n            this.employerDataExist = this.employerDataExists();\n        }\n    }\n\n    protected setupData(): void {\n        this.setResolvedMetaData();\n        this.setResolvedListData();\n        this.employerDataExist = this.employerDataExists();\n        if (this.employerDataExist) {\n            this.setLazyLoadProperties();\n        }\n    }\n\n    protected getDataToSave(): PolicyDTO {\n        return this.data.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n\n    private employerDataExists(): boolean {\n        return !!this.data.PersonId;\n    }\n\n    private resolveEmployerData(): void {\n        this._employerResolver.directResolve().then(result => {\n            this.data = result;\n            this.setLazyLoadProperties();\n            this.employerDataExist = this.employerDataExists();\n        });\n    }\n\n    private setLazyLoadProperties(): void {\n        this.initializeAddressAndPhoneLazyLoadsIfEmpty();\n        this.setAddressAndPhoneData();\n        this.setCountryAndState();\n    }\n\n    private initializeAddressAndPhoneLazyLoadsIfEmpty(): void {\n        if (!this.data.Addresses_LazyLoad) {\n            this.data.Addresses_LazyLoad = new Array<AddressDTO>();\n        }\n        if (!this.data.Phones_LazyLoad) {\n            this.data.Phones_LazyLoad = new Array<PhoneDTO>();\n        }\n    }\n\n    private setAddressAndPhoneData(): void {\n        AddressUtil.addAddressIfNotFound(this.data.Addresses_LazyLoad, AddressTypes.BUSINESS);\n        this.businessAddress = AddressUtil.getAddress(this.data.Addresses_LazyLoad, AddressTypes.BUSINESS);\n\n        this.workPhone = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.WORK);\n        if (!this.workPhone) {\n            this.workPhone = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.BUSINESS);\n            if (!this.workPhone) {\n                this.workPhone = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.HOME);\n            }\n        }\n\n        PhoneUtil.addPhoneIfNotFound(this.data.Phones_LazyLoad, PhoneTypes.FAX);\n        this.faxPhone = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.FAX);\n    }\n\n    private setCountryAndState(): void {\n        if (this.businessAddress.CountryId) {\n            this.countryName = this.listData.CountryId.find(\n                address => address.Id === this.businessAddress.CountryId\n            ).value;\n        }\n        if (this.businessAddress.CountryStateId) {\n            this.stateName = this.listData.CountryStateId.find(\n                address => address.Id === this.businessAddress.CountryStateId\n            ).value;\n        }\n    }\n}\n","﻿export * from './case-data.resolver';\r\nexport * from './case-list-data.resolver';\r\nexport * from './case-meta-data.resolver';\r\nexport * from './case-info.component';\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService, AuthorizationLevel } from 'life-core/authorization';\r\n\r\nimport { PrivilegeObjectType, SubsystemType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class CaseInfoAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const underwriterAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.CASEASSIGN]\r\n        );\r\n\r\n        if (underwriterAuthorizationLevel < AuthorizationLevel.EDIT) {\r\n            this.authorizationData.componentLevel['underwriter'] = AuthorizationLevel.VIEW;\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<lf-panel header=\\\"Case Information\\\" i18n-header=\\\"@@policy.case.info.title\\\" panelType=\\\"primary\\\" [toggleable]=\\\"true\\\"\\r\\n    stateId=\\\"panel_information\\\" [state]=\\\"componentsState.get('panel_information')\\\" secureComponent>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"companyName\\\" label=\\\"Company Name\\\" i18n-label=\\\"@@policy.case.info.company\\\">\\r\\n                <lf-select #companyName name=\\\"companyName\\\" [items]=\\\"listData.CompanyCode | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.policy.CompanyCode\\\" secureComponent style=\\\"width:200px\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"preferredLanguage\\\" label=\\\"Preferred Language\\\" i18n-label=\\\"@@policy.case.info.language\\\">\\r\\n                <lf-select #preferredLanguage name=\\\"preferredLanguage\\\" [items]=\\\"listData.PreferredLanguageCode | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.policy.PreferredLanguageCode\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"applicationType\\\" label=\\\"Application Type\\\" i18n-label=\\\"@@policy.case.info.applicationtype\\\">\\r\\n                <lf-select #applicationType name=\\\"applicationType\\\" [items]=\\\"listData.ApplicationType | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.policy.ApplicationType\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"trialApplication\\\" label=\\\"Trial Application\\\" i18n-label=\\\"@@policy.case.info.trialapp\\\">\\r\\n                <lf-radiobuttongroup #trialApplication name=\\\"trialApplication\\\" [(ngModel)]=\\\"data.policy.TrialApplicationFlag\\\"\\r\\n                    secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton [value]=-1 label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\" name=\\\"trialApplication\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton [value]=0 label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\" name=\\\"trialApplication\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"faceAmount\\\" label=\\\"Face Amount\\\" i18n-label=\\\"@@policy.case.info.faceamount\\\">\\r\\n                <lf-inputnumber #faceAmount name=\\\"faceAmount\\\" [(ngModel)]=\\\"data.policy.faceAmount\\\" format=\\\"n2\\\"\\r\\n                    [allowNegative]=\\\"false\\\" maxLength=\\\"9\\\" secureComponent disabled></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"cwaAmount\\\" label=\\\"CWA Amount\\\" i18n-label=\\\"@@policy.case.info.cwaamount\\\">\\r\\n                <lf-inputnumber #cwaAmount name=\\\"cwaAmount\\\" [(ngModel)]=\\\"data.policy.CwaAmount\\\" format=\\\"n2\\\"\\r\\n                    [allowNegative]=\\\"false\\\" maxLength=\\\"10\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"cwaDate\\\" label=\\\"CWA Date\\\" i18n-label=\\\"@@policy.case.info.cwadate\\\">\\r\\n                <ls-inputdate #cwaDate name=\\\"cwaDate\\\" [(ngModel)]=\\\"data.policy.CwaDate\\\" secureComponent></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"conditionalReceiptNumber\\\" label=\\\"Conditional Receipt Number\\\" i18n-label=\\\"@@policy.case.info.condreceiptnumber\\\">\\r\\n                <lf-inputtext #conditionalReceiptNumber name=\\\"conditionalReceiptNumber\\\" maxLength=\\\"10\\\" [(ngModel)]=\\\"data.policy.CondReceiptNumber\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"TIAFromReceived\\\" label=\\\"TIA Form Received\\\" i18n-label=\\\"@@policy.case.info.tiaformreceived\\\">\\r\\n                <lf-checkbox #TIAFromReceived name=\\\"TIAFromReceived\\\" [(ngModel)]=\\\"data.policy.TiaIndicator\\\"\\r\\n                    secureComponent></lf-checkbox>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"lifeSuiteReceivedDate\\\" label=\\\"LifeSuite Rec'd Date\\\" i18n-label=\\\"@@policy.case.lifesuitereceiveddate.trialapp\\\">\\r\\n                <ls-inputdate #lifeSuiteReceivedDate name=\\\"lifeSuiteReceivedDate\\\" [(ngModel)]=\\\"data.policy.AddedDate\\\"\\r\\n                    secureComponent></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"requestedIssueDate\\\" label=\\\"Requested Issue Date\\\" i18n-label=\\\"@@policy.case.info.requestedissuedate\\\">\\r\\n                <ls-inputdate #requestedIssueDate name=\\\"requestedIssueDate\\\" [(ngModel)]=\\\"data.policy.RequestedIssueDate\\\"\\r\\n                    secureComponent></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"applicationNumber\\\" label=\\\"Application Number\\\" i18n-label=\\\"@@policy.case.info.applicationnumber\\\">\\r\\n                <lf-inputtext #applicationNumber name=\\\"applicationNumber\\\" [(ngModel)]=\\\"data.policy.ApplicationNumber\\\"\\r\\n                    maxLength=\\\"20\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"applicationReceived\\\" label=\\\"Application Received\\\" i18n-label=\\\"@@policy.case.info.applicationreceiveddate\\\">\\r\\n                <ls-inputdate #applicationReceived name=\\\"applicationReceived\\\" [(ngModel)]=\\\"data.policy.ReceiveDate\\\"\\r\\n                    (ngModelChange)=\\\"onApplicationReceivedDateChange()\\\" secureComponent required></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"applicationSigned\\\" label=\\\"Application Signed\\\" i18n-label=\\\"@@policy.case.info.applicationsigneddate\\\">\\r\\n                <ls-inputdate #applicationSigned name=\\\"applicationSigned\\\" [(ngModel)]=\\\"data.policy.ApplicationDate\\\"\\r\\n                    secureComponent></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"agentSigned\\\" label=\\\"Agent Signed\\\" i18n-label=\\\"@@policy.case.info.agentsigneddate\\\">\\r\\n                <ls-inputdate #agentSigned name=\\\"agentSigned\\\" [(ngModel)]=\\\"data.policy.AgentSignedDate\\\" (ngModelChange)=\\\"onAgentSignedDateChange()\\\"\\r\\n                    secureComponent></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"backdate\\\" label=\\\"Backdate\\\" i18n-label=\\\"@@policy.case.info.backdate\\\">\\r\\n                <lf-checkbox #backdate name=\\\"backdate\\\" [(ngModel)]=\\\"data.policy.BackDatePolicy\\\" secureComponent></lf-checkbox>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"familyRelatedCaseId\\\" label=\\\"Family/Related Case ID\\\" i18n-label=\\\"@@policy.case.info.familyrelatedcaseid\\\">\\r\\n                <lf-inputtext #familyRelatedCaseId name=\\\"familyRelatedCaseId\\\" maxLength=\\\"20\\\" [(ngModel)]=\\\"data.policy.CaseGroupId\\\"\\r\\n                    secureComponent>\\r\\n                </lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"priority\\\" label=\\\"Priority\\\" i18n-label=\\\"@@policy.case.info.priority\\\">\\r\\n                <lf-select #priority name=\\\"priority\\\" [items]=\\\"listData.Priority | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.policy.Priority\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"underwriter\\\" label=\\\"Underwriter\\\" i18n-label=\\\"@@policy.case.info.underwriter\\\">\\r\\n                <lf-select #underwriter name=\\\"underwriter\\\" [items]=\\\"listData.UnderwriterId | listItems:'value':'Id'\\\"\\r\\n                    [(ngModel)]=\\\"data.policy.UnderwriterId\\\" [clearable]=\\\"false\\\" secureComponent style=\\\"width:200px\\\"\\r\\n                    (change)=\\\"onUnderwriterChange($event)\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"serviceAssociate\\\" label=\\\"Service Associate\\\" i18n-label=\\\"@@policy.case.info.serviceassociate\\\">\\r\\n                <lf-select #serviceAssociate name=\\\"serviceAssociate\\\" [items]=\\\"listData.ServiceAssociateId | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    [(ngModel)]=\\\"data.policy.ServiceAssociateId\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"team\\\" label=\\\"Team\\\" i18n-label=\\\"@@policy.case.info.team\\\">\\r\\n                <lf-select #team name=\\\"team\\\" [disabled]=\\\"disabledTeam\\\" [items]=\\\"listData.TeamId | listItems:'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.policy.TeamId\\\"\\r\\n                    secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</lf-panel>\"","import { Component, Injector } from '@angular/core';\n\nimport { ViewModel } from 'life-core/view-model';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { ConfirmDialog, DialogButton, DialogButtonType, DialogResult } from 'life-core/component';\nimport { I18n } from 'life-core/i18n';\nimport { InputValueValidationResult } from 'life-core/view-model/validation/input-value';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { DBDateUtil, MetadataUtil } from 'ls-core/util';\n\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\nimport { CaseInfoAuthorizationProvider } from './case-info-authorization.provider';\nimport { ApplicationReceivedDateValidator } from '../../shared/validator/application-received-date-validator';\nimport { AgentSignedDateValidator } from '../../shared/validator/agent-signed-date-validator';\nimport { UserPolicyService } from 'business/policy/shared/user-policy.service';\n\n\n@Component({\n    selector: 'case-information',\n    templateUrl: './case-information.component.html',\n    providers: [\n        PolicySubscriber,\n        UserPolicyService,\n        ConfirmDialog,\n        ApplicationReceivedDateValidator,\n        AgentSignedDateValidator,\n        { provide: AuthorizationProvider, useClass: CaseInfoAuthorizationProvider }\n    ]\n})\nexport class CaseInformationComponent extends ViewModel<PolicyDataModel> {\n    private _confirmDialog: ConfirmDialog;\n    private _userPolicyService: UserPolicyService;\n    private _applicationReceivedDateValidator: ApplicationReceivedDateValidator;\n    private _agentSignedDateValidator: AgentSignedDateValidator;\n    public disabledTeam: boolean;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        userPolicyService: UserPolicyService,\n        confirmDialog: ConfirmDialog,\n        i18n: I18n,\n        applicationReceivedDateValidator: ApplicationReceivedDateValidator,\n        agentSignedDateValidator: AgentSignedDateValidator\n    ) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n        this._userPolicyService = userPolicyService;\n        this._confirmDialog = confirmDialog;\n        this.i18n = i18n;\n        this._applicationReceivedDateValidator = applicationReceivedDateValidator;\n        this._agentSignedDateValidator = agentSignedDateValidator;\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedMetaData();\n        this.setResolvedListData();\n        this.setDisableTeam();\n        return Promise.resolve();\n    }\n\n    public onUnderwriterChange(selectedUnderwriter: any): void {\n        if (selectedUnderwriter.value) {\n            this._userPolicyService.canUserApprovePolicy(selectedUnderwriter.value, true).then(canUserApprove => {\n                if (!canUserApprove) {\n                    this.displayValidationFailWarningDialog();\n                }\n            });\n        }\n    }\n\n    public onApplicationReceivedDateChange(): void {\n        if (this.applicationReceivedDateExists()) {\n            this.validateApplicationReceivedDate();\n        }\n    }\n\n    private validateApplicationReceivedDate(): void {\n        if (this._applicationReceivedDateValidator.validate() === InputValueValidationResult.fail) {\n            this.showValidationMsgDialog().then(() => {\n                this.resetApplicationReceivedDate();\n            });\n        }\n    }\n\n    private applicationReceivedDateExists(): boolean {\n        return DBDateUtil.isDateSet(this.data.policy.ReceiveDate);\n    }\n\n    public onAgentSignedDateChange(): void {\n        this.validateAgentSignedDate();\n    }\n\n    private validateAgentSignedDate(): void {\n        if (this._agentSignedDateValidator.validate() === InputValueValidationResult.fail) {\n            this.showValidationMsgDialog().then(() => {\n                this.resetAgentSignedDate();\n            });\n        }\n    }\n\n    private setDisableTeam(): void {\n        const teamEnabled = MetadataUtil.getLabelByValue(this.listData['system'], 'AllowTeamReassign');\n        this.disabledTeam = !(teamEnabled && teamEnabled.toUpperCase() == 'TRUE');\n    }\n\n    private resetAgentSignedDate(): void {\n        this.data.policy.AgentSignedDate = null;\n    }\n\n    private resetApplicationReceivedDate(): void {\n        this.data.policy.ReceiveDate = null;\n    }\n\n    private showValidationMsgDialog(): Promise<DialogResult> {\n        return this._confirmDialog.open({\n            message: this.i18n({\n                value: 'Application Received Date/Agent Signed Date cannot be prior to Birth date.',\n                id: 'policy.caseinfo.dialog.datevalidation.message'\n            }),\n            title: this.i18n({ value: 'Validation message', id: 'policy.caseinfo.dialog.datevalidation.title' }),\n            buttons: [new DialogButton({ type: DialogButtonType.OK })]\n        });\n    }\n\n    private displayValidationFailWarningDialog(): void {\n        this._confirmDialog\n            .open({\n                message: this.getWarningDialogMessage(),\n                title: this.i18n({ value: 'Warning', id: 'policy.caseinfo.dialog.underwriter.title' }),\n                buttons: [\n                    new DialogButton({ type: DialogButtonType.OK }),\n                    new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\n                ]\n            })\n            .then(result => {\n                if (result.buttonId !== DialogButtonType.OK) {\n                    this.resetUnderwriterField();\n                }\n            });\n    }\n\n    private getWarningDialogMessage(): string {\n        return this.i18n({\n            value:\n                'Underwriter does not have sufficient authority to approve coverage on this case.\\nSelect Yes to proceed or Cancel to select another underwriter.',\n            id: 'policy.caseinfo.dialog.underwriter.message'\n        });\n    }\n\n    private resetUnderwriterField(): void {\n        this.data.policy.UnderwriterId = '';\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { CaseInformationComponent } from './case-information.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [CaseInformationComponent],\r\n    exports: [CaseInformationComponent]\r\n})\r\nexport class CaseInformationModule {}\r\n","﻿import { Type } from '@angular/core';\n\nimport { IItemListComponentResolver, ItemListComponentResolver } from 'life-core/component';\nimport { ItemComponentMap } from 'life-core/util/component-resolver';\nimport { PartyTypes, OwnerDTO } from 'ls-core/model';\nimport { OwnerInfoComponent } from './owner-info.component';\n\nexport class OwnerComponentResolverHelper {\n    public getResolver(editModeOnly: boolean): IItemListComponentResolver<OwnerDTO> {\n        return new ItemListComponentResolver({\n            itemComponents: this.getItemViewModelTypeResolverMap(),\n            resolverField: 'data.PersonTypeId',\n            editModeOnly: editModeOnly\n        });\n    }\n\n    private getItemViewModelTypeResolverMap(): ItemComponentMap {\n        const componentMap: ItemComponentMap = new Map<string, Type<any>>();\n        componentMap.set(PartyTypes.COMPANY, OwnerInfoComponent);\n        componentMap.set(PartyTypes.ESTATE, OwnerInfoComponent);\n        componentMap.set(PartyTypes.PARTNERSHIP, OwnerInfoComponent);\n        componentMap.set(PartyTypes.PERSON, OwnerInfoComponent);\n        componentMap.set(PartyTypes.TRUST, OwnerInfoComponent);\n        return componentMap;\n    }\n}\n","module.exports = \"<lf-panel header=\\\"Owner\\\" i18n-header=\\\"@@policy.case.owner.title\\\" [toggleable]=\\\"true\\\" panelType=\\\"secondary\\\" stateId=\\\"panel_owner_{{index}}\\\"\\r\\n [state]=\\\"componentsState.get('panel_owner_'+index)\\\" secureComponent>\\r\\n\\t<div [hidden]=\\\"!item.visible\\\" [@fadeInOut]=\\\"item.visible\\\">\\r\\n\\t\\t<div class=\\\"itemContent\\\" [class.invalid]=\\\"item.invalid\\\">\\r\\n\\t\\t\\t<div class=\\\"owner\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t\\t\\t\\t<lf-form-input [control]=\\\"ownerPrimaryInsured\\\" label=\\\"Primary Insured\\\" i18n-label=\\\"@@policy.case.owner.primaryinsured\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<lf-radiobuttongroup #ownerPrimaryInsured name=\\\"owner_primaryInsured_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.isPrimaryInsured\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t (change)=\\\"onPrimaryInsuredAsOwnerClick($event)\\\" secureComponent>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<lf-radiobutton name=\\\"owner_primaryInsured_{{item.sequenceId}}\\\" [value]=true label=\\\"Yes\\\" i18n-label=\\\"@@policy.case.owner.yes\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<lf-radiobutton name=\\\"owner_primaryInsured_{{item.sequenceId}}\\\" [value]=false label=\\\"No\\\" i18n-label=\\\"@@policy.case.owner.no\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</lf-radiobuttongroup>\\r\\n\\t\\t\\t\\t\\t\\t</lf-form-input>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t\\t\\t\\t<lf-form-input [control]=\\\"partyType\\\" label=\\\"Party Type\\\" i18n-label=\\\"@@policy.case.owner.partytype\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<lf-select #partyType name=\\\"owner_partyType_{{item.sequenceId}}\\\" [items]=\\\"listData.PersonTypeId | listItems:'value':'Id'\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t [(ngModel)]=\\\"data.PersonTypeId\\\" (change)=\\\"onOwnerTypeChange($event)\\\" [clearable]=\\\"false\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t secureComponent required style=\\\"width:150px\\\"></lf-select>\\r\\n\\t\\t\\t\\t\\t\\t</lf-form-input>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<compose [model]=\\\"item\\\" [componentType]=\\\"itemComponentType\\\"></compose>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</lf-panel>\"","import { Component, Injector, Injectable, Type } from '@angular/core';\n\nimport { ItemViewModel } from 'life-core/component/item-list';\nimport { IComponentResolver, ComponentResolver, ComponentMap } from 'life-core/util';\nimport { ItemListAnimations } from 'life-core/component/item-list/animations/animations';\n\nimport {\n    OwnerPersonComponent,\n    OwnerCompanyComponent,\n    OwnerEstateComponent,\n    OwnerPartnershipComponent,\n    OwnerTrustComponent,\n    OwnerChangeChannel\n} from './type';\nimport {\n    PolicyDTO,\n    AddressTypes,\n    PhoneTypes,\n    InsuredDTO,\n    PartyTypes,\n    OwnerSubRoleTypes,\n    OwnerDTO\n} from 'ls-core/model';\nimport { PolicySubscriber } from 'ls-core/session';\nimport { PrimaryInsuredHelper } from 'business/policy/shared';\nimport { AddressUtil, PhoneUtil } from 'ls-core/util';\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\n@Component({\n    selector: 'owner-info',\n    templateUrl: './owner-info.component.html',\n    animations: ItemListAnimations,\n    providers: [PolicySubscriber]\n})\n@Injectable()\nexport class OwnerInfoComponent extends ItemViewModel<OwnerDTO> {\n    public itemComponentType: Type<any>;\n\n    private _componentMapResolver: IComponentResolver<string>;\n    private _policy: PolicyDTO;\n    private _messagingService: IMessagingService;\n\n    constructor(injector: Injector, policySubscriber: PolicySubscriber, messagingService: MessagingService) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this._policy = p;\n        });\n        this._componentMapResolver = this.getComponentMapResolver();\n        this._messagingService = messagingService;\n    }\n\n    public setupData(): void {\n        this.initResidentAddressAndPhone();\n        this.setResolvedListData();\n        this.setItemComponentType(this.data.PersonTypeId);\n        this.setupSubscriptions();\n    }\n    protected setupSubscriptions(): void {\n        this.subscriptionTracker.track(\n            this._messagingService.subscribeNewMessageOnly(OwnerChangeChannel.OwnerAsPrimaryInsured, item =>\n                this.changeToNonPIWhenOtherOwnerIsSetToPI(item)\n            )\n        );\n    }\n    public onPrimaryInsuredAsOwnerClick(value: any): void {\n        if (value) {\n            this.setOwnerAsPrimaryInsured();\n        } else {\n            this.removePrimaryInsuredAsOwner();\n        }\n    }\n    /**\n     * change this owner from primary insured to non primary insured if another owner is been set as primary insured\n     * @param otherSequenceId: other owner's sequence id\n     */\n    private changeToNonPIWhenOtherOwnerIsSetToPI(otherSequenceId: number): void {\n        if (this.data.isPrimaryInsured && otherSequenceId != this.sequenceId) {\n            this.removePrimaryInsuredAsOwner();\n        }\n    }\n\n    public onOwnerTypeChange(type: any): void {\n        PrimaryInsuredHelper.resetOwnerPayorDataUponOwnerPayorTypeChange(this.data);\n        this.initResidentAddressAndPhone();\n        this.setItemComponentType(type.value);\n    }\n\n    private setOwnerAsPrimaryInsured(): void {\n        this.copyDataFromPrimaryInsured();\n        this.setItemComponentType(PartyTypes.PERSON);\n        this._messagingService.publish(OwnerChangeChannel.OwnerAsPrimaryInsured, this.sequenceId);\n    }\n\n    private initResidentAddressAndPhone(): void {\n        AddressUtil.addAddressIfNotFound(this.item.data.Addresses_LazyLoad, AddressTypes.RESIDENCE);\n        PhoneUtil.addPhoneIfNotFound(this.item.data.Phones_LazyLoad, PhoneTypes.HOME);\n        PhoneUtil.addPhoneIfNotFound(this.item.data.Phones_LazyLoad, PhoneTypes.WORK);\n    }\n\n    private getComponentMapResolver(): IComponentResolver<string> {\n        const componentMap: ComponentMap = new ComponentMap();\n        componentMap.add(PartyTypes.COMPANY, OwnerCompanyComponent);\n        componentMap.add(PartyTypes.ESTATE, OwnerEstateComponent);\n        componentMap.add(PartyTypes.PARTNERSHIP, OwnerPartnershipComponent);\n        componentMap.add(PartyTypes.PERSON, OwnerPersonComponent);\n        componentMap.add(PartyTypes.TRUST, OwnerTrustComponent);\n        return new ComponentResolver<string>(componentMap);\n    }\n\n    private removePrimaryInsuredAsOwner(): void {\n        this.changeManager.markObjectAsDeletedByIdentifier(this.data.identifier);\n        PrimaryInsuredHelper.removePrimaryInsuredDataFromItem(this.item.data);\n        this.resetOwner();\n    }\n\n    private setItemComponentType(type: string): void {\n        this.itemComponentType = this._componentMapResolver.resolve(type);\n    }\n\n    private copyDataFromPrimaryInsured(): void {\n        const primaryInsured: InsuredDTO = PrimaryInsuredHelper.getPrimaryInsured(this._policy);\n        if (primaryInsured) {\n            this.changeManager.markObjectAsDeletedByIdentifier(this.data.identifier);\n            PrimaryInsuredHelper.copyDataFromPrimaryInsuredToNewData(primaryInsured, this.data);\n            this.data.SubRoleId = OwnerSubRoleTypes.PRIMARY;\n            this.item.data = this.data;\n            this.resetOwner();\n        }\n    }\n\n    private resetOwner(): void {\n        this.item = { ...this.item };\n    }\n}\n","module.exports = \"/* test-item-list.css */\\n\\n.item .itemContent {\\n    padding: 0.3125rem;\\n    border-radius: 4px;\\n    -webkit-border-radius: 4px;\\n    -moz-border-radius: 4px;\\n}\\n\\n.item .itemContent.invalid {\\n    border-color: red;\\n}\\n\\n.bottom-margin {\\n    margin: 0.3125rem;\\n}\\n\\n.owner:hover {\\n    border-color: #00467f;\\n}\\n\\n.owner #validation-messages {\\n    margin: 0 0.625rem 0.9375rem 0.625rem;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS9jYXNlL293bmVyL293bmVyLWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3QkFBd0I7O0FBRXhCO0lBQ0ksbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQiwyQkFBMkI7SUFDM0Isd0JBQXdCO0NBQzNCOztBQUVEO0lBQ0ksa0JBQWtCO0NBQ3JCOztBQUVEO0lBQ0ksa0JBQWtCO0NBQ3JCOztBQUVEO0lBQ0ksc0JBQXNCO0NBQ3pCOztBQUVEO0lBQ0ksc0NBQXNDO0NBQ3pDIiwiZmlsZSI6InNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS9jYXNlL293bmVyL293bmVyLWxpc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRlc3QtaXRlbS1saXN0LmNzcyAqL1xuXG4uaXRlbSAuaXRlbUNvbnRlbnQge1xuICAgIHBhZGRpbmc6IDAuMzEyNXJlbTtcbiAgICBib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgLXdlYmtpdC1ib3JkZXItcmFkaXVzOiA0cHg7XG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA0cHg7XG59XG5cbi5pdGVtIC5pdGVtQ29udGVudC5pbnZhbGlkIHtcbiAgICBib3JkZXItY29sb3I6IHJlZDtcbn1cblxuLmJvdHRvbS1tYXJnaW4ge1xuICAgIG1hcmdpbjogMC4zMTI1cmVtO1xufVxuXG4ub3duZXI6aG92ZXIge1xuICAgIGJvcmRlci1jb2xvcjogIzAwNDY3Zjtcbn1cblxuLm93bmVyICN2YWxpZGF0aW9uLW1lc3NhZ2VzIHtcbiAgICBtYXJnaW46IDAgMC42MjVyZW0gMC45Mzc1cmVtIDAuNjI1cmVtO1xufVxuIl19 */\"","module.exports = \"<lf-panel header=\\\"Owner\\\" i18n-header=\\\"@@policy.case.owner.title\\\" [toggleable]=\\\"true\\\" panelType=\\\"primary\\\" stateId=\\\"panel_owners\\\"\\r\\n [state]=\\\"componentsState.get('panel_owners')\\\" [initCollapsed]=true secureComponent>\\r\\n\\t<item-list #refItemList id=\\\"item_list\\\" [oItems]=\\\"oItems\\\" [editModeOnly]=\\\"editModeOnly\\\" [buttons]=\\\"buttons\\\" secureComponent></item-list>\\r\\n</lf-panel>\"","import { Injector, Component, ViewChild } from '@angular/core';\n\nimport { ConfirmDialog, DialogButton, DialogButtonType, DialogResult } from 'life-core/component/dialog';\nimport {\n    IItem,\n    ItemListButton,\n    ItemListButtonType,\n    CreateItemEventData,\n    ItemList,\n    ItemListViewModel,\n    IItemListComponentResolver\n} from 'life-core/component/item-list';\nimport { ButtonActionType } from 'life-core/component/shared';\nimport { I18n } from 'life-core/i18n';\n\nimport { DefaultDataService, SetDefaultDataRequest } from 'ls-core/service';\nimport { PolicySubscriber } from 'ls-core/session';\nimport { Identifiable, OwnerDTO, PolicyDTO, AddressTypes, PhoneTypes } from 'ls-core/model';\nimport { OwnerComponentResolverHelper } from './owner-component-resolver.helper';\nimport { AddressUtil, PhoneUtil } from 'ls-core/util';\n\n@Component({\n    selector: 'owner-list',\n    templateUrl: './owner-list.component.html',\n    styleUrls: ['./owner-list.component.css'],\n    providers: [PolicySubscriber]\n})\nexport class OwnerListComponent extends ItemListViewModel<OwnerDTO> {\n    public title: string = 'Owners';\n\n    public policy: PolicyDTO;\n\n    @ViewChild(ItemList)\n    public refItemList: ItemList<OwnerDTO>;\n\n    private _defaultDataService: DefaultDataService;\n\n    private _confirmDialog: ConfirmDialog;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        defaultDataService: DefaultDataService,\n        confirmDialog: ConfirmDialog,\n        i18n: I18n\n    ) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.onPolicyUpdate(p);\n        });\n        this._defaultDataService = defaultDataService;\n        this._confirmDialog = confirmDialog;\n        this.editModeOnly = true;\n        this.i18n = i18n;\n        this.title = this.i18n({ value: 'Owners', id: 'policy.owner.title' });\n    }\n\n    private onPolicyUpdate(policy: PolicyDTO): void {\n        const reloading = !!this.policy;\n        this.policy = policy;\n        if (reloading) {\n            this.reloadItems();\n        }\n    }\n\n    protected get itemDataIDPropertyName(): string {\n        return 'PersonId';\n    }\n\n    protected getItemList(): ItemList<OwnerDTO> {\n        return this.refItemList;\n    }\n\n    protected getButtons(): ItemListButton[] {\n        return [\n            new ItemListButton({\n                type: ItemListButtonType.ADD,\n                actionType: ButtonActionType.DataChange\n            }),\n            new ItemListButton({\n                type: ItemListButtonType.DELETE,\n                actionType: ButtonActionType.DataChange\n            })\n        ];\n    }\n    protected getItems(): Promise<IItem<OwnerDTO>[]> {\n        const items: IItem<OwnerDTO>[] = [];\n        if (this.policy.Owners_LazyLoad == null) {\n            this.policy.Owners_LazyLoad = [];\n        }\n        this.policy.Owners_LazyLoad.forEach(owner => {\n            items.push(this.setupNewItem(owner));\n        });\n        return Promise.resolve(items);\n    }\n\n    protected getItemComponentResolver(): IItemListComponentResolver<OwnerDTO> {\n        const resolverHelper = new OwnerComponentResolverHelper();\n        return resolverHelper.getResolver(this.editModeOnly);\n    }\n\n    protected createItem(eventData: CreateItemEventData<OwnerDTO>): Promise<OwnerDTO> {\n        const owner: OwnerDTO = new OwnerDTO();\n        owner.identifier = new Identifiable();\n        const defaultDataRequest = new SetDefaultDataRequest(this.policy, owner, '');\n        return this._defaultDataService.setDefaultData(defaultDataRequest).then(data => {\n            Object.assign(owner, data.workingDTO as OwnerDTO);\n            owner.PersonTypeId = 'Person';\n            owner.isPrimaryInsured = false;\n            this.setPrimaryOwner(owner);\n            owner.Addresses_LazyLoad = [AddressUtil.createAddress(AddressTypes.RESIDENCE)];\n            owner.Phones_LazyLoad = [PhoneUtil.createPhone(PhoneTypes.HOME), PhoneUtil.createPhone(PhoneTypes.WORK)];\n            this.policy.Owners_LazyLoad.push(owner);\n            return owner;\n        });\n    }\n\n    protected setPrimaryOwner(newOwner: OwnerDTO): void {\n        const primaryOwnerExists: boolean = this.policy.Owners_LazyLoad.some(owner => {\n            return owner.SubRoleId == 'primary';\n        });\n        newOwner.SubRoleId = primaryOwnerExists ? null : newOwner.SubRoleId;\n    }\n\n    protected removeItem(item: IItem<OwnerDTO>): Promise<boolean> {\n        return this.confirmDelete().then(result => {\n            const isRemoved = result.buttonId == DialogButtonType.OK;\n            if (isRemoved) {\n                return this.executeRemove(item).then(result => {\n                    return result;\n                });\n            }\n            return Promise.resolve(isRemoved);\n        });\n    }\n\n    private executeRemove(item: IItem<OwnerDTO>): Promise<boolean> {\n        this.policy.Owners_LazyLoad.splice(this.policy.Owners_LazyLoad.indexOf(item.data), 1);\n        return Promise.resolve(true);\n    }\n\n    private confirmDelete(): Promise<DialogResult> {\n        return this._confirmDialog.open({\n            message: this.i18n({\n                value: 'Are you sure you want to delete the selected item?',\n                id: 'general.message.delete'\n            }),\n            title: this.i18n({ value: 'Delete Owner Confirmation', id: 'policy.case.owner.delete' }),\n            buttons: [\n                new DialogButton({ type: DialogButtonType.OK }),\n                new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\n            ]\n        });\n    }\n\n    protected getOwnerName(item: IItem<OwnerDTO>): string {\n        const ownerName = `${item.data.FirstName} ${item.data.LastName}`;\n        return item.data.LastName ? `owner ${ownerName}` : 'owner';\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { OwnerInfoComponent } from './owner-info.component';\r\nimport { OwnerListComponent } from './owner-list.component';\r\nimport {\r\n    OwnerPersonComponent,\r\n    OwnerCompanyComponent,\r\n    OwnerEstateComponent,\r\n    OwnerPartnershipComponent,\r\n    OwnerTrustComponent\r\n} from './type';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [\r\n        OwnerListComponent,\r\n        OwnerInfoComponent,\r\n        OwnerPersonComponent,\r\n        OwnerCompanyComponent,\r\n        OwnerEstateComponent,\r\n        OwnerPartnershipComponent,\r\n        OwnerTrustComponent\r\n    ],\r\n    exports: [OwnerListComponent, OwnerInfoComponent],\r\n    entryComponents: [\r\n        OwnerInfoComponent,\r\n        OwnerPersonComponent,\r\n        OwnerCompanyComponent,\r\n        OwnerEstateComponent,\r\n        OwnerPartnershipComponent,\r\n        OwnerTrustComponent\r\n    ]\r\n})\r\nexport class OwnerModule {}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { OwnerTypeComponent } from './owner-type.component';\r\n\r\n@Injectable()\r\nexport class BaseOwnerTypeComponent extends OwnerTypeComponent {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        this.setResolvedListData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onAddressCountryIdChange(): void {\r\n        this.listDataUpdater.updateListData({\r\n            rootDTO: this.data,\r\n            currentDTO: this.residentAddress,\r\n            dtoProperty: 'CountryStateId',\r\n            listData: this.listData\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"companyName\\\" label=\\\"Company Name\\\" i18n-label=\\\"@@policy.case.owner.companyname\\\">\\r\\n\\t\\t\\t<lf-inputtext #companyName name=\\\"owner_companyName_{{item.sequenceId}}\\\" required [(ngModel)]=\\\"data.LastName\\\" [maxLength]=\\\"250\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n\\t\\t\\tsecureComponent required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"email\\\" label=\\\"Email\\\" i18n-label=\\\"@@policy.case.owner.email\\\">\\r\\n\\t\\t\\t<lf-inputemail #email name=\\\"owner_email_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.EmailAddress\\\" [maxLength]=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n\\t\\t\\tsecureComponent></lf-inputemail>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"role\\\" label=\\\"Role\\\" i18n-label=\\\"@@policy.case.owner.role\\\">\\r\\n\\t\\t\\t<lf-select #role name=\\\"owner_role_{{item.sequenceId}}\\\" [items]=\\\"listData.SubRoleId | listItems:'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.SubRoleId\\\" \\r\\n\\t\\t\\tsecureComponent style=\\\"width:150px\\\" (change)=\\\"onOwnerRoleChange($event)\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"relation\\\" label=\\\"Relation to Insured\\\" i18n-label=\\\"@@policy.case.owner.relationshiptoinsured\\\">\\r\\n\\t\\t\\t<lf-select #relation name=\\\"owner_relation_{{item.sequenceId}}\\\" [items]=\\\"listData.RelationshipToInsured | listItems:'value':'Id' | emptyItem\\\" \\r\\n\\t\\t\\t[(ngModel)]=\\\"data.RelationshipToInsured\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.case.owner.taxid\\\">\\r\\n\\t\\t\\t<lf-inputtaxid #taxId name=\\\"owner_taxId_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.TaxId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtaxid>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"clientId\\\" label=\\\"Client ID\\\" i18n-label=\\\"@@policy.case.owner.clientid\\\">\\r\\n\\t\\t\\t<lf-inputtext #clientId name=\\\"owner_clientId_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.ClientId\\\" [maxLength]=\\\"11\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n\\t\\t\\tsecureComponent></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"address1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.owner.address\\\">\\r\\n\\t\\t\\t<lf-inputtext #address1 name=\\\"owner_address1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine1\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n\\t\\t\\tsecureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"address2\\\" label=\\\"&nbsp;\\\">\\r\\n\\t\\t\\t<lf-inputtext #address2 name=\\\"owner_address2_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine2\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n\\t\\t\\tsecureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"address3\\\" label=\\\"&nbsp;\\\">\\r\\n\\t\\t\\t<lf-inputtext #address3 name=\\\"owner_address3_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine3\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n\\t\\t\\tsecureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.owner.city\\\">\\r\\n\\t\\t\\t<lf-inputtext #city name=\\\"owner_city_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.City\\\" maxLength=\\\"30\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent \\r\\n\\t\\t\\t[autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.owner.country\\\">\\r\\n\\t\\t\\t<lf-select #country name=\\\"owner_country_{{item.sequenceId}}\\\" [items]=\\\"listData.CountryId | listItems:'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"residentAddress.CountryId\\\" \\r\\n\\t\\t\\t[disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:220px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.owner.state\\\">\\r\\n\\t\\t\\t<lf-select #state name=\\\"owner_state_{{item.sequenceId}}\\\" [items]=\\\"listData | stateListPicker: residentAddress.CountryId | emptyItem | sortList\\\" \\r\\n\\t\\t\\t[(ngModel)]=\\\"residentAddress.CountryStateId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.owner.postalcode\\\">\\r\\n\\t\\t\\t<lf-inputzipcode #postalCode name=\\\"owner_postalCode_{{item.sequenceId}}\\\" [zipCodeType]=\\\"residentAddress.CountryId | getZipCodeType\\\" [(ngModel)]=\\\"residentAddress.PostalCode\\\" \\r\\n\\t\\t\\t[disabled]=\\\"data.isPrimaryInsured\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputzipcode>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"workPhone1\\\" label=\\\"Work Phone\\\" i18n-label=\\\"@@policy.case.owner.workphone\\\">\\r\\n\\t\\t\\t<ls-inputphone #workPhone1 name=\\\"owner_workPhone1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"workPhone\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputphone>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, Injector, Injectable } from '@angular/core';\n\nimport { BaseOwnerTypeComponent } from '../base-owner-type.component';\n\n@Component({\n    selector: 'owner-company',\n    templateUrl: './owner-company.component.html'\n})\n@Injectable()\nexport class OwnerCompanyComponent extends BaseOwnerTypeComponent {\n    constructor(injector: Injector) {\n        super(injector);\n    }\n}\n","module.exports = \"<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"trustName\\\" label=\\\"Trust/Estate Name\\\" i18n-label=\\\"@@policy.case.owner.trustname\\\">\\r\\n\\t\\t\\t<lf-inputtext #trustName name=\\\"owner_trustName_{{item.sequenceId}}\\\" required [(ngModel)]=\\\"data.LastName\\\"  maxLength=\\\"250\\\" \\r\\n\\t\\t\\t[disabled]=\\\"data.isPrimaryInsured\\\" secureComponent required></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"trustDate\\\" label=\\\"Date of Trust/Estate\\\" i18n-label=\\\"@@policy.case.owner.trustdate\\\">\\r\\n\\t\\t\\t<ls-inputdatecrypted #trustDate name=\\\"owner_trustDate_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.BirthDate\\\" [maxDate]=\\\"maxTrustDate\\\" \\r\\n\\t\\t\\t[disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputdatecrypted>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"email\\\" label=\\\"Email\\\" i18n-label=\\\"@@policy.case.owner.email\\\">\\r\\n\\t\\t\\t<lf-inputemail #email name=\\\"owner_email_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.EmailAddress\\\" [maxLength]=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n\\t\\t\\tsecureComponent></lf-inputemail>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"role\\\" label=\\\"Role\\\" i18n-label=\\\"@@policy.case.owner.role\\\">\\r\\n\\t\\t\\t<lf-select #role name=\\\"owner_role_{{item.sequenceId}}\\\" [items]=\\\"listData.SubRoleId | listItems:'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.SubRoleId\\\" \\r\\n\\t\\t\\tsecureComponent style=\\\"width:150px\\\" (change)=\\\"onOwnerRoleChange($event)\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"relation\\\" label=\\\"Relation to Insured\\\" i18n-label=\\\"@@policy.case.owner.relationshiptoinsured\\\">\\r\\n\\t\\t\\t<lf-select #relation name=\\\"owner_relation_{{item.sequenceId}}\\\" [items]=\\\"listData.RelationshipToInsured | listItems:'value':'Id' | emptyItem\\\" \\r\\n\\t\\t\\t[(ngModel)]=\\\"data.RelationshipToInsured\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.case.owner.taxid\\\">\\r\\n\\t\\t\\t<lf-inputtaxid #taxId name=\\\"owner_taxId_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.TaxId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtaxid>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"clientId\\\" label=\\\"Client ID\\\" i18n-label=\\\"@@policy.case.owner.clientid\\\">\\r\\n\\t\\t\\t<lf-inputtext #clientId name=\\\"owner_clientId_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.ClientId\\\" [maxLength]=\\\"11\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n\\t\\t\\tsecureComponent></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"address1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.owner.address\\\">\\r\\n\\t\\t\\t<lf-inputtext #address1 name=\\\"owner_address1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine1\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n\\t\\t\\tsecureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"address2\\\" label=\\\"&nbsp;\\\">\\r\\n\\t\\t\\t<lf-inputtext #address2 name=\\\"owner_address2_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine2\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n\\t\\t\\tsecureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"address3\\\" label=\\\"&nbsp;\\\">\\r\\n\\t\\t\\t<lf-inputtext #address3 name=\\\"owner_address3_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine3\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n\\t\\t\\tsecureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.owner.city\\\">\\r\\n\\t\\t\\t<lf-inputtext #city name=\\\"owner_city_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.City\\\" maxLength=\\\"30\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent \\r\\n\\t\\t\\t[autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.owner.country\\\">\\r\\n\\t\\t\\t<lf-select #country name=\\\"owner_country_{{item.sequenceId}}\\\" [items]=\\\"listData.CountryId | listItems:'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"residentAddress.CountryId\\\" \\r\\n\\t\\t\\t[disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:220px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.owner.state\\\">\\r\\n\\t\\t\\t<lf-select #state name=\\\"owner_state_{{item.sequenceId}}\\\" [items]=\\\"listData | stateListPicker: residentAddress.CountryId | emptyItem | sortList\\\" [(ngModel)]=\\\"residentAddress.CountryStateId\\\" \\r\\n\\t\\t\\t[disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.owner.postalcode\\\">\\r\\n\\t\\t\\t<lf-inputzipcode #postalCode name=\\\"owner_postalCode_{{item.sequenceId}}\\\" [zipCodeType]=\\\"residentAddress.CountryId | getZipCodeType\\\" [(ngModel)]=\\\"residentAddress.PostalCode\\\" \\r\\n\\t\\t\\t[disabled]=\\\"data.isPrimaryInsured\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputzipcode>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"workPhone1\\\" label=\\\"Work Phone\\\" i18n-label=\\\"@@policy.case.owner.workphone\\\">\\r\\n\\t\\t\\t<ls-inputphone #workPhone1 name=\\\"owner_workPhone1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"workPhone\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputphone>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, Injector, Injectable } from '@angular/core';\nimport { BaseOwnerTypeComponent } from '../base-owner-type.component';\n\n@Component({\n    selector: 'owner-estate',\n    templateUrl: './owner-estate.component.html'\n})\n@Injectable()\nexport class OwnerEstateComponent extends BaseOwnerTypeComponent {\n    public maxTrustDate: Date = new Date();\n\n    constructor(injector: Injector) {\n        super(injector);\n    }\n}\n","﻿export * from './company/owner-company.component';\r\nexport * from './estate/owner-estate.component';\r\nexport * from './person/owner-person.component';\r\nexport * from './partnership/owner-partnership.component';\r\nexport * from './trust/owner-trust.component';\r\nexport * from './owner-type.component';\r\n","import { Injector, Injectable } from '@angular/core';\n\nimport { ViewModel } from 'life-core/view-model';\nimport { ICompose } from 'life-core/component/compose';\nimport { IItem } from 'life-core/component/item-list';\nimport { ListDataUpdater } from 'ls-core/service';\nimport { AddressDTO, AddressTypes, PhoneDTO, PhoneTypes, OwnerDTO } from 'ls-core/model';\nimport { AddressUtil, PhoneUtil } from 'ls-core/util';\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\n\n@Injectable()\nexport class OwnerTypeComponent extends ViewModel<OwnerDTO> implements ICompose {\n    public item: IItem<OwnerDTO>;\n    public residentAddress: AddressDTO;\n    public workPhone: PhoneDTO;\n    public homePhone: PhoneDTO;\n    private _messagingService: IMessagingService;\n\n    protected listDataUpdater: ListDataUpdater;\n\n    constructor(injector: Injector) {\n        super(injector);\n        this.listDataUpdater = injector.get(ListDataUpdater);\n        this._messagingService = injector.get(MessagingService);\n    }\n\n    public setupData(): void {\n        this.setupSubscriptions();\n    }\n\n    protected setupSubscriptions(): void {\n        this.subscriptionTracker.track(\n            this._messagingService.subscribeNewMessageOnly(OwnerChangeChannel.OwnerAsPrimaryOwner, item =>\n                this.changeToNonPrimaryOwnerWhenOtherOwnerIsSetToPrimaryOwner(item)\n            )\n        );\n    }\n\n    public setModel(model: any): void {\n        this.item = model;\n        this.data = this.item.data;\n        this.initAddress();\n    }\n\n    private initAddress(): void {\n        this.residentAddress = AddressUtil.getAddress(this.data.Addresses_LazyLoad, AddressTypes.RESIDENCE);\n        this.homePhone = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.HOME);\n        this.workPhone = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.WORK);\n    }\n\n    public changeToNonPrimaryOwnerWhenOtherOwnerIsSetToPrimaryOwner(otherSequenceId: number): void {\n        if (this.item.sequenceId != otherSequenceId && this.data.SubRoleId == PRIMARY_OWNER) {\n            this.data.SubRoleId = '';\n        }\n    }\n    public onOwnerRoleChange(selectedOption: any): void {\n        if (selectedOption.value == PRIMARY_OWNER) {\n            this._messagingService.publish(OwnerChangeChannel.OwnerAsPrimaryOwner, this.item.sequenceId);\n        }\n    }\n}\n\nexport const OwnerChangeChannel = {\n    OwnerAsPrimaryInsured: 'OwnerAsPrimaryInsuredChannel',\n    OwnerAsPrimaryOwner: 'OwnerAsPrimaryOwner'\n};\n\nconst PRIMARY_OWNER: String = 'primary';\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"title\\\" label=\\\"Title\\\" i18n-label=\\\"@@policy.case.owner.ownertitle\\\">\\r\\n            <lf-select #title name=\\\"owner_title_{{item.sequenceId}}\\\" [items]=\\\"listData.Title | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.Title\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"firstName\\\" label=\\\"First Name\\\" i18n-label=\\\"@@policy.case.owner.firstname\\\">\\r\\n            <lf-inputtext #firstName name=\\\"owner_firstName_{{item.sequenceId}}\\\" required [(ngModel)]=\\\"data.FirstName\\\" maxLength=\\\"250\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"middleName\\\" label=\\\"Middle Name\\\" i18n-label=\\\"@@policy.case.owner.middlename\\\">\\r\\n            <lf-inputtext #middleName name=\\\"owner_middleName_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.MiddleName\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input [control]=\\\"lastName\\\" label=\\\"Last Name\\\" i18n-label=\\\"@@policy.case.owner.lastname\\\">\\r\\n            <lf-inputtext #lastName name=\\\"owner_lastName_{{item.sequenceId}}\\\" required [(ngModel)]=\\\"data.LastName\\\" maxLength=\\\"250\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\">\\r\\n        <lf-form-input [control]=\\\"suffix\\\" label=\\\"Suffix\\\" i18n-label=\\\"@@policy.case.owner.suffix\\\">\\r\\n            <lf-select #suffix name=\\\"owner_suffix_{{item.sequenceId}}\\\" [items]=\\\"listData.Suffix | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.Suffix\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:70px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"birthDate\\\" label=\\\"Birth Date\\\" i18n-label=\\\"@@policy.case.owner.birthdate\\\">\\r\\n            <ls-inputdatecrypted #birthDate name=\\\"owner_birthDate_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.BirthDate\\\" [maxDate]=\\\"maxBirthDate\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent></ls-inputdatecrypted>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"email\\\" label=\\\"Email\\\" i18n-label=\\\"@@policy.case.owner.email\\\">\\r\\n            <lf-inputemail #email name=\\\"owner_email_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.EmailAddress\\\" [maxLength]=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent></lf-inputemail>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"citizenship\\\" label=\\\"Citizenship\\\" i18n-label=\\\"@@policy.case.owner.citizenshipcountry\\\">\\r\\n            <lf-select #citizenship name=\\\"owner_citizenship_{{item.sequenceId}}\\\" [items]=\\\"listData.CitizenshipCountryId | listItems: 'value':'Id' | emptyItem\\\" \\r\\n            [(ngModel)]=\\\"data.CitizenshipCountry\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"role\\\" label=\\\"Role\\\" i18n-label=\\\"@@policy.case.owner.role\\\">\\r\\n            <lf-select #role name=\\\"owner_role_{{item.sequenceId}}\\\" [items]=\\\"listData.SubRoleId | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.SubRoleId\\\" \\r\\n            secureComponent style=\\\"width:150px\\\" (change)=\\\"onOwnerRoleChange($event)\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"relation\\\" label=\\\"Relation to Insured\\\" i18n-label=\\\"@@policy.case.owner.relationshiptoinsured\\\">\\r\\n            <lf-select #relation name=\\\"owner_relation_{{item.sequenceId}}\\\" [items]=\\\"listData.RelationshipToInsured | listItems: 'value':'Id' | emptyItem\\\" \\r\\n            [(ngModel)]=\\\"data.RelationshipToInsured\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.case.owner.taxid\\\">\\r\\n            <lf-inputtaxid #taxId name=\\\"owner_taxId_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.TaxId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtaxid>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"clientId\\\" label=\\\"Client ID\\\" i18n-label=\\\"@@policy.case.owner.clientid\\\">\\r\\n            <lf-inputtext #clientId name=\\\"owner_clientId_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.ClientId\\\" [maxLength]=\\\"11\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\" *ngIf=\\\"residentAddress\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.owner.address\\\">\\r\\n            <lf-inputtext #address1 name=\\\"owner_address1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine1\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address2\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address2 name=\\\"owner_address2_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine2\\\" maxLength=\\\"100\\\" \\r\\n            maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address3\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address3 name=\\\"owner_address3_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine3\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\" *ngIf=\\\"residentAddress\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.owner.city\\\">\\r\\n            <lf-inputtext #city name=\\\"owner_city_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.City\\\" maxLength=\\\"30\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent \\r\\n            [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.owner.country\\\">\\r\\n            <lf-select #country name=\\\"owner_country_{{item.sequenceId}}\\\" [items]=\\\"listData.CountryId | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"residentAddress.CountryId\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:220px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.owner.state\\\">\\r\\n            <lf-select #state name=\\\"owner_state_{{item.sequenceId}}\\\" [items]=\\\"listData | stateListPicker: residentAddress.CountryId | emptyItem | sortList\\\" \\r\\n            [(ngModel)]=\\\"residentAddress.CountryStateId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.owner.postalcode\\\">\\r\\n            <lf-inputzipcode #postalCode name=\\\"owner_postalCode_{{item.sequenceId}}\\\" [zipCodeType]=\\\"residentAddress.CountryId | getZipCodeType\\\" [(ngModel)]=\\\"residentAddress.PostalCode\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputzipcode>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"homePhone1\\\" label=\\\"Home Phone\\\" i18n-label=\\\"@@policy.case.owner.homephone\\\">\\r\\n            <ls-inputphone #homePhone1 name=\\\"owner_homePhone1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"homePhone\\\" [extHidden]=\\\"true\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent></ls-inputphone>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"workPhone1\\\" label=\\\"Work Phone\\\" i18n-label=\\\"@@policy.case.owner.workphone\\\">\\r\\n            <ls-inputphone #workPhone1 name=\\\"owner_workPhone1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"workPhone\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputphone>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector, Injectable } from '@angular/core';\n\nimport { BaseOwnerTypeComponent } from '../base-owner-type.component';\n\n@Component({\n    selector: 'owner-partnership',\n    templateUrl: './owner-partnership.component.html'\n})\n@Injectable()\nexport class OwnerPartnershipComponent extends BaseOwnerTypeComponent {\n    public maxBirthDate: Date;\n\n    constructor(injector: Injector) {\n        super(injector);\n        this.maxBirthDate = this.setBirthDateLimit();\n    }\n\n    private setBirthDateLimit(): Date {\n        const today = new Date().getDate();\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n        return new Date(currentYear, currentMonth, today - 1);\n    }\n}\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"title\\\" label=\\\"Title\\\" i18n-label=\\\"@@policy.case.owner.ownertitle\\\">\\r\\n            <lf-select #title name=\\\"owner_title_{{item.sequenceId}}\\\" [items]=\\\"listData.Title | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.Title\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"firstName\\\" label=\\\"First Name\\\">\\r\\n            <lf-inputtext #firstName name=\\\"owner_firstName_{{item.sequenceId}}\\\" required [(ngModel)]=\\\"data.FirstName\\\" maxLength=\\\"250\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"middleName\\\" label=\\\"Middle Name\\\" i18n-label=\\\"@@policy.case.owner.middlename\\\">\\r\\n            <lf-inputtext #middleName name=\\\"owner_middleName_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.MiddleName\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input [control]=\\\"lastName\\\" label=\\\"Last Name\\\" i18n-label=\\\"@@policy.case.owner.lastname\\\">\\r\\n            <lf-inputtext #lastName name=\\\"owner_lastName_{{item.sequenceId}}\\\" required [(ngModel)]=\\\"data.LastName\\\" maxLength=\\\"250\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\">\\r\\n        <lf-form-input [control]=\\\"suffix\\\" label=\\\"Suffix\\\" i18n-label=\\\"@@policy.case.owner.suffix\\\">\\r\\n            <lf-select #suffix name=\\\"owner_suffix_{{item.sequenceId}}\\\" [items]=\\\"listData.Suffix | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.Suffix\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:70px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"birthDate\\\" label=\\\"Birth Date\\\" i18n-label=\\\"@@policy.case.owner.birthdate\\\">\\r\\n            <ls-inputdatecrypted #birthDate name=\\\"owner_birthDate_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.BirthDate\\\" [maxDate]=\\\"maxBirthDate\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputdatecrypted>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"email\\\" label=\\\"Email\\\" i18n-label=\\\"@@policy.case.owner.email\\\">\\r\\n            <lf-inputemail #email name=\\\"owner_email_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.EmailAddress\\\" [maxLength]=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputemail>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"citizenship\\\" label=\\\"Citizenship\\\" i18n-label=\\\"@@policy.case.owner.citizenshipcountry\\\">\\r\\n            <lf-select #citizenship name=\\\"owner_citizenship_{{item.sequenceId}}\\\" [items]=\\\"listData.CitizenshipCountryId | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.CitizenshipCountry\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"role\\\" label=\\\"Role\\\" i18n-label=\\\"@@policy.case.owner.role\\\">\\r\\n            <lf-select #role name=\\\"owner_role_{{item.sequenceId}}\\\" [items]=\\\"listData.SubRoleId | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.SubRoleId\\\" secureComponent style=\\\"width:150px\\\" (change)=\\\"onOwnerRoleChange($event)\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"relation\\\" label=\\\"Relation to Insured\\\" i18n-label=\\\"@@policy.case.owner.relationshiptoinsured\\\">\\r\\n            <lf-select #relation name=\\\"owner_relation_{{item.sequenceId}}\\\" [items]=\\\"listData.RelationshipToInsured | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.RelationshipToInsured\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.case.owner.taxid\\\">\\r\\n            <lf-inputtaxid #taxId name=\\\"owner_taxId_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.TaxId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtaxid>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"clientId\\\" label=\\\"Client ID\\\" i18n-label=\\\"@@policy.case.owner.clientid\\\">\\r\\n            <lf-inputtext #clientId name=\\\"owner_clientId_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.ClientId\\\" [maxLength]=\\\"11\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\" *ngIf=\\\"residentAddress\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.owner.address\\\">\\r\\n            <lf-inputtext #address1 name=\\\"owner_address1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine1\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address2\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address2 name=\\\"owner_address2_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine2\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address3\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address3 name=\\\"owner_address3_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine3\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\" *ngIf=\\\"residentAddress\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.owner.city\\\">\\r\\n            <lf-inputtext #city name=\\\"owner_city_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.City\\\" maxLength=\\\"30\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.owner.country\\\">\\r\\n            <lf-select #country name=\\\"owner_country_{{item.sequenceId}}\\\" [items]=\\\"listData.CountryId | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"residentAddress.CountryId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:220px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.owner.state\\\">\\r\\n            <lf-select #state name=\\\"owner_state_{{item.sequenceId}}\\\" [items]=\\\"listData | stateListPicker: residentAddress.CountryId | emptyItem | sortList\\\" [(ngModel)]=\\\"residentAddress.CountryStateId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.owner.postalcode\\\">\\r\\n            <lf-inputzipcode #postalCode name=\\\"owner_postalCode_{{item.sequenceId}}\\\" [zipCodeType]=\\\"residentAddress.CountryId | getZipCodeType\\\" [(ngModel)]=\\\"residentAddress.PostalCode\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputzipcode>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"homePhone1\\\" label=\\\"Home Phone\\\" i18n-label=\\\"@@policy.case.owner.homephone\\\">\\r\\n            <ls-inputphone #homePhone1 name=\\\"owner_homePhone1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"homePhone\\\" [extHidden]=\\\"true\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputphone>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"workPhone1\\\" label=\\\"Work Phone\\\" i18n-label=\\\"@@policy.case.owner.workphone\\\">\\r\\n            <ls-inputphone #workPhone1 name=\\\"owner_workPhone1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"workPhone\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputphone>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injectable, Injector } from '@angular/core';\nimport { BaseOwnerTypeComponent } from '../base-owner-type.component';\n\n@Component({\n    selector: 'owner-person',\n    templateUrl: './owner-person.component.html'\n})\n@Injectable()\nexport class OwnerPersonComponent extends BaseOwnerTypeComponent {\n    public maxBirthDate: Date;\n    constructor(injector: Injector) {\n        super(injector);\n        this.maxBirthDate = this.setBirthDateLimit();\n    }\n\n    private setBirthDateLimit(): Date {\n        const today = new Date().getDate();\n        const currentMonth = new Date().getMonth();\n        const currentYear = new Date().getFullYear();\n        return new Date(currentYear, currentMonth, today - 1);\n    }\n}\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"trustName\\\" label=\\\"Trust/Estate Name\\\" i18n-label=\\\"@@policy.case.owner.trustname\\\">\\r\\n            <lf-inputtext #trustName name=\\\"owner_trustName_{{item.sequenceId}}\\\" required [(ngModel)]=\\\"data.LastName\\\" maxLength=\\\"250\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"trustDate\\\" label=\\\"Date of Trust/Estate\\\" i18n-label=\\\"@@policy.case.owner.trustdate\\\">\\r\\n            <ls-inputdatecrypted #trustDate name=\\\"owner_trustDate_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.BirthDate\\\" [maxDate]=\\\"maxTrustDate\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputdatecrypted>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"email\\\" label=\\\"Email\\\" i18n-label=\\\"@@policy.case.owner.email\\\">\\r\\n            <lf-inputemail #email name=\\\"owner_email_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.EmailAddress\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent></lf-inputemail>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"role\\\" label=\\\"Role\\\" i18n-label=\\\"@@policy.case.owner.role\\\">\\r\\n            <lf-select #role name=\\\"owner_role_{{item.sequenceId}}\\\" [items]=\\\"listData.SubRoleId | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.SubRoleId\\\" \\r\\n            secureComponent style=\\\"width:150px\\\" (change)=\\\"onOwnerRoleChange($event)\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"relation\\\" label=\\\"Relation to Insured\\\" i18n-label=\\\"@@policy.case.owner.relationshiptoinsured\\\">\\r\\n            <lf-select #relation name=\\\"owner_relation_{{item.sequenceId}}\\\" [items]=\\\"listData.RelationshipToInsured | listItems: 'value':'Id' | emptyItem\\\" \\r\\n            [(ngModel)]=\\\"data.RelationshipToInsured\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.case.owner.taxid\\\">\\r\\n            <lf-inputtaxid #taxId name=\\\"owner_taxId_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.TaxId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtaxid>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"clientId\\\" label=\\\"Client ID\\\" i18n-label=\\\"@@policy.case.owner.clientid\\\">\\r\\n            <lf-inputtext #clientId name=\\\"owner_clientId_{{item.sequenceId}}\\\" [(ngModel)]=\\\"data.ClientId\\\" [maxLength]=\\\"11\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.owner.address\\\">\\r\\n            <lf-inputtext #address1 name=\\\"owner_address1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine1\\\" [disabled]=\\\"data.isPrimaryInsured\\\" maxLength=\\\"100\\\" \\r\\n            secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address2\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address2 name=\\\"owner_address2_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine2\\\" [disabled]=\\\"data.isPrimaryInsured\\\" maxLength=\\\"100\\\" \\r\\n            secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address3\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address3 name=\\\"owner_address3_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.AddressLine3\\\" [disabled]=\\\"data.isPrimaryInsured\\\" maxLength=\\\"100\\\" \\r\\n            secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.owner.city\\\">\\r\\n            <lf-inputtext #city name=\\\"owner_city_{{item.sequenceId}}\\\" [(ngModel)]=\\\"residentAddress.City\\\" maxLength=\\\"30\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent \\r\\n            [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.owner.country\\\">\\r\\n            <lf-select #country name=\\\"owner_country_{{item.sequenceId}}\\\" [items]=\\\"listData.CountryId | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"residentAddress.CountryId\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:220px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.owner.state\\\">\\r\\n            <lf-select #state name=\\\"owner_state_{{item.sequenceId}}\\\" [items]=\\\"listData | stateListPicker: residentAddress.CountryId | emptyItem | sortList\\\" \\r\\n            [(ngModel)]=\\\"residentAddress.CountryStateId\\\"  [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.owner.postalcode\\\">\\r\\n            <lf-inputzipcode #postalCode name=\\\"owner_postalCode_{{item.sequenceId}}\\\" [zipCodeType]=\\\"residentAddress.CountryId | getZipCodeType\\\" [(ngModel)]=\\\"residentAddress.PostalCode\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent [autocomplete]=\\\"false\\\"></lf-inputzipcode>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"workPhone1\\\" label=\\\"Work Phone\\\" i18n-label=\\\"@@policy.case.owner.workphone\\\">\\r\\n            <ls-inputphone #workPhone1 name=\\\"owner_workPhone1_{{item.sequenceId}}\\\" [(ngModel)]=\\\"workPhone\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputphone>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector, Injectable } from '@angular/core';\nimport { BaseOwnerTypeComponent } from '../base-owner-type.component';\n\n@Component({\n    selector: 'owner-trust',\n    templateUrl: './owner-trust.component.html'\n})\n@Injectable()\nexport class OwnerTrustComponent extends BaseOwnerTypeComponent {\n    public maxTrustDate: Date = new Date();\n\n    constructor(injector: Injector) {\n        super(injector);\n    }\n}\n","module.exports = \"<lf-panel header=\\\"Payment Information\\\" i18n-header=\\\"@@policy.case.payment.title\\\" panelType=\\\"primary\\\" [toggleable]=\\\"true\\\"\\r\\n stateId=\\\"panel_payment\\\" [state]=\\\"componentsState.get('panel_payment')\\\" [initCollapsed]=true secureComponent>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"modePremium\\\" label=\\\"Mode Premium\\\" i18n-label=\\\"@@policy.case.payment.modalpremium\\\">\\r\\n\\t\\t\\t\\t<lf-inputnumber #modePremium name=\\\"modePremium\\\" [(ngModel)]=\\\"data.policy.ModePremium\\\" maxLength=\\\"10\\\"\\r\\n\\t\\t\\t\\t [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"paymentMethod\\\" label=\\\"Payment Method\\\" i18n-label=\\\"@@policy.case.payment.paymentmethod\\\">\\r\\n\\t\\t\\t\\t<lf-select #paymentMethod name=\\\"paymentMethod\\\" [items]=\\\"listData.PaymentMethodCode | listItems:'value':'Id' | emptyItem\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.policy.PaymentMethodCode\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"paymentMode\\\" label=\\\"Payment Mode\\\" i18n-label=\\\"@@policy.case.payment.paymentmode\\\">\\r\\n\\t\\t\\t\\t<lf-select #paymentMode name=\\\"paymentMode\\\" [items]=\\\"listData.PaymentModeCode | listItems:'value':'Id' | emptyItem\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.policy.PaymentModeCode\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"billingDay\\\" label=\\\"Billing Day\\\" i18n-label=\\\"@@policy.case.payment.billingday\\\">\\r\\n\\t\\t\\t\\t<lf-inputnumber #billingDay name=\\\"billingDay\\\" [(ngModel)]=\\\"data.policy.BillDay\\\" [max]=\\\"maxBillingDayValue\\\"\\r\\n\\t\\t\\t\\t maxLength=\\\"10\\\" format=\\\"n0\\\" decimals=\\\"0\\\" [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"trust\\\" label=\\\"Trust\\\" i18n-label=\\\"@@policy.case.payment.trust\\\">\\r\\n\\t\\t\\t\\t<lf-select #trust name=\\\"trust\\\" [items]=\\\"listData.TrustCode | listItems:'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.policy.TrustCode\\\"\\r\\n\\t\\t\\t\\t secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"creditCardType\\\" label=\\\"Credit Card Type\\\" i18n-label=\\\"@@policy.case.payment.creditcardtype\\\">\\r\\n\\t\\t\\t\\t<lf-select #creditCardType name=\\\"creditCardType\\\" [items]=\\\"listData.CreditCardType | listItems:'value':'Id' | emptyItem\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.policy.CreditCardType\\\" (change)=\\\"onCreditCardTypeChange($event)\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"creditCardNumber\\\" label=\\\"Credit Card Number\\\" i18n-label=\\\"@@policy.case.payment.creditcardnumber\\\">\\r\\n\\t\\t\\t\\t<lf-inputcreditcard #creditCardNumber name=\\\"creditCardNumber\\\" [creditCardType]=\\\"data.policy.CreditCardType | getCreditCardType\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.policy.creditCardNumberDecrypted\\\" secureComponent [required]=\\\"isCreditCardRequired\\\"></lf-inputcreditcard>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"creditCardExpiration\\\" label=\\\"Credit Card Expiration\\\" i18n-label=\\\"@@policy.case.payment.creditcardexpiration\\\">\\r\\n\\t\\t\\t\\t<lf-inputcreditcardexpiration #creditCardExpiration name=\\\"creditCardExpiration\\\" [ngModel]=\\\"data.policy | getCreditCardExpirationFromPolicy\\\"\\r\\n\\t\\t\\t\\t (ngModelChange)=\\\"onCreditCardExpirationChange($event)\\\" #creditCardExpirationNgModel=\\\"ngModel\\\" secureComponent\\r\\n\\t\\t\\t\\t [required]=\\\"isCreditCardRequired\\\"></lf-inputcreditcardexpiration>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"cardHolderName\\\" label=\\\"Card Holder Name\\\" i18n-label=\\\"@@policy.case.payment.cardholdername\\\">\\r\\n\\t\\t\\t\\t<lf-inputtext #cardHolderName name=\\\"cardHolderName\\\" [(ngModel)]=\\\"data.policy.creditCardAccountNameDecrypted\\\"\\r\\n\\t\\t\\t\\t maxLength=\\\"175\\\" secureComponent [required]=\\\"isCreditCardRequired\\\" [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"bankAccountType\\\" label=\\\"Bank Account Type\\\" i18n-label=\\\"@@policy.case.payment.bankaccounttype\\\">\\r\\n\\t\\t\\t\\t<lf-select #bankAccountType name=\\\"bankAccountType\\\" [items]=\\\"listData.BankAccountType | listItems:'value':'Id' | emptyItem\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.policy.BankAccountType\\\" (change)=\\\"onBankAccountTypeChange($event)\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"bankTransactionNumber\\\" label=\\\"Bank Transaction Number\\\" i18n-label=\\\"@@policy.case.payment.banktransaction\\\">\\r\\n\\t\\t\\t\\t<lf-inputtext #bankTransactionNumber name=\\\"bankTransactionNumber\\\" [(ngModel)]=\\\"data.policy.bankTransactionNumberDecrypted\\\"\\r\\n\\t\\t\\t\\t maxLength=\\\"175\\\" secureComponent></lf-inputtext>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"bankName\\\" label=\\\"Bank Name\\\" i18n-label=\\\"@@policy.case.payment.bankname\\\">\\r\\n\\t\\t\\t\\t<lf-inputtext #bankName name=\\\"bankName\\\" [(ngModel)]=\\\"data.policy.BankNameOnAccount\\\" maxLength=\\\"255\\\" secureComponent></lf-inputtext>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"nameOnAccount\\\" label=\\\"Name on Bank Account\\\" i18n-label=\\\"@@policy.case.payment.nameonbankaccount\\\">\\r\\n\\t\\t\\t\\t<lf-inputtext #nameOnAccount name=\\\"nameOnAccount\\\" [(ngModel)]=\\\"data.policy.bankAccountNameDecrypted\\\" maxLength=\\\"100\\\"\\r\\n\\t\\t\\t\\t secureComponent [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"bankRoutingNumber\\\" label=\\\"Bank Routing Number\\\" i18n-label=\\\"@@policy.case.payment.bankrouting\\\">\\r\\n\\t\\t\\t\\t<lf-inputbankrouting #bankRoutingNumber name=\\\"bankRoutingNumber\\\" [(ngModel)]=\\\"data.policy.bankRountingNumberDecrypted\\\"\\r\\n\\t\\t\\t\\t maxLength=\\\"30\\\" secureComponent></lf-inputbankrouting>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"bankAccountNumber\\\" label=\\\"Bank Account Number\\\" i18n-label=\\\"@@policy.case.payment.bankaccount\\\">\\r\\n\\t\\t\\t\\t<lf-inputbankaccount #bankAccountNumber name=\\\"bankAccountNumber\\\" [(ngModel)]=\\\"data.policy.bankAccountNumberDecrypted\\\"\\r\\n\\t\\t\\t\\t [maxLength]=\\\"30\\\" secureComponent></lf-inputbankaccount>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"listBillLocation\\\" label=\\\"List Bill Location Number\\\" i18n-label=\\\"@@policy.case.payment.listbilllocationnumber\\\">\\r\\n\\t\\t\\t\\t<lf-inputnumber #listBillLocation name=\\\"listBillLocation\\\" [(ngModel)]=\\\"data.policy.ListBillLocation\\\" maxLength=\\\"20\\\"\\r\\n\\t\\t\\t\\t format=\\\"n0\\\" decimals=\\\"0\\\" [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"listBillEmployeeId\\\" label=\\\"List Bill Employee Number\\\" i18n-label=\\\"@@policy.case.payment.listbillemployeenumber\\\">\\r\\n\\t\\t\\t\\t<lf-inputtext #listBillEmployeeId name=\\\"listBillEmployeeId\\\" [(ngModel)]=\\\"data.policy.ListBillEmployeeId\\\" maxLength=\\\"20\\\"\\r\\n\\t\\t\\t\\t secureComponent></lf-inputtext>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</lf-panel>\"","import { Component, Injector, ViewChild } from '@angular/core';\nimport { NgModel } from '@angular/forms';\n\nimport { InputUtil } from 'life-core/component/input';\nimport { CrediCardExpirationDateModel } from 'life-core/component/input/inputcreditcardexpiration';\nimport { ListItem } from 'life-core/model/list.model';\nimport { ViewModel } from 'life-core/view-model';\nimport { MAX_INTEGER32 } from 'life-core/util/lang';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { CreditCardExpirationUtil } from 'ls-core/component/input/shared/creditcardexpiration.util';\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\n\n@Component({\n    selector: 'case-payment',\n    templateUrl: './case-payment.component.html',\n    providers: [PolicySubscriber]\n})\nexport class CasePaymentComponent extends ViewModel<PolicyDataModel> {\n    @ViewChild('creditCardExpirationNgModel')\n    public creditCardExpirationNgModel: NgModel;\n    public isCreditCardRequired: boolean;\n    public readonly maxBillingDayValue: number = MAX_INTEGER32;\n\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n    }\n\n    public onCreditCardTypeChange(creditCardType: ListItem): void {\n        this.resetCreditCardInfo();\n        this.updateCreditCardRequired();\n    }\n\n    public onCreditCardExpirationChange(creditCardExpiration: CrediCardExpirationDateModel): void {\n        CreditCardExpirationUtil.fromCreditCardExpirationModel(creditCardExpiration, this.data.policy);\n    }\n\n    public onBankAccountTypeChange(selectedBankAccountType: any): void {\n        const selectedBankAccountTypeValue: string = selectedBankAccountType ? selectedBankAccountType.value : null;\n        if (!selectedBankAccountTypeValue) {\n            this.resetBankAccountInfo();\n            this.resetBillInfo();\n        }\n    }\n\n    protected setupData(): void {\n        this.setResolvedListData();\n        this.updateCreditCardRequired();\n        this.initializeBillDay();\n    }\n\n    private initializeBillDay(): void {\n        if (!this.data.policy.BillDay) {\n            this.data.policy.BillDay = 0;\n        }\n    }\n\n    private updateCreditCardRequired(): void {\n        this.isCreditCardRequired = !!this.data.policy.CreditCardType;\n    }\n\n    private resetCreditCardInfo(): void {\n        this.data.policy.creditCardAccountNameDecrypted = '';\n        this.data.policy.creditCardNumberDecrypted = '';\n        this.data.policy.creditCardExpirationMonthDecrypted = '';\n        this.data.policy.creditCardExpirationYearDecrypted = '';\n        // Set the expiration date control ngModel in order to trigger UI refresh\n        InputUtil.setComponentNgModelValue(\n            this.creditCardExpirationNgModel,\n            CreditCardExpirationUtil.toCreditCardExpirationModel(this.data.policy)\n        );\n    }\n\n    private resetBankAccountInfo(): void {\n        this.data.policy.bankTransactionNumberDecrypted = '';\n        this.data.policy.BankNameOnAccount = '';\n        this.data.policy.bankAccountNameDecrypted = '';\n        this.data.policy.bankRountingNumberDecrypted = '';\n        this.data.policy.bankAccountNumberDecrypted = '';\n    }\n\n    private resetBillInfo(): void {\n        this.data.policy.ListBillLocation = '';\n        this.data.policy.ListBillEmployeeId = '';\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { CasePaymentComponent } from './case-payment.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [CasePaymentComponent],\r\n    exports: [CasePaymentComponent]\r\n})\r\nexport class CasePaymentModule {}\r\n","module.exports = \"<lf-panel header=\\\"Payor\\\" i18n-header=\\\"@@policy.case.payor.title\\\" [toggleable]=\\\"true\\\" panelType=\\\"secondary\\\" stateId=\\\"panel_payor\\\"\\r\\n [state]=\\\"componentsState.get('panel_payor')\\\" secureComponent>\\r\\n\\t<div [@fadeInOut]=\\\"data.visible\\\">\\r\\n\\t\\t<div class=\\\"itemContent\\\" [class.invalid]=\\\"data.invalid\\\">\\r\\n\\t\\t\\t<div class=\\\"payor\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t\\t\\t\\t<lf-form-input [control]=\\\"payorPrimaryInsured\\\" label=\\\"Primary Insured\\\" i18n-label=\\\"@@policy.case.payor.primaryinsured\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<lf-radiobuttongroup #payorPrimaryInsured name=\\\"payorPrimaryInsured\\\" [(ngModel)]=\\\"data.isPrimaryInsured\\\" (change)=\\\"onPrimaryInsuredAsPayorClick($event); refCompose.onModelChange()\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t secureComponent>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<lf-radiobutton name=\\\"payorPrimaryInsured\\\" [value]=true label=\\\"Yes\\\" i18n-label=\\\"@@policy.case.payor.yes\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<lf-radiobutton name=\\\"payorPrimaryInsured\\\" [value]=false label=\\\"No\\\" i18n-label=\\\"@@policy.case.payor.no\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</lf-radiobuttongroup>\\r\\n\\t\\t\\t\\t\\t\\t</lf-form-input>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t\\t\\t\\t\\t<lf-form-input [control]=\\\"partyType\\\" label=\\\"Party Type\\\" i18n-label=\\\"@@policy.case.payor.partytype\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<lf-select #partyType name=\\\"payor_partyType\\\" [items]=\\\"listData['PersonTypeId'] | listItems:'value':'Id'\\\" [(ngModel)]=\\\"data.PersonTypeId\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t (change)=\\\"onPayorTypeChange($event)\\\" [disabled]=\\\"data.isPrimaryInsured\\\" [clearable]=\\\"false\\\" secureComponent required\\r\\n\\t\\t\\t\\t\\t\\t\\t style=\\\"width:150px\\\"></lf-select>\\r\\n\\t\\t\\t\\t\\t\\t</lf-form-input>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<compose #refCompose [model]=\\\"data\\\" [componentType]=\\\"itemComponentType\\\"></compose>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</lf-panel>\"","import { Component, Injector, Injectable, Type } from '@angular/core';\n\nimport { IComponentResolver, ComponentResolver, ComponentMap } from 'life-core/util';\nimport { ItemListAnimations } from 'life-core/component/item-list';\n\nimport {\n    PayorPersonComponent,\n    PayorCompanyComponent,\n    PayorEstateComponent,\n    PayorPartnershipComponent,\n    PayorTrustComponent\n} from './type';\nimport { PolicyDTO, AddressTypes, InsuredDTO, PartyTypes, PayorSubRoleTypes } from 'ls-core/model';\nimport { PolicySubscriber } from 'ls-core/session';\nimport { PrimaryInsuredHelper } from 'business/policy/shared';\nimport { AddressUtil } from 'ls-core/util';\nimport { OptionalSectionDetailViewModel } from 'life-core/component/optional-section';\n\n@Component({\n    selector: 'payor-info',\n    templateUrl: './payor-info.component.html',\n    animations: ItemListAnimations,\n    providers: [PolicySubscriber]\n})\n@Injectable()\nexport class PayorInfoComponent extends OptionalSectionDetailViewModel {\n    public itemComponentType: Type<any>;\n\n    private _componentMapResolver: IComponentResolver<string>;\n    private _policy: PolicyDTO;\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this._policy = p;\n        });\n        this._componentMapResolver = this.getComponentMapResolver();\n    }\n\n    public setupData(): void {\n        this.initAddress();\n        this.setResolvedListData();\n        this.setInitialComponentType();\n    }\n\n    public onPrimaryInsuredAsPayorClick(event: any): void {\n        if (event) {\n            this.setPayorAsPrimaryInsured();\n        } else {\n            this.removePrimaryInsuredAsPayor();\n        }\n    }\n\n    public onPayorTypeChange(type: any): void {\n        PrimaryInsuredHelper.resetOwnerPayorDataUponOwnerPayorTypeChange(this.data);\n        this.initAddress();\n        this.setItemComponentType(type.value);\n    }\n\n    private setInitialComponentType(): void {\n        if (this.data.PersonTypeId) {\n            this.setItemComponentType(this.data.PersonTypeId);\n        } else {\n            this.setItemComponentType(PartyTypes.PERSON);\n        }\n    }\n\n    private setPayorAsPrimaryInsured(): void {\n        this.copyDataFromPrimaryInsured();\n        this.setItemComponentType(PartyTypes.PERSON);\n    }\n\n    private copyDataFromPrimaryInsured(): void {\n        const primaryInsured: InsuredDTO = PrimaryInsuredHelper.getPrimaryInsured(this._policy);\n        if (primaryInsured) {\n            this.changeManager.markObjectAsDeletedByIdentifier(this.data.identifier);\n            PrimaryInsuredHelper.copyDataFromPrimaryInsuredToNewData(primaryInsured, this.data);\n            this.data.SubRoleId = PayorSubRoleTypes.PRIMARY;\n        }\n    }\n\n    private setItemComponentType(type: string): void {\n        this.itemComponentType = this._componentMapResolver.resolve(type);\n    }\n\n    private removePrimaryInsuredAsPayor(): void {\n        this.changeManager.markObjectAsDeletedByIdentifier(this.data.identifier);\n        PrimaryInsuredHelper.removePrimaryInsuredDataFromItem(this.data);\n    }\n\n    private initAddress(): void {\n        AddressUtil.addAddressIfNotFound(this.data.Addresses_LazyLoad, AddressTypes.RESIDENCE);\n    }\n\n    private getComponentMapResolver(): IComponentResolver<string> {\n        const componentMap: ComponentMap = new ComponentMap();\n        componentMap.add(PartyTypes.COMPANY, PayorCompanyComponent);\n        componentMap.add(PartyTypes.ESTATE, PayorEstateComponent);\n        componentMap.add(PartyTypes.PARTNERSHIP, PayorPartnershipComponent);\n        componentMap.add(PartyTypes.PERSON, PayorPersonComponent);\n        componentMap.add(PartyTypes.TRUST, PayorTrustComponent);\n        return new ComponentResolver<string>(componentMap);\n    }\n}\n","module.exports = \"/* test-item-list.css */\\r\\n\\r\\n.item .itemContent {\\r\\n    padding: 0.3125rem;\\r\\n    border-radius: 4px;\\r\\n    -webkit-border-radius: 4px;\\r\\n    -moz-border-radius: 4px;\\r\\n}\\r\\n\\r\\n.item .itemContent.invalid {\\r\\n    border-color: red;\\r\\n}\\r\\n\\r\\n.bottom-margin {\\r\\n    margin: 0.3125rem;\\r\\n}\\r\\n\\r\\n.owner:hover {\\r\\n    border-color: #00467f;\\r\\n}\\r\\n\\r\\n.owner #validation-messages {\\r\\n    margin: 0 0.625rem 0.9375rem 0.625rem;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS9jYXNlL3BheW9yL3BheW9yLWxpc3QuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSx3QkFBd0I7O0FBRXhCO0lBQ0ksbUJBQW1CO0lBQ25CLG1CQUFtQjtJQUNuQiwyQkFBMkI7SUFDM0Isd0JBQXdCO0NBQzNCOztBQUVEO0lBQ0ksa0JBQWtCO0NBQ3JCOztBQUVEO0lBQ0ksa0JBQWtCO0NBQ3JCOztBQUVEO0lBQ0ksc0JBQXNCO0NBQ3pCOztBQUVEO0lBQ0ksc0NBQXNDO0NBQ3pDIiwiZmlsZSI6InNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS9jYXNlL3BheW9yL3BheW9yLWxpc3QuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi8qIHRlc3QtaXRlbS1saXN0LmNzcyAqL1xyXG5cclxuLml0ZW0gLml0ZW1Db250ZW50IHtcclxuICAgIHBhZGRpbmc6IDAuMzEyNXJlbTtcclxuICAgIGJvcmRlci1yYWRpdXM6IDRweDtcclxuICAgIC13ZWJraXQtYm9yZGVyLXJhZGl1czogNHB4O1xyXG4gICAgLW1vei1ib3JkZXItcmFkaXVzOiA0cHg7XHJcbn1cclxuXHJcbi5pdGVtIC5pdGVtQ29udGVudC5pbnZhbGlkIHtcclxuICAgIGJvcmRlci1jb2xvcjogcmVkO1xyXG59XHJcblxyXG4uYm90dG9tLW1hcmdpbiB7XHJcbiAgICBtYXJnaW46IDAuMzEyNXJlbTtcclxufVxyXG5cclxuLm93bmVyOmhvdmVyIHtcclxuICAgIGJvcmRlci1jb2xvcjogIzAwNDY3ZjtcclxufVxyXG5cclxuLm93bmVyICN2YWxpZGF0aW9uLW1lc3NhZ2VzIHtcclxuICAgIG1hcmdpbjogMCAwLjYyNXJlbSAwLjkzNzVyZW0gMC42MjVyZW07XHJcbn1cclxuIl19 */\"","module.exports = \"<lf-panel header=\\\"Payor\\\" i18n-header=\\\"@@policy.case.payor.title\\\" [toggleable]=\\\"true\\\" panelType=\\\"primary\\\" stateId=\\\"panel_payors\\\"\\r\\n [state]=\\\"componentsState.get('panel_payors')\\\" [initCollapsed]=true secureComponent>\\r\\n\\t<optional-section [dataExists]=\\\"dataExists\\\" [item]=\\\"item\\\" [itemComponentType]=\\\"itemComponentType\\\" (createItem)=\\\"createItem()\\\"\\r\\n\\t (removeItem)=\\\"removeItem()\\\" secureComponent>\\r\\n\\t</optional-section>\\r\\n</lf-panel>\"","import { Injector, Component, Type } from '@angular/core';\n\nimport { I18n } from 'life-core/i18n';\n\nimport { PolicySubscriber, AppSession } from 'ls-core/session';\nimport { Identifiable, PayorDTO, PolicyDTO, AddressTypes, AddressDTO } from 'ls-core/model';\nimport { OptionalSectionViewModel } from 'life-core/component/optional-section';\nimport { PayorInfoComponent } from 'business/policy/case/payor/payor-info.component';\n\n@Component({\n    selector: 'payor-list',\n    templateUrl: './payor-list.component.html',\n    styleUrls: ['payor-list.component.css'],\n    providers: [PolicySubscriber]\n})\nexport class PayorListComponent extends OptionalSectionViewModel<PayorDTO> {\n    public policy: PolicyDTO;\n\n    private _appSession: AppSession;\n\n    constructor(injector: Injector, policySubscriber: PolicySubscriber, i18n: I18n, appSession: AppSession) {\n        super(injector);\n        this._appSession = appSession;\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n        this.i18n = i18n;\n    }\n\n    protected setupData(): void {\n        this.updateProperties();\n    }\n\n    protected getItemComponentType(): Type<any> {\n        return PayorInfoComponent;\n    }\n\n    protected getItem(): PayorDTO {\n        return this._appSession.policyDTO.Payors_LazyLoad && this._appSession.policyDTO.Payors_LazyLoad.length > 0\n            ? this._appSession.policyDTO.Payors_LazyLoad[0]\n            : null;\n    }\n\n    protected executeRemoveItem(): void {\n        this._appSession.policyDTO.Payors_LazyLoad = [];\n    }\n\n    protected executeCreateItem(): void {\n        const payorDTO = new PayorDTO();\n        payorDTO.identifier = new Identifiable();\n        payorDTO.isPrimaryInsured = false;\n        payorDTO.PersonTypeId = 'Person';\n        payorDTO.PolicyPersonId = this.data.policy.PolicyPersonId || '';\n        const residentAddress = new AddressDTO();\n        residentAddress.AddressTypeCode = AddressTypes.RESIDENCE;\n        payorDTO.Addresses_LazyLoad = [residentAddress];\n        this._appSession.policyDTO.Payors_LazyLoad = [payorDTO];\n    }\n\n    protected getTitle(): string {\n        return this.i18n({ value: 'Payor', id: 'policy.case.payor.title' });\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { PayorInfoComponent } from './payor-info.component';\r\nimport { PayorListComponent } from 'business/policy/case/payor/payor-list.component';\r\nimport {\r\n    PayorPersonComponent,\r\n    PayorCompanyComponent,\r\n    PayorEstateComponent,\r\n    PayorPartnershipComponent,\r\n    PayorTrustComponent\r\n} from './type';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [\r\n        PayorInfoComponent,\r\n        PayorListComponent,\r\n        PayorPersonComponent,\r\n        PayorCompanyComponent,\r\n        PayorEstateComponent,\r\n        PayorPartnershipComponent,\r\n        PayorTrustComponent\r\n    ],\r\n    exports: [PayorInfoComponent, PayorListComponent],\r\n    entryComponents: [\r\n        PayorInfoComponent,\r\n        PayorPersonComponent,\r\n        PayorCompanyComponent,\r\n        PayorEstateComponent,\r\n        PayorPartnershipComponent,\r\n        PayorTrustComponent\r\n    ]\r\n})\r\nexport class PayorModule {}\r\n","export * from './payor-company/payor-company.component';\r\nexport * from './payor-estate/payor-estate.component';\r\nexport * from './payor-person/payor-person.component';\r\nexport * from './payor-partnership/payor-partnership.component';\r\nexport * from './payor-trust/payor-trust.component';\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"companyName\\\" label=\\\"Company Name\\\" i18n-label=\\\"@@policy.case.payor.companyname\\\">\\r\\n            <lf-inputtext #companyName name=\\\"payor_companyName\\\" required [(ngModel)]=\\\"data.LastName\\\" maxLength=\\\"250\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" maxLength=\\\"250\\\" secureComponent required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"relation\\\" label=\\\"Relationship to Insured\\\" i18n-label=\\\"@@policy.case.payor.relationshiptoinsured\\\">\\r\\n            <lf-select #relation name=\\\"payor_relation\\\" [items]=\\\"listData.RelationshipToInsured | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"data.RelationshipToInsured\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.case.payor.taxid\\\">\\r\\n            <lf-inputtaxid #taxId name=\\\"payor_taxId\\\" [(ngModel)]=\\\"data.TaxId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                secureComponent></lf-inputtaxid>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"clientId\\\" label=\\\"Client ID\\\" i18n-label=\\\"@@policy.case.payor.clientid\\\">\\r\\n            <lf-inputtext #clientId name=\\\"payor_clientId\\\" [(ngModel)]=\\\"data.ClientId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                [maxLength]=\\\"11\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.payor.address\\\">\\r\\n            <lf-inputtext #address1 name=\\\"payor_address1\\\" [(ngModel)]=\\\"residentAddress.AddressLine1\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address2\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address2 name=\\\"payor_address2\\\" [(ngModel)]=\\\"residentAddress.AddressLine2\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address3\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address3 name=\\\"payor_address3\\\" [(ngModel)]=\\\"residentAddress.AddressLine3\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.payor.city\\\">\\r\\n            <lf-inputtext #city name=\\\"payor_city\\\" [(ngModel)]=\\\"residentAddress.City\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                maxLength=\\\"30\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.payor.country\\\">\\r\\n            <lf-select #country name=\\\"payor_country\\\" [items]=\\\"listData.CountryId | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.CountryId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                secureComponent style=\\\"width:220px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.payor.state\\\">\\r\\n            <lf-select #state name=\\\"payor_state\\\" [items]=\\\"listData | stateListPicker: residentAddress.CountryId | emptyItem | sortList\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.CountryStateId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.payor.postalcode\\\">\\r\\n            <lf-inputzipcode #postalCode name=\\\"payor_postalCode\\\" [zipCodeType]=\\\"residentAddress.CountryId | getZipCodeType\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.PostalCode\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputzipcode>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injectable, Injector } from '@angular/core';\r\n\r\nimport { PayorTypeComponent } from '../payor-type.component';\r\n\r\n@Component({\r\n    selector: 'payor-company',\r\n    templateUrl: './payor-company.component.html'\r\n})\r\n@Injectable()\r\nexport class PayorCompanyComponent extends PayorTypeComponent {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"trustName\\\" label=\\\"Trust/Estate Name\\\" i18n-label=\\\"@@policy.case.payor.trustname\\\">\\r\\n            <lf-inputtext #trustName name=\\\"payor_trustName\\\" required [(ngModel)]=\\\"data.LastName\\\" maxLength=\\\"250\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"trustDate\\\" label=\\\"Date of Trust/Estate\\\" i18n-label=\\\"@@policy.case.payor.trustdate\\\">\\r\\n            <ls-inputdatecrypted #trustDate name=\\\"payor_trustDate\\\" [(ngModel)]=\\\"data.BirthDate\\\" [maxDate]=\\\"maxTrustDate\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputdatecrypted>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"relation\\\" label=\\\"Relationship to Insured\\\" i18n-label=\\\"@@policy.case.payor.relationshiptoinsured\\\">\\r\\n            <lf-select #relation name=\\\"payor_relation\\\" [items]=\\\"listData.RelationshipToInsured | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"data.RelationshipToInsured\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.case.payor.taxid\\\">\\r\\n            <lf-inputtaxid #taxId name=\\\"payor_taxId\\\" [(ngModel)]=\\\"data.TaxId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                secureComponent></lf-inputtaxid>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"clientId\\\" label=\\\"Client ID\\\" i18n-label=\\\"@@policy.case.payor.clientid\\\">\\r\\n            <lf-inputtext #clientId name=\\\"payor_clientId\\\" [(ngModel)]=\\\"data.ClientId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                [maxLength]=\\\"11\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.payor.address\\\">\\r\\n            <lf-inputtext #address1 name=\\\"payor_address1\\\" [(ngModel)]=\\\"residentAddress.AddressLine1\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address2\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address2 name=\\\"payor_address2\\\" [(ngModel)]=\\\"residentAddress.AddressLine2\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address3\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address3 name=\\\"payor_address3\\\" [(ngModel)]=\\\"residentAddress.AddressLine3\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.payor.city\\\">\\r\\n            <lf-inputtext #city name=\\\"payor_city\\\" [(ngModel)]=\\\"residentAddress.City\\\" maxLength=\\\"30\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.payor.country\\\">\\r\\n            <lf-select #country name=\\\"payor_country\\\" [items]=\\\"listData.CountryId | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.CountryId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                secureComponent style=\\\"width:220px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.payor.state\\\">\\r\\n            <lf-select #state name=\\\"payor_state\\\" [items]=\\\"listData | stateListPicker: residentAddress.CountryId | emptyItem | sortList\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.CountryStateId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.payor.postalcode\\\">\\r\\n            <lf-inputzipcode #postalCode name=\\\"payor_postalCode\\\" [zipCodeType]=\\\"residentAddress.CountryId | getZipCodeType\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.PostalCode\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputzipcode>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injectable, Injector } from '@angular/core';\r\n\r\nimport { PayorTypeComponent } from '../payor-type.component';\r\n\r\n@Component({\r\n    selector: 'payor-estate',\r\n    templateUrl: './payor-estate.component.html'\r\n})\r\n@Injectable()\r\nexport class PayorEstateComponent extends PayorTypeComponent {\r\n    public maxTrustDate: Date = new Date();\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"title\\\" label=\\\"Title\\\" i18n-label=\\\"@@policy.case.payor.title.title\\\">\\r\\n            <lf-select #title name=\\\"payor_title\\\" [items]=\\\"listData.Title | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.Title\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"firstName\\\" label=\\\"First Name\\\" i18n-label=\\\"@@policy.case.payor.firstname\\\">\\r\\n            <lf-inputtext #firstName name=\\\"payor_firstName\\\" required [(ngModel)]=\\\"data.FirstName\\\" maxLength=\\\"250\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent \\r\\n            required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"middleName\\\" label=\\\"Middle Name\\\" i18n-label=\\\"@@policy.case.payor.middlename\\\">\\r\\n            <lf-inputtext #middleName name=\\\"payor_middleName\\\" [(ngModel)]=\\\"data.MiddleName\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input [control]=\\\"lastName\\\" label=\\\"Last Name\\\" i18n-label=\\\"@@policy.case.payor.lastname\\\">\\r\\n            <lf-inputtext #lastName name=\\\"payor_lastName\\\" required [(ngModel)]=\\\"data.LastName\\\" maxLength=\\\"250\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent \\r\\n            required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\">\\r\\n        <lf-form-input [control]=\\\"suffix\\\" label=\\\"Suffix\\\" i18n-label=\\\"@@policy.case.payor.suffix\\\">\\r\\n            <lf-select #suffix name=\\\"payor_suffix\\\" [items]=\\\"listData.Suffix | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.Suffix\\\" [disabled]=\\\"data.isPrimaryInsured\\\" \\r\\n            secureComponent style=\\\"width:70px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"birthDate\\\" label=\\\"Birth Date\\\" i18n-label=\\\"@@policy.case.payor.birthdate\\\">\\r\\n            <ls-inputdatecrypted #birthDate name=\\\"payor_birthDate\\\" [(ngModel)]=\\\"data.BirthDate\\\" [maxDate]=\\\"maxBirthDate\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputdatecrypted>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"relation\\\" label=\\\"Relationship to Insured\\\" i18n-label=\\\"@@policy.case.payor.relation\\\">\\r\\n            <lf-select #relation name=\\\"payor_relation\\\" [items]=\\\"listData.RelationshipToInsured | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.RelationshipToInsured\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.case.payor.taxid\\\">\\r\\n            <lf-inputtaxid #taxId name=\\\"payor_taxId\\\" [(ngModel)]=\\\"data.TaxId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtaxid>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"clientId\\\" label=\\\"Client ID\\\" i18n-label=\\\"@@policy.case.payor.clientid\\\">\\r\\n            <lf-inputtext #clientId name=\\\"payor_clientId\\\" [(ngModel)]=\\\"data.ClientId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" [maxLength]=\\\"11\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\" *ngIf=\\\"residentAddress\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.payor.address\\\">\\r\\n            <lf-inputtext #address1 name=\\\"payor_address1\\\" [(ngModel)]=\\\"residentAddress.AddressLine1\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address2\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address2 name=\\\"payor_address2\\\" [(ngModel)]=\\\"residentAddress.AddressLine2\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address3\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address3 name=\\\"payor_address3\\\" [(ngModel)]=\\\"residentAddress.AddressLine3\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\" *ngIf=\\\"residentAddress\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.payor.city\\\">\\r\\n            <lf-inputtext #city name=\\\"payor_city\\\" [(ngModel)]=\\\"residentAddress.City\\\" [disabled]=\\\"data.isPrimaryInsured\\\" maxLength=\\\"30\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.payor.country\\\">\\r\\n            <lf-select #country name=\\\"payor_country\\\" [items]=\\\"listData.CountryId | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"residentAddress.CountryId\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:220px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.payor.state\\\">\\r\\n            <lf-select #state name=\\\"payor_state\\\" [items]=\\\"listData | stateListPicker: residentAddress.CountryId | emptyItem | sortList\\\" [(ngModel)]=\\\"residentAddress.CountryStateId\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.payor.postalcode\\\">\\r\\n            <lf-inputzipcode #postalCode name=\\\"payor_postalCode\\\" [zipCodeType]=\\\"residentAddress.CountryId | getZipCodeType\\\" [(ngModel)]=\\\"residentAddress.PostalCode\\\" \\r\\n            [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputzipcode>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injectable, Injector } from '@angular/core';\r\n\r\nimport { PayorTypeComponent } from '../payor-type.component';\r\n\r\n@Component({\r\n    selector: 'payor-partnership',\r\n    templateUrl: './payor-partnership.component.html'\r\n})\r\n@Injectable()\r\nexport class PayorPartnershipComponent extends PayorTypeComponent {\r\n    public maxBirthDate: Date;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.maxBirthDate = this.setBirthDateLimit();\r\n    }\r\n\r\n    private setBirthDateLimit(): Date {\r\n        const today = new Date().getDate();\r\n        const currentMonth = new Date().getMonth();\r\n        const currentYear = new Date().getFullYear();\r\n        return new Date(currentYear, currentMonth, today - 1);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"title\\\" label=\\\"Title\\\" i18n-label=\\\"@@policy.case.payor.title.title\\\">\\r\\n            <lf-select #title name=\\\"payor_title\\\" [items]=\\\"listData.Title | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"data.Title\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"firstName\\\" label=\\\"First Name\\\" i18n-label=\\\"@@policy.case.payor.firstname\\\">\\r\\n            <lf-inputtext #firstName name=\\\"payor_firstName\\\" required [(ngModel)]=\\\"data.FirstName\\\" maxLength=\\\"250\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"middleName\\\" label=\\\"Middle Name\\\" i18n-label=\\\"@@policy.case.payor.middlename\\\">\\r\\n            <lf-inputtext #middleName name=\\\"payor_middleName\\\" [(ngModel)]=\\\"data.MiddleName\\\" maxLength=\\\"100\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input [control]=\\\"lastName\\\" label=\\\"Last Name\\\" i18n-label=\\\"@@policy.case.payor.lastname\\\">\\r\\n            <lf-inputtext #lastName name=\\\"payor_lastName\\\" required [(ngModel)]=\\\"data.LastName\\\" maxLength=\\\"250\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-1\\\">\\r\\n        <lf-form-input [control]=\\\"suffix\\\" label=\\\"Suffix\\\" i18n-label=\\\"@@policy.case.payor.suffix\\\">\\r\\n            <lf-select #suffix name=\\\"payor_suffix\\\" [items]=\\\"listData.Suffix | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"data.Suffix\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:70px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"birthDate\\\" label=\\\"Birth Date\\\" i18n-label=\\\"@@policy.case.payor.birthdate\\\">\\r\\n            <ls-inputdatecrypted #birthDate name=\\\"payor_birthDate\\\" [(ngModel)]=\\\"data.BirthDate\\\" [maxDate]=\\\"maxBirthDate\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputdatecrypted>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"relation\\\" label=\\\"Relationship to Insured\\\" i18n-label=\\\"@@policy.case.payor.relation\\\">\\r\\n            <lf-select #relation name=\\\"payor_relation\\\" [items]=\\\"listData.RelationshipToInsured | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"data.RelationshipToInsured\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.case.payor.taxid\\\">\\r\\n            <lf-inputtaxid #taxId name=\\\"payor_taxId\\\" [(ngModel)]=\\\"data.TaxId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                secureComponent></lf-inputtaxid>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"clientId\\\" label=\\\"Client ID\\\" i18n-label=\\\"@@policy.case.payor.clientid\\\">\\r\\n            <lf-inputtext #clientId name=\\\"payor_clientId\\\" [(ngModel)]=\\\"data.ClientId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                [maxLength]=\\\"11\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\" *ngIf=\\\"residentAddress\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.payor.address\\\">\\r\\n            <lf-inputtext #address1 name=\\\"payor_address1\\\" [(ngModel)]=\\\"residentAddress.AddressLine1\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address2\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address2 name=\\\"payor_address2\\\" [(ngModel)]=\\\"residentAddress.AddressLine2\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address3\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address3 name=\\\"payor_address3\\\" [(ngModel)]=\\\"residentAddress.AddressLine3\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\" *ngIf=\\\"residentAddress\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.payor.city\\\">\\r\\n            <lf-inputtext #city name=\\\"payor_city\\\" [(ngModel)]=\\\"residentAddress.City\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                maxLength=\\\"30\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.payor.country\\\">\\r\\n            <lf-select #country name=\\\"payor_country\\\" [items]=\\\"listData.CountryId | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.CountryId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                secureComponent style=\\\"width:220px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.payor.state\\\">\\r\\n            <lf-select #state name=\\\"payor_state\\\" [items]=\\\"listData | stateListPicker: residentAddress.CountryId | emptyItem | sortList\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.CountryStateId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.payor.postalcode\\\">\\r\\n            <lf-inputzipcode #postalCode name=\\\"payor_postalCode\\\" [zipCodeType]=\\\"residentAddress.CountryId | getZipCodeType\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.PostalCode\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputzipcode>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injectable, Injector } from '@angular/core';\r\n\r\nimport { PayorTypeComponent } from '../payor-type.component';\r\n\r\n@Component({\r\n    selector: 'payor-person',\r\n    templateUrl: './payor-person.component.html'\r\n})\r\n@Injectable()\r\nexport class PayorPersonComponent extends PayorTypeComponent {\r\n    public maxBirthDate: Date;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.maxBirthDate = this.setBirthDateLimit();\r\n    }\r\n\r\n    private setBirthDateLimit(): Date {\r\n        const today = new Date().getDate();\r\n        const currentMonth = new Date().getMonth();\r\n        const currentYear = new Date().getFullYear();\r\n        return new Date(currentYear, currentMonth, today - 1);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"trustName\\\" label=\\\"Trust/Estate Name\\\" i18n-label=\\\"@@policy.case.payor.trustname\\\">\\r\\n            <lf-inputtext #trustName name=\\\"payor_trustName\\\" required [(ngModel)]=\\\"data.LastName\\\" maxLength=\\\"250\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"trustDate\\\" label=\\\"Date of Trust/Estate\\\" i18n-label=\\\"@@policy.case.payor.trustdate\\\">\\r\\n            <ls-inputdatecrypted #trustDate name=\\\"payor_trustDate\\\" [(ngModel)]=\\\"data.BirthDate\\\" [maxDate]=\\\"maxTrustDate\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></ls-inputdatecrypted>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"relation\\\" label=\\\"Relationship to Insured\\\" i18n-label=\\\"@@policy.case.payor.relationshiptoinsured\\\">\\r\\n            <lf-select #relation name=\\\"payor_relation\\\" [items]=\\\"listData.RelationshipToInsured | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"data.RelationshipToInsured\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.case.payor.taxid\\\">\\r\\n            <lf-inputtaxid #taxId name=\\\"payor_taxId\\\" [(ngModel)]=\\\"data.TaxId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                secureComponent></lf-inputtaxid>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"clientId\\\" label=\\\"Client ID\\\" i18n-label=\\\"@@policy.case.payor.clientid\\\">\\r\\n            <lf-inputtext #clientId name=\\\"payor_clientId\\\" [(ngModel)]=\\\"data.ClientId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                [maxLength]=\\\"11\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address1\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.payor.address\\\">\\r\\n            <lf-inputtext #address1 name=\\\"payor_address1\\\" [(ngModel)]=\\\"residentAddress.AddressLine1\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address2\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address2 name=\\\"payor_address2\\\" [(ngModel)]=\\\"residentAddress.AddressLine2\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"address3\\\" label=\\\"&nbsp;\\\">\\r\\n            <lf-inputtext #address3 name=\\\"payor_address3\\\" [(ngModel)]=\\\"residentAddress.AddressLine3\\\" maxLength=\\\"100\\\"\\r\\n                [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.payor.city\\\">\\r\\n            <lf-inputtext #city name=\\\"payor_city\\\" [(ngModel)]=\\\"residentAddress.City\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                maxLength=\\\"300\\\" secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.payor.country\\\">\\r\\n            <lf-select #country name=\\\"payor_country\\\" [items]=\\\"listData.CountryId | listItems:'value':'Id' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.CountryId\\\" [disabled]=\\\"data.isPrimaryInsured\\\"\\r\\n                secureComponent style=\\\"width:220px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.payor.state\\\">\\r\\n            <lf-select #state name=\\\"payor_state\\\" [items]=\\\"listData | stateListPicker: residentAddress.CountryId | emptyItem | sortList\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.CountryStateId\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent style=\\\"width:150px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.payor.postalcode\\\">\\r\\n            <lf-inputzipcode #postalCode name=\\\"payor_postalCode\\\" [zipCodeType]=\\\"residentAddress.CountryId | getZipCodeType\\\"\\r\\n                [(ngModel)]=\\\"residentAddress.PostalCode\\\" [disabled]=\\\"data.isPrimaryInsured\\\" secureComponent></lf-inputzipcode>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injectable, Injector } from '@angular/core';\r\nimport { PayorTypeComponent } from '../payor-type.component';\r\n\r\n@Component({\r\n    selector: 'payor-trust',\r\n    templateUrl: './payor-trust.component.html'\r\n})\r\n@Injectable()\r\nexport class PayorTrustComponent extends PayorTypeComponent {\r\n    public maxTrustDate: Date = new Date();\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { ViewModel } from 'life-core/view-model';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { IItem } from 'life-core/component/item-list';\r\nimport { ListItem } from 'life-core/model';\r\nimport { ListDataUpdater } from 'ls-core/service';\r\nimport { AddressDTO, AddressTypes, PayorDTO } from 'ls-core/model';\r\nimport { AddressUtil } from 'ls-core/util/collection/address.util';\r\n\r\n@Injectable()\r\nexport class PayorTypeComponent extends ViewModel<PayorDTO> implements ICompose {\r\n    public item: IItem<PayorDTO>;\r\n    public residentAddress: AddressDTO;\r\n\r\n    protected listDataUpdater: ListDataUpdater;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.listDataUpdater = injector.get(ListDataUpdater);\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        this.data = model;\r\n        this.initAddress();\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        this.setResolvedListData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onAddressCountryIdChange(item: ListItem): void {\r\n        this.listDataUpdater.updateListData({\r\n            rootDTO: this.data,\r\n            currentDTO: this.residentAddress,\r\n            dtoProperty: 'CountryStateId',\r\n            listData: this.listData\r\n        });\r\n    }\r\n\r\n    private initAddress(): void {\r\n        this.residentAddress = AddressUtil.getAddress(this.data.Addresses_LazyLoad, AddressTypes.RESIDENCE);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"owner\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"companyCodeName\\\" label=\\\"Name\\\" i18n-label=\\\"@@policy.case.TPA.name\\\">\\r\\n                <lf-select #companyCodeName name=\\\"companyCodeName\\\" [items]=\\\"listData.TpaCode | listItems:'value':'Id'\\\" [(ngModel)]=\\\"data.TpaCode\\\"\\r\\n                    (change)=\\\"onTpaNameChange($event)\\\" [clearable]=\\\"false\\\" secureComponent style=\\\"width:150px\\\"container=\\\"body\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"tpaDataExists\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [controls]=\\\"[addressLine1, addressLine2, addressLine3]\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.case.TPA.address\\\">\\r\\n                    <lf-statictext #addressLine1 name=\\\"addressLine1\\\" [value]=\\\"businessAddress.AddressLine1\\\" secureComponent></lf-statictext>\\r\\n                    <lf-statictext #addressLine2 name=\\\"addressLine2\\\" [value]=\\\"businessAddress.AddressLine2\\\" secureComponent></lf-statictext>\\r\\n                    <lf-statictext #addressLine3 name=\\\"addressLine3\\\" [value]=\\\"businessAddress.AddressLine3\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"city\\\" label=\\\"City\\\" i18n-label=\\\"@@policy.case.TPA.city\\\">\\r\\n                    <lf-statictext #city name=\\\"city\\\" [value]=\\\"businessAddress.City\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"country\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.case.TPA.country\\\">\\r\\n                    <lf-statictext #country name=\\\"country\\\" [value]=\\\"countryName\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.case.TPA.state\\\">\\r\\n                    <lf-statictext #state name=\\\"state\\\" [value]=\\\"stateName\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"postalCode\\\" label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.case.TPA.postalcode\\\">\\r\\n                    <lf-statictext #postalCode name=\\\"postalCode\\\" [value]=\\\"businessAddress.PostalCode\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"tpaAcronym\\\" label=\\\"TPA Acronym\\\" i18n-label=\\\"@@policy.case.association.companycode\\\">\\r\\n                    <lf-statictext #tpaAcronym name=\\\"tpaAcronym\\\" [value]=\\\"data.TpaCode\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"taxId\\\" label=\\\"Tax Id\\\" i18n-label=\\\"@@policy.case.TPA.taxid\\\">\\r\\n                    <lf-statictext #taxId name=\\\"taxId\\\" [value]=\\\"data.TaxId | taxIdMask\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"phoneNumber\\\" label=\\\"Phone Number\\\" i18n-label=\\\"@@policy.case.TPA.phonenumber\\\">\\r\\n                    <lf-statictext #phoneNumber name=\\\"phoneNumber\\\" [value]=\\\"workPhone | lsPhone\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"faxNumber\\\" label=\\\"Fax Number\\\" i18n-label=\\\"@@policy.case.TPA.faxnumber\\\">\\r\\n                    <lf-statictext #faxNumber name=\\\"faxNumber\\\" [value]=\\\"faxPhone | lsPhone\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"email\\\" label=\\\"Email\\\" i18n-label=\\\"@@policy.case.TPA.email\\\">\\r\\n                    <lf-statictext #email name=\\\"email\\\" [value]=\\\"data.EmailAddress\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"contactName\\\" label=\\\"Contact Name\\\" i18n-label=\\\"@@policy.case.TPA.contactname\\\">\\r\\n                    <lf-statictext #contactName name=\\\"contactName\\\" [value]=\\\"fullName\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-3\\\">\\r\\n                <lf-form-input [control]=\\\"terminationDate\\\" label=\\\"Termination Date\\\" i18n-label=\\\"@@policy.case.TPA.terminationdate\\\">\\r\\n                    <lf-statictext #terminationDate name=\\\"terminationDate\\\" [value]=\\\"data.ExpirationDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\n\nimport { OptionalSectionDetailViewModel } from 'life-core/component/optional-section';\n\nimport { AppSession } from 'ls-core/session/app-session';\nimport { AddressDTO, PhoneDTO, AddressTypes, PhoneTypes, PolicyDTO } from 'ls-core/model';\nimport { SavePolicyDataDelegate } from 'ls-core/service';\nimport { AddressUtil, PhoneUtil } from 'ls-core/util';\nimport { NameUtil } from 'life-core/util';\n\nimport { TPADataResolver } from '../tpa-data.resolver';\n\n@Component({\n    selector: 'tpa-info',\n    templateUrl: './tpa-info.component.html'\n})\nexport class TPAInfoComponent extends OptionalSectionDetailViewModel {\n    public businessAddress: AddressDTO;\n    public workPhone: PhoneDTO;\n    public faxPhone: PhoneDTO;\n    public countryName: string;\n    public stateName: string;\n    public tpaDataExists: boolean;\n    public fullName: string;\n    private _appSession: AppSession;\n    private _tpaResolver: TPADataResolver;\n\n    constructor(injector: Injector, tpaDataResolver: TPADataResolver, appSession: AppSession) {\n        super(injector);\n        this._appSession = appSession;\n        this._tpaResolver = tpaDataResolver;\n        this.businessAddress = new AddressDTO();\n    }\n\n    public onTpaNameChange(selectedTpa: any): void {\n        if (selectedTpa && selectedTpa.value) {\n            this.setTpaCodeValue(selectedTpa.value);\n            this.resolveTPAData();\n        } else {\n            this.resetTpaCodeValue();\n            this.setTpaDataFlag();\n            this.resetTpaCodeInAppsession();\n        }\n    }\n\n    protected setupData(): void {\n        this.setResolvedListData();\n        this.setTpaDataFlag();\n        if (this.tpaDataExists) {\n            this.setLazyLoadProperties();\n            this.formatContactName();\n        }\n    }\n\n    protected getDataToSave(): PolicyDTO {\n        return this.data.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n\n    private tpaDataExist(): boolean {\n        return !!this.data.TpaCode;\n    }\n\n    private setTpaDataFlag(): void {\n        this.tpaDataExists = this.tpaDataExist();\n    }\n\n    private resetTpaCodeValue(): void {\n        this.data.TpaCode = null;\n    }\n\n    private resetTpaCodeInAppsession(): void {\n        this._appSession.policyDTO.TpaCode = null;\n    }\n\n    private setTpaCodeValue(selectedTpaCode: string): void {\n        this._appSession.policyDTO.TpaCode = selectedTpaCode;\n    }\n\n    private resolveTPAData(): void {\n        this._tpaResolver.directResolve().then(result => {\n            this.setTpaData(result);\n            this.setLazyLoadProperties();\n            this.setTpaDataFlag();\n            this.formatContactName();\n        });\n    }\n\n    private setTpaData(result: any): void {\n        this.data = result;\n    }\n\n    private setLazyLoadProperties(): void {\n        this.initializeAddressAndPhoneLazyLoadsIfEmpty();\n        this.setAddressAndPhoneData();\n        this.setCountryAndState();\n    }\n\n    private initializeAddressAndPhoneLazyLoadsIfEmpty(): void {\n        if (!this.data.Addresses_LazyLoad) {\n            this.data.Addresses_LazyLoad = new Array<AddressDTO>();\n        }\n        if (!this.data.Phones_LazyLoad) {\n            this.data.Phones_LazyLoad = new Array<PhoneDTO>();\n        }\n    }\n\n    private setAddressAndPhoneData(): void {\n        AddressUtil.addAddressIfNotFound(this.data.Addresses_LazyLoad, AddressTypes.BUSINESS);\n        this.businessAddress = AddressUtil.getAddress(this.data.Addresses_LazyLoad, AddressTypes.BUSINESS);\n        PhoneUtil.addPhoneIfNotFound(this.data.Phones_LazyLoad, PhoneTypes.WORK);\n        this.workPhone = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.WORK);\n        PhoneUtil.addPhoneIfNotFound(this.data.Phones_LazyLoad, PhoneTypes.FAX);\n        this.faxPhone = PhoneUtil.getPhone(this.data.Phones_LazyLoad, PhoneTypes.FAX);\n    }\n\n    private setCountryAndState(): void {\n        if (this.businessAddress.CountryId) {\n            this.countryName = this.listData.CountryId.find(\n                address => address.Id === this.businessAddress.CountryId\n            ).value;\n        }\n        if (this.businessAddress.CountryStateId) {\n            this.stateName = this.listData.CountryStateId.find(\n                address => address.Id === this.businessAddress.CountryStateId\n            ).value;\n        }\n    }\n\n    private formatContactName(): void {\n        const firstName = this.data.ContactFirstName;\n        const lastName = this.data.ContactLastName;\n        this.fullName = NameUtil.getFullName({ firstName, lastName });\n    }\n}\n","﻿import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { IDefaultConstructor } from 'life-core/util/lang/object.util';\r\n\r\nimport { BaseModel, Identifiable, TPADTO } from 'ls-core/model';\r\nimport { ExpandTreeType, NTree } from 'ls-core/service/load-bypk';\r\nimport { DataCollectionNames } from 'ls-core/model';\r\n\r\nimport { BaseDTOPKDataResolver } from 'business/policy/shared/data-resolver/base-pk-data.resolver';\r\n\r\n@Injectable()\r\nexport class TPADataResolver extends BaseDTOPKDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected get tpa(): TPADTO {\r\n        return this.resolvedData;\r\n    }\r\n\r\n    protected getExpandTree(): ExpandTreeType {\r\n        const TPADTOLoadTree = new NTree<string>('');\r\n        {\r\n            TPADTOLoadTree.AddChildren([DataCollectionNames.Addresses, DataCollectionNames.Phones]);\r\n        }\r\n        return TPADTOLoadTree;\r\n    }\r\n\r\n    protected getWorkingIdentifier(): Identifiable {\r\n        const identifier = new Identifiable();\r\n        identifier.ClassNameMapped = TPADTO.Type;\r\n        identifier.ObjectID = this.appSession.policyDTO.TpaCode;\r\n        return identifier;\r\n    }\r\n\r\n    protected getCreateObjectType<TPADTO>(): IDefaultConstructor<any> {\r\n        return TPADTO;\r\n    }\r\n\r\n    protected getDataFromResponse(response: any): BaseModel {\r\n        return response.dtoObject;\r\n    }\r\n}\r\n","module.exports = \"<lf-panel header=\\\"Third Party Administrator\\\" i18n-header=\\\"@@policy.case.TPA.title\\\" panelType=\\\"primary\\\" [toggleable]=\\\"true\\\"\\r\\n    stateId=\\\"panel_tpa\\\" [state]=\\\"componentsState.get('panel_tpa')\\\" [initCollapsed]=true secureComponent>\\r\\n    <optional-section [dataExists]=\\\"dataExists\\\" [item]=\\\"item\\\" [itemComponentType]=\\\"itemComponentType\\\" (createItem)=\\\"createItem()\\\"\\r\\n        (removeItem)=\\\"removeItem()\\\" secureComponent>\\r\\n    </optional-section>\\r\\n</lf-panel>\"","import { Component, Injector, Injectable, Type } from '@angular/core';\r\n\r\nimport { OptionalSectionViewModel } from 'life-core/component/optional-section';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { Identifiable, AddressDTO, AddressTypes, TPADTO, PhoneDTO, PhoneTypes } from 'ls-core/model';\r\n\r\nimport { TPAInfoComponent } from './info/tpa-info.component';\r\n\r\nimport { TPADataResolver } from './tpa-data.resolver';\r\n\r\n@Component({\r\n    selector: 'tpa',\r\n    templateUrl: './tpa.component.html',\r\n    providers: [PolicySubscriber]\r\n})\r\n@Injectable()\r\nexport class TPAComponent extends OptionalSectionViewModel<TPADTO> {\r\n    private _tpaResolver: TPADataResolver;\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber, i18n: I18n, resolver: TPADataResolver) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        this._tpaResolver = resolver;\r\n        policySubscriber.subscribe(this, p => {\r\n            this.data.policy = p;\r\n            if (this.isTPAExist()) {\r\n                this.resolveTPAData();\r\n            }\r\n        });\r\n    }\r\n\r\n    protected getItemComponentType(): Type<any> {\r\n        return TPAInfoComponent;\r\n    }\r\n\r\n    protected getItem(): TPADTO {\r\n        return this.data.TPA;\r\n    }\r\n\r\n    private resolveTPAData(): void {\r\n        this._tpaResolver.directResolve().then(result => {\r\n            this.data.TPA = result;\r\n            this.updateProperties();\r\n        });\r\n    }\r\n\r\n    protected executeCreateItem(): void {\r\n        const tpa = new TPADTO();\r\n        tpa.identifier = new Identifiable();\r\n        tpa.TpaCode = this.data.policy.TpaCode || '';\r\n        const businessAddress = new AddressDTO();\r\n        businessAddress.AddressTypeCode = AddressTypes.BUSINESS;\r\n        tpa.Addresses_LazyLoad = [businessAddress];\r\n        const workPhone = new PhoneDTO();\r\n        workPhone.PhoneTypeCode = PhoneTypes.WORK;\r\n        tpa.Phones_LazyLoad = [workPhone];\r\n        this.data.TPA = tpa;\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return this.i18n({ value: 'Third Party Administrator', id: 'policy.case.tpa.title' });\r\n    }\r\n\r\n    //fake item, no need to delete on server\r\n    protected updateDeletedObjectArray(item: TPADTO): void {}\r\n\r\n    protected executeRemoveItem(): void {\r\n        this.data.TPA = null;\r\n        this.data.policy.TpaCode = null;\r\n        this.changeManager.setIsDirty(true);\r\n    }\r\n\r\n    private isTPAExist(): boolean {\r\n        return this.data.policy.TpaCode;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { TPAComponent } from './tpa.component';\r\nimport { TPAInfoComponent } from './info/tpa-info.component';\r\nimport { TPADataResolver } from './tpa-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [TPAComponent, TPAInfoComponent],\r\n    exports: [TPAComponent],\r\n    entryComponents: [TPAInfoComponent],\r\n    providers: [TPADataResolver]\r\n})\r\nexport class TPAModule {}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\n@Injectable()\r\nexport class CaseAttachedDocumentsListColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.getReassignCaseGridColumns();\r\n        return this.columns;\r\n    }\r\n\r\n    private getReassignCaseGridColumns(): void {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Name', id: 'policy.documents.attachments.grid.name' }),\r\n            field: CaseAttachmentsListFields.FileName,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created On', id: 'policy.documents.attachments.grid.createdon' }),\r\n            field: CaseAttachmentsListFields.CreateDate,\r\n            width: 20,\r\n            valueFormatter: params => this._lsCellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Last Modified On',\r\n                id: 'policy.documents.attachments.grid.lastmodifiedon'\r\n            }),\r\n            field: CaseAttachmentsListFields.LastModifiedDate,\r\n            width: 20,\r\n            valueFormatter: params => this._lsCellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n    }\r\n}\r\n\r\nconst CaseAttachmentsListFields = {\r\n    FileName: 'FileName',\r\n    CreateDate: 'CreateDate',\r\n    LastModifiedDate: 'LastModifiedDate'\r\n};\r\n","module.exports = \"<div class=\\\"row\\\" style=\\\"flex-direction:  column;\\\">\\r\\n    <div class=\\\"row\\\" style=\\\"justify-content: space-between;\\\">\\r\\n        <label i18n=\\\"@@policy.documents.attachments.section.attacheddocs\\\">Attached Documents</label>\\r\\n        <div class=\\\"pb-1\\\">\\r\\n            <lf-button id=\\\"openDocumentButton\\\" label=\\\"View\\\" i18n-label=\\\"@@View\\\" (onClick)='onViewButtonClick()'\\r\\n                secureComponent styleClass=\\\"btn btn-primary\\\" [disabled]=\\\"isViewBtnDisabled\\\"></lf-button>\\r\\n        </div>\\r\\n    </div>\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{width: '100%', height: '180px'}\\\" (rowClicked)=\\\"onRowClicked($event)\\\" [gridOptions]=\\\"gridOptions\\\"\\r\\n        rowSelection=\\\"single\\\"></data-grid>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</div>\\r\\n<hr>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { MessagingService } from 'life-core/messaging';\r\nimport { IGridColumnsBuilder, DataGridRowNumber } from 'life-core/component/grid';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { LSFileProxyDTO } from 'ls-core/model';\r\nimport { OpenURLDelegate } from 'ls-core/handler/open-url-delegate';\r\n\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared';\r\nimport { CaseAttachedDocumentsListColumnsBuilder } from './attached-documents-columns.builder';\r\nimport { CaseAttachmentChannels } from 'business/policy/documents/case-attachments.channel';\r\n\r\n@Component({\r\n    selector: 'attached-documents',\r\n    templateUrl: 'attached-documents.component.html',\r\n    providers: [PolicySubscriber, CaseAttachedDocumentsListColumnsBuilder, OpenURLDelegate]\r\n})\r\nexport class CaseAttachedDocuments extends BasePolicyGridViewModel<LSFileProxyDTO> {\r\n    public isViewBtnDisabled: boolean;\r\n\r\n    private _messagingService: MessagingService;\r\n    private _attachmentURL: string;\r\n    private _gridColumnsBuilder: IGridColumnsBuilder;\r\n    private _attachedDocumentsList: LSFileProxyDTO[];\r\n    private _openURLDelegate: OpenURLDelegate;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        caseAttachedDocumentsListColumnsBuilder: CaseAttachedDocumentsListColumnsBuilder,\r\n        messagingService: MessagingService,\r\n        openURLDelegate: OpenURLDelegate\r\n    ) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = caseAttachedDocumentsListColumnsBuilder;\r\n        this._messagingService = messagingService;\r\n        this._openURLDelegate = openURLDelegate;\r\n        this._attachedDocumentsList = [];\r\n        this.registerHandlers();\r\n    }\r\n\r\n    public onRowClicked($event: any): void {\r\n        super.onRowClicked($event);\r\n        if ($event.data.FileNavURL) {\r\n            this.setTemplateUrl($event.data.FileNavURL);\r\n            this.disableViewButton(false);\r\n        }\r\n    }\r\n\r\n    public onViewButtonClick(): void {\r\n        if (this._attachmentURL) {\r\n            this._openURLDelegate.openURL(this._attachmentURL);\r\n        }\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedData('caseAttachments');\r\n        this._attachedDocumentsList = this.data.caseAttachments.attachementList;\r\n        this.gridOptions = this.getGridOptions();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.disableViewButton(true);\r\n        this.rowCount = this._attachedDocumentsList.length;\r\n    }\r\n\r\n    protected loadItems(): LSFileProxyDTO[] {\r\n        return this._attachedDocumentsList;\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: LSFileProxyDTO): any {\r\n        return data.FileNavURL;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n\r\n    protected getGridMinRows(): number {\r\n        return DataGridRowNumber.Medium;\r\n    }\r\n\r\n    private setTemplateUrl(url: string): void {\r\n        this._attachmentURL = url;\r\n    }\r\n\r\n    private disableViewButton(disable: boolean): void {\r\n        this.isViewBtnDisabled = disable;\r\n    }\r\n\r\n    private registerHandlers(): void {\r\n        this.subscriptionTracker.track(\r\n            this._messagingService.subscribe(CaseAttachmentChannels.AttachedDocument, attachedDocument => {\r\n                this._attachedDocumentsList.push(attachedDocument);\r\n                this.refreshGrid();\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { Injectable, Injector, SkipSelf, Optional } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class AttachmentsAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const authorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.ATTACHMENT_ADD]\r\n        );\r\n\r\n        this.authorizationData.componentLevel['editDocumentButton'] = authorizationLevel;\r\n        this.authorizationData.componentLevel['attachDocumentButton'] = authorizationLevel;\r\n        this.authorizationData.componentLevel['deleteDocumentButton'] = authorizationLevel;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class CaseAttachmentsMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['System Message'];\r\n    }\r\n}\r\n","export class CaseAttachmentRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.CaseAttachementRequest, LifeSuite.UIServiceDTO';\r\n    public policyID: number;\r\n    public errMsg: string;\r\n}\r\n","export const CaseAttachmentChannels = {\r\n    AttachedDocument: 'attached-document'\r\n};","module.exports = \"<div class=\\\"col-12\\\">\\r\\n    <attached-documents></attached-documents>\\r\\n    <documents-for-attachment></documents-for-attachment>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { SecondaryTabHostViewModel } from 'life-core/component';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { AttachmentsAuthorizationProvider } from 'business/policy/documents/attachments/attachments-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'case-attachments',\r\n    templateUrl: './case-attachments.component.html',\r\n    providers: [{ provide: AuthorizationProvider, useClass: AttachmentsAuthorizationProvider }]\r\n})\r\nexport class CaseAttachmentsComponent extends SecondaryTabHostViewModel {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedData('caseAttachments');\r\n        return Promise.resolve();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { CaseAttachmentsComponent } from './case-attachments.component';\r\nimport { CaseAttachedDocuments } from './attached-documents/attached-documents.component';\r\nimport { CaseDocumentsForAttachment } from './documents-for-attachment/documents-for-attachment.component';\r\nimport { CaseAttachmentsResolver } from './case-attachments.resolver';\r\nimport { CaseAttachmentsMetaDataResolver } from './case-attachments-metadata.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [CaseAttachmentsComponent, CaseAttachedDocuments, CaseDocumentsForAttachment],\r\n    providers: [CaseAttachmentsResolver, CaseAttachmentsMetaDataResolver]\r\n})\r\nexport class CaseAttachmentsModule {}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods } from 'ls-core/service';\r\nimport { BaseViewDataResolver } from 'ls-core/view-model';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\n\r\nimport { CaseAttachmentRequest } from './case-attachments-request';\r\n\r\n@Injectable()\r\nexport class CaseAttachmentsResolver extends BaseViewDataResolver {\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getServiceParams(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.CASE_ATTACHEMENT_SERVICE,\r\n            serviceMethod: UIServiceMethods.DO_PROCESS,\r\n            requestPayload: this.getRequestPayload()\r\n        });\r\n    }\r\n\r\n    private getRequestPayload(): CaseAttachementGetFileListRequest {\r\n        const request = new CaseAttachementGetFileListRequest();\r\n        request.policyID = this._appSession.policyId;\r\n        return request;\r\n    }\r\n}\r\n\r\nclass CaseAttachementGetFileListRequest extends CaseAttachmentRequest {\r\n    public readonly $type: string =\r\n        'life.ls.ui.ria.dto.requests.CaseAttachementGetFileListRequest, LifeSuite.UIServiceDTO';\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\n@Injectable()\r\nexport class CaseDocumentsForAttachmentListColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.getReassignCaseGridColumns();\r\n        return this.columns;\r\n    }\r\n\r\n    private getReassignCaseGridColumns(): void {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Name', id: 'policy.documents.attachments.grid.name' }),\r\n            field: CaseAttachmentsListFields.FileName,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created On', id: 'policy.documents.attachments.grid.createdon' }),\r\n            field: CaseAttachmentsListFields.CreateDate,\r\n            width: 20,\r\n            valueFormatter: params => this._lsCellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Last Modified On',\r\n                id: 'policy.documents.attachments.grid.lastmodifiedon'\r\n            }),\r\n            field: CaseAttachmentsListFields.LastModifiedDate,\r\n            width: 20,\r\n            valueFormatter: params => this._lsCellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n    }\r\n}\r\n\r\nconst CaseAttachmentsListFields = {\r\n    FileName: 'FileName',\r\n    CreateDate: 'CreateDate',\r\n    LastModifiedDate: 'LastModifiedDate'\r\n};\r\n","module.exports = \"<div class=\\\"row\\\" style=\\\"flex-direction:  column;\\\">\\r\\n    <div class=\\\"row\\\" style=\\\"justify-content: space-between;\\\">\\r\\n        <label i18n=\\\"@@policy.documents.attachments.section.docsforattachment\\\">Documents for Attachment</label>\\r\\n        <div class=\\\"pb-1\\\">\\r\\n            <lf-button id=\\\"editDocumentButton\\\" name=\\\"editDocumentButton\\\" (onClick)=\\\"editDocument()\\\" label=\\\"Edit\\\"\\r\\n                i18n-label=\\\"@@general.button.label.edit\\\" secureComponent styleClass=\\\"btn btn-primary\\\" [disabled]=\\\"disableEditButton\\\"></lf-button>\\r\\n            <lf-button id=\\\"attachDocumentButton\\\" name=\\\"attachDocumentButton\\\" (onClick)=\\\"attachDocument()\\\" label=\\\"Attach\\\"\\r\\n                i18n-label=\\\"@@policy.documents.attachments.button.attach\\\" secureComponent styleClass=\\\"btn btn-primary\\\"\\r\\n                [disabled]=\\\"disableAttachButton\\\"></lf-button>\\r\\n            <lf-button id=\\\"deleteDocumentButton\\\" name=\\\"deleteDocumentButton\\\" (onClick)=\\\"deleteDocument()\\\" label=\\\"Delete\\\"\\r\\n                i18n-label=\\\"@@general.button.label.delete\\\" secureComponent styleClass=\\\"btn btn-primary\\\" [disabled]=\\\"disableDeleteButton\\\"></lf-button>\\r\\n        </div>\\r\\n    </div>\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{width: '100%', height: '180px'}\\\" (rowClicked)=\\\"onRowClicked($event)\\\" [gridOptions]=\\\"gridOptions\\\"\\r\\n        rowSelection=\\\"single\\\"></data-grid>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { DialogButtonType, DialogButton, ConfirmDialog, DialogResult } from 'life-core/component';\r\nimport { MessagingService } from 'life-core/messaging';\r\nimport { IGridColumnsBuilder, DataGridRowNumber } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { PolicySubscriber, AppSession } from 'ls-core/session';\r\nimport { LSFileProxyDTO } from 'ls-core/model';\r\nimport { OpenURLDelegate } from 'ls-core/handler/open-url-delegate';\r\n\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared';\r\nimport { CaseAttachmentChannels } from 'business/policy/documents/attachments/case-attachments.channel';\r\nimport { CaseDocumentsForAttachmentListColumnsBuilder } from './documents-for-attachment-columns.builder';\r\nimport { CaseDocumentsForAttachmentService } from './service-requests/case-documents-for-attachment.service';\r\nimport { CaseAttachmentsResponse } from './service-requests/case-documents-for-attachment.service';\r\nimport { MetadataUtil } from 'ls-core/util';\r\nconst FILE_SAVE_PROGRESS_STATUS = 1;\r\n@Component({\r\n    selector: 'documents-for-attachment',\r\n    templateUrl: 'documents-for-attachment.component.html',\r\n    providers: [\r\n        PolicySubscriber,\r\n        OpenURLDelegate,\r\n        CaseDocumentsForAttachmentListColumnsBuilder,\r\n        CaseDocumentsForAttachmentService\r\n    ]\r\n})\r\nexport class CaseDocumentsForAttachment extends BasePolicyGridViewModel<LSFileProxyDTO> {\r\n    public disableAttachButton: boolean;\r\n    public disableEditButton: boolean;\r\n    public disableDeleteButton: boolean;\r\n    public file: LSFileProxyDTO;\r\n\r\n    private _confirmDialog: ConfirmDialog;\r\n    private _appSession: AppSession;\r\n    private _attachmentURL: string;\r\n    private _messagingService: MessagingService;\r\n    private _gridColumnsBuilder: IGridColumnsBuilder;\r\n    private _workInProgressList: LSFileProxyDTO[];\r\n    private _caseDocumentsForAttachmentService: CaseDocumentsForAttachmentService;\r\n    private _openURLDelegate: OpenURLDelegate;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        caseDocumentsForAttachmentListColumnsBuilder: CaseDocumentsForAttachmentListColumnsBuilder,\r\n        caseDocumentsForAttachmentService: CaseDocumentsForAttachmentService,\r\n        confirmDialog: ConfirmDialog,\r\n        appSession: AppSession,\r\n        messagingService: MessagingService,\r\n        openURLDelegate: OpenURLDelegate,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n        this._gridColumnsBuilder = caseDocumentsForAttachmentListColumnsBuilder;\r\n        this._caseDocumentsForAttachmentService = caseDocumentsForAttachmentService;\r\n        this._confirmDialog = confirmDialog;\r\n        this._messagingService = messagingService;\r\n        this._openURLDelegate = openURLDelegate;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedData('caseAttachments');\r\n        this.setResolvedMetaData();\r\n        this._workInProgressList = this.data.caseAttachments.workInProgressList;\r\n        this.gridOptions = this.getGridOptions();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onRowClicked($event: any): void {\r\n        super.onRowClicked($event);\r\n        this.file = $event.data;\r\n        this.disableDeleteButton = false;\r\n        this.setTemplateUrl(this.file.FileNavURL);\r\n        this.disableEditAttachButtons(this.file != null && this.file.SaveInProgress == FILE_SAVE_PROGRESS_STATUS);\r\n    }\r\n\r\n    public editDocument(): void {\r\n        this._openURLDelegate.openURL(this._attachmentURL);\r\n    }\r\n\r\n    public deleteDocument(): void {\r\n        this.showDeleteDocumentConfirmDialog().then(dialogResult => {\r\n            if (dialogResult.buttonId == DialogButtonType.OK) {\r\n                this.onDeleteDocumentConfirmed();\r\n            }\r\n        });\r\n    }\r\n\r\n    public attachDocument(): void {\r\n        this._caseDocumentsForAttachmentService\r\n            .attachDocuments(this._appSession.policyId, this.file)\r\n            .then((result: CaseAttachmentsResponse) => {\r\n                if (result.success) {\r\n                    this.publishAttachedFile();\r\n                }\r\n            });\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this._messagingService.closeChannel(CaseAttachmentChannels.AttachedDocument);\r\n        super.ngOnDestroy();\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: LSFileProxyDTO): any {\r\n        return data.FileNavURL;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n\r\n    protected getGridMinRows(): number {\r\n        return DataGridRowNumber.Medium;\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.disableActionButtons();\r\n        this.setGridRowCount();\r\n    }\r\n\r\n    protected loadItems(): LSFileProxyDTO[] {\r\n        return this._workInProgressList;\r\n    }\r\n\r\n    private disableActionButtons(): void {\r\n        this.disableDeleteButton = true;\r\n        this.disableEditButton = true;\r\n        this.disableAttachButton = true;\r\n    }\r\n\r\n    private setGridRowCount(): void {\r\n        this.rowCount = this._workInProgressList.length;\r\n    }\r\n\r\n    private disableEditAttachButtons(disable: boolean): void {\r\n        this.disableEditButton = disable;\r\n        this.disableAttachButton = disable;\r\n    }\r\n\r\n    private showDeleteDocumentConfirmDialog(): Promise<DialogResult> {\r\n        return this._confirmDialog.open({\r\n            message: MetadataUtil.getLabelByValue(this.listData['System Message'], 'AttachmentDeleteMessage'),\r\n            title: this.i18n({ value: 'Confirm Document Removal', id: 'policy.case.document.attachmentDeleteHeader' }),\r\n            buttons: [\r\n                new DialogButton({ type: DialogButtonType.OK }),\r\n                new DialogButton({ type: DialogButtonType.CANCEL })\r\n            ]\r\n        });\r\n    }\r\n\r\n    private onDeleteDocumentConfirmed(): any {\r\n        this._caseDocumentsForAttachmentService\r\n            .deleteDocuments(this._appSession.policyId, this.file)\r\n            .then((result: CaseAttachmentsResponse) => {\r\n                if (result.success) {\r\n                    this.refreshDocumentsForAttachment();\r\n                }\r\n            });\r\n    }\r\n\r\n    private setTemplateUrl(url: string): void {\r\n        this._attachmentURL = url;\r\n    }\r\n\r\n    private publishAttachedFile(): void {\r\n        this._messagingService.publish(CaseAttachmentChannels.AttachedDocument, this.file);\r\n        this.refreshDocumentsForAttachment();\r\n    }\r\n\r\n    private refreshDocumentsForAttachment(): void {\r\n        this._workInProgressList.splice(this._workInProgressList.indexOf(this.file), 1);\r\n        this.refreshGrid();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods, DataService } from 'ls-core/service';\r\nimport { LSFileProxyDTO } from 'ls-core/model';\r\n\r\nimport { CaseAttachmentRequest } from '../../../attachments/case-attachments-request';\r\n\r\n@Injectable()\r\nexport class CaseDocumentsForAttachmentService {\r\n    private _dataService: DataService;\r\n\r\n    constructor(dataService: DataService) {\r\n        this._dataService = dataService;\r\n    }\r\n\r\n    /* Delete Documents */\r\n    public deleteDocuments(policyId: number, file: LSFileProxyDTO): Promise<CaseAttachmentsResponse> {\r\n        const serviceParams = this.getDeleteDocumentsServiceParams(policyId, file);\r\n        return this._dataService.updateData(serviceParams).then(response => {\r\n            return response.responsePayload as CaseAttachmentsResponse;\r\n        });\r\n    }\r\n\r\n    /* Attach Documents */\r\n    public attachDocuments(policyId: number, file: LSFileProxyDTO): Promise<CaseAttachmentsResponse> {\r\n        const serviceParams = this.getAttachDocumentsServiceParams(policyId, file);\r\n        return this._dataService.updateData(serviceParams).then(response => {\r\n            return response.responsePayload as CaseAttachmentsResponse;\r\n        });\r\n    }\r\n\r\n    private getDeleteDocumentsServiceParams(policyId: number, file: LSFileProxyDTO): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.CASE_ATTACHEMENT_SERVICE,\r\n            serviceMethod: UIServiceMethods.DO_PROCESS,\r\n            requestPayload: this.buildDeleteDocumentsRequest(policyId, file)\r\n        });\r\n    }\r\n\r\n    private buildDeleteDocumentsRequest(policyId: number, file: LSFileProxyDTO): CaseAttachmentDeleteFileRequest {\r\n        const request = new CaseAttachmentDeleteFileRequest();\r\n        request.policyID = policyId;\r\n        request.file = file;\r\n        return request;\r\n    }\r\n\r\n    private getAttachDocumentsServiceParams(policyId: number, file: LSFileProxyDTO): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.CASE_ATTACHEMENT_SERVICE,\r\n            serviceMethod: UIServiceMethods.DO_PROCESS,\r\n            requestPayload: this.buildAttachDocumentsRequest(policyId, file)\r\n        });\r\n    }\r\n\r\n    private buildAttachDocumentsRequest(policyId: number, file: LSFileProxyDTO): CaseAttachmentAttachFileRequest {\r\n        const request = new CaseAttachmentAttachFileRequest();\r\n        request.policyID = policyId;\r\n        request.file = file;\r\n        return request;\r\n    }\r\n}\r\n\r\nclass CaseAttachmentAttachFileRequest extends CaseAttachmentRequest {\r\n    public readonly $type: string =\r\n        'life.ls.ui.ria.dto.requests.CaseAttachementAttachFileRequest, LifeSuite.UIServiceDTO';\r\n    public file: LSFileProxyDTO;\r\n}\r\n\r\nclass CaseAttachmentDeleteFileRequest extends CaseAttachmentAttachFileRequest {\r\n    public readonly $type: string =\r\n        'life.ls.ui.ria.dto.requests.CaseAttachementDeleteFileRequest, LifeSuite.UIServiceDTO';\r\n}\r\n\r\nexport class CaseAttachmentsResponse {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.responses.CaseAttachementResponse, LifeSuite.UIServiceDTO';\r\n    public success: boolean;\r\n    public attachementList: LSFileProxyDTO[];\r\n    public workInProgressList: LSFileProxyDTO[];\r\n}\r\n","export * from './case-attachments.module';\r\nexport * from './case-attachments-request';\r\nexport * from './case-attachments.component';\r\nexport * from './case-attachments-metadata.resolver';\r\nexport * from './case-attachments.resolver';\r\n","export const CaseAttachmentChannels = {\r\n    AttachedDocument: 'attached-document'\r\n};","module.exports = \"<div class=\\\"lf-page-header\\\" i18n=\\\"@@policy.page.title.documents\\\">Documents</div>\\r\\n<lf-routedTabView id=\\\"tabViewDocuments\\\" tabViewType=\\\"secondary\\\" [tabs]=\\\"tabsData$\\\" [initialSelectedIndex]=\\\"initialSelectedIndex$\\\"\\r\\n controlClose=\\\"true\\\" (onClose)=\\\"onTabClose($event)\\\" (onChange)=\\\"onTabSelectionChange($event)\\\">\\r\\n\\r\\n\\t<router-outlet></router-outlet>\\r\\n\\r\\n</lf-routedTabView>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\nimport { SecondaryTabViewHostViewModel, TabDescriptor } from 'life-core/component';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { LsTabDescriptorFactory } from 'ui/tabview';\r\n\r\nimport { DocumentsAuthorizationProvider } from './documents-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'case-documents',\r\n    templateUrl: './case-documents.component.html',\r\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: DocumentsAuthorizationProvider }]\r\n})\r\nexport class CaseDocumentsComponent extends SecondaryTabViewHostViewModel {\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.data.policy = p;\r\n        });\r\n    }\r\n\r\n    protected get tabViewId(): string {\r\n        return `Documents-${this.data.policy.PolicyId}`;\r\n    }\r\n\r\n    protected getStaticTabs(): TabDescriptor[] {\r\n        const policyId = ConvertUtil.toNumber(this.data.policy.PolicyId);\r\n        const tabDescriptorFactory = this.tabDescriptorFactory as LsTabDescriptorFactory;\r\n        const tabDocumentsAttachment = tabDescriptorFactory.createSecondaryTabDocumentsAttachment(policyId);\r\n        const tabDocumentsTemplate = tabDescriptorFactory.createSecondaryTabDocumentsTemplate(policyId);\r\n        const tabs = [tabDocumentsAttachment, tabDocumentsTemplate];\r\n        this.setupTabViewAuthorization(tabs);\r\n        tabDocumentsAttachment.selected = true;\r\n        return tabs;\r\n    }\r\n\r\n    protected setupTabViewAuthorization(tabs: Array<TabDescriptor>): void {\r\n        const tabAuthorizationLevel = this.authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.data.policy,\r\n            [PrivilegeType.CASE]\r\n        );\r\n        tabs.forEach(tab => (tab.authorizationLevel = tabAuthorizationLevel));\r\n    }\r\n\r\n    protected getDataToSave(): any {\r\n        return this.data.policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { CaseDocumentsComponent } from './case-documents.component';\r\nimport { CaseTemplatesModule } from './templates';\r\nimport { CaseAttachmentsModule } from './attachments';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule, CaseTemplatesModule, CaseAttachmentsModule],\r\n    declarations: [CaseDocumentsComponent]\r\n})\r\nexport class CaseDocumentsModule {}\r\n","import { Injectable, Injector, SkipSelf, Optional } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class DocumentsAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const authorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.ATTACHMENT]\r\n        );\r\n        this.authorizationData.defaultLevel = authorizationLevel;\r\n    }\r\n}\r\n","export * from './attachments';\r\nexport * from './templates';\r\nexport * from './case-documents.component';\r\nexport * from './case-documents.module';\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class CaseTemplatesMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['correspondence_configuration'];\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-6\\\" *ngIf=\\\"showApplicantList\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"applicant\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.documents.templates.applicant\\\">\\r\\n\\t\\t\\t<lf-select #applicant [(ngModel)]=\\\"activeApplicantId\\\" [ngModelOptions]=\\\"{standalone: true}\\\" [items]=\\\"applicantList\\\"\\r\\n\\t\\t\\t (change)=\\\"onApplicantChange($event)\\\" [actionType]=\\\"applicantDropdownActionType\\\" secureComponent [clearable]=\\\"false\\\"\\r\\n\\t\\t\\t style=\\\"width:200px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-12\\\">\\r\\n\\t\\t<template-list [caseTemplates]=\\\"caseTemplates\\\"></template-list>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\nimport { ListItem } from 'life-core/model';\r\nimport { SecondaryTabHostViewModel } from 'life-core/component';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { DropdownActionType } from 'life-core/component/input';\r\n\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { PolicyDTO, InsuredDTO, LSFileProxyDTO } from 'ls-core/model';\r\n\r\nimport { ActiveApplicantHelper, ApplicantListHelper } from 'business/policy/shared';\r\nimport { CaseTemplatesService } from './case-templates.service';\r\nimport { MetadataUtil } from 'ls-core/util';\r\nimport { CaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Component({\r\n    selector: 'case-templates',\r\n    templateUrl: './case-templates.component.html',\r\n    providers: [\r\n        PolicySubscriber,\r\n        CaseTemplatesService,\r\n        { provide: AuthorizationProvider, useClass: CaseAuthorizationProvider }\r\n    ]\r\n})\r\nexport class CaseTemplatesComponent extends SecondaryTabHostViewModel {\r\n    public applicantList: ListItem[];\r\n    public activeApplicantId: number;\r\n    public caseTemplates: LSFileProxyDTO[];\r\n    public showApplicantList: boolean;\r\n    public applicantDropdownActionType: DropdownActionType = DropdownActionType.Presentation;\r\n\r\n    private _activeApplicant: InsuredDTO;\r\n    private _policy: PolicyDTO;\r\n    private _activeApplicantHelper: ActiveApplicantHelper;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _caseTemplatesService: CaseTemplatesService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        activeApplicantHelper: ActiveApplicantHelper,\r\n        applicantListHelper: ApplicantListHelper,\r\n        policySubscriber: PolicySubscriber,\r\n        caseTemplatesService: CaseTemplatesService\r\n    ) {\r\n        super(injector);\r\n        this._activeApplicantHelper = activeApplicantHelper;\r\n        this._applicantListHelper = applicantListHelper;\r\n        this._caseTemplatesService = caseTemplatesService;\r\n        this.caseTemplates = [];\r\n        policySubscriber.subscribe(this, p => {\r\n            this._policy = p;\r\n        });\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setApplicantList();\r\n        this.setActiveApplicant();\r\n        this.getCaseTemplates();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.setResolvedMetaData();\r\n        this.setApplicantVisibility();\r\n    }\r\n\r\n    public onApplicantChange(selectedApplicant: any): void {\r\n        this._activeApplicantHelper.setActiveApplicantId(selectedApplicant.value);\r\n        this.setActiveApplicant();\r\n        this.getCaseTemplates();\r\n    }\r\n\r\n    protected getDataToSave(): any {\r\n        return this._policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n\r\n    private getCaseTemplates(): void {\r\n        this._caseTemplatesService\r\n            .getCaseTemplates(\r\n                ConvertUtil.toNumber(this._policy.PolicyId),\r\n                ConvertUtil.toNumber(this._activeApplicant.PolicyPersonId)\r\n            )\r\n            .then(response => {\r\n                this.setupCaseTemplates(response.fileList as LSFileProxyDTO[]);\r\n            });\r\n    }\r\n\r\n    private setApplicantList(): void {\r\n        this.applicantList = this._applicantListHelper.getApplicantList(this._policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    private setActiveApplicant(): void {\r\n        this.activeApplicantId = this._applicantListHelper.getActiveApplicantIdOrDefault(\r\n            this._policy.Insureds_LazyLoad\r\n        );\r\n        this._activeApplicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    private setupCaseTemplates(caseTemplates: LSFileProxyDTO[]): void {\r\n        this.caseTemplates = caseTemplates;\r\n    }\r\n\r\n    private setApplicantVisibility(): void {\r\n        const singleApplicantCorrespondence = MetadataUtil.getLabelByValue(\r\n            this.listData['correspondence_configuration'],\r\n            'CRSPND_SINGLE_APPLICANT'\r\n        );\r\n        this.showApplicantList =\r\n            singleApplicantCorrespondence != null && singleApplicantCorrespondence.toUpperCase() == 'TRUE';\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { CaseTemplatesComponent } from 'business/policy/documents/templates/case-templates.component';\r\nimport { CaseTemplateList } from 'business/policy/documents/templates/list';\r\nimport { CaseTemplatesMetaDataResolver } from './case-templates-metadata.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [CaseTemplatesComponent, CaseTemplateList],\r\n    providers: [CaseTemplatesMetaDataResolver]\r\n})\r\nexport class CaseTemplatesModule {}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods, DataService } from 'ls-core/service';\r\nimport { LSFileProxyDTO } from 'ls-core/model';\r\n\r\nimport { CaseAttachmentRequest } from './../attachments/case-attachments-request';\r\n\r\n@Injectable()\r\nexport class CaseTemplatesService {\r\n    private _dataService: DataService;\r\n\r\n    constructor(dataService: DataService) {\r\n        this._dataService = dataService;\r\n    }\r\n\r\n    private getCaseTemplatesServiceParams(policyId: number, insuredId: number): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.CASE_TEMPLATES_SERVICE,\r\n            serviceMethod: UIServiceMethods.DO_PROCESS,\r\n            requestPayload: this.buildCaseTemplatesRequest(policyId, insuredId)\r\n        });\r\n    }\r\n\r\n    private buildCaseTemplatesRequest(policyId: number, insuredId: number): CaseTemplateRequest {\r\n        const request = new CaseTemplateRequest();\r\n        request.errMsg = '';\r\n        request.insuredId = insuredId;\r\n        request.policyID = policyId;\r\n        return request;\r\n    }\r\n\r\n    public getCaseTemplates(policyId: number, insuredId: number): Promise<CaseTemplateResponse> {\r\n        const serviceParams = this.getCaseTemplatesServiceParams(policyId, insuredId);\r\n        return this._dataService.updateData(serviceParams).then(response => {\r\n            return response.responsePayload as CaseTemplateResponse;\r\n        });\r\n    }\r\n}\r\n\r\nclass CaseTemplateRequest extends CaseAttachmentRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.CaseTemplatesGetFilesRequest, LifeSuite.UIServiceDTO';\r\n    public insuredId: number;\r\n}\r\n\r\nclass CaseTemplateResponse {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.responses.CaseTemplatesResponse, LifeSuite.UIServiceDTO';\r\n    public success: boolean;\r\n    public fileList: LSFileProxyDTO[];\r\n}\r\n","export * from './case-templates.component';\r\nexport * from './case-templates.module';\r\nexport * from './case-templates-metadata.resolver';\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\n@Injectable()\r\nexport class CaseTemplateListColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.getReassignCaseGridColumns();\r\n        return this.columns;\r\n    }\r\n\r\n    private getReassignCaseGridColumns(): void {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Name', id: 'policy.documents.attachments.grid.name' }),\r\n            field: CaseTemplateListFields.FileName,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created On', id: 'policy.documents.attachments.grid.createdon' }),\r\n            field: CaseTemplateListFields.CreateDate,\r\n            width: 20,\r\n            valueFormatter: params => this._lsCellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Last Modified On',\r\n                id: 'policy.documents.attachments.grid.lastmodifiedon'\r\n            }),\r\n            field: CaseTemplateListFields.LastModifiedDate,\r\n            width: 20,\r\n            valueFormatter: params => this._lsCellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n    }\r\n}\r\n\r\nconst CaseTemplateListFields = {\r\n    FileName: 'FileName',\r\n    CreateDate: 'CreateDate',\r\n    LastModifiedDate: 'LastModifiedDate'\r\n};\r\n","module.exports = \"<div class=\\\"row\\\" style=\\\"height: 450px;flex-direction:  column;\\\">\\r\\n    <div class=\\\"row d-flex justify-content-between\\\">\\r\\n        <label i18n=\\\"@@policy.case.document.template\\\">Templates</label>\\r\\n        <div class=\\\"pb-1\\\">\\r\\n            <lf-button id=\\\"openDocumentButton\\\" (onClick)=\\\"onGenerateDocument()\\\" label=\\\"Generate Document\\\" i18n-label=\\\"@@policy.documents.templates.button.generatedoc\\\"\\r\\n                styleClass=\\\"btn btn-primary\\\" secureComponent [disabled]=\\\"isGenerateDocumentBtnDisabled\\\"></lf-button>\\r\\n        </div>\\r\\n    </div>\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{width: '100%', height: gridOptions.height}\\\" (rowClicked)=\\\"onRowClicked($event)\\\"\\r\\n        [gridOptions]=\\\"gridOptions\\\" rowSelection=\\\"single\\\"></data-grid>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</div>\"","import { Component, Input, Injector } from '@angular/core';\r\n\r\nimport { IGridColumnsBuilder, DataGridRowNumber } from 'life-core/component/grid';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { LSFileProxyDTO } from 'ls-core/model';\r\nimport { OpenURLDelegate } from 'ls-core/handler/open-url-delegate';\r\n\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared';\r\nimport { CaseTemplateListColumnsBuilder } from './case-template-list-columns.builder';\r\n\r\n@Component({\r\n    selector: 'template-list',\r\n    templateUrl: './case-template-list.component.html',\r\n    providers: [PolicySubscriber, CaseTemplateListColumnsBuilder, OpenURLDelegate]\r\n})\r\nexport class CaseTemplateList extends BasePolicyGridViewModel<LSFileProxyDTO> {\r\n    public isGenerateDocumentBtnDisabled: boolean;\r\n\r\n    private _templateURL: string;\r\n    private _gridColumnsBuilder: IGridColumnsBuilder;\r\n    private _caseTemplates: LSFileProxyDTO[];\r\n    private _openURLDelegate: OpenURLDelegate;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        caseTemplateListColumnsBuilder: CaseTemplateListColumnsBuilder,\r\n        openURLDelegate: OpenURLDelegate\r\n    ) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = caseTemplateListColumnsBuilder;\r\n        this._openURLDelegate = openURLDelegate;\r\n    }\r\n\r\n    @Input()\r\n    public set caseTemplates(value: LSFileProxyDTO[]) {\r\n        this._caseTemplates = value;\r\n        this.refreshGrid();\r\n    }\r\n\r\n    public get caseTemplates(): LSFileProxyDTO[] {\r\n        return this._caseTemplates;\r\n    }\r\n\r\n    public onRowClicked($event: any): void {\r\n        super.onRowClicked($event);\r\n        this.setTemplateUrl($event.data.FileNavURL);\r\n        this.disableGenerateDocumentButton(false);\r\n    }\r\n\r\n    public onGenerateDocument(): void {\r\n        this._openURLDelegate.openURL(this._templateURL);\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.disableGenerateDocumentButton(true);\r\n    }\r\n\r\n    protected loadItems(): LSFileProxyDTO[] {\r\n        return this._caseTemplates;\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: LSFileProxyDTO): any {\r\n        return data.FileNavURL;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n\r\n    protected getGridMinRows(): number {\r\n        return DataGridRowNumber.Medium;\r\n    }\r\n\r\n    private setTemplateUrl(url: string): void {\r\n        this._templateURL = url;\r\n    }\r\n\r\n    private disableGenerateDocumentButton(disable: boolean): void {\r\n        this.isGenerateDocumentBtnDisabled = disable;\r\n    }\r\n}\r\n","export * from './case-template-list.component';\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { TabDefLab, TabDefMVR, TabDefRx, TabDefMedicalCondition, TabDefMIB, TabDefParamedical } from 'ui/tabview';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class EvidenceAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const evidenceAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.EVIDENCE]\r\n        );\r\n\r\n        const tabLabAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.EVIDENCELAB]\r\n        );\r\n\r\n        const tabMIBAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.EVIDENCEMIB]\r\n        );\r\n\r\n        const tabMVRAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.EVIDENCEMVR]\r\n        );\r\n\r\n        const tabRXAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.EVIDENCERX]\r\n        );\r\n\r\n        const tabMedicalConditionAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.EVIDENCEMEDICALCOND]\r\n        );\r\n\r\n        const tabParamedicalAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.EVIDENCEPARAMEDICAL]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = evidenceAuthorizationLevel;\r\n\r\n        this.authorizationData.componentLevel[TabDefLab.name] = tabLabAuthorizationLevel;\r\n        this.authorizationData.componentLevel[TabDefMIB.name] = tabMIBAuthorizationLevel;\r\n        this.authorizationData.componentLevel[TabDefMVR.name] = tabMVRAuthorizationLevel;\r\n        this.authorizationData.componentLevel[TabDefRx.name] = tabRXAuthorizationLevel;\r\n        this.authorizationData.componentLevel[TabDefMedicalCondition.name] = tabMedicalConditionAuthorizationLevel;\r\n        this.authorizationData.componentLevel[TabDefParamedical.name] = tabParamedicalAuthorizationLevel;\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\n\r\n@Injectable()\r\nexport class EvidenceDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getLazyLoadTree());\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n\r\n    private getLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            insuredDTOLoadTree.AddChildren([\r\n                DataCollectionNames.Medication,\r\n                DataCollectionNames.MIBCoding,\r\n                DataCollectionNames.Velogicas\r\n            ]);\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { CollectionUtil } from 'life-core/util';\r\n\r\nimport { NoteDTO } from 'ls-core/model';\r\n\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class EvidenceInfoDataInitializer extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected resolveData(route?: ActivatedRouteSnapshot, state?: RouterStateSnapshot): Promise<any> {\r\n        this.initializeData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    // initialize collection if collection is not defined\r\n    private initializeData(): void {\r\n        this.policy.Notes_LazyLoad = CollectionUtil.getNewCollection<NoteDTO>(this.policy.Notes_LazyLoad);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class EvidenceMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['System'];\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-page-header\\\" i18n=\\\"@@policy.page.title.evidence\\\">Evidence</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"applicant\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.reassign.case.grid.applicant\\\">\\r\\n\\t\\t\\t<lf-select #applicant name=\\\"applicant\\\" [(ngModel)]=\\\"activeApplicantId\\\" [ngModelOptions]=\\\"{standalone: true}\\\" [items]=\\\"applicantList\\\"\\r\\n\\t\\t\\t (change)=\\\"onApplicantChange($event)\\\" [actionType]=\\\"applicantDropdownActionType\\\" secureComponent [clearable]=\\\"false\\\"\\r\\n\\t\\t\\t style=\\\"width:200px\\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<router-outlet></router-outlet>\"","import { Component, Injector, Injectable } from '@angular/core';\n\nimport { ViewModel } from 'life-core/view-model';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { ListItem } from 'life-core/model';\nimport { ObfuscateIdUtil } from 'life-core/util';\nimport { DropdownActionType } from 'life-core/component/input';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { PolicyDTO, InsuredDTO } from 'ls-core/model';\nimport { SavePolicyDataDelegate } from 'ls-core/service';\n\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\nimport { ActiveApplicantHelper, ApplicantListHelper } from 'business/policy/shared';\nimport { LsRoutePath } from 'ui/routing';\nimport { EvidenceAuthorizationProvider } from './evidence-authorization.provider';\n\n@Component({\n    selector: 'evidence',\n    templateUrl: './evidence.component.html',\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: EvidenceAuthorizationProvider }]\n})\n@Injectable()\nexport class EvidenceComponent extends ViewModel<PolicyDataModel> {\n    public applicantList: ListItem[];\n    public activeApplicant: InsuredDTO;\n    public activeApplicantId: number;\n    public applicantDropdownActionType: DropdownActionType = DropdownActionType.Presentation;\n\n    private _activeApplicantHelper: ActiveApplicantHelper;\n    private _applicantListHelper: ApplicantListHelper;\n\n    constructor(\n        injector: Injector,\n        activeApplicantHelper: ActiveApplicantHelper,\n        applicantListHelper: ApplicantListHelper,\n        policySubscriber: PolicySubscriber\n    ) {\n        super(injector);\n        this._activeApplicantHelper = activeApplicantHelper;\n        this._applicantListHelper = applicantListHelper;\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n    }\n\n    public loadData(): Promise<void> {\n        this.loadApplicantList();\n        this.initSubscribers();\n        return Promise.resolve();\n    }\n\n    private routeToEvidenceDetailSection(): void {\n        this.routerAccessor.navigate(\n            [LsRoutePath.EvidenceDetail, ObfuscateIdUtil.obfuscate(this.activeApplicantId.toString())],\n            true\n        );\n    }\n\n    private loadApplicantList(): void {\n        this.applicantList = this._applicantListHelper.getApplicantList(this.data.policy.Insureds_LazyLoad);\n    }\n\n    private initSubscribers(): void {\n        this.trackSubscription(\n            this._activeApplicantHelper.activeApplicantIdObservable.subscribe(activeApplicantId => {\n                this.setSelectedApplicant();\n            })\n        );\n    }\n\n    private setSelectedApplicant(): void {\n        this.activeApplicantId = this._applicantListHelper.getActiveApplicantIdOrDefault(\n            this.data.policy.Insureds_LazyLoad\n        );\n        this.activeApplicant = this._applicantListHelper.getActiveApplicantOrDefault(\n            this.data.policy.Insureds_LazyLoad\n        );\n        this.routeToEvidenceDetailSection();\n    }\n\n    public onApplicantChange(selectedApplicant: any): void {\n        this._activeApplicantHelper.setActiveApplicantId(selectedApplicant.value);\n        this.activeApplicant = this.getSelectedApplicant();\n        this.routeToEvidenceDetailSection();\n    }\n\n    protected rebindUIData(): void {\n        this.loadApplicantList();\n        this.activeApplicant = this.getSelectedApplicant();\n    }\n\n    private getSelectedApplicant(): InsuredDTO {\n        return this.data.policy.Insureds_LazyLoad.find(insured => insured.PersonId == this.activeApplicantId);\n    }\n\n    protected getDataToSave(): PolicyDTO {\n        return this.data.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n}\n","import { EvidenceInfoDataInitializer } from './evidence-info-data.initializer';\r\nimport { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { EvidenceComponent } from './evidence.component';\r\nimport { TabViewEvidenceComponent } from './tab/tabview-evidence.component';\r\nimport { EvidenceDataResolver } from './evidence-data.resolver';\r\nimport { LabModule } from './lab/lab.module';\r\nimport { RxModule } from './rx/rx.module';\r\nimport { MIBModule } from './mib';\r\nimport { MVRModule } from './mvr/mvr.module';\r\nimport { ParamedicalModule } from './paramedical/paramedical.module';\r\nimport { MedicalConditionModule } from './medical-condition/medical-condition.module';\r\nimport { VelogicaModule } from './velogica/velogica.module';\r\nimport { EvidenceMetaDataResolver } from './evidence-meta-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        LsComponentsModule,\r\n        LabModule,\r\n        MIBModule,\r\n        RxModule,\r\n        MVRModule,\r\n        ParamedicalModule,\r\n        MedicalConditionModule,\r\n        VelogicaModule\r\n    ],\r\n    declarations: [EvidenceComponent, TabViewEvidenceComponent],\r\n    providers: [EvidenceDataResolver, EvidenceMetaDataResolver, EvidenceInfoDataInitializer]\r\n})\r\nexport class EvidenceModule {}\r\n","﻿export * from './evidence.component';\r\nexport * from './tab/tabview-evidence.component';\r\nexport * from './evidence-data.resolver';\r\nexport * from './lab/index';\r\nexport * from './rx/index';\r\nexport * from './mib';\r\nexport * from './mvr/index';\r\nexport * from './velogica/index';\r\nexport * from './paramedical';\r\nexport * from './evidence-info-data.initializer';\r\nexport * from './evidence-meta-data.resolver';\r\n","﻿export * from './lab-detail.component';\r\nexport * from './lab-results';\r\nexport * from './lab-comments';","﻿export * from './lab-comment-detail.component';\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class LabCommentDetailGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Remark', id: 'policy.lab.detail.remark.gridheader.remark' }),\r\n            field: LabCommentGridFields.RemarkId,\r\n            width: 80\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Comment', id: 'policy.lab.detail.remark.gridheader.comment' }),\r\n            field: LabCommentGridFields.CommentText,\r\n            width: 80\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nconst LabCommentGridFields = {\r\n    RemarkId: 'RemarkId',\r\n    CommentText: 'CommentText'\r\n};\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\" [ngStyle]=\\\"{width: '100%', height: gridOptions.height}\\\"></data-grid>\\r\\n</div>\\r\\n<data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\"","import { Component, Injector, Input } from '@angular/core';\r\nimport { LabCommentDTO } from 'ls-core/model';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared/grid/base-policy-grid.vm.ts';\r\nimport { IGridColumnsBuilder, DataGridRowNumber } from 'life-core/component/grid';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { LabCommentDetailGridColumnsBuilder } from './lab-comment-detail-grid-columns.builder';\r\n\r\n@Component({\r\n    selector: 'lab-comment-detail',\r\n    templateUrl: './lab-comment-detail.component.html',\r\n    providers: [PolicySubscriber, LabCommentDetailGridColumnsBuilder]\r\n})\r\nexport class LabCommentDetailComponent extends BasePolicyGridViewModel<LabCommentDTO> {\r\n    private _labCommentData: LabCommentDTO[];\r\n\r\n    private _gridColumnsBuilder: LabCommentDetailGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: LabCommentDetailGridColumnsBuilder) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n\r\n    public get labCommentData(): LabCommentDTO[] {\r\n        return this._labCommentData;\r\n    }\r\n\r\n    @Input()\r\n    public set labCommentData(value: LabCommentDTO[]) {\r\n        this._labCommentData = value;\r\n        this.refreshGrid();\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): LabCommentDTO[] {\r\n        return this.labCommentData;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n\r\n    protected getRowNodeId(data: LabCommentDTO): Array<any> {\r\n        return [data.RequirementInformationId, data.RemarkId, data.SequenceNo];\r\n    }\r\n\r\n    protected getGridMinRows(): number {\r\n        return DataGridRowNumber.Small;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-dashed-bottom-border\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"birthDate\\\" label=\\\"Birth Date\\\" i18n-label=\\\"@@policy.lab.detail.birthdate\\\">\\r\\n                <lf-statictext #birthDate name=\\\"birthDate\\\" [value]=\\\"data.BirthDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"agentName\\\" label=\\\"Agent/Agency\\\" i18n-label=\\\"@@policy.lab.detail.agentagency\\\">\\r\\n                <lf-statictext #agentName name=\\\"agentName\\\" [value]=\\\"data.AgentName\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"drawnDate\\\" label=\\\"Date/Time Collected\\\" i18n-label=\\\"@@policy.lab.detail.datetimecollected\\\">\\r\\n                <lf-statictext #drawnDate name=\\\"drawnDate\\\" [value]=\\\"dateTimeCollected\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"sex\\\" label=\\\"Gender\\\" i18n-label=\\\"@@policy.lab.detail.sex\\\">\\r\\n                <lf-statictext #sex name=\\\"sex\\\" [value]=\\\"data.Sex\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"examiner\\\" label=\\\"Examiner\\\" i18n-label=\\\"@@policy.lab.detail.examiner\\\">\\r\\n                <lf-statictext #examiner name=\\\"examiner\\\" [value]=\\\"data.Examiner\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"testDate\\\" label=\\\"Date Performed\\\" i18n-label=\\\"@@policy.lab.detail.dateperformed\\\">\\r\\n                <lf-statictext #testDate name=\\\"testDate\\\" [value]=\\\"data.TestDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"taxId\\\" label=\\\"SSN\\\" i18n-label=\\\"@@policy.lab.detail.ssn\\\">\\r\\n                <lf-statictext #taxId name=\\\"taxId\\\" [value]=\\\"data.Ssn | taxIdMask\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"specialConditions\\\" label=\\\"Special Conditions\\\" i18n-label=\\\"@@policy.lab.detail.specialconditions\\\">\\r\\n                <lf-statictext #specialConditions name=\\\"specialConditions\\\" [value]=\\\"data.SpecialConditions\\\"\\r\\n                    secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"ticketNumber\\\" label=\\\"Ticket Number\\\" i18n-label=\\\"@@policy.lab.detail.ticketnumber\\\">\\r\\n                <lf-statictext #ticketNumber name=\\\"ticketNumber\\\" [value]=\\\"data.TicketNumber\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"state\\\" label=\\\"ApplState\\\" i18n-label=\\\"@@policy.lab.detail.applstate\\\">\\r\\n                <lf-statictext #state name=\\\"state\\\" [value]=\\\"data.State\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"labTypeId\\\" label=\\\"Lab Type Id\\\" i18n-label=\\\"@@policy.lab.detail.labtypeid\\\">\\r\\n                <lf-statictext #labTypeId name=\\\"labTypeId\\\" [value]=\\\"data.LabTypeId\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"lastFoodTime\\\" label=\\\"Last Food Date/Time\\\" i18n-label=\\\"@@policy.lab.detail.lastfooddatetime\\\">\\r\\n                <lf-statictext #lastFoodTime name=\\\"lastFoodTime\\\" [value]=\\\"lastFoodDateTime\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"insType\\\" label=\\\"Insurance Type\\\" i18n-label=\\\"@@policy.lab.detail.insurancetype\\\">\\r\\n                <lf-statictext #insType name=\\\"insType\\\" [value]=\\\"insuranceType\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-3\\\">\\r\\n            <lf-form-input [control]=\\\"insuranceAmount\\\" label=\\\"Insurance Amount\\\" i18n-label=\\\"@@policy.lab.detail.insuranceamount\\\">\\r\\n                <lf-statictext #insuranceAmount name=\\\"insuranceAmount\\\" [value]=\\\"data.InsuranceAmount | lfCurrency:'':'':'4.0-0'\\\"\\r\\n                    secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n\\r\\n<lab-comment-detail class=\\\"lf-dashed-bottom-border\\\" [labCommentData]=\\\"data.Comments_LazyLoad\\\"></lab-comment-detail>\\r\\n\\r\\n<lab-result-detail class=\\\"lf-dashed-bottom-border\\\" [customerLabReportData]=\\\"data.CustomerLabReportProxies\\\"></lab-result-detail>\"","import { Component, Injector } from '@angular/core';\r\nimport { LabDTO, LabResultDTO, LabCommentDTO, CustomerLabReportProxyModel } from 'ls-core/model';\r\nimport { DetailViewModel } from 'life-core/component/master-detail';\r\nimport { ValueUtil } from 'life-core/util/lang';\r\n\r\n@Component({\r\n    selector: 'lab-detail',\r\n    templateUrl: './lab-detail.component.html'\r\n})\r\nexport class LabDetailComponent extends DetailViewModel<LabDTO> {\r\n    public labName: string;\r\n\r\n    public insuranceType: string = '';\r\n\r\n    public labResultData: LabResultDTO[];\r\n\r\n    public labCommentData: LabCommentDTO[];\r\n\r\n    public customerLabReportData: Array<CustomerLabReportProxyModel>;\r\n\r\n    public lastFoodDateTime: string;\r\n\r\n    public dateTimeCollected: string;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    private get labDetail(): LabDTO {\r\n        return this.data;\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        this.setContext(model);\r\n    }\r\n\r\n    private setContext(context: LabDTO): void {\r\n        this.data = context;\r\n        this.setInsuranceType();\r\n        this.setLabData();\r\n    }\r\n\r\n    private setLabData(): void {\r\n        this.lastFoodDateTime = this.concatValues(this.data.LastFood, this.data.LastFoodTime);\r\n        this.dateTimeCollected = this.concatValues(this.data.TestDate.dateAsString, this.data.TimeCollected);\r\n    }\r\n\r\n    private concatValues(value1: any, value2: any): string {\r\n        return ValueUtil.getValueOrEmptyString(value1).concat(' ', ValueUtil.getValueOrEmptyString(value2));\r\n    }\r\n\r\n    private setInsuranceType(): void {\r\n        if (this.labDetail) {\r\n            if (this.labDetail.InsTypeLife === 'L') {\r\n                this.insuranceType = 'Life';\r\n            } else if (this.labDetail.InsTypeHealth === 'H') {\r\n                this.insuranceType = 'Health';\r\n            } else if (this.labDetail.InsTypeDisability === 'D') {\r\n                this.insuranceType = 'Disability';\r\n            }\r\n\r\n            // appending group or individual\r\n            if (this.labDetail.InsTypeGroup === 'G') {\r\n                this.insuranceType += ' Group';\r\n            } else if (this.labDetail.InsTypeIndividual === 'I') {\r\n                this.insuranceType += ' Individual';\r\n            }\r\n        }\r\n    }\r\n}\r\n","﻿export * from './lab-result-detail.component';\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class LabResultDetailGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'ANSI', id: 'policy.lab.detail.ansi.gridheader.ansi' }),\r\n            field: LabResultDetailGridFields.HorlCode,\r\n            width: 80\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Test', id: 'policy.lab.detail.ansi.gridheader.test' }),\r\n            field: LabResultDetailGridFields.Description,\r\n            width: 80\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Abnormal', id: 'policy.lab.detail.ansi.gridheader.normal' }),\r\n            field: LabResultDetailGridFields.Abnormal,\r\n            width: 80\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Normal', id: 'policy.lab.detail.ansi.gridheader.abnormal' }),\r\n            field: LabResultDetailGridFields.Normal,\r\n            width: 80\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Normal Range', id: 'policy.lab.detail.ansi.gridheader.normalrange' }),\r\n            field: LabResultDetailGridFields.RangeText,\r\n            width: 80\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nconst LabResultDetailGridFields = {\r\n    HorlCode: 'HorlCode',\r\n    Description: 'Description',\r\n    Abnormal: 'Abnormal',\r\n    Normal: 'Normal',\r\n    RangeText: 'RangeText'\r\n};\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\" [ngStyle]=\\\"{width: '100%', height: gridOptions.height}\\\"></data-grid>\\r\\n</div>\\r\\n<data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\"","import { Component, Injector, Input } from '@angular/core';\r\nimport { CustomerLabReportProxyModel } from 'ls-core/model';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared/grid/base-policy-grid.vm.ts';\r\nimport { IGridColumnsBuilder, DataGridRowNumber } from 'life-core/component/grid';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { LabResultDetailGridColumnsBuilder } from './lab-result-detail-grid-columns.builder';\r\n\r\n@Component({\r\n    selector: 'lab-result-detail',\r\n    templateUrl: './lab-result-detail.component.html',\r\n    providers: [PolicySubscriber, LabResultDetailGridColumnsBuilder]\r\n})\r\nexport class LabResultDetailComponent extends BasePolicyGridViewModel<CustomerLabReportProxyModel> {\r\n    private _customerLabReportData: CustomerLabReportProxyModel[];\r\n\r\n    private _gridColumnsBuilder: LabResultDetailGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: LabResultDetailGridColumnsBuilder) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n\r\n    public get customerLabReportData(): CustomerLabReportProxyModel[] {\r\n        return this._customerLabReportData;\r\n    }\r\n\r\n    @Input()\r\n    public set customerLabReportData(value: CustomerLabReportProxyModel[]) {\r\n        this._customerLabReportData = value;\r\n        this.refreshGrid();\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): Array<CustomerLabReportProxyModel> {\r\n        return this.customerLabReportData;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n\r\n    protected getRowNodeId(data: CustomerLabReportProxyModel): Array<any> {\r\n        return [data.RequirementInformationId, data.HorlCode];\r\n    }\r\n\r\n    protected getGridMinRows(): number {\r\n        return DataGridRowNumber.Medium;\r\n    }\r\n}\r\n","﻿export * from './lab-tab.component';\r\nexport * from './lab.component';\r\nexport * from './lab-data.resolver';\r\nexport * from './detail';","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { TabDefLab } from 'ui/tabview';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class LabAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n    }\r\n\r\n    protected setup(): void {\r\n        this.authorizationData.defaultLevel = this.getParentAuthorizationLevel(TabDefLab.name);\r\n    }\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class LabDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(\r\n            this.policy,\r\n            DataCollectionNames.Insureds,\r\n            this.getLazyLoadTree()\r\n        );\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n\r\n    private getLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            const labsNode = insuredDTOLoadTree.AddChild(DataCollectionNames.Labs);\r\n            {\r\n                labsNode.AddChildren([DataCollectionNames.Comments, DataCollectionNames.Results]);\r\n            }\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { NamePattern } from 'life-core/util';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\n@Injectable()\r\nexport class LabGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Received Date', id: 'policy.lab.gridheader.receivedate' }),\r\n            field: LabGridFields.DrawnDate,\r\n            width: 80,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Lab', id: 'policy.lab.gridheader.lab' }),\r\n            field: LabGridFields.LabIdNumber,\r\n            width: 80\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Lab ID', id: 'policy.lab.gridheader.labid' }),\r\n            field: LabGridFields.LabTypeId,\r\n            width: 80\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Name', id: 'policy.lab.gridheader.name' }),\r\n            field: LabGridFields.FullName,\r\n            width: 80,\r\n            valueFormatter: (params: any) =>\r\n                this._lsCellFormatters.nameCellFormatter(params, NamePattern.LastAndFirstName)\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'SSN', id: 'policy.lab.gridheader.ssn' }),\r\n            field: LabGridFields.Ssn,\r\n            valueFormatter: this._lsCellFormatters.taxIdFormatter,\r\n            width: 80\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Comment', id: 'policy.lab.gridheader.comment' }),\r\n            field: LabGridFields.Comment,\r\n            width: 80\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nconst LabGridFields = {\r\n    DrawnDate: 'DrawnDate',\r\n    LabIdNumber: 'LabIdNumber',\r\n    LabTypeId: 'LabTypeId',\r\n    FullName: 'FullName',\r\n    Ssn: 'Ssn',\r\n    Comment: 'Comment'\r\n};\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { LabDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class LabItemFactory extends BaseDTOItemFactory<LabDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<LabDTO>): LabDTO {\r\n        const labDTO = new LabDTO();\r\n        labDTO.RequirementInformationId = this.getNextId(createItemParams.items, 'RequirementInformationId');\r\n        return labDTO;\r\n    }\r\n}\r\n","module.exports = \"<lab></lab>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { SecondaryTabHostViewModel } from 'life-core/component';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { PolicyDTO } from 'ls-core/model';\r\n\r\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\r\n\r\n@Component({\r\n    selector: 'lab-tab',\r\n    templateUrl: './lab-tab.component.html',\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class LabTabComponent extends SecondaryTabHostViewModel<PolicyDataModel> {\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.data.policy = p;\r\n        });\r\n    }\r\n\r\n    protected getDataToSave(): PolicyDTO {\r\n        return this.data.policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\" secureComponent>\\r\\n        </master-detail>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport {\n    MasterButton,\n    BaseDataManager,\n    RowManagementDelegate,\n    MasterDetailComponentResolver\n} from 'life-core/component/master-detail';\nimport {\n    IGridColumnsBuilder,\n    IDataGridOptions,\n    DataGridColumns,\n    DataGridOptionsUtil,\n    DataGridCommonOptions\n} from 'life-core/component/grid';\nimport { AuthorizationProvider } from 'life-core/authorization';\n\nimport { PolicyDTO, LabDTO } from 'ls-core/model';\nimport { BasePolicyMasterDetailViewModel, ApplicantListHelper } from 'business/policy/shared';\nimport { LabItemFactory } from './lab-item-factory';\nimport { LabGridColumnsBuilder } from './lab-grid-columns.builder';\nimport { LabDetailComponent } from './detail';\nimport { LabAuthorizationProvider } from './lab-authorization.provider';\n\nexport function labRowManagementDelegateFactory(\n    itemFactory: LabItemFactory,\n    dataManager: BaseDataManager<LabDTO>\n): RowManagementDelegate<LabDTO> {\n    return new RowManagementDelegate({\n        itemName: 'Lab',\n        itemIDPropertyName: 'RequirementInformationId',\n        itemFactory: itemFactory,\n        dataManager: dataManager\n    });\n}\n\nexport function labItemComponentResolverFactory(): MasterDetailComponentResolver<LabDTO> {\n    return new MasterDetailComponentResolver({\n        itemComponents: LabDetailComponent\n    });\n}\n\n@Component({\n    selector: 'lab',\n    templateUrl: './lab.component.html',\n    providers: [\n        BaseDataManager,\n        PolicySubscriber,\n        LabItemFactory,\n        {\n            provide: RowManagementDelegate,\n            useFactory: labRowManagementDelegateFactory,\n            deps: [LabItemFactory, BaseDataManager]\n        },\n        {\n            provide: MasterDetailComponentResolver,\n            useFactory: labItemComponentResolverFactory\n        },\n        LabGridColumnsBuilder,\n        { provide: AuthorizationProvider, useClass: LabAuthorizationProvider }\n    ]\n})\nexport class LabComponent extends BasePolicyMasterDetailViewModel<LabDTO> {\n    public policy: PolicyDTO;\n\n    private _gridColumnsBuilder: IGridColumnsBuilder;\n\n    private _applicantListHelper: ApplicantListHelper;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        gridColumnBuilder: LabGridColumnsBuilder,\n        applicantListHelper: ApplicantListHelper\n    ) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.policy = p;\n        });\n        this._gridColumnsBuilder = gridColumnBuilder;\n        this._applicantListHelper = applicantListHelper;\n    }\n\n    public get showDetailAsPopup(): boolean {\n        return false;\n    }\n\n    protected getInlineDetailButtons(): MasterButton<LabDTO>[] {\n        return [];\n    }\n\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\n        return this._gridColumnsBuilder;\n    }\n\n    protected getRowNodeId(data: LabDTO): any {\n        return data.RequirementInformationId;\n    }\n\n    protected getRemoveItemMessage(): string {\n        // need not return any message from the method\n        // had to implement the method since it is an abstract in base class\n        return '';\n    }\n\n    protected loadItems(): LabDTO[] {\n        const activeInsured = this._applicantListHelper.getActiveApplicantOrDefault(this.policy.Insureds_LazyLoad);\n        return activeInsured.Labs_LazyLoad;\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { LsPipeModule } from 'ls-core/util/pipe/ls-pipe.module';\r\nimport {\r\n    LabTabComponent,\r\n    LabComponent,\r\n    LabDetailComponent,\r\n    LabCommentDetailComponent,\r\n    LabResultDetailComponent,\r\n    LabDataResolver\r\n} from './index';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule, LsPipeModule],\r\n    declarations: [\r\n        LabTabComponent,\r\n        LabComponent,\r\n        LabDetailComponent,\r\n        LabCommentDetailComponent,\r\n        LabResultDetailComponent\r\n    ],\r\n    providers: [LabDataResolver],\r\n    entryComponents: [LabDetailComponent]\r\n})\r\nexport class LabModule {}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\"\\r\\n        [suppressRowClickSelection]=\\\"true\\\" rowSelection=\\\"multiple\\\">\\r\\n    </data-grid>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</div>\"","import { Component, Injector, Input } from '@angular/core';\r\n\r\nimport { IGridColumnsBuilder, DataGridRowNumber } from 'life-core/component/grid';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { MedicalConditionDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared';\r\nimport { MedicationConditionDataListColumnsBuilder } from './medication-condition-data-list-grid-columns.builder';\r\nimport { MedicalConditionPopupAuthorizationProvider } from './../medical-condition-popup-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'add-medical-condition',\r\n    templateUrl: 'medical-condition-data-list.component.html',\r\n    providers: [\r\n        PolicySubscriber,\r\n        MedicationConditionDataListColumnsBuilder,\r\n        { provide: AuthorizationProvider, useClass: MedicalConditionPopupAuthorizationProvider }\r\n    ]\r\n})\r\nexport class MedicalConditionDataListComponent extends BasePolicyGridViewModel<MedicalConditionDTO> {\r\n    public rowCount: number;\r\n    private _gridColumnsBuilder: MedicationConditionDataListColumnsBuilder;\r\n    private _medicalConditionList: MedicalConditionDTO[];\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: MedicationConditionDataListColumnsBuilder) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n\r\n    @Input()\r\n    public set medicalConditionList(value: MedicalConditionDTO[]) {\r\n        this._medicalConditionList = value;\r\n        this.rowCount = value ? value.length : 0;\r\n        this.refreshGrid();\r\n    }\r\n\r\n    public get selectedMedicalCondition(): MedicalConditionDTO[] {\r\n        return this.gridOptions.api.getSelectedRows();\r\n    }\r\n\r\n    protected loadItems(): MedicalConditionDTO[] {\r\n        return this._medicalConditionList || [];\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: MedicalConditionDTO): any {\r\n        return data.MedicalConditionId;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n\r\n    protected getGridMinRows(): number {\r\n        return DataGridRowNumber.Medium;\r\n    }\r\n}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Bodily System\\\" i18n-label=\\\"@@policy.medicalcondition.edit.bodilysystem\\\" [control]=\\\"bodilySystem\\\">\\r\\n                <lf-select #bodilySystem name=\\\"bodilySystem\\\" [(ngModel)]=\\\"bodilyDependentInput.parentInput.value\\\"\\r\\n                    [items]=\\\"resolvedData.listData.BodilySystem | listItems:'value':'Id'\\\" [clearable]=\\\"false\\\"\\r\\n                    secureComponent style=\\\"width:350px\\\" (change)=\\\"onBodilySystemChange($event)\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\" *ngIf=\\\"bodilyDependentInput.childInput.visible\\\">\\r\\n            <lf-form-input label=\\\"\\\" [control]=\\\"newBodilySystem\\\">\\r\\n                <lf-inputtext #newBodilySystem name=\\\"newBodilySystem\\\" [style]=\\\"{width:'350px'}\\\" [(ngModel)]=\\\"bodilyDependentInput.childInput.value\\\"\\r\\n                    [maxLength]=\\\"255\\\" secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Condition\\\" i18n-label=\\\"@@policy.medicalcondition.edit.condition\\\" [control]=\\\"condition\\\">\\r\\n                <lf-select #condition name=\\\"condition\\\" [(ngModel)]=\\\"conditionDependentInput.parentInput.value\\\" [items]=\\\"resolvedData.listData.Condition | listItems:'value':'Id'\\\"\\r\\n                    [clearable]=\\\"false\\\" secureComponent [disabled]=\\\"conditionDependentInput.parentInput.disable\\\" style=\\\"width:350px\\\"\\r\\n                    (change)=\\\"onConditionChange($event)\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\" *ngIf=\\\"conditionDependentInput.childInput.visible\\\">\\r\\n            <lf-form-input label=\\\"\\\" [control]=\\\"newCondition\\\">\\r\\n                <lf-inputtext #newCondition name=\\\"newCondition\\\" [style]=\\\"{width:'350px'}\\\" [(ngModel)]=\\\"conditionDependentInput.childInput.value\\\"\\r\\n                    [maxLength]=\\\"255\\\" [maxLength]=\\\"255\\\" secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n\\r\\n    <div *ngIf=\\\"!(bodilyDependentInput.childInput.visible || conditionDependentInput.childInput.visible)\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-12\\\">\\r\\n                <add-medical-condition [medicalConditionList]=\\\"medicalConditionList\\\"></add-medical-condition>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"bodilyDependentInput.childInput.visible || conditionDependentInput.childInput.visible\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <lf-form-input label=\\\"Criteria\\\" i18n-label=\\\"@@policy.medicalcondition.edit.criteria\\\" [control]=\\\"criteria\\\">\\r\\n                    <lf-inputtext #criteria name=\\\"criteria\\\" [(ngModel)]=\\\"data.Criteria\\\" [maxLength]=\\\"255\\\"\\r\\n                        secureComponent required></lf-inputtext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <lf-form-input label=\\\"Time of Criteria\\\" i18n-label=\\\"@@policy.medicalcondition.edit.timeofcriteria\\\"\\r\\n                    [control]=\\\"timeOfCriteria\\\">\\r\\n                    <lf-inputtext #timeOfCriteria name=\\\"timeOfCriteria\\\" [(ngModel)]=\\\"data.TimeOfCriteria\\\" [maxLength]=\\\"255\\\"\\r\\n                        secureComponent required></lf-inputtext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <lf-form-input label=\\\"Debit/Credit\\\" i18n-label=\\\"@@policy.medicalcondition.edit.points\\\" [control]=\\\"debit\\\">\\r\\n                    <lf-inputnumber #debit name=\\\"debit\\\" [max]=\\\"1000\\\" [min]=\\\"-999\\\" [maxLength]=\\\"4\\\" [(ngModel)]=\\\"data.Points\\\" format=\\\"n0\\\"\\r\\n                        decimals=\\\"0\\\" secureComponent required></lf-inputnumber>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector, ViewChild } from '@angular/core';\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\nimport { MedicalConditionDTO } from 'ls-core/model';\nimport {\n    DialogViewModelResult,\n    DialogResult,\n    DialogButton,\n    DialogButtonType,\n    ConfirmDialog\n} from 'life-core/component/dialog';\nimport { I18n } from 'life-core/i18n';\nimport { MedicalConditionDataListComponent } from './medical-condition-data-list.component';\nimport { OtherMedicalConditionTypes } from 'business/policy/evidence/rx/rx.constants';\nimport { MedicalConditionService } from '../../medical-condition.service';\nimport { MedicalConditionListDataResolver } from '../medical-condition-list-data.resolver';\nimport { DependentInputs } from '../dependent-inputs';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { MedicalConditionPopupAuthorizationProvider } from '../medical-condition-popup-authorization.provider';\nimport { ListItem } from 'life-core/model';\n\nclass MedicalConditionDependentInput extends DependentInputs {\n    public getDependencyValue(): string {\n        return OtherMedicalConditionTypes.Other;\n    }\n}\n\n@Component({\n    selector: 'medical-condition-creator',\n    templateUrl: './medical-condition-detail-creator.component.html',\n    providers: [\n        ParentChildRegistry,\n        MedicalConditionService,\n        MedicalConditionListDataResolver,\n        { provide: AuthorizationProvider, useClass: MedicalConditionPopupAuthorizationProvider }\n    ]\n})\nexport class MedicalConditionDetailCreatorComponent extends BasePolicyDialogDetailViewModel<MedicalConditionDTO> {\n    public medicalConditionList: MedicalConditionDTO[];\n    @ViewChild(MedicalConditionDataListComponent)\n    private _medicalConditionDataListComponent: MedicalConditionDataListComponent;\n    private _medicalConditionListDataResolver: MedicalConditionListDataResolver;\n    private _medicalConditionService: MedicalConditionService;\n    public bodilyDependentInput: MedicalConditionDependentInput;\n    public conditionDependentInput: MedicalConditionDependentInput;\n    protected confirmDialog: ConfirmDialog;\n    private _selectedCondition: string;\n\n    constructor(\n        injector: Injector,\n        medicalConditionService: MedicalConditionService,\n        medicalConditionListDataResolver: MedicalConditionListDataResolver,\n        confirmDialog: ConfirmDialog\n    ) {\n        super(injector);\n        this._medicalConditionService = medicalConditionService;\n        this._medicalConditionListDataResolver = medicalConditionListDataResolver;\n        this.bodilyDependentInput = new MedicalConditionDependentInput();\n        this.conditionDependentInput = new MedicalConditionDependentInput();\n        this.confirmDialog = confirmDialog;\n        this.i18n = injector.get(I18n);\n    }\n\n    public onBodilySystemChange(selectedBodilySystem: any): void {\n        this.resetMedicalConditionData();\n        if (selectedBodilySystem.value) {\n            const isOtherBodilySystem = this.isOtherValueSelected(selectedBodilySystem.value);\n            const bodilySystemValue = isOtherBodilySystem ? '' : selectedBodilySystem.value;\n            this.setBodilySystemControl(isOtherBodilySystem, bodilySystemValue, true);\n            if (!isOtherBodilySystem) this.refreshMedicalConditionList();\n        }\n    }\n\n    public onConditionChange(selectedCondition: ListItem): void {\n        this.resetMedicalConditionData();\n        if (selectedCondition.value) {\n            const isOtherCondition = this.isOtherValueSelected(selectedCondition.value);\n            const conditionValue = isOtherCondition ? '' : selectedCondition.value;\n            this._selectedCondition = selectedCondition.value;\n            this.setConditionControl(isOtherCondition, conditionValue, false, true);\n            if (!isOtherCondition) this.setMedicalConditionGridData();\n        }\n    }\n\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\n        if (this.isDialogButtonTypeOK(buttonId)) {\n            const isDirty = this.isDirty();\n            const medicalConditions = this.getMedicalConditions();\n            const selectedMedicalCondition = { selectedMedicalCondition: medicalConditions };\n            if (this.isMedicalConditionRecordsAvailable()) {\n                return this.validate().then(result => {\n                    return new DialogViewModelResult(\n                        selectedMedicalCondition,\n                        result == ViewValidationResult.pass,\n                        isDirty\n                    );\n                });\n            } else {\n                this.confirmSelection();\n                return Promise.resolve(new DialogViewModelResult([], false));\n            }\n        } else {\n            return Promise.resolve(null);\n        }\n    }\n\n    private isMedicalConditionRecordsAvailable(): boolean {\n        return (\n            this.bodilyDependentInput.parentInput.value === '' ||\n            this.bodilyDependentInput.parentInput.value === 'Other' ||\n            this._selectedCondition === '' ||\n            this._selectedCondition === 'Other' ||\n            this.anyMedicalConditionSelected()\n        );\n    }\n\n    private isMedicalConditionDataGridVisible(): boolean {\n        return !(this.bodilyDependentInput.childInput.visible || this.conditionDependentInput.childInput.visible);\n    }\n\n    private isOtherValueSelected(value: string): boolean {\n        return value === OtherMedicalConditionTypes.Other;\n    }\n\n    private setBodilySystemControl(isOtherControl: boolean, value: string, reset: boolean): void {\n        this.resetMedicalConditionData();\n        this.bodilyDependentInput.updateDependentInputs(isOtherControl, value, false, reset);\n        if (isOtherControl || reset) this.setConditionControl(isOtherControl, '', true, reset);\n    }\n\n    private setConditionControl(isOtherControl: boolean, value: string, disable: boolean, reset: boolean): void {\n        this.resetMedicalConditionData();\n        this.conditionDependentInput.updateDependentInputs(isOtherControl, value, disable);\n    }\n\n    private resetMedicalConditionData(): void {\n        this.data.Criteria = '';\n        this.data.TimeOfCriteria = '';\n        this.data.Points = '';\n        this.medicalConditionList = new Array<MedicalConditionDTO>();\n    }\n\n    private refreshMedicalConditionList(): void {\n        this.setMedicalConditionData();\n        this._medicalConditionListDataResolver.context = this.data;\n        this._medicalConditionListDataResolver.directResolve().then(data => {\n            Object.assign(this.resolvedData.listData, data);\n        });\n    }\n\n    private setMedicalConditionGridData(): void {\n        this.setMedicalConditionData();\n        this._medicalConditionService.getMedicalConditionList(this.data).then(response => {\n            this.setupMedicalConditions(response.objectList as MedicalConditionDTO[]);\n        });\n    }\n\n    private setupMedicalConditions(medicalConditions: MedicalConditionDTO[]): void {\n        let medicalConditionIdCount = 0;\n        medicalConditions.forEach(medicalCondition => {\n            medicalCondition.MedicalConditionId = medicalConditionIdCount++;\n        });\n        this.medicalConditionList = medicalConditions;\n    }\n\n    private getMedicalConditions(): MedicalConditionDTO[] {\n        return this.anyMedicalConditionSelected()\n            ? this.getSelectedMedicalConditions()\n            : this.getOtherMedicalConditionData();\n    }\n\n    private anyMedicalConditionSelected(): boolean {\n        return (\n            this._medicalConditionDataListComponent &&\n            this._medicalConditionDataListComponent.selectedMedicalCondition.length > 0\n        );\n    }\n\n    private getSelectedMedicalConditions(): MedicalConditionDTO[] {\n        return this._medicalConditionDataListComponent.selectedMedicalCondition;\n    }\n\n    private getOtherMedicalConditionData(): MedicalConditionDTO[] {\n        this.setMedicalConditionData();\n        return [this.data];\n    }\n\n    private setMedicalConditionData(): void {\n        this.data.BodilySystem = this.bodilyDependentInput.getDependentInputValue();\n        this.data.Condition = this.conditionDependentInput.getDependentInputValue();\n    }\n\n    private confirmSelection(): Promise<DialogResult> {\n        return this.confirmDialog.open({\n            title: this.getConfirmDialogTitle(),\n            message: this.getConfirmDialogMessage(),\n            buttons: [\n                new DialogButton({ type: DialogButtonType.OK }),\n                new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\n            ]\n        });\n    }\n\n    private getConfirmDialogTitle(): string {\n        return this.i18n({\n            value: 'Warning',\n            id: 'policy.medicalcondition.dialog.warning.title'\n        });\n    }\n\n    private getConfirmDialogMessage(): string {\n        return this.i18n({\n            value: 'No medical condition selected.',\n            id: 'policy.medicalcondition.dialog.warning.message'\n        });\n    }\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst MedicationFields = {\r\n    Criteria: 'Criteria',\r\n    Debit: 'Points',\r\n    TimeOfCriteria: 'TimeOfCriteria'\r\n};\r\n@Injectable()\r\nexport class MedicationConditionDataListColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n\r\n    constructor(cellFormatters: CellFormatters, i18n: I18n) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Listed Criteria',\r\n                id: 'policy.medicalcondition.gridheader.listedcriteria'\r\n            }),\r\n            field: MedicationFields.Criteria,\r\n            width: 50,\r\n            checkboxSelection: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Debit/Credit', id: 'policy.medicalcondition.gridheader.points' }),\r\n            field: MedicationFields.Debit,\r\n            width: 50,\r\n            valueFormatter: this._cellFormatters.decimalCellFormatter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Time of Criteria',\r\n                id: 'policy.medicalcondition.gridheader.timeofcriteria'\r\n            }),\r\n            field: MedicationFields.TimeOfCriteria,\r\n            width: 50\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n","\r\nexport class BaseInput {\r\n    public value: string;\r\n\r\n    constructor() {\r\n        this.value = '';\r\n    }\r\n}\r\n\r\nexport class ParentInput extends BaseInput {\r\n    public disable: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nexport class ChildInput extends BaseInput {\r\n    public visible: boolean;\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n}\r\n\r\nexport abstract class DependentInputs {\r\n    public parentInput: ParentInput;\r\n    public childInput: ChildInput;\r\n\r\n    constructor(parentInput?: ParentInput, childInput?: ChildInput) {\r\n        this.parentInput = parentInput ? parentInput : new ParentInput();\r\n        this.childInput = childInput ? childInput : new ChildInput();\r\n    }\r\n\r\n    /**\r\n     * Method fetch dependentInput value.\r\n     * Sample return value\r\n     * concatValue = true and delimiter = '-' => '$parentValue-$childValue'\r\n     * concatValue = false => '$parentValue'\r\n     * @param concatValue\r\n     * @param delimiter\r\n     */\r\n    public getDependentInputValue(concatValue?: boolean, delimiter: string = ''): string {\r\n        if (this.childInput.visible) {\r\n            return concatValue\r\n                ? this.getParentInputValue() + delimiter + this.getChildInputValue()\r\n                : this.getChildInputValue();\r\n        } else {\r\n            return this.getParentInputValue();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Set child input properties with parent dependency\r\n     */\r\n    protected setDependentChildInput(): void {\r\n        if (this.parentInput.value === this.getDependencyValue()) {\r\n            this.showChildInput()\r\n        } else {\r\n            this.hideChildInput();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns parent input value\r\n     */\r\n    private getParentInputValue(): string {\r\n        return this.parentInput.value;\r\n    }\r\n\r\n    /**\r\n     * Returns child input value\r\n     */\r\n    private getChildInputValue(): string {\r\n        return this.childInput.value;\r\n    }\r\n\r\n    /**\r\n     * disables parent input\r\n     */\r\n    private disableParentInput(): void {\r\n        this.parentInput.disable = true;\r\n    }\r\n\r\n    /**\r\n     * enables parent input\r\n     */\r\n    private enableParentInput(): void {\r\n        this.parentInput.disable = false;\r\n    }\r\n\r\n    /**\r\n     * shows child input\r\n     */\r\n    private showChildInput(): void {\r\n        this.childInput.visible = true;\r\n    }\r\n\r\n    /**\r\n     * hides child input\r\n     */\r\n    private hideChildInput(): void {\r\n        this.childInput.visible = false;\r\n    }\r\n\r\n    /**\r\n     * sets parent input value\r\n     */\r\n    private setParentInputValue(value: string): void {\r\n        this.parentInput.value = value;\r\n        this.setDependentChildInput();\r\n    }\r\n\r\n    /**\r\n     * sets child input value\r\n     */\r\n    private setChildInputValue(value: string): void {\r\n        this.childInput.value = value;\r\n    }\r\n\r\n    /**\r\n     * Returns child input value\r\n     */\r\n    public abstract getDependencyValue(): string\r\n\r\n    /**\r\n     * Sets dependent  input\r\n     * @param isChildInput\r\n     * @param value\r\n     * @param disable\r\n     * @param reset\r\n     */\r\n    public updateDependentInputs(isChildInput: boolean, value: string, disable: boolean, reset?: boolean): void {\r\n        if (isChildInput) {\r\n            this.setParentInputValue(this.getDependencyValue());\r\n            if (disable) this.disableParentInput();\r\n            this.setChildInputValue(reset ? '' : value);\r\n        } else {\r\n            this.setParentInputValue(value);\r\n            this.setChildInputValue('');\r\n            this.enableParentInput();\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Bodily System\\\" i18n-label=\\\"@@policy.medicalcondition.edit.bodilysystem\\\" [control]=\\\"bodilySystem\\\">\\r\\n                <lf-select #bodilySystem name=\\\"bodilySystem\\\" [(ngModel)]=\\\"bodilyDependentInput.parentInput.value\\\"\\r\\n                    [items]=\\\"resolvedData.listData.BodilySystem | listItems:'value':'Id'\\\" [clearable]=\\\"false\\\"\\r\\n                    secureComponent style=\\\"width:350px\\\" (change)=\\\"onBodilySystemChange($event)\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\" *ngIf=\\\"bodilyDependentInput.childInput.visible\\\">\\r\\n            <lf-form-input label=\\\"\\\" [control]=\\\"newBodilySystem\\\">\\r\\n                <lf-inputtext #newBodilySystem name=\\\"newBodilySystem\\\" [style]=\\\"{width:'350px'}\\\" [(ngModel)]=\\\"bodilyDependentInput.childInput.value\\\"\\r\\n                    [maxLength]=\\\"255\\\" secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Condition\\\" i18n-label=\\\"@@policy.medicalcondition.edit.condition\\\" [control]=\\\"condition\\\">\\r\\n                <lf-select #condition name=\\\"condition\\\" [(ngModel)]=\\\"conditionDependentInput.parentInput.value\\\" [items]=\\\"resolvedData.listData.Condition | listItems:'value':'Id'\\\"\\r\\n                    [clearable]=\\\"false\\\" secureComponent [disabled]=\\\"conditionDependentInput.parentInput.disable\\\" style=\\\"width:350px\\\"\\r\\n                    (change)=\\\"onConditionChange($event)\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\" *ngIf=\\\"conditionDependentInput.childInput.visible\\\">\\r\\n            <lf-form-input label=\\\"\\\" [control]=\\\"newCondition\\\">\\r\\n                <lf-inputtext #newCondition name=\\\"newCondition\\\" [style]=\\\"{width:'350px'}\\\" [(ngModel)]=\\\"conditionDependentInput.childInput.value\\\"\\r\\n                    [maxLength]=\\\"255\\\" [maxLength]=\\\"255\\\" secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <lf-form-input label=\\\"Criteria\\\" i18n-label=\\\"@@policy.medicalcondition.edit.criteria\\\" [control]=\\\"criteria\\\">\\r\\n                    <lf-select #criteria name=\\\"criteria\\\" [(ngModel)]=\\\"criteriaDependentInput.parentInput.value\\\" [items]=\\\"resolvedData.listData.Criteria | listItems:'value':'Id'\\\"\\r\\n                        [clearable]=\\\"false\\\" secureComponent [disabled]=\\\"criteriaDependentInput.parentInput.disable\\\"\\r\\n                        style=\\\"width:350px\\\" (change)=\\\"onCriteriaChange($event)\\\" required></lf-select>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\" *ngIf=\\\"criteriaDependentInput.childInput.visible\\\">\\r\\n                <lf-form-input label=\\\"\\\" [control]=\\\"newCriteria\\\">\\r\\n                    <lf-inputtext #newCriteria name=\\\"newCriteria\\\" [style]=\\\"{width:'350px'}\\\" [(ngModel)]=\\\"criteriaDependentInput.childInput.value\\\"\\r\\n                        [maxLength]=\\\"255\\\" secureComponent required></lf-inputtext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <lf-form-input label=\\\"Time of Criteria\\\" i18n-label=\\\"@@policy.medicalcondition.edit.timeofcriteria\\\"\\r\\n                    [control]=\\\"timeOfCriteria\\\">\\r\\n                    <lf-select #timeOfCriteria name=\\\"timeOfCriteria\\\" [(ngModel)]=\\\"timeOfCriteriaDependentInput.parentInput.value\\\"\\r\\n                        [items]=\\\"resolvedData.listData.TimeOfCriteria | listItems:'value':'Id'\\\" [clearable]=\\\"false\\\"\\r\\n                        secureComponent [disabled]=\\\"timeOfCriteriaDependentInput.parentInput.disable\\\" style=\\\"width:350px\\\"\\r\\n                        (change)=\\\"onTimeOfCriteriaChange($event)\\\" required></lf-select>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\" *ngIf=\\\"timeOfCriteriaDependentInput.childInput.visible\\\">\\r\\n                <lf-form-input label=\\\"\\\" [control]=\\\"newTimeOfCriteria\\\">\\r\\n                    <lf-inputtext #newTimeOfCriteria name=\\\"newTimeOfCriteria\\\" [style]=\\\"{width:'350px'}\\\" [(ngModel)]=\\\"timeOfCriteriaDependentInput.childInput.value\\\"\\r\\n                        [maxLength]=\\\"255\\\" secureComponent required></lf-inputtext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\" *ngIf=\\\"!debitCreditDependentInput.childInput.visible\\\">\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <lf-form-input label=\\\"Debit/Credit\\\" i18n-label=\\\"@@policy.medicalcondition.edit.points\\\" [control]=\\\"debit\\\">\\r\\n                    <lf-statictext #debit name=\\\"debit\\\" [value]=\\\"debitCreditDependentInput.parentInput.value|number\\\"\\r\\n                        secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"row\\\" *ngIf=\\\"debitCreditDependentInput.childInput.visible\\\">\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <lf-form-input label=\\\"Debit/Credit\\\" i18n-label=\\\"@@policy.medicalcondition.edit.points\\\" [control]=\\\"debitCredit\\\">\\r\\n                    <lf-statictext #debitCredit name=\\\"debitCredit\\\" [value]=\\\"\\\" secureComponent></lf-statictext>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <lf-form-input label=\\\"\\\" [control]=\\\"debit\\\">\\r\\n                    <lf-inputnumber #debit name=\\\"debit\\\" [max]=\\\"1000\\\" [(ngModel)]=\\\"debitCreditDependentInput.childInput.value\\\"\\r\\n                        format=\\\"n0\\\" decimals=\\\"0\\\" [allowNegative]=\\\"false\\\" secureComponent required></lf-inputnumber>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector } from '@angular/core';\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { ParentChildRegistry } from 'life-core/view-model';\nimport { MedicalConditionDTO } from 'ls-core/model';\nimport { DialogViewModelResult } from 'life-core/component';\nimport { OtherMedicalConditionTypes } from 'business/policy/evidence/rx/rx.constants';\nimport { MedicalConditionService } from '../../medical-condition.service';\nimport { MedicalConditionListDataResolver } from '../medical-condition-list-data.resolver';\nimport { ListItem } from 'life-core/model';\nimport { DependentInputs } from '../dependent-inputs';\nimport { ListUtil } from 'life-core/util';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { MedicalConditionPopupAuthorizationProvider } from './../medical-condition-popup-authorization.provider';\n\nclass MedicalConditionDependentInput extends DependentInputs {\n    public getDependencyValue(): string {\n        return OtherMedicalConditionTypes.Other;\n    }\n}\n\n@Component({\n    selector: 'medical-condition-editor',\n    templateUrl: './medical-condition-detail-editor.component.html',\n    providers: [\n        ParentChildRegistry,\n        MedicalConditionService,\n        MedicalConditionListDataResolver,\n        { provide: AuthorizationProvider, useClass: MedicalConditionPopupAuthorizationProvider }\n    ]\n})\nexport class MedicalConditionDetailEditorComponent extends BasePolicyDialogDetailViewModel<MedicalConditionDTO> {\n    public bodilyDependentInput: MedicalConditionDependentInput;\n    public conditionDependentInput: MedicalConditionDependentInput;\n    public criteriaDependentInput: MedicalConditionDependentInput;\n    public timeOfCriteriaDependentInput: MedicalConditionDependentInput;\n    public debitCreditDependentInput: MedicalConditionDependentInput;\n    private _medicalConditionListDataResolver: MedicalConditionListDataResolver;\n\n    constructor(injector: Injector, medicalConditionListDataResolver: MedicalConditionListDataResolver) {\n        super(injector);\n        this._medicalConditionListDataResolver = medicalConditionListDataResolver;\n        this.bodilyDependentInput = new MedicalConditionDependentInput();\n        this.conditionDependentInput = new MedicalConditionDependentInput();\n        this.criteriaDependentInput = new MedicalConditionDependentInput();\n        this.timeOfCriteriaDependentInput = new MedicalConditionDependentInput();\n        this.debitCreditDependentInput = new MedicalConditionDependentInput();\n    }\n\n    public onBodilySystemChange(selectedBodilySystem: any): void {\n        if (selectedBodilySystem.value) {\n            const isOtherBodilySystem = this.isOtherValueSelected(selectedBodilySystem.value);\n            const bodilySystemValue = isOtherBodilySystem ? '' : selectedBodilySystem.value;\n            this.setBodilySystemControl(isOtherBodilySystem, bodilySystemValue, true);\n            if (!isOtherBodilySystem) this.getConditionCodeListData();\n        }\n    }\n\n    public onConditionChange(selectedCondition: any): void {\n        if (selectedCondition.value) {\n            const isOtherCondition = this.isOtherValueSelected(selectedCondition.value);\n            const conditionValue = isOtherCondition ? '' : selectedCondition.value;\n            this.setConditionControl(isOtherCondition, conditionValue, false, true);\n            if (!isOtherCondition) this.getConditionCodeListData();\n        }\n    }\n\n    public onCriteriaChange(selectedCriteria: any): void {\n        if (selectedCriteria.value) {\n            const isOtherCriteria = this.isOtherValueSelected(selectedCriteria.value);\n            const criteriaValue = isOtherCriteria ? '' : selectedCriteria.value;\n            this.setCriteriaControl(isOtherCriteria, criteriaValue, false, true);\n            if (!isOtherCriteria) this.getConditionCodeListData();\n        }\n    }\n\n    public onTimeOfCriteriaChange(selectedTimeOfCriteria: any): void {\n        if (selectedTimeOfCriteria.value) {\n            const isOtherTimeOfCriteria = this.isOtherValueSelected(selectedTimeOfCriteria.value);\n            const timeOfCriteriaValue = isOtherTimeOfCriteria ? '' : selectedTimeOfCriteria.value;\n            this.setTimeOfCriteriaControl(isOtherTimeOfCriteria, timeOfCriteriaValue, false, true);\n            if (!isOtherTimeOfCriteria) this.getConditionCodeListData();\n        }\n    }\n\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\n        if (this.isDialogButtonTypeOK(buttonId)) {\n            this.setMedicalConditionData();\n        }\n        return super.onDialogButtonClick(buttonId);\n    }\n\n    protected setupData(): void {\n        this.setResolvedListData();\n        this.initializeMedicalConditionData();\n    }\n\n    private initializeMedicalConditionData(): void {\n        const bodilySystemData = this.getDropDownValue(this.resolvedData.listData.BodilySystem, this.data.BodilySystem);\n        this.setBodilySystemControl(bodilySystemData.isNewItem, this.data.BodilySystem, false);\n        const conditionData = this.getDropDownValue(this.resolvedData.listData.Condition, this.data.Condition);\n        this.setConditionControl(conditionData.isNewItem, this.data.Condition, bodilySystemData.isNewItem, false);\n        const criteriaData = this.getDropDownValue(this.resolvedData.listData.Criteria, this.data.Criteria);\n        this.setCriteriaControl(criteriaData.isNewItem, this.data.Criteria, conditionData.isNewItem, false);\n        const timeOfCriteriaData = this.getDropDownValue(\n            this.resolvedData.listData.TimeOfCriteria,\n            this.data.TimeOfCriteria\n        );\n        this.setTimeOfCriteriaControl(\n            timeOfCriteriaData.isNewItem,\n            this.data.TimeOfCriteria,\n            criteriaData.isNewItem,\n            false\n        );\n    }\n\n    private isOtherValueSelected(value: string): boolean {\n        return value === OtherMedicalConditionTypes.Other;\n    }\n\n    private setBodilySystemControl(isOtherControl: boolean, value: string, reset: boolean): void {\n        this.bodilyDependentInput.updateDependentInputs(isOtherControl, value, false, reset);\n        if (isOtherControl || reset) this.setConditionControl(isOtherControl, '', true, reset);\n    }\n\n    private setConditionControl(isOtherControl: boolean, value: string, disable: boolean, reset: boolean): void {\n        this.conditionDependentInput.updateDependentInputs(isOtherControl, value, disable);\n        if (isOtherControl || reset) this.setCriteriaControl(isOtherControl, '', true, reset);\n    }\n\n    private setCriteriaControl(isOtherControl: boolean, value: string, disable: boolean, reset: boolean): void {\n        this.criteriaDependentInput.updateDependentInputs(isOtherControl, value, disable);\n        if (isOtherControl || reset) this.setTimeOfCriteriaControl(isOtherControl, '', true, reset);\n    }\n\n    private setTimeOfCriteriaControl(isOtherControl: boolean, value: string, disable: boolean, reset: boolean): void {\n        this.timeOfCriteriaDependentInput.updateDependentInputs(isOtherControl, value, disable);\n        this.setDebitCreditControl(isOtherControl, reset ? '0' : this.data.Points.toString(), true, reset);\n    }\n\n    private setDebitCreditControl(isOtherControl: boolean, value: string, disable: boolean, reset: boolean): void {\n        this.debitCreditDependentInput.updateDependentInputs(\n            isOtherControl,\n            value,\n            disable,\n            isOtherControl ? false : reset\n        );\n    }\n\n    private getDropDownValue(listItem: Array<ListItem>, value: any): { isNewItem: boolean; itemValue: string } {\n        const returnValue = { isNewItem: true, itemValue: OtherMedicalConditionTypes.Other };\n        if (ListUtil.isItemExist(listItem, value)) {\n            returnValue.itemValue = value;\n            returnValue.isNewItem = false;\n        }\n        return returnValue;\n    }\n\n    private setMedicalConditionData(): void {\n        this.data.BodilySystem = this.bodilyDependentInput.getDependentInputValue();\n        this.data.Condition = this.conditionDependentInput.getDependentInputValue();\n        this.data.Criteria = this.criteriaDependentInput.getDependentInputValue();\n        this.data.TimeOfCriteria = this.timeOfCriteriaDependentInput.getDependentInputValue();\n        this.data.Points = this.debitCreditDependentInput.getDependentInputValue();\n    }\n\n    private getConditionCodeListData(): void {\n        this.setMedicalConditionData();\n        this._medicalConditionListDataResolver.context = this.data;\n        this._medicalConditionListDataResolver.directResolve().then(data => {\n            Object.assign(this.resolvedData.listData, data);\n            if (this.resolvedData.listData.Points && this.resolvedData.listData.Points.length > 0) {\n                this.setDebitCreditControl(false, this.resolvedData.listData.Points[0].value, false, false);\n            }\n        });\n    }\n}\n","﻿export * from './add/medical-condition-detail-creator.component';\r\nexport * from './edit/medical-condition-detail-editor.component';\r\nexport * from './add/medical-condition-data-list.component';\r\nexport * from './medical-condition-dialog-data.resolver';\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { ListMap } from 'life-core/model';\r\nimport { MedicationDTO } from 'ls-core/model';\r\nimport { ListDataRequestBuilder, ListsDataRequest, ListDataItem } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class MedicalConditionDetailDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    public context: any;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        const medicationDTO = ObjectUtil.createObjectOfType(this.context, MedicationDTO);\r\n        listDataRequestBuilder.addListRequestItem(medicationDTO, 'BodilySystem');\r\n        listDataRequestBuilder.addListRequestItem(medicationDTO, 'Condition');\r\n        listDataRequestBuilder.addListRequestItem(medicationDTO, 'Criteria');\r\n        listDataRequestBuilder.addListRequestItem(medicationDTO, 'TimeOfCriteria');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { MedicationDTO } from 'ls-core/model';\r\nimport { ListDataRequestBuilder, ListsDataRequest } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class MedicalConditionListDataResolver extends BaseListDataResolver {\r\n    public context: any;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        const medicationDTO = ObjectUtil.createObjectOfType(this.context, MedicationDTO);\r\n        listDataRequestBuilder.addListRequestItem(medicationDTO, 'Condition');\r\n        listDataRequestBuilder.addListRequestItem(medicationDTO, 'Criteria');\r\n        listDataRequestBuilder.addListRequestItem(medicationDTO, 'TimeOfCriteria');\r\n        listDataRequestBuilder.addListRequestItem(medicationDTO, 'Points');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class MedicalConditionPopupAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const defaultAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.EVIDENCEMEDICALCOND]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = defaultAuthorizationLevel;\r\n    }\r\n}\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { TabDefMedicalCondition } from 'ui/tabview';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class MedicalConditionAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        this.authorizationData.defaultLevel = this.getParentAuthorizationLevel(TabDefMedicalCondition.name);\r\n        const uwNotesAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.NOTEUW]\r\n        );\r\n\r\n        this.authorizationData.componentLevel['addUWNote'] = uwNotesAuthorizationLevel;\r\n    }\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class MedicalConditionDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getLazyLoadTree());\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n\r\n    private getLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            insuredDTOLoadTree.AddChild(DataCollectionNames.MedicalConditions);\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { DateTimeFormatWidth } from 'life-core/util';\r\n\r\nimport { MetadataUtil } from 'ls-core/util';\r\nimport { LsCellComparators } from 'ls-core/component/grid';\r\n\r\nconst MedicalConditionGridFields = {\r\n    BodilySystem: 'BodilySystem',\r\n    Condition: 'Condition',\r\n    Criteria: 'Criteria',\r\n    TimeOfCriteria: 'TimeOfCriteria',\r\n    AddedBy: 'AddedBy',\r\n    Added: 'Added',\r\n    Points: 'Points'\r\n};\r\n\r\n@Injectable()\r\nexport class MedicalConditionGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(cellFormatters: CellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Bodily System', id: 'policy.medicalcondition.gridheader.bodilysystem' }),\r\n            field: MedicalConditionGridFields.BodilySystem,\r\n            width: 80,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Condition', id: 'policy.medicalcondition.gridheader.condition' }),\r\n            field: MedicalConditionGridFields.Condition,\r\n            width: 80,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Criteria', id: 'policy.medicalcondition.gridheader.criteria' }),\r\n            field: MedicalConditionGridFields.Criteria,\r\n            width: 80,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Time', id: 'policy.medicalcondition.gridheader.time' }),\r\n            field: MedicalConditionGridFields.TimeOfCriteria,\r\n            width: 80,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created By', id: 'policy.medicalcondition.gridheader.createdby' }),\r\n            field: MedicalConditionGridFields.AddedBy,\r\n            width: 80,\r\n            valueFormatter: this.getUserName\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Date/Time', id: 'policy.medicalcondition.gridheader.datetime' }),\r\n            field: MedicalConditionGridFields.Added,\r\n            width: 80,\r\n            valueFormatter: params => this._cellFormatters.dateCellFormatter(params, DateTimeFormatWidth.Short),\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Debit/Credit', id: 'policy.medicalcondition.gridheader.points' }),\r\n            field: MedicalConditionGridFields.Points,\r\n            width: 80,\r\n            valueFormatter: params => this._cellFormatters.decimalCellFormatter(params, '1.0-0')\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getUserName(params: any): string {\r\n        if (params.node.data.IsSystemGenerated === 'true') {\r\n            return 'System Generated';\r\n        } else if (params.node.data.AddedBy === null) {\r\n            return '';\r\n        } else if (params.node.data.AddedBy === -255) {\r\n            return 'System';\r\n        } else if (params.node.data.AddedBy) {\r\n            return MetadataUtil.getItemLabelByCode(params.context.listData.aus_users, params.node.data.AddedBy);\r\n        }\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { MedicalConditionDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class MedicalConditionItemFactory extends BaseDTOItemFactory<MedicalConditionDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<MedicalConditionDTO>): MedicalConditionDTO {\r\n        const medicalConditionDTO = new MedicalConditionDTO();\r\n        medicalConditionDTO.MedicalConditionId = this.getNextId(createItemParams.items, 'MedicalConditionId');\r\n        return medicalConditionDTO;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class MedicalConditionMetaDataResolver extends BaseMetaDataResolver {\r\n  protected getMetadataTypes(): string[] {\r\n    return ['aus_users'];\r\n  }\r\n}\r\n","module.exports = \"<medical-condition></medical-condition>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { SecondaryTabHostViewModel } from 'life-core/component';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { PolicyDTO } from 'ls-core/model';\r\n\r\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\r\nimport { MedicalConditionAuthorizationProvider } from './medical-condition-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'medical-condition-tab',\r\n    templateUrl: './medical-condition-tab.component.html',\r\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: MedicalConditionAuthorizationProvider }]\r\n})\r\nexport class MedicalConditionTabComponent extends SecondaryTabHostViewModel<PolicyDataModel> {\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.data.policy = p;\r\n        });\r\n    }\r\n\r\n    protected getDataToSave(): PolicyDTO {\r\n        return this.data.policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row lf-dashed-bottom-border\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\"\\r\\n            secureComponent [ngStyle]=\\\"{'width': '100%'}\\\">\\r\\n        </master-detail>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row justify-content-start\\\">\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input [control]=\\\"medicalCondition\\\" label=\\\"Total\\\" i18n-label=\\\"@@policy.medicalcondition.grid.totalconditionpoints\\\"\\r\\n            labelPosition=\\\"left\\\">\\r\\n            <lf-statictext #medicalCondition name=\\\"medicalCondition\\\" [value]=\\\"medicalConditionTotalPoints | lfDecimal:'1.0-0'\\\"\\r\\n                secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector, Type } from '@angular/core';\n\nimport { IGridColumnsBuilder, DataGridRowNumber } from 'life-core/component/grid';\nimport { AppSession } from 'ls-core/session';\nimport {\n    MasterButton,\n    BaseDataManager,\n    RowManagementDelegate,\n    MasterDetailComponentResolver,\n    MasterButtonType\n} from 'life-core/component/master-detail';\nimport { ResolvedDataNames } from 'life-core/view-model';\nimport {\n    ModalDialogParams,\n    ModalDialog,\n    DirectDataResolve,\n    DialogButtonType,\n    DialogSize,\n    ButtonActionType,\n    ItemOpenMode\n} from 'life-core/component';\nimport { I18n } from 'life-core/i18n';\n\nimport { DBDateUtil } from 'ls-core/util';\nimport { MedicalConditionDTO, InsuredDTO } from 'ls-core/model';\nimport { AppMasterButtonType } from 'business/shared/master-detail';\nimport { BasePolicyMasterDetailViewModel, ApplicantListHelper, DebitCreditHelper } from 'business/policy/shared';\n\nimport { MedicalConditionItemFactory } from './medical-condition-item-factory';\nimport { MedicalConditionGridColumnsBuilder } from './medical-condition-grid-columns.builder';\nimport { MedicalConditionDetailCreatorComponent } from './detail/add/medical-condition-detail-creator.component';\nimport { MedicalConditionDetailDataResolver } from './detail/medical-condition-dialog-data.resolver';\nimport { MedicalConditionDetailEditorComponent } from './detail/edit/medical-condition-detail-editor.component';\nimport { LfSplitPaneChannels } from 'life-core/component/layout/split';\nimport { TabPolicySplitPaneAreas } from 'business/policy/tab';\nimport { AuthorizationLevel } from 'life-core/authorization';\n\nexport function itemRowManagementDelegateFactory(\n    itemFactory: MedicalConditionItemFactory,\n    dataManager: BaseDataManager<MedicalConditionDTO>\n): RowManagementDelegate<MedicalConditionDTO> {\n    return new RowManagementDelegate({\n        itemName: 'Medical Condition',\n        itemIDPropertyName: 'MedicalConditionId',\n        itemFactory: itemFactory,\n        dataManager: dataManager\n    });\n}\n\nexport function medicalConditionItemComponentResolverFactory(): MasterDetailComponentResolver<MedicalConditionDTO> {\n    const componentMap = new Map<string, Type<any>>();\n    componentMap.set(\n        MasterDetailComponentResolver.getItemCompositeKey(null, ItemOpenMode.Edit),\n        MedicalConditionDetailEditorComponent\n    );\n    return new MasterDetailComponentResolver({\n        itemComponents: componentMap\n    });\n}\n\n@Component({\n    selector: 'medical-condition',\n    templateUrl: './medical-condition.component.html',\n    providers: [\n        BaseDataManager,\n        MedicalConditionItemFactory,\n        {\n            provide: RowManagementDelegate,\n            useFactory: itemRowManagementDelegateFactory,\n            deps: [MedicalConditionItemFactory, BaseDataManager]\n        },\n        {\n            provide: MasterDetailComponentResolver,\n            useFactory: medicalConditionItemComponentResolverFactory\n        },\n        MedicalConditionGridColumnsBuilder\n    ]\n})\nexport class MedicalConditionComponent extends BasePolicyMasterDetailViewModel<MedicalConditionDTO> {\n    public medicalConditionTotalPoints: number;\n    private _debitCreditHelper: DebitCreditHelper;\n    private _gridColumnsBuilder: IGridColumnsBuilder;\n    private _applicantListHelper: ApplicantListHelper;\n    private _appSession: AppSession;\n    private _medicalConditionItemFactory: MedicalConditionItemFactory;\n    private _applicant: InsuredDTO;\n    private _modalDialog: ModalDialog;\n\n    constructor(\n        injector: Injector,\n        modalDialog: ModalDialog,\n        appSession: AppSession,\n        debitCreditHelper: DebitCreditHelper,\n        medicalConditionGridColumnsBuilder: MedicalConditionGridColumnsBuilder,\n        medicalConditionItemFactory: MedicalConditionItemFactory,\n        applicantListHelper: ApplicantListHelper,\n        i18n: I18n\n    ) {\n        super(injector);\n\n        this._modalDialog = modalDialog;\n        this._appSession = appSession;\n        this._debitCreditHelper = debitCreditHelper;\n        this._gridColumnsBuilder = medicalConditionGridColumnsBuilder;\n        this._medicalConditionItemFactory = medicalConditionItemFactory;\n        this._applicantListHelper = applicantListHelper;\n        this.i18n = i18n;\n    }\n\n    public get showDetailAsPopup(): boolean {\n        return true;\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedMetaData();\n        this.setActiveApplicant();\n        this.setOtherMedicalConditionTotalPoints();\n        return Promise.resolve();\n    }\n\n    public ngAfterViewInit(): void {\n        super.ngAfterViewInit();\n        this.setupNoteButtonAuthorization();\n    }\n\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\n        return this._gridColumnsBuilder;\n    }\n\n    protected loadItems(): MedicalConditionDTO[] {\n        return this._applicant.MedicalConditions_LazyLoad;\n    }\n\n    protected getRowNodeId(data: MedicalConditionDTO): any {\n        return data.MedicalConditionId;\n    }\n\n    protected getPopupDetailButtons(): MasterButton<MedicalConditionDTO>[] {\n        // Add Master Button\n        const addMasterButton = new MasterButton({ type: MasterButtonType.ADD });\n        addMasterButton.handler = () => {\n            this.addMasterButtonHandler();\n        };\n\n        // Edit Master Button\n        const editMasterButton = new MasterButton({ type: MasterButtonType.EDIT });\n        editMasterButton.disableHandler = (item: MedicalConditionDTO): boolean => {\n            return this.actionButtonDisableHandler(item);\n        };\n\n        // Copy Master Button\n        const copyMasterButton = new MasterButton({ type: MasterButtonType.COPY });\n        copyMasterButton.handler = (item: MedicalConditionDTO) => {\n            this.copyMasterButtonHandler(item);\n        };\n        copyMasterButton.disableHandler = (item: MedicalConditionDTO): boolean => {\n            return this.actionButtonDisableHandler(item);\n        };\n\n        // Void Master Button\n        const voidMasterButton = new MasterButton({ type: AppMasterButtonType.VOID });\n        voidMasterButton.handler = (item: MedicalConditionDTO) => {\n            this.voidMasterButtonHandler(item);\n        };\n        voidMasterButton.disableHandler = (item: MedicalConditionDTO): boolean => {\n            return this.actionButtonEnableHandler(item);\n        };\n\n        // Note Master Button\n        const noteMasterButton = new MasterButton({ type: AppMasterButtonType.NOTE });\n        noteMasterButton.actionType = ButtonActionType.DataChange;\n        noteMasterButton.handler = () => {\n            this.noteMasterButtonHandler();\n        };\n        // disable when authorization level is VIEW\n        noteMasterButton.disableHandler = () => {\n            return (\n                !noteMasterButton.authorizationLevel || noteMasterButton.authorizationLevel === AuthorizationLevel.VIEW\n            );\n        };\n\n        // Delete Master Button\n        const deleteMasterButton = new MasterButton({ type: MasterButtonType.DELETE });\n        deleteMasterButton.disableHandler = (item: MedicalConditionDTO): boolean => {\n            return this.actionButtonDisableHandler(item);\n        };\n\n        return [\n            addMasterButton,\n            editMasterButton,\n            copyMasterButton,\n            voidMasterButton,\n            noteMasterButton,\n            deleteMasterButton\n        ];\n    }\n\n    protected getItemDetailDialogResolve(item: MedicalConditionDTO): DirectDataResolve[] {\n        return [\n            {\n                resolveName: ResolvedDataNames.listData,\n                resolverClass: MedicalConditionDetailDataResolver,\n                context: item\n            }\n        ];\n    }\n\n    protected getTitle(): string {\n        return this.i18n({ value: 'Medical Condition', id: 'policy.evidence.tab.label.medicalcond' });\n    }\n\n    protected getItemDetailDialogSize(): DialogSize | string {\n        return DialogSize.large;\n    }\n\n    protected removeItem(item: MedicalConditionDTO): Promise<boolean> {\n        return super.removeItem(item).then(result => {\n            if (result) {\n                this.setOtherMedicalConditionTotalPoints();\n                return result;\n            }\n        });\n    }\n\n    protected getGridMinRows(): number {\n        return DataGridRowNumber.Large;\n    }\n\n    protected onItemDetailDialogOKClick(item: MedicalConditionDTO, dialogDirty: boolean): void {\n        super.onItemDetailDialogOKClick(item, dialogDirty);\n        this.setOtherMedicalConditionTotalPoints();\n    }\n\n    private setupNoteButtonAuthorization(): void {\n        this.buttons.find(\n            button => button.type === AppMasterButtonType.NOTE\n        ).authorizationLevel = this.authorizationData.getLevel('addUWNote');\n    }\n\n    // private getCopyItemMessage(): string {\n    //     return this.i18n({\n    //         value:\n    //             'Confirm if you want to create a copy of selected record. A copy of selected record will be created in the medical condition list',\n    //         id: 'policy.evidence.medcond.copymessage'\n    //     });\n    // }\n\n    private setActiveApplicant(): void {\n        this._applicant = this._applicantListHelper.getActiveApplicantOrDefault(\n            this._appSession.policyDTO.Insureds_LazyLoad\n        );\n    }\n\n    private setOtherMedicalConditionTotalPoints(): void {\n        this.medicalConditionTotalPoints = this._debitCreditHelper.getMedicalConditionGridInfo(this._applicant).Total;\n    }\n\n    private addMasterButtonHandler(): any {\n        const medicalConditionDTO = new MedicalConditionDTO();\n        const addDialogParams: ModalDialogParams = {\n            view: MedicalConditionDetailCreatorComponent,\n            resolve: this.getItemDetailDialogResolve(medicalConditionDTO),\n            title: this.getCreateItemDialogTitle(),\n            buttons: this.getItemDetailDialogButtons(),\n            data: medicalConditionDTO,\n            size: DialogSize.large\n        };\n        this._modalDialog.open(addDialogParams).then(dialogRef => {\n            dialogRef.result.then(result => {\n                if (result.returnValue) {\n                    this.addMedicalConditions(result.returnValue.selectedMedicalCondition);\n                }\n            });\n        });\n    }\n\n    private copyMasterButtonHandler(item: MedicalConditionDTO): any {\n        if (item === null) {\n            return;\n        }\n        this.confirmDialog\n            .open({\n                message: this.getCopyItemMessage(),\n                title: this.getCopyItemDialogTitle(),\n                buttons: this.getItemDetailDialogButtons()\n            })\n            .then(result => {\n                const isRemoved = result.buttonId === DialogButtonType.ACCEPT;\n                if (isRemoved) {\n                    this.addMedicalCondition(item);\n                }\n            });\n    }\n\n    private voidMasterButtonHandler(item: MedicalConditionDTO): any {\n        if (item === null) {\n            return;\n        }\n        if (this.isSystemGenerated(item)) {\n            this.rowManagementDelegate.saveRow(this.voidMedicalCondition(item));\n            this.setOtherMedicalConditionTotalPoints();\n        }\n    }\n\n    private noteMasterButtonHandler(): any {\n        this.messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, {\n            areaId: TabPolicySplitPaneAreas.AddMedicalConditionUWNote,\n            context: { isApplicantListDisabled: true, showApplicantStatus: false }\n        });\n    }\n\n    private addMedicalConditions(values: MedicalConditionDTO[]): void {\n        if (this._applicant.MedicalConditions_LazyLoad && values && values.length > 0) {\n            values.forEach(value => {\n                this._applicant.MedicalConditions_LazyLoad.push(this.createMedicalConditionDTO(value));\n            });\n            this.setModelDirty();\n            this.refreshDetail();\n        }\n    }\n\n    private addMedicalCondition(value: MedicalConditionDTO): void {\n        if (this._applicant.MedicalConditions_LazyLoad && value) {\n            this._applicant.MedicalConditions_LazyLoad.push(this.createMedicalConditionDTO(value));\n            this.refreshDetail();\n        }\n    }\n\n    private createMedicalConditionDTO(value: MedicalConditionDTO): MedicalConditionDTO {\n        if (this._applicant.MedicalConditions_LazyLoad && value) {\n            const medicalConditionDTO = this._medicalConditionItemFactory.newInstance({\n                items: this._applicant.MedicalConditions_LazyLoad\n            });\n            medicalConditionDTO.BodilySystem = value.BodilySystem;\n            medicalConditionDTO.Condition = value.Condition;\n            medicalConditionDTO.Criteria = value.Criteria;\n            medicalConditionDTO.TimeOfCriteria = value.TimeOfCriteria;\n            medicalConditionDTO.IsSystemGenerated = 'false';\n            medicalConditionDTO.AddedBy = this._appSession.user.UserId as number;\n            medicalConditionDTO.Added = DBDateUtil.dateToDBDate(new Date()).dateAndTimeAsString;\n            medicalConditionDTO.Points = value.Points;\n            return medicalConditionDTO;\n        }\n    }\n\n    private isSystemGenerated(medicalCondition: MedicalConditionDTO): boolean {\n        return medicalCondition.IsSystemGenerated == 'true';\n    }\n\n    private refreshDetail(): void {\n        this.refreshMasterDetail();\n        this.setOtherMedicalConditionTotalPoints();\n    }\n\n    private voidMedicalCondition(medicalCondition: MedicalConditionDTO): MedicalConditionDTO {\n        if (medicalCondition) {\n            medicalCondition.Points = '0';\n            medicalCondition.Override = 'true';\n        }\n        return medicalCondition;\n    }\n\n    private actionButtonEnableHandler(medicalCondition: MedicalConditionDTO): boolean {\n        return medicalCondition\n            ? !(this.isSystemGenerated(medicalCondition) && medicalCondition.Override == 'false')\n            : !medicalCondition;\n    }\n\n    private actionButtonDisableHandler(medicalCondition: MedicalConditionDTO): boolean {\n        return medicalCondition ? this.isSystemGenerated(medicalCondition) : !medicalCondition;\n    }\n\n    private setModelDirty(): void {\n        // this needs to be done explicitly as we are using own add button handler ( not base class onCreateItem )\n        this.changeManager.setIsDirty(true);\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule, DatePipe } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { LsPipeModule } from 'ls-core/util/pipe/ls-pipe.module';\r\n\r\nimport { MedicalConditionMetaDataResolver } from './medical-condition-meta-data.resolver';\r\nimport { MedicalConditionTabComponent } from './medical-condition-tab.component';\r\nimport { MedicalConditionComponent } from './medical-condition.component';\r\nimport { MedicalConditionDataResolver } from './medical-condition-data.resolver';\r\nimport {\r\n    MedicalConditionDetailCreatorComponent,\r\n    MedicalConditionDataListComponent,\r\n    MedicalConditionDetailDataResolver,\r\n    MedicalConditionDetailEditorComponent\r\n} from './detail';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule, LsPipeModule],\r\n    declarations: [\r\n        MedicalConditionTabComponent,\r\n        MedicalConditionComponent,\r\n        MedicalConditionDataListComponent,\r\n        MedicalConditionDetailCreatorComponent,\r\n        MedicalConditionDetailEditorComponent\r\n    ],\r\n    providers: [\r\n        DatePipe,\r\n        MedicalConditionDataResolver,\r\n        MedicalConditionMetaDataResolver,\r\n        MedicalConditionDetailDataResolver\r\n    ],\r\n    entryComponents: [MedicalConditionDetailCreatorComponent, MedicalConditionDetailEditorComponent]\r\n})\r\nexport class MedicalConditionModule {}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods, DataService } from 'ls-core/service';\r\nimport { MedicalConditionDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class MedicalConditionService {\r\n    private _dataService: DataService;\r\n\r\n    constructor(dataService: DataService) {\r\n        this._dataService = dataService;\r\n    }\r\n\r\n    private getServiceParams(medicalConditionDTO: MedicalConditionDTO): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.MEDCON_LIST_GET,\r\n            serviceMethod: UIServiceMethods.MEDCON_LIST_GET,\r\n            requestPayload: this.buildRequest(medicalConditionDTO)\r\n        });\r\n    }\r\n\r\n    private buildRequest(medicalConditionDTO: MedicalConditionDTO): MedicalConditionGetRequest {\r\n        const request = new MedicalConditionGetRequest();\r\n        request.medicalConditionDTO = medicalConditionDTO;\r\n        return request;\r\n    }\r\n\r\n    public getMedicalConditionList(medicalConditionDTO: MedicalConditionDTO): Promise<MedicalConditionGetResponse> {\r\n        const serviceParams = this.getServiceParams(medicalConditionDTO);\r\n        return this._dataService.getData(serviceParams).then(response => {\r\n            return <MedicalConditionGetResponse>response.responsePayload;\r\n        });\r\n    }\r\n}\r\n\r\nclass MedicalConditionGetRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.MedicalConditionGetRequest, LifeSuite.UIServiceDTO';\r\n    public medicalConditionDTO: MedicalConditionDTO;\r\n}\r\n\r\nclass MedicalConditionGetResponse {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.MedicalConditionGetResponse, LifeSuite.UIServiceDTO';\r\n    public objectList: MedicalConditionDTO[];\r\n}\r\n","﻿export * from './mib-report';\r\nexport * from './mib-coding';\r\nexport * from './mib.component';\r\nexport * from './mib.module';\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { TabDefMIB } from 'ui/tabview';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class MibAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n    }\r\n\r\n    protected setup(): void {\r\n        this.authorizationData.defaultLevel = this.getParentAuthorizationLevel(TabDefMIB.name);\r\n    }\r\n}\r\n","export * from './mib-coding-detail.component';","module.exports = \"<div ngForm #form=\\\"ngForm\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-6\\\">\\r\\n            <lf-form-input [control]=\\\"mibCoding\\\" label=\\\"MIB Coding\\\" i18n-label=\\\"@@policy.evidence.tab.label.mibcoding\\\">\\r\\n                <lf-inputtext #mibCoding name=\\\"mibCoding\\\" [(ngModel)]=\\\"data.MibCodes\\\" required secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-sm-6\\\">\\r\\n            <lf-form-input [control]=\\\"createdBy\\\" label=\\\"Created By\\\" i18n-label=\\\"@@policy.mib.submitted.codes.gridheader.createdby\\\">\\r\\n                <lf-statictext #createdBy name=\\\"createdBy\\\" [value]=\\\"data.AddedBy | username : resolvedData.metaData.aus_users\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-sm-6\\\">\\r\\n            <lf-form-input [control]=\\\"inquiryDate\\\" label=\\\"Created On\\\" i18n-label=\\\"@@policy.mib.submitted.codes.gridheader.createdon\\\">\\r\\n                <lf-statictext #inquiryDate name=\\\"inquiryDate\\\" [value]=\\\"data.DateAdded | dbDate\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\r\nimport { ParentChildRegistry } from 'life-core/view-model';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { MetadataUtil, DBDateUtil } from 'ls-core/util';\r\nimport { MIBCodingDTO } from 'ls-core/model';\r\n\r\nimport { MibDetailAuthorizationProvider } from './../../mib-detail-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'other-risks-detail-editor',\r\n    templateUrl: './mib-coding-detail.component.html',\r\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: MibDetailAuthorizationProvider }]\r\n})\r\nexport class MIBCodingDetailDialogEditor extends BasePolicyDialogDetailViewModel<MIBCodingDTO> {\r\n    public userName: string;\r\n\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.setupUserData();\r\n        this.setDefaultDate();\r\n    }\r\n\r\n    private setupUserData(): void {\r\n        if (!this.data.AddedBy) {\r\n            this.data.AddedBy = MetadataUtil.getItemCodeByLabel(this.resolvedData.metaData.aus_users, this._appSession\r\n                .user.UserId as string);\r\n        }\r\n    }\r\n\r\n    private setDefaultDate(): void {\r\n        const dateAdded = this.data.DateAdded;\r\n        // set today's date as default date when DateAdded does not exit\r\n        if (!dateAdded || (dateAdded && !dateAdded.dateAndTimeAsString)) {\r\n            this.data.DateAdded = DBDateUtil.dateToDBDate(new Date());\r\n        }\r\n    }\r\n}\r\n","﻿export * from './detail';\r\nexport * from './submitted-codes';\r\nexport * from './mib-coding-data.resolver';\r\nexport * from './mib-coding-metadata.resolver';\r\nexport * from './mib-coding.component';\r\nexport * from './mib-coding-tab.component';\r\nexport * from './mib-coding.service';","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class MIBCodingDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(\r\n            this.policy,\r\n            DataCollectionNames.Insureds,\r\n            this.getLazyLoadTree()\r\n        );\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n\r\n    private getLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            insuredDTOLoadTree.AddChild(DataCollectionNames.MIBCoding);\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\nimport { MetadataUtil } from 'ls-core/util';\r\nimport { MIBCodingDTO } from 'ls-core/model';\r\n\r\nimport { MIBCodingValidationResultIconHelper } from './mib-coding-validation-result-icon.helper';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst MIBCodingGridFields = {\r\n    MibCodes: 'MibCodes',\r\n    AddedBy: 'AddedBy',\r\n    DateAdded: 'DateAdded',\r\n    MibValidationResult: 'MibValidationResult',\r\n    MibTranslationResult: 'MibTranslationResult'\r\n};\r\n\r\n@Injectable()\r\nexport class MIBCodingGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(isMIBEVTEnabled: boolean): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'MIB Code', id: 'policy.mib.submitted.codes.gridheader.mibcode' }),\r\n            field: MIBCodingGridFields.MibCodes,\r\n            width: 150\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Valid', id: 'policy.mib.submitted.codes.gridheader.valid' }),\r\n            field: MIBCodingGridFields.MibValidationResult,\r\n            cellRenderer: this.getIcon,\r\n            width: 45,\r\n            hide: !isMIBEVTEnabled,\r\n            onCellClicked: (params: any) => this.onValidIconClick(params)\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Message', id: 'policy.mib.submitted.codes.gridheader.message' }),\r\n            field: MIBCodingGridFields.MibTranslationResult,\r\n            width: 260,\r\n            hide: !isMIBEVTEnabled\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created By', id: 'policy.mib.submitted.codes.gridheader.createdby' }),\r\n            field: MIBCodingGridFields.AddedBy,\r\n            width: 170,\r\n            valueFormatter: this.getUserName\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created On', id: 'policy.mib.submitted.codes.gridheader.createdon' }),\r\n            field: MIBCodingGridFields.DateAdded,\r\n            width: 120,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getIcon(params: any): string {\r\n        return MIBCodingValidationResultIconHelper.getIcon(params.data.MibValidationResult);\r\n    }\r\n\r\n    private getUserName(params: any): string {\r\n        if (params.data.AddedBy) {\r\n            return MetadataUtil.getItemLabelByCode(params.context.listData.aus_users, params.data.AddedBy);\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private onValidIconClick(params: any): void {\r\n        if (params.data) {\r\n            const mibCode: MIBCodingDTO = params.data;\r\n            params.context.onValidateIconClick(mibCode);\r\n        }\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { MIBCodingDTO, DBDate } from 'ls-core/model';\r\nimport { MIBMasterGridNodeIds } from '../mib.resources';\r\n\r\n@Injectable()\r\nexport class MIBCodingItemFactory extends BaseDTOItemFactory<MIBCodingDTO> {\r\n    public newInstance(createItemParams: MIBCodingCreateItemParams<MIBCodingDTO>): MIBCodingDTO {\r\n        const mibCodingDTO = new MIBCodingDTO();\r\n        // (policy_person_id,sequence_number) are composite primary key in mib_coding table\r\n        mibCodingDTO.SequenceNumber = this.getNextId(createItemParams.items, MIBMasterGridNodeIds.SequenceNumber);\r\n        mibCodingDTO.PolicyPersonId = createItemParams.policyPersonId;\r\n        mibCodingDTO.EffectiveDate = createItemParams.effectiveDate;\r\n        mibCodingDTO.MibValidationResult = 0;\r\n        mibCodingDTO.MibTranslationResult = null;\r\n        return mibCodingDTO;\r\n    }\r\n}\r\n\r\nexport interface MIBCodingCreateItemParams<T> extends CreateItemParams<T> {\r\n    policyPersonId: any;\r\n    effectiveDate: DBDate;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class MIBCodingMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['system', 'aus_users'];\r\n    }\r\n}\r\n","export enum MibCodingSubmittedStatusType {\n    NOT_SENT = 0,\n    SUBMITTED = 1,\n    SUCCESS = 2\n}\n","module.exports = \"<mib-coding></mib-coding>\"","﻿import { Component, Injector } from '@angular/core';\n\nimport { TertiaryTabHostViewModel } from 'life-core/component';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { SavePolicyDataDelegate } from 'ls-core/service';\nimport { PolicyDTO } from 'ls-core/model';\n\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\n\n@Component({\n    selector: 'mib-coding-tab',\n    templateUrl: './mib-coding-tab.component.html',\n    providers: [PolicySubscriber]\n})\nexport class MIBCodingTabComponent extends TertiaryTabHostViewModel<PolicyDataModel> {\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n    }\n\n    protected getDataToSave(): PolicyDTO {\n        return this.data.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n}\n","import { IconData } from 'life-core/model';\r\nimport { MIBCodingValidationResultType } from './mib-coding-validation-result-type';\r\n\r\nconst mibValidationIconTitle = 'MIB Validation result';\r\n\r\nexport class MIBCodingValidationResultIconHelper {\r\n    public static getIcon(validationResult: number): string {\r\n        const iconData = this.getIconData(validationResult);\r\n        return `<div title=\"${iconData.title}\" class=\"${iconData.cssClass} grid-cell-icon\"/>`;\r\n    }\r\n\r\n    private static getIconData(validationResult: number): IconData {\r\n        let iconData: IconData;\r\n        switch (validationResult) {\r\n            case MIBCodingValidationResultType.VALID:\r\n                iconData = new IconData('mib-validation-result-valid-icon', `${mibValidationIconTitle} VALID`);\r\n                break;\r\n            case MIBCodingValidationResultType.INVALID:\r\n                iconData = new IconData('mib-validation-result-invalid-icon', `${mibValidationIconTitle} INVALID`);\r\n                break;\r\n            case MIBCodingValidationResultType.VALID_NOT_REPORTED:\r\n                iconData = new IconData(\r\n                    'mib-validation-result-valid-not-reported-icon',\r\n                    `${mibValidationIconTitle} Valid or NOT REPORTED`\r\n                );\r\n                break;\r\n            default:\r\n                iconData = new IconData('mib-validation-result-pending-icon', `${mibValidationIconTitle} PENDING`);\r\n                break;\r\n        }\r\n        return iconData;\r\n    }\r\n}\r\n","export enum MIBCodingValidationResultType {\r\n    VALID = 1,\r\n    VALID_NOT_REPORTED = 2,\r\n    INVALID = 5,\r\n    PENDING = 0\r\n}\r\n","module.exports = \"<div class=\\\"row lf-solid-bottom-border pb-2\\\">\\r\\n    <div class=\\\"col-8\\\">\\r\\n        <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\" secureComponent\\r\\n            [disabled]=\\\"disabled\\\">\\r\\n        </master-detail>\\r\\n    </div>\\r\\n    <div class=\\\"col-4 d-flex justify-content-center align-items-end\\\">\\r\\n        <lf-button id=\\\"openPolicyButton\\\" label=\\\"Validate\\\" i18n-label=\\\"@@policy.mib.submitted.codes.button.validate\\\" *ngIf=\\\"isMIBEVTEnabled\\\"\\r\\n            [disabled]=\\\"!isValidateButtonEnabled\\\" (onClick)=\\\"onValidateCodesClick()\\\" styleClass=\\\"btn btn-primary right-margin-sm\\\"></lf-button>\\r\\n        <lf-button id=\\\"submitCodes\\\" name=\\\"submitCodes\\\" label=\\\"Submit Code\\\" i18n-label=\\\"@@policy.mib.submitted.codes.button.submitcode\\\"\\r\\n            [disabled]=\\\"!isSubmitCodesButtonEnabled\\\" (onClick)=\\\"onSubmitCodesClick()\\\" secureComponent styleClass=\\\"btn btn-primary ml-3\\\"></lf-button>\\r\\n    </div>\\r\\n</div>\\r\\n<mib-submitted-codes [codes]=\\\"submittedMIBCodings\\\"></mib-submitted-codes>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport {\r\n    BaseDataManager,\r\n    RowManagementDelegate,\r\n    MasterDetailComponentResolver,\r\n    CreateItemEventData,\r\n    MasterButton,\r\n    MasterButtonType\r\n} from 'life-core/component/master-detail';\r\nimport { DialogButton, DialogButtonType, DialogResult, ItemEventData, ButtonActionType } from 'life-core/component';\r\nimport {\r\n    IGridColumnsBuilder,\r\n    IDataGridOptions,\r\n    DataGridColumns,\r\n    DataGridOptionsUtil,\r\n    DataGridCommonOptions,\r\n    IDataGridColumn\r\n} from 'life-core/component/grid';\r\nimport { DirectDataResolve, ItemOpenMode } from 'life-core/component/shared';\r\nimport { ResolvedDataNames } from 'life-core/view-model/data-resolver';\r\nimport { DefaultDataService, SetDefaultDataRequest, SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { DateFormatter, DateUtil } from 'life-core/util';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\n\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { PolicyDTO, InsuredDTO, MIBCodingDTO, MetadataItem, DBDate } from 'ls-core/model';\r\nimport { DBDateUtil, MetadataUtil } from 'ls-core/util';\r\nimport { BasePolicyMasterDetailViewModel, ApplicantListHelper } from 'business/policy/shared';\r\nimport { RefreshPolicyHandler } from 'business/policy/shared/refresh-policy/refresh-policy.handler';\r\nimport { MIBMasterGridNodeIds, MIBItemNames } from '../mib.resources';\r\nimport { MIBCodingDetailDialogEditor } from './detail';\r\nimport { MIBCodingGridColumnsBuilder } from './mib-coding-grid-columns.builder';\r\nimport { MIBCodingItemFactory, MIBCodingCreateItemParams } from './mib-coding-item-factory';\r\nimport { MIBCodingMetaDataResolver } from './mib-coding-metadata.resolver';\r\nimport { MIBCodingValidationResultType } from './mib-coding-validation-result-type';\r\nimport { MIBCodingService, MibCodingSubmitResponse } from './mib-coding.service';\r\nimport { MibCodingSubmittedStatusType } from './mib-coding-submitted-status-type';\r\n\r\nexport function mibCodingRowManagementDelegateFactory(\r\n    itemFactory: MIBCodingItemFactory,\r\n    dataManager: BaseDataManager<MIBCodingDTO>\r\n): RowManagementDelegate<MIBCodingDTO> {\r\n    return new RowManagementDelegate({\r\n        itemName: MIBItemNames.MIBCoding,\r\n        itemIDPropertyName: MIBMasterGridNodeIds.SequenceNumber,\r\n        itemFactory: itemFactory,\r\n        dataManager: dataManager\r\n    });\r\n}\r\n\r\nexport function mibCodingItemComponentResolverFactory(): MasterDetailComponentResolver<MIBCodingDTO> {\r\n    return new MasterDetailComponentResolver({\r\n        itemComponents: MIBCodingDetailDialogEditor\r\n    });\r\n}\r\n\r\n@Component({\r\n    selector: 'mib-coding',\r\n    templateUrl: './mib-coding.component.html',\r\n    providers: [\r\n        BaseDataManager,\r\n        MIBCodingItemFactory,\r\n        {\r\n            provide: RowManagementDelegate,\r\n            useFactory: mibCodingRowManagementDelegateFactory,\r\n            deps: [MIBCodingItemFactory, BaseDataManager]\r\n        },\r\n        {\r\n            provide: MasterDetailComponentResolver,\r\n            useFactory: mibCodingItemComponentResolverFactory\r\n        },\r\n        MIBCodingGridColumnsBuilder,\r\n        MIBCodingService,\r\n        RefreshPolicyHandler\r\n    ]\r\n})\r\nexport class MIBCodingComponent extends BasePolicyMasterDetailViewModel<MIBCodingDTO> {\r\n    public submittedMIBCodings: MIBCodingDTO[];\r\n\r\n    // this data is accessed in column builder\r\n    public aus_users: MetadataItem[];\r\n\r\n    public isSubmitCodesButtonEnabled: boolean;\r\n\r\n    public isValidateButtonEnabled: boolean;\r\n\r\n    public isMIBEVTEnabled: boolean;\r\n\r\n    private _policy: PolicyDTO;\r\n\r\n    private _applicantListHelper: ApplicantListHelper;\r\n\r\n    private _defaultDataService: DefaultDataService;\r\n\r\n    private _gridColumnsBuilder: IGridColumnsBuilder;\r\n\r\n    private _mibCodingsService: MIBCodingService;\r\n\r\n    private _activeApplicant: InsuredDTO;\r\n\r\n    private _mibCodings: MIBCodingDTO[];\r\n\r\n    private _totalMIBCodesAllowed: number = 50;\r\n\r\n    private _refreshPolicyHandler: RefreshPolicyHandler;\r\n\r\n    private _dateFormatter: DateFormatter;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        appSession: AppSession,\r\n        applicantListHelper: ApplicantListHelper,\r\n        defaultDataService: DefaultDataService,\r\n        gridColumnBuilder: MIBCodingGridColumnsBuilder,\r\n        mibCodingService: MIBCodingService,\r\n        refreshPolicyHandler: RefreshPolicyHandler,\r\n        dateFormatter: DateFormatter,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        this._policy = appSession.policyDTO;\r\n        this._applicantListHelper = applicantListHelper;\r\n        this._defaultDataService = defaultDataService;\r\n        this._gridColumnsBuilder = gridColumnBuilder;\r\n        this._mibCodingsService = mibCodingService;\r\n        this._refreshPolicyHandler = refreshPolicyHandler;\r\n        this._dateFormatter = dateFormatter;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        this.setActiveApplicant();\r\n        this.setupMIBCodings();\r\n        this.splitSubmittedMIBCodings();\r\n        this.setMIBEVTEnabled();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get showDetailAsPopup(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public onSubmitCodesClick(): void {\r\n        this.invokeMIBCodingsSubmission();\r\n        this.isSubmitCodesButtonEnabled = false; // IT37662 | IT36170\r\n    }\r\n\r\n    public onValidateCodesClick(): void {\r\n        const totalMIBCodesForValidation = this.getCountOfCodesForValidation();\r\n        if (totalMIBCodesForValidation > 0 && totalMIBCodesForValidation <= this._totalMIBCodesAllowed) {\r\n            // save before validate\r\n            this.saveData().then(() => {\r\n                // we are sending complete list of codes, MT will filter pending codes\r\n                this.validateMIBCodes(this._mibCodings);\r\n            });\r\n        } else if (totalMIBCodesForValidation === 0) {\r\n            this.showConfirmDialog(\r\n                this.getMibValidationDialogTitle(),\r\n                this.i18n({\r\n                    value:\r\n                        'No MIB Code exists for Validation and Translation request, All MIB Codes have been sent to MIB for validation.',\r\n                    id: 'policy.mib.validation.codes.nocodeexistsmsg'\r\n                })\r\n            );\r\n        } else if (totalMIBCodesForValidation > this._totalMIBCodesAllowed) {\r\n            this.showConfirmDialog(\r\n                this.getMibValidationDialogTitle(),\r\n                this.i18n(\r\n                    {\r\n                        value:\r\n                            'Codes entered for validation are more than allowed batch size {{totalMIBCodesAllowed}}. Please remove additional codes and then validate.',\r\n                        id: 'policy.mib.validation.codes.totalMIBCodesAllowednsg'\r\n                    },\r\n                    { totalMIBCodesAllowed: this._totalMIBCodesAllowed }\r\n                )\r\n            );\r\n        }\r\n    }\r\n\r\n    public onValidateIconClick(mibCode: MIBCodingDTO): void {\r\n        if (\r\n            mibCode.MibValidationResult === null ||\r\n            mibCode.MibValidationResult === MIBCodingValidationResultType.PENDING\r\n        ) {\r\n            if (this.unSavedMIBCodesExist(mibCode.MibCodes)) {\r\n                this.showConfirmDialog(\r\n                    this.getMibValidationDialogTitle(),\r\n                    this.i18n({\r\n                        value:\r\n                            'Other Unsaved MIB Code(s) exists. Please save MIB Code(s) and then send this code for validation.',\r\n                        id: 'policy.mib.validation.codes.unsavedexistsmsg'\r\n                    })\r\n                );\r\n            } else {\r\n                // save before validate\r\n                this.saveData().then(() => {\r\n                    this.validateMIBCodes([mibCode]);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.setMaxCodeCountForValidation();\r\n        this.enableActionButtons();\r\n    }\r\n\r\n    protected loadItems(): MIBCodingDTO[] {\r\n        return this._mibCodings || [];\r\n    }\r\n\r\n    protected initRowManagementDelegate(): void {\r\n        // filter only codes which are pending for submission\r\n        this.rowManagementDelegate.initDataManager(this.items, coding => this.pendingCodesPredicate(coding));\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getGridColumnDefs(): IDataGridColumn[] {\r\n        const gridColumns: DataGridColumns = this.getGridColumnsBuilder().build(this.isMIBEVTEnabled);\r\n        return gridColumns.getLayout();\r\n    }\r\n\r\n    protected getRowNodeId(data: MIBCodingDTO): any {\r\n        return data.SequenceNumber;\r\n    }\r\n\r\n    protected createItem(eventData: CreateItemEventData): Promise<MIBCodingDTO> {\r\n        if (this.isMaxCodeCountReached(ItemOpenMode.Create)) {\r\n            this.showMaxCodeReachedDialog();\r\n            return;\r\n        }\r\n        const mibCodingDTO: MIBCodingDTO = this.rowManagementDelegate.addNewRow({\r\n            items: this.items,\r\n            policyPersonId: this._activeApplicant.PolicyPersonId,\r\n            effectiveDate: DBDateUtil.dateToDBDate(new Date())\r\n        } as MIBCodingCreateItemParams<MIBCodingDTO>);\r\n\r\n        const defaultDataRequest = new SetDefaultDataRequest(this._policy, mibCodingDTO, '');\r\n        return this._defaultDataService.setDefaultData(defaultDataRequest).then(data => {\r\n            Object.assign(mibCodingDTO, data.workingDTO as MIBCodingDTO);\r\n            return mibCodingDTO;\r\n        });\r\n    }\r\n\r\n    protected onItemDetailDialogOKClick(item: MIBCodingDTO, dialogDirty: boolean): void {\r\n        super.onItemDetailDialogOKClick(item, dialogDirty);\r\n        this.enableActionButtons();\r\n    }\r\n\r\n    protected onEditItem(eventData: ItemEventData<MIBCodingDTO>): void {\r\n        if (this.isMaxCodeCountReached(ItemOpenMode.Edit)) {\r\n            this.showMaxCodeReachedDialog();\r\n            return;\r\n        }\r\n        super.onEditItem(eventData);\r\n    }\r\n\r\n    protected removeItem(item: MIBCodingDTO): Promise<boolean> {\r\n        return super.removeItem(item).then(result => {\r\n            if (result) {\r\n                this.enableActionButtons();\r\n                return result;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected getItemDetailDialogResolve(item: MIBCodingDTO): DirectDataResolve[] {\r\n        return [\r\n            {\r\n                resolveName: ResolvedDataNames.metaData,\r\n                resolverClass: MIBCodingMetaDataResolver,\r\n                context: item\r\n            }\r\n        ];\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return this.i18n({\r\n            value: 'MIB Codes Pending Submission',\r\n            id: 'policy.mib.submitted.codes.pendingsectionlabel'\r\n        });\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n\r\n    protected getDataToSave(): any {\r\n        return this._policy;\r\n    }\r\n\r\n    protected getPopupDetailButtons(): MasterButton<MIBCodingDTO>[] {\r\n        return [\r\n            new MasterButton({ type: MasterButtonType.ADD, actionType: ButtonActionType.DataChange }),\r\n            new MasterButton({\r\n                type: MasterButtonType.EDIT,\r\n                actionType: ButtonActionType.DataChange,\r\n                disableHandler: this.editButtonDisableHandler\r\n            }),\r\n            new MasterButton({ type: MasterButtonType.DELETE, actionType: ButtonActionType.DataChange })\r\n        ];\r\n    }\r\n\r\n    private setActiveApplicant(): void {\r\n        this._activeApplicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n        this.logger.log('MIB - Active Applicant', this._activeApplicant);\r\n    }\r\n\r\n    private setupMIBCodings(): void {\r\n        this._mibCodings = this._activeApplicant.MibCodings_LazyLoad;\r\n        this.logger.log('MIB Codings', this._mibCodings);\r\n    }\r\n\r\n    private setMIBEVTEnabled(): void {\r\n        const mibEVTEnabled = MetadataUtil.getLabelByValue(this.listData['system'], 'MIBEVTEnabled');\r\n        this.isMIBEVTEnabled = mibEVTEnabled && mibEVTEnabled.toUpperCase() === 'TRUE';\r\n    }\r\n\r\n    private setMaxCodeCountForValidation(): void {\r\n        const mibEVTBatchSize = MetadataUtil.getLabelByValue(this.listData['system'], 'MIBEVTBatchSize');\r\n        if (mibEVTBatchSize) {\r\n            this._totalMIBCodesAllowed = ConvertUtil.toNumber(mibEVTBatchSize);\r\n            if (this._totalMIBCodesAllowed > 50) {\r\n                this._totalMIBCodesAllowed = 50; // MIB does not allow more than 50 codes in one batch for validation.\r\n            }\r\n        }\r\n    }\r\n\r\n    private enableActionButtons(): void {\r\n        const pendingMibCodes = this.getPendingMIBCodes();\r\n        this.logger.log('pending mib codes', pendingMibCodes);\r\n        this.enableSubmitCodesButton(pendingMibCodes);\r\n        this.enableValidateCodesButton(pendingMibCodes);\r\n    }\r\n\r\n    private enableSubmitCodesButton(pendingMibCodes: MIBCodingDTO[]): void {\r\n        this.isSubmitCodesButtonEnabled = this.isMIBEVTEnabled\r\n            ? pendingMibCodes && pendingMibCodes.length > 0\r\n                ? !pendingMibCodes.some(mibCode => mibCode.MibValidationResult !== MIBCodingValidationResultType.VALID)\r\n                : false\r\n            : pendingMibCodes && pendingMibCodes.length > 0;\r\n    }\r\n\r\n    private enableValidateCodesButton(pendingMibCodes: MIBCodingDTO[]): void {\r\n        this.isValidateButtonEnabled = this.isMIBEVTEnabled\r\n            ? pendingMibCodes.some(mibCode => mibCode.MibValidationResult !== MIBCodingValidationResultType.VALID)\r\n            : false;\r\n    }\r\n\r\n    private getPendingMIBCodes(): MIBCodingDTO[] {\r\n        return this._mibCodings.filter(coding => {\r\n            return this.pendingCodesPredicate(coding);\r\n        });\r\n    }\r\n\r\n    private pendingCodesPredicate(coding: MIBCodingDTO): boolean {\r\n        return coding.DateSent ? !this.isMibCodeSubmitted(coding.DateSent) : true;\r\n    }\r\n\r\n    private splitSubmittedMIBCodings(): void {\r\n        this.submittedMIBCodings = this._mibCodings.filter((coding: MIBCodingDTO) =>\r\n            this.isMibCodeSubmitted(coding.DateSent)\r\n        );\r\n        this.logger.log('Submitted MIB Codings', this.submittedMIBCodings);\r\n    }\r\n\r\n    public isMibCodeSubmitted(dateSent: DBDate): boolean {\r\n        return (\r\n            dateSent &&\r\n            DateUtil.isDateSet(dateSent.datetime) &&\r\n            !!this._dateFormatter.format(dateSent.dateAndTimeAsString, 'short')\r\n        );\r\n    }\r\n\r\n    private invokeMIBCodingsSubmission(): void {\r\n        if (this.duplicateCodesExists()) {\r\n            this.showDuplicateCodesValidationDialog().then(() => {\r\n                this.enableActionButtons();\r\n            });\r\n        } else if (this.submittedCodesExists()) {\r\n            this.showCodesAlreadySubmittedValidationDialog().then(() => {\r\n                this.enableActionButtons();\r\n                this.performPolicyRefresh();\r\n            });\r\n        } else {\r\n            // we are sending complete list of codes, MT will filter pending codes\r\n            this._mibCodingsService\r\n                .submitMIBCodings(\r\n                    this._policy.PolicyId as number,\r\n                    this._activeApplicant.PolicyPersonId as number,\r\n                    this._mibCodings\r\n                )\r\n                .then((result: MibCodingSubmitResponse) => {\r\n                    this.logger.log('MIB Submission response', result);\r\n                    this.handleSubmitCodesResponse();\r\n                });\r\n        }\r\n    }\r\n\r\n    private handleSubmitCodesResponse(): void {\r\n        this.showConfirmDialog(\r\n            this.i18n({ value: 'MIB Codes Submission', id: 'policy.mib.submitted.codes.title' }),\r\n            this.i18n({\r\n                value: `The newly added codes will be moved to the 'Submitted MIB Codes' list after they have been successfully sent to MIB. \r\n        Results related to this transaction will be reported on the Case Notes or Case Log Screen after the transaction has completed.`,\r\n                id: 'policy.mib.submitted.codes.confirmmsg'\r\n            })\r\n        );\r\n        this.performPolicyRefresh();\r\n    }\r\n\r\n    private validateMIBCodes(pendingCodes: MIBCodingDTO[]): void {\r\n        this.logger.log('MIB Codes being sent for validation.', pendingCodes);\r\n        this._mibCodingsService\r\n            .validateMIBCodes(\r\n                this._policy.PolicyId as number,\r\n                this._activeApplicant.PolicyPersonId as number,\r\n                pendingCodes\r\n            )\r\n            .then((result: MibCodingSubmitResponse) => this.handleValidateCodesResponse(result));\r\n    }\r\n\r\n    private handleValidateCodesResponse(codesValidationResponse: MibCodingSubmitResponse): void {\r\n        this.logger.log('MIB Validation response', codesValidationResponse);\r\n        if (codesValidationResponse) {\r\n            if (codesValidationResponse._totalCodesSubmitted > 0) {\r\n                this.showConfirmDialog(\r\n                    this.getMibValidationDialogTitle(),\r\n                    this.i18n({\r\n                        value: 'MIB Code Validation and Translation request have been successfully sent to MIB.',\r\n                        id: 'policy.mib.validation.codes.confirmmsg'\r\n                    })\r\n                );\r\n            } else if (codesValidationResponse._totalCodesSubmitted === 0 && codesValidationResponse._errorMessage) {\r\n                this.showConfirmDialog(this.getMibValidationDialogTitle(), codesValidationResponse._errorMessage);\r\n            }\r\n        }\r\n        this.performPolicyRefresh();\r\n    }\r\n\r\n    private performPolicyRefresh(): void {\r\n        this._refreshPolicyHandler.setViewValidationDelegate(this.viewValidationDelegate);\r\n        this._refreshPolicyHandler.execute();\r\n    }\r\n\r\n    private unSavedMIBCodesExist(mibCode: string): boolean {\r\n        const pendingCodes = this.getPendingMIBCodes();\r\n        const today = DBDateUtil.dateToDBDate(new Date());\r\n        return pendingCodes.some(\r\n            pendingMibCode =>\r\n                pendingMibCode.MibCodes !== mibCode &&\r\n                this._dateFormatter.format(pendingMibCode.DateAdded.dateAndTimeAsString) ===\r\n                    this._dateFormatter.format(today.dateAndTimeAsString)\r\n        );\r\n    }\r\n\r\n    private isMaxCodeCountReached(mode: ItemOpenMode): boolean {\r\n        const totalMIBCodesForValidation = this.getCountOfCodesForValidation();\r\n        return mode === ItemOpenMode.Create\r\n            ? totalMIBCodesForValidation > this._totalMIBCodesAllowed\r\n            : totalMIBCodesForValidation >= this._totalMIBCodesAllowed;\r\n    }\r\n\r\n    private showMaxCodeReachedDialog(): void {\r\n        this.showConfirmDialog(\r\n            this.getMibValidationDialogTitle(),\r\n            this.i18n(\r\n                {\r\n                    value:\r\n                        'Maximum codes {{totalMIBCodesAllowed}} entered for validation has been reached. Please validate and then enter any additional codes.',\r\n                    id: 'policy.mib.maxcodereached.message'\r\n                },\r\n                { totalMIBCodesAllowed: this._totalMIBCodesAllowed }\r\n            )\r\n        );\r\n    }\r\n\r\n    private getCountOfCodesForValidation(): number {\r\n        const pendingCodes = this.getPendingMIBCodes();\r\n        const codesForValidation = pendingCodes.filter(\r\n            mibCode => mibCode.MibValidationResult === null || mibCode.MibValidationResult === 0\r\n        );\r\n        return codesForValidation ? codesForValidation.length : 0;\r\n    }\r\n\r\n    private showConfirmDialog(title: string, message: string): Promise<DialogResult> {\r\n        return this.confirmDialog.open({\r\n            message: message,\r\n            title: title,\r\n            buttons: [new DialogButton({ type: DialogButtonType.OK })]\r\n        });\r\n    }\r\n\r\n    private getMibValidationDialogTitle(): string {\r\n        return this.i18n({\r\n            value: 'MIB Code Validation and Translation',\r\n            id: 'policy.mib.validation.codes.confirmmsg.title'\r\n        });\r\n    }\r\n    private showDuplicateCodesValidationDialog(): Promise<DialogResult> {\r\n        return this.showConfirmDialog(\r\n            this.getMibValidationDialogTitle(),\r\n            this.i18n({\r\n                value: 'Trying to submit duplicate codes. Please remove duplicate codes.',\r\n                id: 'policy.mib.duplicatecode.message'\r\n            })\r\n        );\r\n    }\r\n    private showCodesAlreadySubmittedValidationDialog(): Promise<DialogResult> {\r\n        return this.showConfirmDialog(\r\n            this.getMibValidationDialogTitle(),\r\n            this.i18n({\r\n                value: 'Trying to submit codes which are already submitted.',\r\n                id: 'policy.mib.codesalreadysubmitted.message'\r\n            })\r\n        );\r\n    }\r\n\r\n    private duplicateCodesExists(): boolean {\r\n        const uniqueMIBCodes = new Set<string>(this._mibCodings.map(mibCoding => mibCoding.MibCodes));\r\n        return this._mibCodings.length != uniqueMIBCodes.size;\r\n    }\r\n    private submittedCodesExists(): boolean {\r\n        return this._mibCodings.some(code => code.SubmittedStatus == MibCodingSubmittedStatusType.SUBMITTED);\r\n    }\r\n\r\n    private editButtonDisableHandler(mibCode: MIBCodingDTO): boolean {\r\n        if (mibCode) {\r\n            return mibCode.MibValidationResult === MIBCodingValidationResultType.PENDING ? false : true;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods, DataService } from 'ls-core/service';\r\nimport { MIBCodingDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class MIBCodingService {\r\n    private _dataService: DataService;\r\n\r\n    constructor(dataService: DataService) {\r\n        this._dataService = dataService;\r\n    }\r\n\r\n    public submitMIBCodings(\r\n        policyID: number,\r\n        policyPersonId: number,\r\n        codes: MIBCodingDTO[]\r\n    ): Promise<MibCodingSubmitResponse> {\r\n        const serviceParams = this.getSubmitCodesServiceParams(policyID, policyPersonId, codes);\r\n        return this.invokeService(serviceParams);\r\n    }\r\n\r\n    public validateMIBCodes(\r\n        policyID: number,\r\n        policyPersonId: number,\r\n        codes: MIBCodingDTO[]\r\n    ): Promise<MibCodingSubmitResponse> {\r\n        const serviceParams = this.getValidateCodesServiceParams(policyID, policyPersonId, codes);\r\n        return this.invokeService(serviceParams);\r\n    }\r\n\r\n    private invokeService(serviceParams: DataServiceParams): Promise<MibCodingSubmitResponse> {\r\n        return this._dataService.updateData(serviceParams).then(response => {\r\n            return response && response.responsePayload ? (response.responsePayload as MibCodingSubmitResponse) : null;\r\n        });\r\n    }\r\n\r\n    private getSubmitCodesServiceParams(\r\n        policyID: number,\r\n        policyPersonId: number,\r\n        codes: MIBCodingDTO[]\r\n    ): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.MIB_CODINGS,\r\n            serviceMethod: UIServiceMethods.SUBMIT_CODES,\r\n            requestPayload: this.buildRequestPayload(policyID, policyPersonId, codes)\r\n        });\r\n    }\r\n\r\n    private getValidateCodesServiceParams(\r\n        policyID: number,\r\n        policyPersonId: number,\r\n        codes: MIBCodingDTO[]\r\n    ): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.MIB_CODINGS,\r\n            serviceMethod: UIServiceMethods.VALIDATE_MIB_CODES,\r\n            requestPayload: this.buildRequestPayload(policyID, policyPersonId, codes)\r\n        });\r\n    }\r\n\r\n    private buildRequestPayload(\r\n        policyID: number,\r\n        policyPersonId: number,\r\n        codes: MIBCodingDTO[]\r\n    ): MibCodingSubmitRequest {\r\n        const request = new MibCodingSubmitRequest();\r\n        request._policyID = policyID;\r\n        request._insuredID = policyPersonId;\r\n        request._mibCodindCollection = codes;\r\n        return request;\r\n    }\r\n}\r\n\r\nclass MibCodingSubmitRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.MibCodingSubmitRequest, LifeSuite.UIServiceDTO';\r\n    public _mibCodindCollection: MIBCodingDTO[];\r\n    public _policyID: number;\r\n    public _insuredID: number;\r\n}\r\n\r\nexport class MibCodingSubmitResponse {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.MibCodingSubmitResponse, LifeSuite.UIServiceDTO';\r\n    public _totalCodesSubmitted: number;\r\n    public _errorMessage: string;\r\n}\r\n","export * from './mib-submitted-codes.component';","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { LsCellFormatters } from 'ls-core/component/grid';\r\nimport { MetadataUtil } from 'ls-core/util';\r\nimport { MetadataItem } from 'ls-core/model';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst MIBSubmittedCodesFields = {\r\n    MibCodes: 'MibCodes',\r\n    EffectiveDate: 'EffectiveDate',\r\n    AddedBy: 'AddedBy',\r\n    DateAdded: 'DateAdded',\r\n    DateSent: 'DateSent'\r\n};\r\n\r\n@Injectable()\r\nexport class MIBSubmittedCodesColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.getMIBReportCodesGridColumns();\r\n        return this.columns;\r\n    }\r\n\r\n    private getMIBReportCodesGridColumns(): void {\r\n        const filterButtonParams: any = { applyButton: true, clearButton: true };\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'MIB Code', id: 'policy.mib.submitted.codes.gridheader.mibcode' }),\r\n            filter: 'text',\r\n            field: MIBSubmittedCodesFields.MibCodes,\r\n            filterParams: filterButtonParams\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Effective Date',\r\n                id: 'policy.mib.submitted.codes.gridheader.effectivedate'\r\n            }),\r\n            field: MIBSubmittedCodesFields.EffectiveDate,\r\n            filter: 'text',\r\n            filterParams: filterButtonParams,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created By', id: 'policy.mib.submitted.codes.gridheader.createdby' }),\r\n            field: MIBSubmittedCodesFields.AddedBy,\r\n            filter: 'text',\r\n            valueFormatter: this.getUserName\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created On', id: 'policy.mib.submitted.codes.gridheader.createdon' }),\r\n            field: MIBSubmittedCodesFields.DateAdded,\r\n            filter: 'text',\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Date Sent', id: 'policy.mib.submitted.codes.gridheader.datesent' }),\r\n            field: MIBSubmittedCodesFields.DateSent,\r\n            filter: 'text',\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter\r\n        });\r\n    }\r\n\r\n    private getUserName(params: any): string {\r\n        if (params.data.AddedBy) {\r\n            return MetadataUtil.getItemLabelByCode(params.context.listData.aus_users, params.data.AddedBy as string);\r\n        }\r\n        return '';\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row justify-content-start\\\">\\r\\n    <div class=\\\"lf-grid-title\\\">{{title}}</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid class=\\\"lf-full-width-grid\\\" [ngStyle]=\\\"{height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\"\\r\\n        (rowClicked)=\\\"onRowClicked($event)\\\"></data-grid>\\r\\n</div>\\r\\n<data-grid-status-bar [rowCount]=\\\" rowCount\\\">\\r\\n</data-grid-status-bar>\"","import { Component, Injector, Input } from '@angular/core';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared/grid//base-policy-grid.vm';\r\nimport { IGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { MIBCodingDTO } from 'ls-core/model';\r\nimport { MIBSubmittedCodesColumnsBuilder } from './mib-submitted-codes-columns.builder';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Component({\r\n    selector: 'mib-submitted-codes',\r\n    templateUrl: './mib-submitted-codes.component.html',\r\n    providers: [PolicySubscriber, MIBSubmittedCodesColumnsBuilder]\r\n})\r\nexport class MIBSubmittedCodesComponent extends BasePolicyGridViewModel<MIBCodingDTO> {\r\n    @Input() public codes: MIBCodingDTO[];\r\n\r\n    public mibName: string;\r\n\r\n    private _gridColumnsBuilder: MIBSubmittedCodesColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: MIBSubmittedCodesColumnsBuilder, i18n: I18n) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        return super.loadData();\r\n    }\r\n\r\n    public getGridColumns(): DataGridColumns {\r\n        return this._gridColumnsBuilder.build();\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): MIBCodingDTO[] {\r\n        return this.codes || [];\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'Submitted MIB Codes', id: 'policy.mib.submitted.codes.submittedsectionlabel' });\r\n    }\r\n\r\n    protected getRowNodeId(data: MIBCodingDTO): any {\r\n        return data.SequenceNumber;\r\n    }\r\n}\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class MibDetailAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const mibAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.EVIDENCEMIB]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = mibAuthorizationLevel;\r\n    }\r\n}\r\n","﻿export * from './mib-report-detail.component';\r\nexport * from './mib-report-data.resolver';\r\nexport * from './item-detail';\r\n","﻿export * from './mib-report-item-detail.component';\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters } from 'ls-core/component/grid';\r\n\r\nconst MIBReportCodesFields = {\r\n    DataItem: 'DataItem',\r\n    FieldId: 'FieldId',\r\n    ReportedBy: 'ReportedBy',\r\n    DateReported: 'DateReported'\r\n};\r\n\r\n@Injectable()\r\nexport class MIBReportCodeColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.getMIBReportCodesGridColumns();\r\n        return this.columns;\r\n    }\r\n\r\n    private getMIBReportCodesGridColumns(): void {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Data Item', id: 'policy.mib.detail.gridheader.dataitem' }),\r\n            field: MIBReportCodesFields.DataItem\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Carrier Code', id: 'policy.mib.detail.gridheader.carrier' }),\r\n            field: MIBReportCodesFields.ReportedBy\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Submit Date', id: 'policy.mib.detail.gridheader.datsubmitdateaitem' }),\r\n            field: MIBReportCodesFields.DateReported,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Field ID', id: 'policy.mib.detail.gridheader.fieldid' }),\r\n            field: MIBReportCodesFields.FieldId\r\n        });\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-dashed-bottom-border\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"caseNumber\\\" label=\\\"Case #\\\" i18n-label=\\\"@@policy.mib.detail.case\\\">\\r\\n                <lf-statictext #caseNumber name=\\\"caseNumber\\\" [value]=\\\"data.PolicyNumber\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"name\\\" label=\\\"MIB Name\\\" i18n-label=\\\"@@policy.mib.detail.mibname\\\">\\r\\n                <lf-statictext #name name=\\\"name\\\" [value]=\\\"mibName\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"birthDate\\\" label=\\\"Birth Date\\\" i18n-label=\\\"@@policy.mib.detail.birthdate\\\">\\r\\n                <lf-statictext #birthDate name=\\\"birthDate\\\" [value]=\\\"data.BirthDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"birthPlace\\\" label=\\\"Birth Place\\\" i18n-label=\\\"@@policy.mib.detail.birthplace\\\">\\r\\n                <lf-statictext #birthPlace name=\\\"birthPlace\\\" [value]=\\\"data.PlaceOfBirth\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"gender\\\" label=\\\"Gender\\\" i18n-label=\\\"@@policy.mib.detail.gender\\\">\\r\\n                <lf-statictext #gender name=\\\"gender\\\" [value]=\\\"data.Gender\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"occupation\\\" label=\\\"Occupation\\\" i18n-label=\\\"@@policy.mib.detail.occupation\\\">\\r\\n                <lf-statictext #occupation name=\\\"occupation\\\" [value]=\\\"data.Occupation\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"hitOrTry\\\" label=\\\"Hit or Try\\\" i18n-label=\\\"@@policy.mib.detail.hitortry\\\">\\r\\n                <lf-statictext #hitOrTry name=\\\"hitOrTry\\\" [value]=\\\"data.ReplyType\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"inquiryType\\\" label=\\\"Inquiry Type\\\" i18n-label=\\\"@@policy.mib.detail.inquirytype\\\">\\r\\n                <lf-statictext #inquiryType name=\\\"inquiryType\\\" [value]=\\\"data.InqType\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"inquiryDate\\\" label=\\\"Inquiry Date\\\" i18n-label=\\\"@@policy.mib.detail.inquirydate\\\">\\r\\n                <lf-statictext #inquiryDate name=\\\"inquiryDate\\\" [value]=\\\"data.InquiryDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"modifyDate\\\" label=\\\"Modified Date\\\" i18n-label=\\\"@@policy.mib.detail.modifydate\\\">\\r\\n                <lf-statictext #modifyDate name=\\\"modifyDate\\\" [value]=\\\"data.ModifyDatetime | dbDate\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"recordType\\\" label=\\\"Record Type\\\" i18n-label=\\\"@@policy.mib.detail.recordtype\\\">\\r\\n                <lf-statictext #recordType name=\\\"recordType\\\" [value]=\\\"data.RecType\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row justify-content-start\\\">\\r\\n    <div class=\\\"lf-grid-title\\\">{{title}}</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid style=\\\"width:100%;height:150px;\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\"></data-grid>\\r\\n</div>\\r\\n<div class=\\\"row justify-content-start\\\">{{recordCount}} Records</div>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { IDataGridOptions, IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { NamePattern } from 'life-core/util/formatter/name-pattern';\r\nimport { NameUtil } from 'life-core/util';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { MIBCodeDTO } from 'ls-core/model';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared';\r\nimport { MIBReportCodeColumnsBuilder } from './mib-report-codes-columns.builder';\r\nimport { MibDetailAuthorizationProvider } from './../../../mib-detail-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'mib-report-item-detail',\r\n    templateUrl: './mib-report-item-detail.component.html',\r\n    providers: [\r\n        PolicySubscriber,\r\n        MIBReportCodeColumnsBuilder,\r\n        { provide: AuthorizationProvider, useClass: MibDetailAuthorizationProvider }\r\n    ]\r\n})\r\nexport class MIBReportItemDetailComponent extends BasePolicyGridViewModel<MIBCodeDTO> implements ICompose {\r\n    public mibName: string;\r\n\r\n    private _gridColumnsBuilder: MIBReportCodeColumnsBuilder;\r\n\r\n    public gridOptions: IDataGridOptions;\r\n\r\n    public recordCount: number;\r\n\r\n    public title: string;\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: MIBReportCodeColumnsBuilder, i18n: I18n) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'MIB Code', id: 'policy.mib.submitted.codes.gridheader.mibcode' });\r\n    }\r\n\r\n    private get MibCodes(): MIBCodeDTO[] {\r\n        return this.data.Codes_LazyLoad;\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        this.setContext(model);\r\n    }\r\n\r\n    private setContext(context: any): void {\r\n        this.data = context;\r\n        this.setMibName();\r\n        this.setRecordsCount();\r\n        this.refreshGrid();\r\n    }\r\n\r\n    private setMibName(): void {\r\n        this.mibName = NameUtil.getFullNameWithMiddleInitial({\r\n            firstName: this.data.FirstName,\r\n            lastName: this.data.LastName,\r\n            pattern: NamePattern.FirstAndLastName\r\n        });\r\n    }\r\n\r\n    private setRecordsCount(): void {\r\n        this.recordCount = this.MibCodes ? this.MibCodes.length : 0;\r\n    }\r\n\r\n    protected loadItems(): MIBCodeDTO[] {\r\n        return this.MibCodes;\r\n    }\r\n\r\n    protected getRowNodeId(data: MIBCodeDTO): any {\r\n        return data.SeqNumber;\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n}\r\n","﻿import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class MIBReportDataResolver extends BasePolicyDataResolver {\r\n  constructor(injector: Injector) {\r\n    super(injector);\r\n  }\r\n\r\n  protected loadLazyData(): Promise<any> {\r\n    const request = new LazyLoadItemsRequest();\r\n    request.addLazyLoadItem(\r\n      this.policy,\r\n      DataCollectionNames.Insureds,\r\n      this.getLazyLoadTree()\r\n    );\r\n    return this.lazyDataLoader.load(request);\r\n  }\r\n\r\n  private getLazyLoadTree(): NTree<string> {\r\n    const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n    {\r\n      const mibsNode = insuredDTOLoadTree.AddChild(DataCollectionNames.MIBs);\r\n      {\r\n        mibsNode.AddChildren([DataCollectionNames.Codes]);\r\n      }\r\n    }\r\n    return insuredDTOLoadTree;\r\n  }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { NamePattern } from 'life-core/util';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst MIBReportDetailGridFields = {\r\n    Name: 'FirstName',\r\n    BirthDate: 'BirthDate',\r\n    HitsOrTry: 'ReplyType',\r\n    Case: 'PolicyNumber',\r\n    BirthPlace: 'PlaceOfBirth',\r\n    InquiryDate: 'InquiryDate'\r\n};\r\n\r\n@Injectable()\r\nexport class MIBReportDetailGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Name', id: 'policy.mib.gridheader.name' }),\r\n            field: MIBReportDetailGridFields.Name,\r\n            width: 100,\r\n            valueFormatter: (params: any) =>\r\n                this._lsCellFormatters.nameCellFormatter(params, NamePattern.FirstAndLastName)\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Birth Date', id: 'policy.mib.gridheader.birthdate' }),\r\n            field: MIBReportDetailGridFields.BirthDate,\r\n            width: 100,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Hit or Try', id: 'policy.mib.gridheader.hitortry' }),\r\n            field: MIBReportDetailGridFields.HitsOrTry,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Case', id: 'policy.mib.gridheader.case' }),\r\n            field: MIBReportDetailGridFields.Case,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Birth Place', id: 'policy.mib.gridheader.birthplace' }),\r\n            field: MIBReportDetailGridFields.BirthPlace,\r\n            width: 200\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Inquiry Date', id: 'policy.mib.gridheader.inquirydate' }),\r\n            field: MIBReportDetailGridFields.InquiryDate,\r\n            width: 100,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { MIBDTO } from 'ls-core/model';\r\nimport { MIBMasterGridNodeIds } from '../../mib.resources';\r\n\r\n@Injectable()\r\nexport class MIBReportDetailItemFactory extends BaseDTOItemFactory<MIBDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<MIBDTO>): MIBDTO {\r\n        const mibDTO = new MIBDTO();\r\n        mibDTO.MibHeaderId = this.getNextId(createItemParams.items, MIBMasterGridNodeIds.MibHeaderId);\r\n        return mibDTO;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\" secureComponent>\\r\\n        </master-detail>\\r\\n    </div>\\r\\n</div>\"","﻿import { Component, Injector } from '@angular/core';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport {\n    MasterButton,\n    BaseDataManager,\n    RowManagementDelegate,\n    MasterDetailComponentResolver\n} from 'life-core/component/master-detail';\nimport {\n    IDataGridOptions,\n    IGridColumnsBuilder,\n    DataGridColumns,\n    DataGridOptionsUtil,\n    DataGridCommonOptions\n} from 'life-core/component/grid';\n\nimport { PolicyDTO, MIBDTO } from 'ls-core/model';\nimport { BasePolicyMasterDetailViewModel, ApplicantListHelper } from 'business/policy/shared';\nimport { MIBReportDetailItemFactory } from './mib-report-detail-item-factory';\nimport { MIBReportDetailGridColumnsBuilder } from './mib-report-detail-grid-columns.builder';\nimport { MIBReportItemDetailComponent } from './item-detail';\nimport { MIBMasterGridNodeIds, MIBItemNames } from '../../mib.resources';\n\nexport function mibReportRowManagementDelegateFactory(\n    itemFactory: MIBReportDetailItemFactory,\n    dataManager: BaseDataManager<MIBDTO>\n): RowManagementDelegate<MIBDTO> {\n    return new RowManagementDelegate({\n        itemName: MIBItemNames.MIBReport,\n        itemIDPropertyName: MIBMasterGridNodeIds.MibHeaderId,\n        itemFactory: itemFactory,\n        dataManager: dataManager\n    });\n}\n\nexport function mibReportItemComponentResolverFactory(): MasterDetailComponentResolver<MIBDTO> {\n    return new MasterDetailComponentResolver({\n        itemComponents: MIBReportItemDetailComponent\n    });\n}\n\n@Component({\n    selector: 'mib-report-detail',\n    templateUrl: './mib-report-detail.component.html',\n    providers: [\n        BaseDataManager,\n        PolicySubscriber,\n        MIBReportDetailItemFactory,\n        {\n            provide: RowManagementDelegate,\n            useFactory: mibReportRowManagementDelegateFactory,\n            deps: [MIBReportDetailItemFactory, BaseDataManager]\n        },\n        {\n            provide: MasterDetailComponentResolver,\n            useFactory: mibReportItemComponentResolverFactory\n        },\n        MIBReportDetailGridColumnsBuilder\n    ]\n})\nexport class MIBReportDetailComponent extends BasePolicyMasterDetailViewModel<MIBDTO> {\n    public policy: PolicyDTO;\n    private _gridColumnsBuilder: IGridColumnsBuilder;\n    private _applicantListHelper: ApplicantListHelper;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        gridColumnsBuilder: MIBReportDetailGridColumnsBuilder,\n        applicantListHelper: ApplicantListHelper\n    ) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.policy = p;\n        });\n        this._gridColumnsBuilder = gridColumnsBuilder;\n        this._applicantListHelper = applicantListHelper;\n    }\n\n    public get showDetailAsPopup(): boolean {\n        return false;\n    }\n\n    protected getInlineDetailButtons(): MasterButton<MIBDTO>[] {\n        return [];\n    }\n\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\n        return this._gridColumnsBuilder;\n    }\n\n    protected getRowNodeId(data: MIBDTO): any {\n        return data.MibHeaderId;\n    }\n\n    protected getRemoveItemMessage(item: MIBDTO): string {\n        // need not return any message from the method\n        // had to implement the method since it is an abstract in base class\n        return '';\n    }\n\n    protected loadItems(): MIBDTO[] {\n        const activeInsured = this._applicantListHelper.getActiveApplicantOrDefault(this.policy.Insureds_LazyLoad);\n        return activeInsured.MIBs_LazyLoad;\n    }\n}\n","﻿export * from './detail';\r\nexport * from './mib-report.component';","module.exports = \"<mib-report-detail></mib-report-detail>\"","﻿import { Component, Injector } from '@angular/core';\n\nimport { TertiaryTabHostViewModel } from 'life-core/component';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { SavePolicyDataDelegate } from 'ls-core/service';\nimport { PolicyDTO } from 'ls-core/model';\n\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\n\n@Component({\n    selector: 'mib-report',\n    templateUrl: './mib-report.component.html',\n    providers: [PolicySubscriber]\n})\nexport class MIBReportComponent extends TertiaryTabHostViewModel<PolicyDataModel> {\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n    }\n\n    protected getDataToSave(): PolicyDTO {\n        return this.data.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n}\n","module.exports = \"<tabview-mib></tabview-mib>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { SecondaryTabHostViewModel } from 'life-core/component';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { PolicyDTO } from 'ls-core/model';\r\n\r\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\r\nimport { MibAuthorizationProvider } from './mib-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'mib-tab',\r\n    templateUrl: './mib.component.html',\r\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: MibAuthorizationProvider }]\r\n})\r\nexport class MIBTabComponent extends SecondaryTabHostViewModel<PolicyDataModel> {\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.data.policy = p;\r\n        });\r\n    }\r\n\r\n    protected getDataToSave(): PolicyDTO {\r\n        return this.data.policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n}\r\n","﻿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { LsPipeModule } from 'ls-core/util/pipe/ls-pipe.module';\r\nimport { TabViewMIBComponent } from './tab';\r\nimport { MIBTabComponent } from './mib.component';\r\nimport {\r\n    MIBCodingTabComponent,\r\n    MIBCodingComponent,\r\n    MIBCodingDetailDialogEditor,\r\n    MIBSubmittedCodesComponent,\r\n    MIBCodingDataResolver,\r\n    MIBCodingMetaDataResolver\r\n} from './mib-coding';\r\nimport {\r\n    MIBReportComponent,\r\n    MIBReportDetailComponent,\r\n    MIBReportItemDetailComponent,\r\n    MIBReportDataResolver\r\n} from './mib-report';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule, LsPipeModule],\r\n    declarations: [\r\n        MIBTabComponent,\r\n        TabViewMIBComponent,\r\n        MIBReportComponent,\r\n        MIBReportDetailComponent,\r\n        MIBReportItemDetailComponent,\r\n        MIBCodingTabComponent,\r\n        MIBSubmittedCodesComponent,\r\n        MIBCodingComponent,\r\n        MIBCodingDetailDialogEditor\r\n    ],\r\n    providers: [MIBReportDataResolver, MIBCodingDataResolver, MIBCodingMetaDataResolver],\r\n    entryComponents: [MIBReportItemDetailComponent, MIBCodingDetailDialogEditor]\r\n})\r\nexport class MIBModule {}\r\n","export const MIBMasterGridNodeIds = {\r\n    MibHeaderId: 'MibHeaderId',\r\n    SequenceNumber: 'SequenceNumber'\r\n};\r\n\r\nexport const MIBItemNames = {\r\n    MIBReport: 'MIBReport',\r\n    MIBCoding: 'MIBCoding'\r\n};","﻿export * from './tabview-mib.component';","module.exports = \"<lf-routedTabView id=\\\"tabViewMIB\\\" tabViewType=\\\"tertiary\\\"\\r\\n                  [tabs]=\\\"tabsData$\\\" [initialSelectedIndex]=\\\"initialSelectedIndex$\\\"\\r\\n                  controlClose=\\\"true\\\" (onClose)=\\\"onTabClose($event)\\\" (onChange)=\\\"onTabSelectionChange($event)\\\">\\r\\n    <router-outlet></router-outlet>\\r\\n</lf-routedTabView>\\r\\n\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { TabDescriptor, TertiaryTabViewHostViewModel } from 'life-core/component/layout/tabview';\r\nimport { LsTabDescriptorFactory } from 'ui/tabview';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { PolicyDTO } from 'ls-core/model';\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\n\r\n@Component({\r\n    selector: 'tabview-mib',\r\n    templateUrl: './tabview-mib.component.html',\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class TabViewMIBComponent extends TertiaryTabViewHostViewModel {\r\n    protected policy: PolicyDTO;\r\n\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.policy = p;\r\n        });\r\n    }\r\n\r\n    protected get tabViewId(): string {\r\n        return `mib-${this.policy.PolicyId}`;\r\n    }\r\n\r\n    protected getStaticTabs(): TabDescriptor[] {\r\n        const policyId = ConvertUtil.toNumber(this.policy.PolicyId);\r\n        const tabDescriptorFactory = this.tabDescriptorFactory as LsTabDescriptorFactory;\r\n        const tabMIBReport = tabDescriptorFactory.createTertiaryTabDescriptorMIBReport(policyId);\r\n        const tabMIBCoding = tabDescriptorFactory.createTertiaryTabDescriptorMIBCoding(policyId);\r\n        const tabs = [tabMIBReport, tabMIBCoding];\r\n\r\n        tabMIBReport.selected = true;\r\n        return tabs;\r\n    }\r\n}\r\n","﻿export * from './mvr-detail.component';\r\nexport * from './violations';","module.exports = \"<div class=\\\"lf-dashed-bottom-border\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"reportDate\\\" label=\\\"Report Date\\\" i18n-label=\\\"@@policy.mvr.detail.reportdate\\\">\\r\\n                <lf-statictext #reportDate name=\\\"reportDate\\\" [value]=\\\"data.ReportDate  | dbDate\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"licenseClass\\\" label=\\\"License Class\\\" i18n-label=\\\"@@policy.mvr.detail.licenseclass\\\">\\r\\n                <lf-statictext #licenseClass name=\\\"licenseClass\\\" [value]=\\\"data.LicenseClass\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"licenseName\\\" label=\\\"License Name\\\" i18n-label=\\\"@@policy.mvr.detail.licensename\\\">\\r\\n                <lf-statictext #licenseName name=\\\"licenseName\\\" [value]=\\\"fullName\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"state\\\" label=\\\"State\\\" i18n-label=\\\"@@policy.mvr.detail.state\\\">\\r\\n                <lf-statictext #state name=\\\"state\\\" [value]=\\\"data.State\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"issueDate\\\" label=\\\"Issue Date\\\" i18n-label=\\\"@@policy.mvr.detail.issuedate\\\">\\r\\n                <lf-statictext #issueDate name=\\\"issueDate\\\" [value]=\\\"data.IssueDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"licenseNumber\\\" label=\\\"License Number\\\" i18n-label=\\\"@@policy.mvr.detail.licensenumber\\\">\\r\\n                <lf-statictext #licenseNumber name=\\\"licenseNumber\\\" [value]=\\\"data.LicenseNumber\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"address\\\" label=\\\"Address\\\" i18n-label=\\\"@@policy.mvr.detail.licenseaddress\\\">\\r\\n                <lf-statictext #address name=\\\"address\\\" [value]=\\\"data.LicenseAddress\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"expireDate\\\" label=\\\"Expire Date\\\" i18n-label=\\\"@@policy.mvr.detail.expiredate\\\">\\r\\n                <lf-statictext #expireDate name=\\\"expireDate\\\" [value]=\\\"data.ExpireDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"licenseStatus\\\" label=\\\"License Status\\\" i18n-label=\\\"@@policy.mvr.detail.licensestatus\\\">\\r\\n                <lf-statictext #licenseStatus name=\\\"licenseStatus\\\" [value]=\\\"data.LicenseStatus\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"licenseCityState\\\" label=\\\"City/State\\\" i18n-label=\\\"@@policy.mvr.detail.licensecitystate\\\">\\r\\n                <lf-statictext #licenseCityState name=\\\"licenseCityState\\\" [value]=\\\"data.LicenseCityState\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"restrictions\\\" label=\\\"Restrictions\\\" i18n-label=\\\"@@policy.mvr.detail.restrictions\\\">\\r\\n                <lf-statictext #restrictions name=\\\"restrictions\\\" [value]=\\\"data.Restrictions\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"driverInformation\\\" label=\\\"Driver Information\\\" i18n-label=\\\"@@policy.mvr.detail.driverinformation\\\">\\r\\n                <lf-statictext #driverInformation name=\\\"driverInformation\\\" [value]=\\\"data.DriverInformation\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input [control]=\\\"reportStatus\\\" label=\\\"Report Status\\\" i18n-label=\\\"@@policy.mvr.detail.reportstatus\\\">\\r\\n                <lf-statictext #reportStatus name=\\\"reportStatus\\\" [value]=\\\"data.ReportStatus\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<mvr-detail-violations [violationData]=\\\"violationData\\\"></mvr-detail-violations>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { DetailViewModel } from 'life-core/component/master-detail';\r\n\r\nimport { NameUtil } from 'life-core/util';\r\nimport { MVRDetailDTO, MVRDTO } from 'ls-core/model';\r\n\r\n@Component({\r\n    selector: 'mvr-detail',\r\n    templateUrl: './mvr-detail.component.html'\r\n})\r\nexport class MVRDetailComponent extends DetailViewModel<MVRDTO> {\r\n    public violationData: MVRDetailDTO[];\r\n    public fullName: string;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    public setModel(model: MVRDTO): void {\r\n        this.setContext(model);\r\n    }\r\n\r\n    private setContext(context: MVRDTO): void {\r\n        this.data = context;\r\n        this.violationData = this.data.Details_LazyLoad;\r\n        this.fullName = this.getFullName();\r\n    }\r\n\r\n    private getFullName(): string {\r\n        return NameUtil.getFullNameWithMiddleInitial({\r\n            firstName: this.data.FirstName,\r\n            middleName: this.data.MiddleName,\r\n            lastName: this.data.LastName\r\n        });\r\n    }\r\n}\r\n","export * from './mvr-detail-violations.component';","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\n@Injectable()\r\nexport class MVRDetailViolationsGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Violation Type', id: 'policy.mvr.detail.gridheader.violationtype' }),\r\n            field: MVRDetailFields.ViolationType,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Violation Date', id: 'policy.mvr.detail.gridheader.violationdate' }),\r\n            field: MVRDetailFields.ViolationDate,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Conviction Date', id: 'policy.mvr.detail.gridheader.convictiondate' }),\r\n            field: MVRDetailFields.ConvictionDate,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Violation Code', id: 'policy.mvr.detail.gridheader.violationcode' }),\r\n            field: MVRDetailFields.ViolationCode,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Points', id: 'policy.mvr.detail.gridheader.points' }),\r\n            field: MVRDetailFields.Points,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Assigned Violation Code',\r\n                id: 'policy.mvr.detail.gridheader.assignedviolationcode'\r\n            }),\r\n            field: MVRDetailFields.AssignedViolationCode,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Assigned Points', id: 'policy.mvr.detail.gridheader.assignedpoints' }),\r\n            field: MVRDetailFields.AssignedPoints,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Details', id: 'policy.mvr.detail.gridheader.violationdetail' }),\r\n            field: MVRDetailFields.ViolationDetail,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nconst MVRDetailFields = {\r\n    ViolationType: 'ViolationType',\r\n    ViolationDate: 'ViolationDate',\r\n    ConvictionDate: 'ConvictionDate',\r\n    ViolationCode: 'ViolationCode',\r\n    Points: 'Points',\r\n    AssignedViolationCode: 'AssignedViolationCode',\r\n    AssignedPoints: 'AssignedPoints',\r\n    ViolationDetail: 'ViolationDetail'\r\n};\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\" style=\\\"width: 100%; height:250px;\\\"></data-grid>\\r\\n</div>\\r\\n<data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\"","import { Injector, Component, Input } from '@angular/core';\r\n\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared/grid/base-policy-grid.vm';\r\nimport {\r\n    IGridColumnsBuilder,\r\n    IDataGridOptions,\r\n    DataGridColumns,\r\n    DataGridOptionsUtil,\r\n    DataGridCommonOptions\r\n} from 'life-core/component/grid';\r\nimport { MVRDetailDTO } from 'ls-core/model';\r\n\r\nimport { MVRDetailViolationsGridColumnsBuilder } from './mvr-detail-violations-grid-columns.builder';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\n@Component({\r\n    selector: 'mvr-detail-violations',\r\n    templateUrl: './mvr-detail-violations.component.html',\r\n    providers: [PolicySubscriber, MVRDetailViolationsGridColumnsBuilder]\r\n})\r\nexport class MVRDetailViolationsComponent extends BasePolicyGridViewModel<MVRDetailDTO> {\r\n    public gridOptions: IDataGridOptions;\r\n    private _gridColumnsBuilder: MVRDetailViolationsGridColumnsBuilder;\r\n    private _violationData: MVRDetailDTO[];\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: MVRDetailViolationsGridColumnsBuilder) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n\r\n    @Input()\r\n    public set violationData(value: MVRDetailDTO[]) {\r\n        this._violationData = value;\r\n        this.refreshGrid();\r\n    }\r\n\r\n    public getGridOptions(): IDataGridOptions {\r\n        const gridColumns: DataGridColumns = this.getGridColumns();\r\n        return DataGridOptionsUtil.getGridOptions(\r\n            {\r\n                rowData: this.loadItems(),\r\n                columnDefs: gridColumns.getLayout(),\r\n                rowSelection: 'single',\r\n                rowDeselection: true,\r\n                enableColResize: true,\r\n                enableSorting: true,\r\n                headerRows: 2,\r\n                context: {\r\n                    hostComponent: this\r\n                }\r\n            },\r\n            DataGridCommonOptions\r\n        );\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): MVRDetailDTO[] {\r\n        return this._violationData;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n\r\n    protected getRowNodeId(data: MVRDetailDTO): Object {\r\n        return data.MvrHeaderId;\r\n    }\r\n}\r\n","﻿export * from './mvr-tab.component';\r\nexport * from './mvr-data.resolver';","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { TabDefMVR } from 'ui/tabview';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class MvrAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n    }\r\n\r\n    protected setup(): void {\r\n        this.authorizationData.defaultLevel = this.getParentAuthorizationLevel(TabDefMVR.name);\r\n    }\r\n}\r\n","﻿import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class MVRDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getMVRLazyLoadTree());\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n\r\n    private getMVRLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            const mvrDTOLoadNode = insuredDTOLoadTree.AddChild(DataCollectionNames.MVRs);\r\n            {\r\n                mvrDTOLoadNode.AddChild(DataCollectionNames.MVRDetails);\r\n            }\r\n        }\r\n\r\n        return insuredDTOLoadTree;\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { NamePattern } from 'life-core/util';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\n@Injectable()\r\nexport class MVRGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Date', id: 'policy.mvr.gridheader.data' }),\r\n            field: MVRGridFields.ReportDate,\r\n            width: 100,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'License Name', id: 'policy.mvr.gridheader.licensename' }),\r\n            field: MVRGridFields.FullName,\r\n            width: 100,\r\n            valueFormatter: (params: any) =>\r\n                this._lsCellFormatters.nameCellFormatter(params, NamePattern.LastFirstAndMiddleInitial)\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'State', id: 'policy.mvr.gridheader.state' }),\r\n            field: MVRGridFields.State,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'License Number', id: 'policy.mvr.gridheader.licensenumber' }),\r\n            field: MVRGridFields.LicenseNumber,\r\n            width: 200\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nconst MVRGridFields = {\r\n    ReportDate: 'ReportDate',\r\n    FullName: 'FullName',\r\n    State: 'State',\r\n    LicenseNumber: 'LicenseNumber'\r\n};\r\n","﻿import { Injectable } from '@angular/core';\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { MVRDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class MVRItemFactory extends BaseDTOItemFactory<MVRDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<MVRDTO>): MVRDTO {\r\n        const mvrDTO = new MVRDTO();\r\n        mvrDTO.MvrHeaderId = this.getNextId(createItemParams.items, 'MvrHeaderId');\r\n        return mvrDTO;\r\n    }\r\n}\r\n","module.exports = \"<mvr></mvr>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { SecondaryTabHostViewModel } from 'life-core/component';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { PolicyDTO } from 'ls-core/model';\r\n\r\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\r\n\r\n@Component({\r\n    selector: 'mvr-tab',\r\n    templateUrl: './mvr-tab.component.html',\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class MVRTabComponent extends SecondaryTabHostViewModel<PolicyDataModel> {\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.data.policy = p;\r\n        });\r\n    }\r\n\r\n    protected getDataToSave(): PolicyDTO {\r\n        return this.data.policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\" secureComponent>\\r\\n        </master-detail>\\r\\n    </div>\\r\\n</div>\"","﻿import { Component, Injector } from '@angular/core';\n\nimport {\n    MasterButton,\n    BaseDataManager,\n    RowManagementDelegate,\n    MasterDetailComponentResolver\n} from 'life-core/component/master-detail';\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\nimport { AuthorizationProvider } from 'life-core/authorization';\n\nimport { PolicyDTO, MVRDTO } from 'ls-core/model';\nimport { PolicySubscriber } from 'ls-core/session';\n\nimport { BasePolicyMasterDetailViewModel, ApplicantListHelper } from 'business/policy/shared';\nimport { MVRItemFactory } from './mvr-item-factory';\nimport { MVRGridColumnsBuilder } from './mvr-grid-columns.builder';\nimport { MVRDetailComponent } from './detail';\nimport { MvrAuthorizationProvider } from './mvr-authorization.provider';\n\nexport function mvrRowManagementDelegateFactory(\n    itemFactory: MVRItemFactory,\n    dataManager: BaseDataManager<MVRDTO>\n): RowManagementDelegate<MVRDTO> {\n    return new RowManagementDelegate({\n        itemName: 'MVR',\n        itemIDPropertyName: 'MvrHeaderId',\n        itemFactory: itemFactory,\n        dataManager: dataManager\n    });\n}\n\nexport function mvrItemComponentResolverFactory(): MasterDetailComponentResolver<MVRDTO> {\n    return new MasterDetailComponentResolver({\n        itemComponents: MVRDetailComponent\n    });\n}\n\n@Component({\n    selector: 'mvr',\n    templateUrl: './mvr.component.html',\n    providers: [\n        BaseDataManager,\n        PolicySubscriber,\n        MVRItemFactory,\n        {\n            provide: RowManagementDelegate,\n            useFactory: mvrRowManagementDelegateFactory,\n            deps: [MVRItemFactory, BaseDataManager]\n        },\n        {\n            provide: MasterDetailComponentResolver,\n            useFactory: mvrItemComponentResolverFactory\n        },\n        MVRGridColumnsBuilder,\n        { provide: AuthorizationProvider, useClass: MvrAuthorizationProvider }\n    ]\n})\nexport class MVRComponent extends BasePolicyMasterDetailViewModel<MVRDTO> {\n    public policy: PolicyDTO;\n    private _gridColumnsBuilder: IGridColumnsBuilder;\n    private _applicantListHelper: ApplicantListHelper;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        gridColumnBuilder: MVRGridColumnsBuilder,\n        applicantListHelper: ApplicantListHelper\n    ) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.policy = p;\n        });\n        this._gridColumnsBuilder = gridColumnBuilder;\n        this._applicantListHelper = applicantListHelper;\n    }\n\n    public get showDetailAsPopup(): boolean {\n        return false;\n    }\n\n    protected getInlineDetailButtons(): MasterButton<MVRDTO>[] {\n        return [];\n    }\n\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\n        return this._gridColumnsBuilder;\n    }\n\n    protected getRowNodeId(data: MVRDTO): any {\n        return data.MvrHeaderId;\n    }\n\n    protected getRemoveItemMessage(item: MVRDTO): string {\n        // need not return any message from the method\n        // had to implement the method since it is an abstract in base class\n        return '';\n    }\n\n    protected loadItems(): MVRDTO[] {\n        const activeInsured = this._applicantListHelper.getActiveApplicantOrDefault(this.policy.Insureds_LazyLoad);\n        return activeInsured.MVRs_LazyLoad;\n    }\n}\n","﻿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { MVRComponent } from './mvr.component';\r\nimport { MVRDataResolver } from './mvr-data.resolver';\r\nimport { MVRTabComponent } from './mvr-tab.component';\r\nimport { MVRDetailComponent, MVRDetailViolationsComponent } from './detail';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [MVRTabComponent, MVRComponent, MVRDetailComponent, MVRDetailViolationsComponent],\r\n    entryComponents: [MVRDetailComponent],\r\n    providers: [MVRDataResolver]\r\n})\r\nexport class MVRModule {}\r\n","﻿export * from './paramedical.component';\r\nexport * from './paramedical-data.resolver';","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { TabDefParamedical } from 'ui/tabview';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class ParamedicalAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n    }\r\n\r\n    protected setup(): void {\r\n        this.authorizationData.defaultLevel = this.getParentAuthorizationLevel(TabDefParamedical.name);\r\n    }\r\n}\r\n","﻿import { Injector, Injectable } from '@angular/core';\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class ParamedicalDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getLazyLoadTree());\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n\r\n    private getLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            insuredDTOLoadTree.AddChild(DataCollectionNames.Parameds);\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-page-subheader\\\" i18n=\\\"@@policy.paramedical.detail.physicalmeasurements\\\">Physical Measurements</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Exam Company\\\" i18n-label=\\\"@@policy.paramedical.detail.examcompany\\\" [control]=\\\"examCompanyName\\\">\\r\\n            <lf-inputtext #examCompanyName name=\\\"examCompanyName\\\" [(ngModel)]=\\\"paramedical.ExamCompanyName\\\" maxLength=\\\"50\\\"\\r\\n                secureComponent></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Height\\\" i18n-label=\\\"@@policy.paramedical.detail.height\\\" [control]=\\\"height\\\">\\r\\n            <lf-inputheight #height name=\\\"height\\\" [(ngModel)]=\\\"paramedical.HeightInches\\\" secureComponent></lf-inputheight>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Weight\\\" i18n-label=\\\"@@policy.paramedical.detail.weight\\\" [control]=\\\"weightPounds\\\">\\r\\n            <lf-inputweight #weightPounds name=\\\"weightPounds\\\" [(ngModel)]=\\\"paramedical.WeightPounds\\\" secureComponent></lf-inputweight>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Weight 1 Year Ago\\\" i18n-label=\\\"@@policy.paramedical.detail.weight1yearago\\\" [control]=\\\"weightLossGain\\\">\\r\\n            <lf-inputweight #weightLossGain name=\\\"weightLossGain\\\" [(ngModel)]=\\\"paramedical.WeightLossGain\\\"\\r\\n                secureComponent></lf-inputweight>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Chest Inhale\\\" i18n-label=\\\"@@policy.paramedical.detail.chestinhale\\\" [control]=\\\"chestInhale\\\">\\r\\n            <lf-inputnumber format=\\\"n0\\\" [maxLength]=\\\"3\\\" decimals=\\\"0\\\" #chestInhale name=\\\"chestInhale\\\" [(ngModel)]=\\\"paramedical.ChestInhale\\\"\\r\\n                [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Waist Size\\\" i18n-label=\\\"@@policy.paramedical.detail.waistsize\\\" [control]=\\\"waistSize\\\">\\r\\n            <lf-inputnumber format=\\\"n0\\\" [maxLength]=\\\"3\\\" decimals=\\\"0\\\" #waistSize name=\\\"waistSize\\\" [(ngModel)]=\\\"paramedical.WaistSize\\\"\\r\\n                [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Chest Exhale\\\" i18n-label=\\\"@@policy.paramedical.detail.chestexhale\\\" [control]=\\\"chestExhale\\\">\\r\\n            <lf-inputnumber format=\\\"n0\\\" [maxLength]=\\\"3\\\" decimals=\\\"0\\\" #chestExhale name=\\\"chestExhale\\\" [(ngModel)]=\\\"paramedical.ChestExhale\\\"\\r\\n                [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<hr />\\r\\n<div class=\\\"lf-page-subheader\\\" i18n=\\\"@@policy.paramedical.detail.pulsebloodpressure\\\">Pulse/Blood Pressure</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Pulse\\\" i18n-label=\\\"@@policy.paramedical.detail.pulse\\\" [control]=\\\"pulse\\\">\\r\\n            <lf-inputnumber format=\\\"n0\\\" [maxLength]=\\\"3\\\" decimals=\\\"0\\\" #pulse name=\\\"pulse\\\" [(ngModel)]=\\\"paramedical.Pulse\\\"\\r\\n                [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Systolic\\\" i18n-label=\\\"@@policy.paramedical.detail.systolic\\\" [control]=\\\"systolic\\\">\\r\\n            <lf-inputnumber format=\\\"n0\\\" [maxLength]=\\\"3\\\" decimals=\\\"0\\\" #systolic name=\\\"systolic\\\" [(ngModel)]=\\\"paramedical.Systolic\\\"\\r\\n                [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Diastolic\\\" i18n-label=\\\"@@policy.paramedical.detail.diastolic\\\" [control]=\\\"diastolic\\\">\\r\\n            <lf-inputnumber format=\\\"n0\\\" [maxLength]=\\\"3\\\" decimals=\\\"0\\\" #diastolic name=\\\"diastolic\\\" [(ngModel)]=\\\"paramedical.Diastolic\\\"\\r\\n                [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","﻿import { Component, Injectable, Injector } from '@angular/core';\n\nimport { SecondaryTabHostViewModel } from 'life-core/component/layout/tabview';\nimport { AuthorizationProvider } from 'life-core/authorization';\n\nimport { SavePolicyDataDelegate } from 'ls-core/service';\nimport { PolicySubscriber } from 'ls-core/session';\nimport { InsuredDTO, ParamedicalDTO, PolicyDTO } from 'ls-core/model';\nimport { ApplicantListHelper, ActiveApplicantHelper } from 'business/policy/shared';\n\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\nimport { ParamedicalAuthorizationProvider } from './paramedical-authorization.provider';\n\n@Component({\n    selector: 'paramedical-tab',\n    templateUrl: './paramedical.component.html',\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: ParamedicalAuthorizationProvider }]\n})\n@Injectable()\nexport class ParamedicalTabComponent extends SecondaryTabHostViewModel<PolicyDataModel> {\n    public applicant: InsuredDTO;\n    private _applicantListHelper: ApplicantListHelper;\n    public paramedical: ParamedicalDTO;\n\n    constructor(injector: Injector, policySubscriber: PolicySubscriber, applicantListHelper: ApplicantListHelper) {\n        super(injector);\n        this._applicantListHelper = applicantListHelper;\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n    }\n\n    public loadData(): Promise<void> {\n        this.setApplicant();\n        this.setParamedicalData();\n        return Promise.resolve();\n    }\n\n    private setApplicant(): void {\n        this.applicant = this._applicantListHelper.getActiveApplicantOrDefault(this.data.policy.Insureds_LazyLoad);\n    }\n\n    private setParamedicalData(): void {\n        if (this.applicant.Parameds_LazyLoad.length <= 0) {\n            this.applicant.Parameds_LazyLoad.push(new ParamedicalDTO());\n        }\n        this.paramedical = this.applicant.Parameds_LazyLoad[0];\n    }\n\n    protected getDataToSave(): PolicyDTO {\n        return this.data.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n}\n","﻿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { ParamedicalTabComponent } from 'business/policy/evidence/paramedical/paramedical.component';\r\nimport { ParamedicalDataResolver } from 'business/policy/evidence/paramedical/paramedical-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [ParamedicalTabComponent],\r\n    providers: [ParamedicalDataResolver]\r\n})\r\nexport class ParamedicalModule {}\r\n","﻿export * from './rx.component';\r\nexport * from './tab/tabview-rx.component';\r\nexport * from './rx-rules/index';\r\nexport * from './rx-report/index';\r\nexport * from './rx-other-medication/index';\r\nexport * from './rx-web-buttons/rx-web-buttons.component';\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { TabDefRx } from 'ui/tabview';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class RxAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n    }\r\n\r\n    protected setup(): void {\r\n        this.authorizationData.defaultLevel = this.getParentAuthorizationLevel(TabDefRx.name);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-6\\\">\\r\\n        <lf-form-input [control]=\\\"drugName\\\" label=\\\"Drug Name\\\" i18n-label=\\\"@@policy.rx.detail.effects.gridheader.drugname\\\">\\r\\n            <lf-inputtext #drugName name=\\\"drugName\\\" [(ngModel)]=\\\"data.DrugName\\\" [maxLength]=\\\"200\\\" (blur)=\\\"onDrugNameBlur()\\\" secureComponent\\r\\n                required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-6\\\">\\r\\n        <lf-form-input [control]=\\\"debit\\\" label=\\\"Debit/Credit\\\" i18n-label=\\\"@@policy.medication.edit.points\\\">\\r\\n            <lf-inputnumber #debit name=\\\"debit\\\" [max]=\\\"1000\\\" [min]=\\\"-999\\\" [maxLength]=\\\"4\\\" [(ngModel)]=\\\"data.Points\\\" format=\\\"n0\\\"\\r\\n                decimals=\\\"0\\\" secureComponent required></lf-inputnumber>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { ViewModel } from 'life-core/view-model';\r\nimport { Component, Injector } from '@angular/core';\r\nimport { ICompose } from 'life-core/component';\r\nimport { MedicationDTO } from 'ls-core/model';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { RxDetailAuthorizationProvider } from 'business/policy/evidence/rx/rx-other-medication/rx-detail-authorization.provider';\r\nimport { OtherMedicalConditionTypes } from 'business/policy/evidence/rx/rx.constants';\r\n\r\n@Component({\r\n    selector: 'other-drug-medication-data-detail',\r\n    templateUrl: './other-drug-medication-data-detail.component.html',\r\n    providers: [{ provide: AuthorizationProvider, useClass: RxDetailAuthorizationProvider }]\r\n})\r\nexport class OtherDrugMedicationDataDetailComponent extends ViewModel<MedicationDTO> implements ICompose {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    public setModel(model: MedicationDTO): void {\r\n        this.data = model;\r\n    }\r\n\r\n    onDrugNameBlur(): void {\r\n        this.data.DrugName =\r\n            this.data.DrugName.slice(0, 5) === 'Other'\r\n                ? `${this.data.DrugName}`\r\n                : `${OtherMedicalConditionTypes.Other}-${this.data.DrugName}`;\r\n    }\r\n}\r\n","import { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { Injectable } from '@angular/core';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst MedicationFields = {\r\n    DrugName: 'DrugName',\r\n    Debit: 'Points'\r\n};\r\n@Injectable()\r\nexport class OtherMedicationDataDetailColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n\r\n    constructor(cellFormatters: CellFormatters, i18n: I18n) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Drug Name', id: 'policy.rx.detail.effects.gridheader.drugname' }),\r\n            field: MedicationFields.DrugName,\r\n            width: 200\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Debit/Credit', id: 'policy.medication.gridheader.points' }),\r\n            field: MedicationFields.Debit,\r\n            width: 200,\r\n            valueFormatter: this._cellFormatters.decimalCellFormatter\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\"\\r\\n            style=\\\"width: 1000px; \\\">\\r\\n        </master-detail>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector, Input } from '@angular/core';\r\nimport { MasterDetailComponentResolver, MasterButton, MasterButtonType } from 'life-core/component/master-detail';\r\nimport { BaseDataManager, RowManagementDelegate } from 'life-core/component/master-detail';\r\n\r\nimport { BasePolicyMasterDetailViewModel } from 'business/policy/shared';\r\nimport { MedicationDTO } from 'ls-core/model';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { RxOtherMedicationItemFactory } from 'business/policy/evidence/rx/rx-other-medication/rx-other-medication-item-factory';\r\nimport { OtherDrugMedicationDataDetailComponent } from './detail/other-drug-medication-data-detail.component';\r\nimport { OtherMedicationDataDetailColumnsBuilder } from './detail/other-medication-data-detail-grid-columns.builder';\r\n\r\nexport function otherDrugRowManagementDelegateFactory(\r\n    itemFactory: RxOtherMedicationItemFactory,\r\n    dataManager: BaseDataManager<MedicationDTO>\r\n): any {\r\n    return new RowManagementDelegate({\r\n        itemName: 'OtherDrugs',\r\n        itemIDPropertyName: 'MedicationId',\r\n        itemFactory: itemFactory,\r\n        dataManager: dataManager\r\n    });\r\n}\r\n\r\nexport function otherDrugItemComponentResolverFactory(): any {\r\n    return new MasterDetailComponentResolver({\r\n        itemComponents: OtherDrugMedicationDataDetailComponent\r\n    });\r\n}\r\n\r\n@Component({\r\n    selector: 'other-drug-medication',\r\n    templateUrl: './other-drug-medication-data-list.component.html',\r\n    providers: [\r\n        BaseDataManager,\r\n        RxOtherMedicationItemFactory,\r\n        {\r\n            provide: RowManagementDelegate,\r\n            useFactory: otherDrugRowManagementDelegateFactory,\r\n            deps: [RxOtherMedicationItemFactory, BaseDataManager]\r\n        },\r\n        {\r\n            provide: MasterDetailComponentResolver,\r\n            useFactory: otherDrugItemComponentResolverFactory\r\n        },\r\n        OtherMedicationDataDetailColumnsBuilder\r\n    ]\r\n})\r\nexport class OtherDrugMedicationDataListComponent extends BasePolicyMasterDetailViewModel<MedicationDTO> {\r\n    @Input()\r\n    public otherDrugMedicationDTO: MedicationDTO[];\r\n    private _gridColumnsBuilder: IGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: OtherMedicationDataDetailColumnsBuilder) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n\r\n    public get showDetailAsPopup(): boolean {\r\n        return false;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected get numHeaderRows(): number {\r\n        return 2;\r\n    }\r\n\r\n    protected getInlineDetailButtons(): MasterButton<MedicationDTO>[] {\r\n        const customButtons: MasterButton<MedicationDTO>[] = [\r\n            new MasterButton({ type: MasterButtonType.ADD }),\r\n            new MasterButton({ type: MasterButtonType.SAVE }),\r\n            new MasterButton({ type: MasterButtonType.DELETE })\r\n        ];\r\n        return [...customButtons];\r\n    }\r\n\r\n    protected loadItems(): MedicationDTO[] {\r\n        return this.otherDrugMedicationDTO;\r\n    }\r\n\r\n    protected getRowNodeId(data: MedicationDTO): any {\r\n        return data.MedicationId;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst MedicationFields = {\r\n    DrugName: 'DrugName',\r\n    Debit: 'Points'\r\n};\r\n@Injectable()\r\nexport class OtherMedicationDataListColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n\r\n    constructor(cellFormatters: CellFormatters, i18n: I18n) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Listed Medicated Drug', id: 'policy.medication.editgrid.drugname' }),\r\n            field: MedicationFields.DrugName,\r\n            width: 50\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Debit/Credit', id: 'policy.medication.gridheader.points' }),\r\n            field: MedicationFields.Debit,\r\n            width: 50,\r\n            valueFormatter: this._cellFormatters.decimalCellFormatter\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\"\\r\\n        [suppressRowClickSelection]=\\\"true\\\" rowSelection=\\\"multiple\\\">\\r\\n    </data-grid>\\r\\n</div>\"","import { Component, Injector, Input } from '@angular/core';\r\nimport { IGridColumnsBuilder, DataGridRowNumber } from 'life-core/component/grid';\r\nimport { MedicationDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared';\r\nimport { OtherMedicationDataListColumnsBuilder } from './other-medication-data-list-grid-columns.builder';\r\n\r\n@Component({\r\n    selector: 'add-other-medication',\r\n    templateUrl: 'other-medication-data-list.component.html',\r\n    providers: [PolicySubscriber, OtherMedicationDataListColumnsBuilder]\r\n})\r\nexport class OtherMedicationDataListComponent extends BasePolicyGridViewModel<MedicationDTO> {\r\n    private _gridColumnsBuilder: OtherMedicationDataListColumnsBuilder;\r\n    private _medicationDTO: MedicationDTO[];\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: OtherMedicationDataListColumnsBuilder) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n\r\n    @Input()\r\n    public set medicationDTO(value: MedicationDTO[]) {\r\n        this._medicationDTO = value;\r\n        this.refreshGrid();\r\n    }\r\n\r\n    public get selectedMedication(): any[] {\r\n        return this.gridOptions.api.getSelectedRows();\r\n    }\r\n\r\n    protected loadItems(): MedicationDTO[] {\r\n        return this._medicationDTO || [];\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: MedicationDTO): any {\r\n        return data.DrugName;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n\r\n    protected showCheckboxColumn(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getGridMinRows(): number {\r\n        return DataGridRowNumber.Medium;\r\n    }\r\n}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Medical Condition\\\" i18n-label=\\\"@@policy.medication.edit.condition\\\" [control]=\\\"medicalCondition\\\">\\r\\n                <lf-select #medicalCondition name=\\\"medicalCondition\\\" [(ngModel)]=\\\"data.Condition\\\" [items]=\\\"resolvedData.listData.Condition | listItems:'value':'Id'\\\"\\r\\n                    [clearable]=\\\"false\\\" secureComponent style=\\\"width:350px\\\" (change)=\\\"onMedicalConditionChange($event)\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\" *ngIf=\\\"isNewMedicalCondition\\\">\\r\\n            <lf-form-input label=\\\"New Medical Condition\\\" i18n-label=\\\"@@policy.medication.edit.othercondition\\\" [control]=\\\"newMedicalCondition\\\">\\r\\n                <lf-inputtext #newMedicalCondition name=\\\"newMedicalCondition\\\" [style]=\\\"{width:'350px'}\\\" [(ngModel)]=\\\"newMedicalConditionValue\\\"\\r\\n                    maxLength=\\\"249\\\" secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div *ngIf=\\\"!this.isNewMedicalCondition\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-12\\\">\\r\\n                <add-other-medication [medicationDTO]=\\\"medicationDTO\\\"></add-other-medication>\\r\\n            </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-6\\\">\\r\\n                <lf-form-input label=\\\"Other Drug\\\" i18n-label=\\\"@@policy.medication.edit.headerotherdrugs\\\" [control]=\\\"otherDrug\\\">\\r\\n                    <lf-checkbox #otherDrug name=\\\"otherDrug\\\" [(ngModel)]=\\\"isOtherMedication\\\" [disabled]=\\\"disableOtherMedication\\\"\\r\\n                        secureComponent></lf-checkbox>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"isOtherMedication || isNewMedicalCondition\\\">\\r\\n        <div class=\\\"col-12\\\" style=\\\"padding: 0;\\\">\\r\\n            <other-drug-medication [otherDrugMedicationDTO]=\\\"otherDrugMedicationDTO\\\"></other-drug-medication>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector, ViewChild } from '@angular/core';\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\nimport { MedicationDTO } from 'ls-core/model';\nimport { OtherMedicationService } from 'business/policy/evidence/rx/rx-other-medication/rx-other-medication.service';\nimport {\n    DialogViewModelResult,\n    DialogResult,\n    DialogButton,\n    DialogButtonType,\n    ConfirmDialog\n} from 'life-core/component/dialog';\nimport { I18n } from 'life-core/i18n';\nimport { OtherMedicationDataListComponent } from './other-medication-data-list.component';\nimport { OtherMedicalConditionTypes } from 'business/policy/evidence/rx/rx.constants';\nimport { OtherDrugMedicationDataListComponent } from './other-drug/other-drug-medication-data-list.component';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { RxDetailAuthorizationProvider } from './../../rx-detail-authorization.provider';\n\n@Component({\n    selector: 'rx-other-medication-editor',\n    templateUrl: './other-medication-detail-creator.component.html',\n    providers: [\n        ParentChildRegistry,\n        OtherMedicationService,\n        { provide: AuthorizationProvider, useClass: RxDetailAuthorizationProvider }\n    ]\n})\nexport class OtherMedicationDetailCreatorComponent extends BasePolicyDialogDetailViewModel<MedicationDTO> {\n    public medicationDTO: MedicationDTO[];\n    public otherDrugMedicationDTO: MedicationDTO[];\n    public disableOtherMedication: boolean;\n    public isOtherMedication: boolean;\n    public isNewMedicalCondition: boolean;\n    public newMedicalConditionValue: string;\n    protected confirmDialog: ConfirmDialog;\n    @ViewChild(OtherMedicationDataListComponent)\n    private _otherMedicationDataListComponent: OtherMedicationDataListComponent;\n\n    @ViewChild(OtherDrugMedicationDataListComponent)\n    private _otherDrugMedicationDataListComponent: OtherDrugMedicationDataListComponent;\n    private _otherMedicationService: OtherMedicationService;\n\n    constructor(injector: Injector, otherMedicationService: OtherMedicationService, confirmDialog: ConfirmDialog) {\n        super(injector);\n        this.confirmDialog = confirmDialog;\n        this.i18n = injector.get(I18n);\n        this._otherMedicationService = otherMedicationService;\n        this.disableOtherMedication = true;\n    }\n\n    public loadData(): Promise<void> {\n        this.data.Condition = '';\n        return Promise.resolve();\n    }\n\n    public onMedicalConditionChange(selectedCondition: any): void {\n        this.isOtherMedication = false;\n        this.otherDrugMedicationDTO = new Array<MedicationDTO>();\n        if (selectedCondition.value === OtherMedicalConditionTypes.Other) {\n            this.isNewMedicalCondition = true;\n        } else {\n            this.setMedicationDataLists();\n            this.isNewMedicalCondition = false;\n            this.disableOtherMedication = false;\n        }\n    }\n\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\n        if (this.isDialogButtonTypeOK(buttonId)) {\n            const isDirty = this.isDirty();\n            const otherMedications = this.getOtherMedications();\n            const selectedMedication = otherMedications\n                ? { selectedMedication: otherMedications }\n                : { selectedMedication: null };\n            if (this._otherDrugMedicationDataListComponent) {\n                this._otherDrugMedicationDataListComponent.saveData();\n            }\n            if (\n                this.data.Condition === undefined ||\n                this.data.Condition === '' ||\n                (selectedMedication.selectedMedication && selectedMedication.selectedMedication.length > 0)\n            ) {\n                return this.validate().then(result => {\n                    return new DialogViewModelResult(selectedMedication, result === ViewValidationResult.pass, isDirty);\n                });\n            } else {\n                this.confirmSelection();\n                return Promise.resolve(new DialogViewModelResult([], false));\n            }\n        } else {\n            return Promise.resolve(null);\n        }\n    }\n\n    private setMedicationDataLists(): void {\n        this._otherMedicationService.getMedicationList(this.data).then(response => {\n            this.setupMedication(response.objectList as MedicationDTO[]);\n        });\n    }\n\n    private setupMedication(medicationDTO: MedicationDTO[]): void {\n        this.medicationDTO = medicationDTO;\n    }\n\n    private getOtherMedications(): MedicationDTO[] {\n        if (this.data.Condition !== undefined && this.data.Condition !== '') {\n            const otherDrugMedicationsData = this.getOtherDrugMedications();\n            return this.getSelectedMedication(otherDrugMedicationsData);\n        }\n    }\n\n    private getOtherDrugMedications(): MedicationDTO[] {\n        if (this.isOtherMedication || this.newMedicalConditionValue) {\n            return this.otherDrugMedicationDTO.map(otherDrugMedication => {\n                const newMedicalConditionValue = this.isNewMedicalCondition\n                    ? `${OtherMedicalConditionTypes.Other}-${this.newMedicalConditionValue}`\n                    : this.data.Condition;\n                otherDrugMedication.Condition = newMedicalConditionValue;\n                otherDrugMedication.DrugName =\n                    otherDrugMedication.DrugName !== undefined\n                        ? `${OtherMedicalConditionTypes.Other}-${otherDrugMedication.DrugName}`\n                        : '';\n                return otherDrugMedication;\n            });\n        }\n    }\n\n    private getSelectedMedication(otherDrugMedicationsData: MedicationDTO[]): MedicationDTO[] {\n        return this.isNewMedicalCondition\n            ? otherDrugMedicationsData\n            : otherDrugMedicationsData\n            ? this._otherMedicationDataListComponent.selectedMedication.concat(otherDrugMedicationsData)\n            : this._otherMedicationDataListComponent.selectedMedication;\n    }\n\n    private confirmSelection(): Promise<DialogResult> {\n        return this.confirmDialog.open({\n            title: this.getConfirmDialogTitle(),\n            message: this.getConfirmDialogMessage(),\n            buttons: [\n                new DialogButton({ type: DialogButtonType.OK }),\n                new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\n            ]\n        });\n    }\n\n    private getConfirmDialogTitle(): string {\n        return this.i18n({\n            value: 'Warning',\n            id: 'policy.rxothermedication.dialog.warning.title'\n        });\n    }\n\n    private getConfirmDialogMessage(): string {\n        return this.i18n({\n            value: 'No medication selected.',\n            id: 'policy.rxothermedication.dialog.warning.message'\n        });\n    }\n}\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Medical Condition\\\" i18n-label=\\\"@@policy.medication.edit.condition\\\" [control]=\\\"medicalCondition\\\">\\r\\n                <lf-select #medicalCondition name=\\\"medicalCondition\\\" [(ngModel)]=\\\"medicalConditionValue\\\" [items]=\\\"resolvedData.listData.Condition | listItems:'value':'Id'\\\"\\r\\n                    [clearable]=\\\"false\\\" secureComponent style=\\\"width:200px\\\" (change)=\\\"onMedicalConditionChange($event)\\\"\\r\\n                    container=\\\"dialog\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\" *ngIf=\\\"otherMedicalConditionSelected\\\">\\r\\n            <lf-form-input [control]=\\\"otherMedicalCondition\\\">\\r\\n                <lf-inputtext #otherMedicalCondition name=\\\"otherMedicalCondition\\\" [(ngModel)]=\\\"otherMedicalConditionValue\\\"\\r\\n                    secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Drug Name\\\" [control]=\\\"drugName\\\" i18n-label=\\\"@@policy.medication.edit.drugname\\\">\\r\\n                <lf-select #drugName name=\\\"drugName\\\" [(ngModel)]=\\\"drugNameValue\\\" [items]=\\\"drugNameListItems | listItems:'value':'Id'\\\"\\r\\n                    [clearable]=\\\"false\\\" secureComponent [disabled]=\\\"otherMedicalConditionSelected\\\" style=\\\"width:200px\\\"\\r\\n                    (change)=\\\"onDrugNameChange($event)\\\" container=\\\"dialog\\\" required></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\" *ngIf=\\\"showOtherDrug\\\">\\r\\n            <lf-form-input [control]=\\\"otherDrugName\\\">\\r\\n                <lf-inputtext #otherDrugName name=\\\"otherDrugName\\\" [(ngModel)]=\\\"otherDrugNameValue\\\" [maxLength]=\\\"200\\\"\\r\\n                    secureComponent required></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"!showOtherDrug\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Debit/Credit\\\" i18n-label=\\\"@@policy.medication.edit.points\\\" [control]=\\\"debitCredit\\\">\\r\\n                <lf-statictext #debitCredit name=\\\"debitCredit\\\" [value]=\\\"data.Points|number\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"showOtherDrug\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Debit/Credit\\\" i18n-label=\\\"@@policy.medication.edit.points\\\" [control]=\\\"debitCredit\\\">\\r\\n                <lf-statictext #debitCredit name=\\\"debitCredit\\\" [value]=\\\"\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"\\\" [control]=\\\"otherDebitCredit\\\">\\r\\n                <lf-inputnumber #otherDebitCredit name=\\\"otherDebitCredit\\\" [max]=\\\"1000\\\" [(ngModel)]=\\\"data.Points\\\" format=\\\"n0\\\"\\r\\n                    decimals=\\\"0\\\" [authorizationLevel]=\\\"authorizationData.defaultLevel\\\" [allowNegative]=\\\"false\\\" required></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n\\r\\n</form>\"","import { Component, Injector } from '@angular/core';\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { ParentChildRegistry } from 'life-core/view-model';\nimport { MedicationDTO } from 'ls-core/model';\nimport { OtherMedicationService } from 'business/policy/evidence/rx/rx-other-medication/rx-other-medication.service';\nimport { ListDataUtil, ListDataItem } from 'ls-core/service';\nimport { DBDateUtil } from 'ls-core/util';\nimport { AppSession } from 'ls-core/session';\nimport { OtherMedicalConditionTypes } from 'business/policy/evidence/rx/rx.constants';\nimport { DialogViewModelResult } from 'life-core/component';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { RxDetailAuthorizationProvider } from './../../rx-detail-authorization.provider';\n\nexport const OTHER_STRING_LENGTH = 6;\n\n@Component({\n    selector: 'rx-other-medication-editor',\n    templateUrl: './other-medication-detail-editor.component.html',\n    providers: [\n        ParentChildRegistry,\n        OtherMedicationService,\n        { provide: AuthorizationProvider, useClass: RxDetailAuthorizationProvider }\n    ]\n})\nexport class OtherMedicationDetailEditorComponent extends BasePolicyDialogDetailViewModel<MedicationDTO> {\n    public medicationDTO: MedicationDTO[];\n    public drugNameListItems: ListDataItem[];\n    public medicalConditionValue: string;\n    public otherMedicalConditionValue: string;\n    public drugNameValue: string;\n    public otherDrugNameValue: string;\n    public otherMedicalConditionSelected: boolean;\n    public otherDrugNameSelected: boolean;\n    public showOtherDrug: boolean;\n    private _otherMedicationService: OtherMedicationService;\n    private _appSession: AppSession;\n\n    constructor(injector: Injector, appSession: AppSession, otherMedicationService: OtherMedicationService) {\n        super(injector);\n        this._otherMedicationService = otherMedicationService;\n        this._appSession = appSession;\n        this.drugNameListItems = new Array<ListDataItem>();\n    }\n\n    public loadData(): Promise<void> {\n        this.getMedicationDataLists();\n        this.setOtherMedications();\n        return Promise.resolve();\n    }\n\n    public onMedicalConditionChange(selectedCondition: any): void {\n        this.setOnMedicalConditionChange();\n        if (selectedCondition.value) {\n            if (selectedCondition.value === OtherMedicalConditionTypes.Other) {\n                this.drugNameValue = OtherMedicalConditionTypes.Other;\n                this.data.Points = this.getDebitCreditPoints(this.drugNameValue);\n                this.otherMedicalConditionSelected = true;\n                this.otherDrugNameSelected = true;\n                this.setShowOtherDrug();\n            } else {\n                this.otherMedicalConditionSelected = false;\n                this.otherDrugNameSelected = false;\n                this.setShowOtherDrug();\n                this.data.Condition = selectedCondition.value;\n                this.getMedicationDataLists();\n            }\n        }\n    }\n\n    public onDrugNameChange(selectedDrugName: any): void {\n        this.setOnDrugNameChange();\n        if (selectedDrugName.value) {\n            this.data.Points = this.getDebitCreditPoints(selectedDrugName.value);\n            this.otherDrugNameSelected = selectedDrugName.value === OtherMedicalConditionTypes.Other ? true : false;\n            this.setShowOtherDrug();\n        }\n    }\n\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\n        if (this.isDialogButtonTypeOK(buttonId)) {\n            this.data.Condition = this.otherMedicalConditionSelected\n                ? `${OtherMedicalConditionTypes.Other}-${this.otherMedicalConditionValue}`\n                : this.medicalConditionValue;\n            this.data.DrugName = this.otherDrugNameSelected\n                ? `${OtherMedicalConditionTypes.Other}-${this.otherDrugNameValue}`\n                : this.drugNameValue;\n        }\n        return super.onDialogButtonClick(buttonId);\n    }\n\n    private setOnMedicalConditionChange(): void {\n        this.drugNameValue = '';\n        this.otherDrugNameValue = '';\n        this.otherMedicalConditionValue = '';\n        this.data.Points = '0';\n    }\n\n    private setOnDrugNameChange(): void {\n        this.data.Points = '0';\n        this.otherDrugNameValue = '';\n        this.data.Updated = DBDateUtil.dateToDBDate(new Date()).dateAndTimeAsString;\n        this.data.UpdatedBy = this._appSession.user.UserId as number;\n    }\n\n    private setShowOtherDrug(): void {\n        this.showOtherDrug = this.otherMedicalConditionSelected || this.otherDrugNameSelected;\n    }\n\n    private getMedicationDataLists(): void {\n        this._otherMedicationService.getMedicationList(this.data).then(response => {\n            this.setupMedication(response.objectList as MedicationDTO[]);\n        });\n    }\n\n    private setupMedication(medicationDTO: MedicationDTO[]): void {\n        this.medicationDTO = medicationDTO;\n        this.setupDrugNameList();\n    }\n\n    private setupDrugNameList(): void {\n        this.drugNameListItems = this.medicationDTO.map(\n            medication => new ListDataItem(medication.DrugName, medication.DrugName, medication.Points.toString())\n        );\n        ListDataUtil.addListDataItem(\n            this.drugNameListItems,\n            OtherMedicalConditionTypes.Other,\n            OtherMedicalConditionTypes.Other,\n            '0'\n        );\n    }\n\n    private getDebitCreditPoints(value: string): string {\n        return ListDataUtil.getExternalCodeFromListDataById(this.drugNameListItems, value);\n    }\n\n    private setOtherMedications(): void {\n        this.otherMedicationData();\n        this.setShowOtherDrug();\n    }\n\n    private otherMedicationData(): void {\n        this.otherMedicalConditionValue = this.getOtherMedications(this.data.Condition);\n        this.otherDrugNameValue = this.getOtherMedications(this.data.DrugName);\n        this.medicalConditionValue = this.otherMedicalConditionValue\n            ? OtherMedicalConditionTypes.Other\n            : this.data.Condition;\n        this.drugNameValue =\n            this.otherMedicalConditionSelected || this.otherDrugNameValue\n                ? OtherMedicalConditionTypes.Other\n                : this.data.DrugName;\n        this.otherMedicalConditionSelected = !!this.otherMedicalConditionValue;\n        this.otherDrugNameSelected = !!this.otherDrugNameValue;\n    }\n\n    private getOtherMedications(value: string): string {\n        if (value && value.indexOf(OtherMedicalConditionTypes.Other) !== -1) {\n            return value.substr(OTHER_STRING_LENGTH);\n        }\n    }\n}\n","﻿export * from './add/other-medication-detail-creator.component';\r\nexport * from './add/other-medication-data-list.component';\r\nexport * from './edit/other-medication-detail-editor.component';\r\nexport * from './other-medication-dialog-data.resolver';\r\nexport * from './add/other-drug/other-drug-medication-data-list.component';\r\nexport * from './add/other-drug/detail/other-drug-medication-data-detail.component';\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { ListMap } from 'life-core/model';\r\nimport { PolicyDTO, MedicationDTO } from 'ls-core/model';\r\nimport { ListDataRequestBuilder, ListsDataRequest, ListDataItem } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class OtherMedicationDetailDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    public context: any;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        const medicationDTO = ObjectUtil.createObjectOfType(this.context, MedicationDTO);\r\n        listDataRequestBuilder.addListRequestItem(medicationDTO, 'Condition');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","﻿export * from './rx-other-medication.component';\r\nexport * from './rx-other-medication-tab.component';\r\nexport * from './rx-other-medication-metadata.resolver';\r\nexport * from './detail/index';\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class RxDetailAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const rxDetailAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.EVIDENCERX]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = rxDetailAuthorizationLevel;\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { MetadataUtil } from 'ls-core/util';\r\nimport { LsCellComparators } from 'ls-core/component/grid';\r\n\r\nconst MedicationFields = {\r\n    Condition: 'Condition',\r\n    DrugName: 'DrugName',\r\n    AddedBy: 'AddedBy',\r\n    Added: 'Added',\r\n    Points: 'Points'\r\n};\r\n\r\n@Injectable()\r\nexport class RxOtherMedicationColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(cellFormatters: CellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Condition', id: 'policy.medication.gridheader.condition' }),\r\n            field: MedicationFields.Condition,\r\n            width: 120,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Medication', id: 'policy.medication.gridheader.drugname' }),\r\n            field: MedicationFields.DrugName,\r\n            width: 120,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created By', id: 'policy.medication.gridheader.createdby' }),\r\n            field: MedicationFields.AddedBy,\r\n            width: 120,\r\n            valueFormatter: this.getUserName\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Date/Time', id: 'policy.worksheet.debitcredit.gridheader.createdon' }),\r\n            field: MedicationFields.Added,\r\n            width: 120,\r\n            valueFormatter: params => this._cellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Debit/Credit', id: 'policy.medication.gridheader.points' }),\r\n            field: MedicationFields.Points,\r\n            width: 100,\r\n            valueFormatter: params => this._cellFormatters.decimalCellFormatter(params, '1.0-0')\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getUserName(params: any): string {\r\n        if (params.node.data.AddedBy) {\r\n            return MetadataUtil.getItemLabelByCode(params.context.listData.aus_users, params.node.data.AddedBy);\r\n        }\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { MedicationDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class RxOtherMedicationItemFactory extends BaseDTOItemFactory<MedicationDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<MedicationDTO>): MedicationDTO {\r\n        const medicationDTO = new MedicationDTO();\r\n        medicationDTO.MedicationId = this.getNextId(createItemParams.items, 'MedicationId');\r\n        return medicationDTO;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class RxOtherMedicationMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['aus_users'];\r\n    }\r\n}\r\n","module.exports = \"<rx-other-medication></rx-other-medication>\"","import { Component, Injector } from '@angular/core';\n\nimport { TertiaryTabHostViewModel } from 'life-core/component/layout/tabview';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { PolicyDTO } from 'ls-core/model';\nimport { SavePolicyDataDelegate } from 'ls-core/service';\n\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\n\n@Component({\n    selector: '',\n    templateUrl: './rx-other-medication-tab.component.html',\n    providers: [PolicySubscriber]\n})\nexport class RxOtherMedicationTabComponent extends TertiaryTabHostViewModel<PolicyDataModel> {\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n    }\n\n    protected getDataToSave(): PolicyDTO {\n        return this.data.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n}\n","module.exports = \"<div class=\\\"row lf-dashed-bottom-border\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\"\\r\\n            secureComponent>\\r\\n        </master-detail>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input [control]=\\\"otherMedication\\\" label=\\\"Total\\\" i18n-label=\\\"@@policy.medication.grid.totalpoints\\\"\\r\\n            labelPosition=\\\"left\\\">\\r\\n            <lf-statictext #otherMedication name=\\\"otherMedication\\\" [value]=\\\"otherMedicationTotalPoints | lfDecimal:'1.0-0'\\\"\\r\\n                secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector, Type } from '@angular/core';\n\nimport { PolicySubscriber, AppSession } from 'ls-core/session';\nimport { IGridColumnsBuilder, DataGridRowNumber } from 'life-core/component/grid';\nimport { PolicyDTO, InsuredDTO, MedicationDTO } from 'ls-core/model';\nimport { BasePolicyMasterDetailViewModel, ApplicantListHelper, DebitCreditHelper } from 'business/policy/shared';\nimport { AppMasterButtonType } from 'business/shared/master-detail';\n\nimport {\n    MasterButton,\n    BaseDataManager,\n    RowManagementDelegate,\n    MasterDetailComponentResolver,\n    MasterButtonType\n} from 'life-core/component/master-detail';\nimport { DirectDataResolve, ItemOpenMode } from 'life-core/component/shared';\nimport { ResolvedDataNames } from 'life-core/view-model/data-resolver';\nimport { ModalDialogParams, ModalDialog, DialogButtonType, DialogSize } from 'life-core/component';\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\nimport { LfSplitPaneChannels } from 'life-core/component/layout/split';\nimport { I18n } from 'life-core/i18n';\n\nimport { DBDateUtil } from 'ls-core/util';\nimport { RiskFactorSourceType } from 'business/policy/worksheet/debit-credit';\nimport { OtherMedicationDetailDataResolver } from './detail/other-medication-dialog-data.resolver';\nimport { OtherMedicationDetailCreatorComponent } from './detail/add/other-medication-detail-creator.component';\nimport { OtherMedicationDetailEditorComponent } from './detail/edit/other-medication-detail-editor.component';\nimport { TabPolicySplitPaneAreas } from 'business/policy/tab';\n\nimport { RxOtherMedicationColumnsBuilder } from './rx-other-medication-grid-columns.builder';\nimport { RxOtherMedicationItemFactory } from './rx-other-medication-item-factory';\n\nexport function rowManagementDelegateFactory(\n    itemFactory: RxOtherMedicationItemFactory,\n    dataManager: BaseDataManager<MedicationDTO>\n): RowManagementDelegate<MedicationDTO> {\n    return new RowManagementDelegate({\n        itemName: 'Other Medication',\n        itemIDPropertyName: 'MedicationId',\n        itemFactory: itemFactory,\n        dataManager: dataManager\n    });\n}\n\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<MedicationDTO> {\n    const componentMap = new Map<string, Type<any>>();\n    componentMap.set(\n        MasterDetailComponentResolver.getItemCompositeKey(null, ItemOpenMode.Edit),\n        OtherMedicationDetailEditorComponent\n    );\n    return new MasterDetailComponentResolver({\n        itemComponents: componentMap\n    });\n}\n\n@Component({\n    selector: 'rx-other-medication',\n    templateUrl: './rx-other-medication.component.html',\n    providers: [\n        BaseDataManager,\n        PolicySubscriber,\n        RxOtherMedicationItemFactory,\n        {\n            provide: RowManagementDelegate,\n            useFactory: rowManagementDelegateFactory,\n            deps: [RxOtherMedicationItemFactory, BaseDataManager]\n        },\n        {\n            provide: MasterDetailComponentResolver,\n            useFactory: itemComponentResolverFactory\n        },\n        RxOtherMedicationColumnsBuilder\n    ]\n})\nexport class RxOtherMedicationComponent extends BasePolicyMasterDetailViewModel<MedicationDTO> {\n    public otherMedicationTotalPoints: number;\n    private _applicant: InsuredDTO;\n    private _policy: PolicyDTO;\n    private _gridColumnsBuilder: IGridColumnsBuilder;\n    private _applicantListHelper: ApplicantListHelper;\n    private _rxOtherMedicationItemFactory: RxOtherMedicationItemFactory;\n    private _appSession: AppSession;\n    private _modalDialog: ModalDialog;\n    private _debitCreditHelper: DebitCreditHelper;\n    private _messagingService: IMessagingService;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        modalDialog: ModalDialog,\n        appSession: AppSession,\n        debitCreditHelper: DebitCreditHelper,\n        rxOtherMedicationColumnsBuilder: RxOtherMedicationColumnsBuilder,\n        rxOtherMedicationItemFactory: RxOtherMedicationItemFactory,\n        applicantListHelper: ApplicantListHelper,\n        messagingService: MessagingService,\n        i18n: I18n\n    ) {\n        super(injector);\n        this.i18n = i18n;\n        policySubscriber.subscribe(this, p => {\n            this._policy = p;\n        });\n        this.otherMedicationTotalPoints = 0;\n        this._modalDialog = modalDialog;\n        this._appSession = appSession;\n        this._debitCreditHelper = debitCreditHelper;\n        this._gridColumnsBuilder = rxOtherMedicationColumnsBuilder;\n        this._rxOtherMedicationItemFactory = rxOtherMedicationItemFactory;\n        this._applicantListHelper = applicantListHelper;\n        this._messagingService = messagingService;\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedMetaData();\n        this.setApplicant();\n        this.setOtherMedicationTotalPoints();\n        return Promise.resolve();\n    }\n\n    private setOtherMedicationTotalPoints(): void {\n        this.otherMedicationTotalPoints = this._debitCreditHelper.getMedicationGridInfo(\n            this._applicant,\n            RiskFactorSourceType.USER_GENERATED\n        ).Total;\n    }\n\n    private setApplicant(): void {\n        this._applicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\n    }\n\n    public get showDetailAsPopup(): boolean {\n        return true;\n    }\n\n    protected getPopupDetailButtons(): MasterButton<MedicationDTO>[] {\n        const addMasterButton = new MasterButton({ type: MasterButtonType.ADD });\n        addMasterButton.handler = () => {\n            this.addMasterButtonHandler();\n        };\n        const editMasterButton = new MasterButton({ type: MasterButtonType.EDIT });\n        const copyMasterButton = new MasterButton({ type: MasterButtonType.COPY });\n        copyMasterButton.handler = (item: MedicationDTO) => {\n            this.copyMasterButtonHandler(item);\n        };\n        const noteMasterButton = new MasterButton({ type: AppMasterButtonType.NOTE });\n        noteMasterButton.handler = () => {\n            this.noteMasterButtonHandler();\n        };\n        const deleteMasterButton = new MasterButton({ type: MasterButtonType.DELETE });\n        return [addMasterButton, editMasterButton, copyMasterButton, noteMasterButton, deleteMasterButton];\n    }\n\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\n        return this._gridColumnsBuilder;\n    }\n\n    protected getRowNodeId(data: MedicationDTO): any {\n        return data.MedicationId;\n    }\n\n    protected getTitle(): string {\n        return this.i18n({ value: 'Other Medication', id: 'policy.case.othermed.title' });\n    }\n\n    protected loadItems(): MedicationDTO[] {\n        return this._applicant.Medication_LazyLoad;\n    }\n\n    protected getItemDetailDialogResolve(item: MedicationDTO): DirectDataResolve[] {\n        return [\n            {\n                resolveName: ResolvedDataNames.listData,\n                resolverClass: OtherMedicationDetailDataResolver,\n                context: item\n            }\n        ];\n    }\n\n    protected initRowManagementDelegate(): void {\n        this.rowManagementDelegate.initDataManager(this.items, this.userMedicationFilter);\n    }\n\n    protected removeItem(item: MedicationDTO): Promise<boolean> {\n        return super.removeItem(item).then(result => {\n            if (result) {\n                this.setOtherMedicationTotalPoints();\n                return result;\n            }\n        });\n    }\n\n    protected onItemDetailDialogOKClick(item: MedicationDTO, dialogDirty: boolean): void {\n        super.onItemDetailDialogOKClick(item, dialogDirty);\n        this.setOtherMedicationTotalPoints();\n    }\n\n    protected getGridMinRows(): number {\n        return DataGridRowNumber.Large;\n    }\n\n    private addMasterButtonHandler(): any {\n        const medicationDTO = new MedicationDTO();\n        const addDialogParams: ModalDialogParams = {\n            view: OtherMedicationDetailCreatorComponent,\n            resolve: this.getItemDetailDialogResolve(medicationDTO),\n            title: this.getCreateItemDialogTitle(),\n            buttons: this.getItemDetailDialogButtons(),\n            data: medicationDTO,\n            size: DialogSize.large\n        };\n        this._modalDialog.open(addDialogParams).then(dialogRef => {\n            dialogRef.result.then(result => {\n                if (result.returnValue) {\n                    this.addMedicationDTO(result.returnValue.selectedMedication);\n                }\n            });\n        });\n    }\n\n    private copyMasterButtonHandler(item: MedicationDTO): any {\n        if (item == null) {\n            return;\n        }\n        this.confirmDialog\n            .open({\n                message: this.getCopyItemMessage(),\n                title: this.getCopyItemDialogTitle(),\n                buttons: this.getItemDetailDialogButtons()\n            })\n            .then(result => {\n                const isRemoved = result.buttonId === DialogButtonType.ACCEPT;\n                if (isRemoved) {\n                    this.copyMedicationDTO(item);\n                }\n            });\n    }\n\n    private noteMasterButtonHandler(): any {\n        this._messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, {\n            areaId: TabPolicySplitPaneAreas.AddUWNote,\n            context: { isApplicantListDisabled: true }\n        });\n    }\n\n    private addMedicationDTO(values: MedicationDTO[]): void {\n        if (this._applicant.Medication_LazyLoad && values && values.length > 0) {\n            values.forEach(value => {\n                this._applicant.Medication_LazyLoad.push(this.createMedicationDTO(value));\n            });\n            this.setModelDirty();\n            this.refreshDetail();\n        }\n    }\n\n    private copyMedicationDTO(value: MedicationDTO): void {\n        if (this._applicant.Medication_LazyLoad && value) {\n            this._applicant.Medication_LazyLoad.push(this.createMedicationDTO(value));\n            this.refreshDetail();\n        }\n    }\n\n    private createMedicationDTO(value: MedicationDTO): MedicationDTO {\n        if (this._applicant.Medication_LazyLoad && value) {\n            const medicationDTO = this._rxOtherMedicationItemFactory.newInstance({\n                items: this._applicant.Medication_LazyLoad\n            });\n            medicationDTO.Condition = value.Condition;\n            medicationDTO.DrugName = value.DrugName;\n            medicationDTO.IsSystemGenerated = 'false';\n            medicationDTO.AddedBy = this._appSession.user.UserId as number;\n            medicationDTO.Added = DBDateUtil.dateToDBDate(new Date()).dateAndTimeAsString;\n            medicationDTO.Points = value.Points;\n            return medicationDTO;\n        }\n    }\n\n    private refreshDetail(): void {\n        this.refreshMasterDetail(this.userMedicationFilter);\n        this.setOtherMedicationTotalPoints();\n    }\n\n    private userMedicationFilter(medication: MedicationDTO): boolean {\n        return medication.IsSystemGenerated !== 'true';\n    }\n\n    private setModelDirty(): void {\n        // this needs to be done explicitly as we are using own add button handler ( not base class onCreateItem )\n        this.changeManager.setIsDirty(true);\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport {\r\n    RxOtherMedicationComponent,\r\n    RxOtherMedicationMetaDataResolver,\r\n    RxOtherMedicationTabComponent,\r\n    OtherMedicationDetailEditorComponent,\r\n    OtherMedicationDetailCreatorComponent,\r\n    OtherMedicationDataListComponent,\r\n    OtherMedicationDetailDataResolver,\r\n    OtherDrugMedicationDataDetailComponent,\r\n    OtherDrugMedicationDataListComponent\r\n} from 'business/policy/evidence';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [\r\n        RxOtherMedicationTabComponent,\r\n        RxOtherMedicationComponent,\r\n        OtherMedicationDetailCreatorComponent,\r\n        OtherMedicationDataListComponent,\r\n        OtherMedicationDetailEditorComponent,\r\n        OtherDrugMedicationDataListComponent,\r\n        OtherDrugMedicationDataDetailComponent\r\n    ],\r\n    exports: [RxOtherMedicationTabComponent],\r\n    providers: [RxOtherMedicationMetaDataResolver, OtherMedicationDetailDataResolver],\r\n    entryComponents: [\r\n        OtherMedicationDetailCreatorComponent,\r\n        OtherMedicationDetailEditorComponent,\r\n        OtherDrugMedicationDataDetailComponent\r\n    ]\r\n})\r\nexport class RxOtherMedicationModule {}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods, DataService } from 'ls-core/service';\r\nimport { MedicationDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class OtherMedicationService {\r\n    private _dataService: DataService;\r\n\r\n    constructor(injector: Injector, dataService: DataService) {\r\n        this._dataService = dataService;\r\n    }\r\n\r\n    private getServiceParams(medicationDTO: MedicationDTO): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.MED_LIST_GET,\r\n            serviceMethod: UIServiceMethods.MED_LIST_GET,\r\n            requestPayload: this.buildRequest(medicationDTO)\r\n        });\r\n    }\r\n\r\n    private buildRequest(medicationDTO: MedicationDTO): MedicationGetRequest {\r\n        const request = new MedicationGetRequest();\r\n        request.medicationDTO = medicationDTO;\r\n        return request;\r\n    }\r\n\r\n    public getMedicationList(medicationDTO: MedicationDTO): Promise<MedicationGetResponse> {\r\n        const serviceParams = this.getServiceParams(medicationDTO);\r\n        return this._dataService.getData(serviceParams).then(response => {\r\n            return <MedicationGetResponse>response.responsePayload;\r\n        });\r\n    }\r\n}\r\n\r\nclass MedicationGetRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.MedicationGetRequest, LifeSuite.UIServiceDTO';\r\n    public medicationDTO: MedicationDTO;\r\n}\r\n\r\nclass MedicationGetResponse {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.MedicationGetResponse, LifeSuite.UIServiceDTO';\r\n    public objectList: MedicationDTO[];\r\n}\r\n","﻿export * from './rx-report-data.resolver';\r\nexport * from './rx-report-lazydata.resolver';\r\nexport * from './rx-report-metadata.resolver';\r\nexport * from './rx-report-util';\r\nexport * from './rx-report.component';\r\n","export * from './physician.component';","import { Injectable } from '@angular/core';\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { PhoneUtil, LsPhoneNumberPipe } from 'ls-core/util';\r\nimport { PhoneTypes, MetadataItem } from 'ls-core/model';\r\nimport { RxReportUtil } from '../rx-report-util';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class PhysicianGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _rxReportUtil: RxReportUtil;\r\n\r\n    constructor(i18n: I18n, rxReportUtil: RxReportUtil) {\r\n        super();\r\n        this.i18n = i18n;\r\n        this._rxReportUtil = rxReportUtil;\r\n    }\r\n\r\n    public build(rxReport: MetadataItem[]): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Name', id: 'policy.rx.detail.physicians.gridheader.name' }),\r\n            field: PhysicianDetailFields.PhyscianName,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Address', id: 'policy.rx.detail.physicians.gridheader.address' }),\r\n            field: PhysicianDetailFields.PhyscianAddress,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Pharmacy Id', id: 'policy.rx.detail.physicians.gridheader.pharmacyid' }),\r\n            field: PhysicianDetailFields.PharmacyId,\r\n            width: 100,\r\n            hide: this._rxReportUtil.checkIfDefaultProvider(rxReport)\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Phone', id: 'policy.rx.detail.physicians.gridheader.phone' }),\r\n            field: PhysicianDetailFields.PhyscianPhone,\r\n            valueFormatter: this.formatPhone,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Speciality', id: 'policy.rx.detail.physicians.gridheader.speciality' }),\r\n            field: PhysicianDetailFields.PhyscianSpecialty,\r\n            width: 100\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private formatPhone(params: any): string {\r\n        if (params.value) {\r\n            return new LsPhoneNumberPipe().transform(\r\n                PhoneUtil.convertPhoneStringToObject(params.value, PhoneTypes.WORK)\r\n            );\r\n        }\r\n        return '';\r\n    }\r\n}\r\n\r\nconst PhysicianDetailFields = {\r\n    PhyscianName: 'PhyscianName',\r\n    PhyscianAddress: 'PhyscianAddress',\r\n    PharmacyId: 'PharmacyId',\r\n    PhyscianPhone: 'PhyscianPhone',\r\n    PhyscianSpecialty: 'PhyscianSpecialty'\r\n};\r\n","module.exports = \"<div class=\\\"lf-dashed-bottom-border\\\">\\r\\n    <div class=\\\"row justify-content-start\\\">\\r\\n        <div class=\\\"lf-grid-title\\\">{{title}}</div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <data-grid #dataGrid [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\" [ngStyle]=\\\"{'width': '100%', height: gridOptions.height}\\\"></data-grid>\\r\\n    </div>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</div>\"","import { Injector, Component, Input } from '@angular/core';\r\n\r\nimport { IGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { RXReportProxy } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared/grid/base-policy-grid.vm';\r\nimport { PhysicianGridColumnsBuilder } from './physician-grid-columns.builder';\r\n\r\n@Component({\r\n    selector: 'physician',\r\n    templateUrl: './physician.component.html',\r\n    providers: [PolicySubscriber, PhysicianGridColumnsBuilder]\r\n})\r\nexport class PhysicianComponent extends BasePolicyGridViewModel<RXReportProxy> {\r\n    @Input()\r\n    public physicianData: RXReportProxy[];\r\n    private _gridColumnsBuilder: PhysicianGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: PhysicianGridColumnsBuilder, i18n: I18n) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public setupData(): void {\r\n        this.setResolvedMetaData();\r\n    }\r\n\r\n    public getGridColumns(): DataGridColumns {\r\n        return this._gridColumnsBuilder.build(this.listData['RxReport']);\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): RXReportProxy[] {\r\n        return this.physicianData;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'Physicians', id: 'policy.rx.prescription.physicians' });\r\n    }\r\n\r\n    protected getRowNodeId(data: RXReportProxy): any {\r\n        return data.RXReportProxyId;\r\n    }\r\n}\r\n","export * from './prescription-information.component';","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\nimport { MetadataItem } from 'ls-core/model';\r\n\r\nimport { RxReportUtil } from '../rx-report-util';\r\n\r\n@Injectable()\r\nexport class PrescriptionInformationGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n    private _rxReportUtil: RxReportUtil;\r\n\r\n    constructor(\r\n        lsCellFormatters: LsCellFormatters,\r\n        lsCellComparators: LsCellComparators,\r\n        i18n: I18n,\r\n        rxReportUtil: RxReportUtil\r\n    ) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n        this._rxReportUtil = rxReportUtil;\r\n    }\r\n\r\n    public build(rxReport: MetadataItem[]): DataGridColumns {\r\n        const isDefaultProvider = this._rxReportUtil.checkIfDefaultProvider(rxReport);\r\n\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Rx and Dosage', id: 'policy.rx.detail.prescriptions.gridheader.rx' }),\r\n            field: PrescriptionInformationDetailFields.DrugName,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Drug Priority',\r\n                id: 'policy.rx.detail.prescriptions.gridheader.drugpriority'\r\n            }),\r\n            field: PrescriptionInformationDetailFields.DrugPriority,\r\n            width: 60,\r\n            hide: isDefaultProvider\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Drug Weight', id: 'policy.rx.detail.prescriptions.gridheader.drugweight' }),\r\n            field: PrescriptionInformationDetailFields.DrugWeight,\r\n            width: 60,\r\n            hide: isDefaultProvider\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: '# Fills',\r\n                id: 'policy.rx.detail.prescriptions.gridheader.NbrFillsDrugName'\r\n            }),\r\n            field: PrescriptionInformationDetailFields.NbrFillsDrugName,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Physician Name',\r\n                id: 'policy.rx.detail.prescriptions.gridheader.physicianname'\r\n            }),\r\n            field: PrescriptionInformationDetailFields.PhyscianName,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Prescription Fill Date',\r\n                id: 'policy.rx.detail.prescriptions.gridheader.date'\r\n            }),\r\n            field: PrescriptionInformationDetailFields.FillDate,\r\n            width: 100,\r\n            valueFormatter: (params): any => this._lsCellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Quantity', id: 'policy.rx.detail.prescriptions.gridheader.quantity' }),\r\n            field: PrescriptionInformationDetailFields.Quantity,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Total Refills Allowed',\r\n                id: 'policy.rx.detail.prescriptions.gridheader.refills'\r\n            }),\r\n            field: PrescriptionInformationDetailFields.TotalRefillsAllowed,\r\n            width: 60,\r\n            hide: !isDefaultProvider\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Number of Days', id: 'policy.rx.detail.prescriptions.gridheader.days' }),\r\n            field: PrescriptionInformationDetailFields.DaysSupply,\r\n            width: 100\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nconst PrescriptionInformationDetailFields = {\r\n    DrugName: 'DrugName',\r\n    DrugPriority: 'DrugPriority',\r\n    DrugWeight: 'DrugWeight',\r\n    NbrFillsDrugName: 'NbrFillsDrugName',\r\n    PhyscianName: 'PhyscianName',\r\n    FillDate: 'FillDate',\r\n    Quantity: 'Quantity',\r\n    TotalRefillsAllowed: 'TotalRefillsAllowed',\r\n    DaysSupply: 'DaysSupply'\r\n};\r\n","module.exports = \"<div class=\\\"lf-page-subheader\\\">\\r\\n    {{title}}</div>\\r\\n<div class=\\\"lf-dashed-bottom-border\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <data-grid #dataGrid [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\" [ngStyle]=\\\"{'width': '100%', height: gridOptions.height}\\\"></data-grid>\\r\\n    </div>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</div>\"","import { Injector, Component, Input } from '@angular/core';\r\n\r\nimport { IGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { RXReportProxy } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared/grid/base-policy-grid.vm';\r\nimport { PrescriptionInformationGridColumnsBuilder } from './prescription-information-grid-columns.builder';\r\n\r\n@Component({\r\n    selector: 'prescription-information',\r\n    templateUrl: './prescription-information.component.html',\r\n    providers: [PolicySubscriber, PrescriptionInformationGridColumnsBuilder]\r\n})\r\nexport class PrescriptionInformationComponent extends BasePolicyGridViewModel<RXReportProxy> {\r\n    @Input()\r\n    public prescriptionData: RXReportProxy[];\r\n    private _gridColumnsBuilder: PrescriptionInformationGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: PrescriptionInformationGridColumnsBuilder, i18n: I18n) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public setupData(): void {\r\n        this.setResolvedMetaData();\r\n    }\r\n\r\n    public getGridColumns(): DataGridColumns {\r\n        return this._gridColumnsBuilder.build(this.listData['RxReport']);\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): RXReportProxy[] {\r\n        return this.prescriptionData;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'Prescription Information', id: 'policy.rx.prescription.sectiontitle' });\r\n    }\r\n\r\n    protected getRowNodeId(data: RXReportProxy): any {\r\n        return data.RXReportProxyId;\r\n    }\r\n}\r\n","export * from './rx-detail.component';","import { Injectable } from '@angular/core';\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { MetadataItem } from 'ls-core/model';\r\nimport { RxReportUtil } from '../rx-report-util';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class RxDetailGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _rxReportUtil: RxReportUtil;\r\n\r\n    constructor(i18n: I18n, rxReportUtil: RxReportUtil) {\r\n        super();\r\n        this.i18n = i18n;\r\n        this._rxReportUtil = rxReportUtil;\r\n    }\r\n\r\n    public build(rxReport: MetadataItem[]): DataGridColumns {\r\n        const columnLabelForTherapeutic = this._rxReportUtil.getLabelForRxDetailGridColumn(rxReport, true);\r\n        const columnLabelForIndications = this._rxReportUtil.getLabelForRxDetailGridColumn(rxReport, false);\r\n\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Drug Name', id: 'policy.rx.detail.effects.gridheader.drugname' }),\r\n            field: RxDetailFields.DrugName,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: columnLabelForTherapeutic,\r\n            field: RxDetailFields.Therapeutic,\r\n            width: 60\r\n        });\r\n        this.addColumn({\r\n            headerName: columnLabelForIndications,\r\n            field: RxDetailFields.Indications,\r\n            width: 100\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nconst RxDetailFields = {\r\n    DrugName: 'DrugName', //\r\n    Therapeutic: 'Therapeutic', // 'policy.rx.detail.effects.gridheader.therapeutic'\r\n    Indications: 'Indications' // 'policy.rx.detail.effects.gridheader.indications'\r\n};\r\n","module.exports = \"<div class=\\\"lf-dashed-bottom-border\\\">\\r\\n    <div class=\\\"row justify-content-start\\\">\\r\\n        <div class=\\\"lf-grid-title\\\">{{title}}</div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <data-grid #dataGrid [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\" [ngStyle]=\\\"{'width': '100%', height: gridOptions.height}\\\"></data-grid>\\r\\n    </div>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</div>\"","import { Injector, Component, Input } from '@angular/core';\r\n\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared/grid/base-policy-grid.vm';\r\nimport { IGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { RXReportProxy } from 'ls-core/model';\r\nimport { RxDetailGridColumnsBuilder } from './rx-detail-grid-columns.builder';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Component({\r\n    selector: 'rx-detail',\r\n    templateUrl: './rx-detail.component.html',\r\n    providers: [PolicySubscriber, RxDetailGridColumnsBuilder]\r\n})\r\nexport class RxDetailComponent extends BasePolicyGridViewModel<RXReportProxy> {\r\n    @Input()\r\n    public prescriptionData: RXReportProxy[];\r\n    private _gridColumnsBuilder: RxDetailGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: RxDetailGridColumnsBuilder, i18n: I18n) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public setupData(): void {\r\n        this.setResolvedMetaData();\r\n    }\r\n\r\n    public getGridColumns(): DataGridColumns {\r\n        return this._gridColumnsBuilder.build(this.listData['RxReport']);\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): RXReportProxy[] {\r\n        return this.prescriptionData;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'Rx Detail', id: 'policy.rx.prescription.rxdetail' });\r\n    }\r\n\r\n    protected getRowNodeId(data: RXReportProxy): any {\r\n        return data.RXReportProxyId;\r\n    }\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { BaseViewDataResolver } from 'ls-core/view-model';\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods } from 'ls-core/service';\r\nimport { InsuredDTO } from 'ls-core/model';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { ApplicantListHelper } from 'business/policy/shared';\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\n\r\n@Injectable()\r\nexport class RxReportDataResolver extends BaseViewDataResolver {\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession, applicantListHelper: ApplicantListHelper) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n        this._applicantListHelper = applicantListHelper;\r\n    }\r\n\r\n    protected getServiceParams(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.RX_REPORT_PROXY_SERVICE,\r\n            serviceMethod: UIServiceMethods.GET_DATA,\r\n            requestPayload: new RxReportProxyRequest(ConvertUtil.toNumber(this.getActiveApplicant().PolicyPersonId))\r\n        });\r\n    }\r\n\r\n    private getActiveApplicant(): InsuredDTO {\r\n        return this._applicantListHelper.getActiveApplicantOrDefault(this._appSession.policyDTO.Insureds_LazyLoad);\r\n    }\r\n}\r\n\r\nexport class RxReportProxyRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.RXReportProxyRequest, LifeSuite.UIServiceDTO';\r\n\r\n    public policyPersonId: number;\r\n\r\n    constructor(policyPersonId: number) {\r\n        this.policyPersonId = policyPersonId;\r\n    }\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class RxReportLazyDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds);\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class RxReportMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['RxReport'];\r\n    }\r\n}\r\n","import { MetadataUtil } from 'ls-core/util';\r\nimport { MetadataItem } from 'ls-core/model';\r\nimport { Injectable } from '@angular/core';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst rxLabels = {\r\n    DISPLAY_COLUMN2: 'DisplayCol2',\r\n    DISPLAY_COLUMN3: 'DisplayCol3',\r\n    COLUMN2_NAME_THERAPEUTIC: 'Therapeutic',\r\n    COLUMN2_NAME_NATIONAL_DRUG_CODE: 'National Drug Code',\r\n    COLUMN3_NAME_PRESCRIPTION_SIDE_EFFECTS: 'Prescription Side Effects',\r\n    COLUMN3_NAME_INDICATIONS: 'Indications',\r\n    RX_PROVIDER_MILLIMAN: 'Milliman'\r\n};\r\n@Injectable()\r\nexport class RxReportUtil {\r\n    private i18n: I18n;\r\n\r\n    constructor(i18n: I18n) {\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public constructMetadatItemValue(list: MetadataItem[], column: string, providerName: string): string {\r\n        const tempColumn = `${column}${providerName}`;\r\n        return this.getReportProvider(list, tempColumn);\r\n    }\r\n\r\n    public checkIfDefaultProvider(list: MetadataItem[], value: string = 'Report Provider'): boolean {\r\n        const reportProvider = this.getReportProvider(list, value);\r\n        return reportProvider.toUpperCase() === rxLabels.RX_PROVIDER_MILLIMAN.toUpperCase() ? false : true;\r\n    }\r\n\r\n    public getReportProvider(list: MetadataItem[], value: string = 'Report Provider'): string {\r\n        const reportProvider = MetadataUtil.getLabelByValue(list, value);\r\n        return reportProvider.toUpperCase();\r\n    }\r\n\r\n    public getLabelForRxDetailGridColumn(list: MetadataItem[], isTherapeutic: boolean): string {\r\n        const reportProvider = this.getReportProvider(list);\r\n        if (isTherapeutic) {\r\n            return this.constructMetadatItemValue(list, rxLabels.DISPLAY_COLUMN2, reportProvider) ===\r\n                rxLabels.COLUMN2_NAME_THERAPEUTIC.toUpperCase()\r\n                ? this.i18n({\r\n                      value: 'Therapeutic',\r\n                      id: 'policy.rx.detail.effects.gridheader.therapeutic'\r\n                  })\r\n                : this.i18n({\r\n                      value: 'National Drug Code',\r\n                      id: 'policy.rx.detail.effects.gridheader.nationaldrugcode'\r\n                  });\r\n        } else {\r\n            return this.constructMetadatItemValue(list, rxLabels.DISPLAY_COLUMN3, reportProvider) ===\r\n                rxLabels.COLUMN3_NAME_PRESCRIPTION_SIDE_EFFECTS.toUpperCase()\r\n                ? this.i18n({\r\n                      value: 'Prescription Side Effects',\r\n                      id: 'policy.rx.detail.effects.gridheader.sideeffects'\r\n                  })\r\n                : this.i18n({\r\n                      value: 'Indications',\r\n                      id: 'policy.rx.detail.effects.gridheader.indications'\r\n                  });\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-page-subheader\\\" i18n=\\\"@@mywork.applicantpreview.label.applicantInformation\\\">Applicant Information</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Report Date\\\" i18n-label=\\\"@@policy.rx.applicant.sectiontitle\\\" [control]=\\\"reportDate\\\">\\r\\n\\t\\t\\t<lf-statictext #reportDate name=\\\"reportDate\\\" [value]=\\\"firstRxReportItem.ReportDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Policy Number\\\" i18n-label=\\\"@@policy.rx.applicant.policynumber\\\" [control]=\\\"policyNumber\\\">\\r\\n\\t\\t\\t<lf-statictext #policyNumber name=\\\"policyNumber\\\" [value]=\\\"firstRxReportItem.PolicyNumber\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Name of Insurance Company\\\" i18n-label=\\\"@@policy.rx.applicant.nameofcompany\\\" [control]=\\\"nameOfInsuranceCompany\\\">\\r\\n\\t\\t\\t<lf-statictext #nameOfInsuranceCompany name=\\\"nameOfInsuranceCompany\\\" [value]=\\\"firstRxReportItem.CompanyName\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<rx-web-buttons [firstRxItem]=\\\"firstRxReportItem\\\"></rx-web-buttons>\\r\\n\\t</div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Name of Insured\\\" i18n-label=\\\"@@policy.rx.applicant.nameofinsured\\\" [control]=\\\"insuredName\\\">\\r\\n\\t\\t\\t<lf-statictext #insuredName name=\\\"insuredName\\\" [value]=\\\"fullName\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Requestor\\\" i18n-label=\\\"@@policy.rx.applicant.requester\\\" [control]=\\\"requestor\\\">\\r\\n\\t\\t\\t<lf-statictext #requestor name=\\\"requestor\\\" [value]=\\\"firstRxReportItem.Requestor\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Address of Insurance Company\\\" i18n-label=\\\"@@policy.rx.applicant.addressofcompany\\\" [control]=\\\"insuranceCompanyAddress\\\">\\r\\n\\t\\t\\t<lf-statictext #insuranceCompanyAddress name=\\\"insuranceCompanyAddress\\\" [value]=\\\"firstRxReportItem.CompanyAddress\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.rx.applicant.taxid\\\" [control]=\\\"taxId\\\">\\r\\n\\t\\t\\t<lf-statictext #taxId name=\\\"taxId\\\" [value]=\\\"firstRxReportItem.Ssno | taxIdMask\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Account Code\\\" i18n-label=\\\"@@policy.rx.applicant.accountcode\\\" [control]=\\\"accountCode\\\">\\r\\n\\t\\t\\t<lf-statictext #accountCode name=\\\"accountCode\\\" [value]=\\\"firstRxReportItem.AccountCode\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"State\\\" i18n-label=\\\"@@policy.rx.applicant.state\\\" [control]=\\\"state\\\">\\r\\n\\t\\t\\t<lf-statictext #state name=\\\"state\\\" [value]=\\\"firstRxReportItem.InsuredState\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Birth Date\\\" i18n-label=\\\"@@policy.rx.applicant.birthdate\\\" [control]=\\\"birthDate\\\">\\r\\n\\t\\t\\t<lf-statictext #birthDate name=\\\"birthDate\\\" [value]=\\\"firstRxReportItem.BirthDate | lfDate\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Ticket Number\\\" i18n-label=\\\"@@policy.rx.applicant.ticketnumber\\\" [control]=\\\"ticketNumber\\\">\\r\\n\\t\\t\\t<lf-statictext #ticketNumber name=\\\"ticketNumber\\\" [value]=\\\"firstRxReportItem.TicketNumber\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Gender\\\" i18n-label=\\\"@@policy.rx.applicant.gender\\\" [control]=\\\"gender\\\">\\r\\n\\t\\t\\t<lf-statictext #gender name=\\\"gender\\\" [value]=\\\"firstRxReportItem.SexState\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\" *ngIf=\\\"!isClientScoreFieldVisible\\\">\\r\\n\\t\\t<lf-form-input label=\\\"Calculated Client Score\\\" i18n-label=\\\"@@policy.rx.applicant.clientscore\\\" [control]=\\\"calculatedClientScore\\\">\\r\\n\\t\\t\\t<lf-statictext #calculatedClientScore name=\\\"calculatedClientScore\\\" [value]=\\\"firstRxReportItem.ClientScore\\\" secureComponent></lf-statictext>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<hr/>\\r\\n<prescription-information [prescriptionData]=\\\"prescriptionData\\\"></prescription-information>\\r\\n<physician [physicianData]=\\\"physicianData\\\"></physician>\\r\\n<rx-detail [prescriptionData]=\\\"prescriptionData\\\"></rx-detail>\"","import { Component, Injector } from '@angular/core';\n\nimport { TertiaryTabHostViewModel } from 'life-core/component/layout/tabview';\nimport { NameUtil } from 'life-core/util';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { PolicyDTO, InsuredDTO, RXReportProxy } from 'ls-core/model';\nimport { SavePolicyDataDelegate } from 'ls-core/service';\n\nimport { ApplicantListHelper } from 'business/policy/shared';\nimport { RxReportPolicyDataModel } from 'business/policy/shared/data-model';\nimport { RxReportUtil } from './rx-report-util';\nimport { ArrayUtil } from 'life-core/util/lang';\n\n@Component({\n    selector: 'rx-report',\n    templateUrl: './rx-report.component.html',\n    providers: [PolicySubscriber]\n})\nexport class RxReportComponent extends TertiaryTabHostViewModel<RxReportPolicyDataModel> {\n    public applicant: InsuredDTO;\n    public firstRxReportItem: RXReportProxy;\n    public fullName: string;\n    public prescriptionData: RXReportProxy[] = [];\n    public physicianData: RXReportProxy[] = [];\n    public isClientScoreFieldVisible: boolean;\n    private _applicantListHelper: ApplicantListHelper;\n    private _rxReportUtil: RxReportUtil;\n\n    constructor(\n        injector: Injector,\n        applicantListHelper: ApplicantListHelper,\n        policySubscriber: PolicySubscriber,\n        rxReportUtil: RxReportUtil\n    ) {\n        super(injector);\n        this._applicantListHelper = applicantListHelper;\n        this._rxReportUtil = rxReportUtil;\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n    }\n\n    private setApplicant(): void {\n        this.applicant = this._applicantListHelper.getActiveApplicantOrDefault(this.data.policy.Insureds_LazyLoad);\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedMetaData();\n        this.setResolvedData('rxReports', 'rxReports');\n        this.setApplicant();\n        this.setupRxReports();\n        this.setFullName();\n        this.setClientScoreFlag();\n        return Promise.resolve();\n    }\n\n    private setupRxReports(): void {\n        this.firstRxReportItem = this.data.rxReports.length > 0 ? this.data.rxReports[0] : new RXReportProxy();\n        ArrayUtil.addAutoItemId(this.data.rxReports, 'RXReportProxyId');\n        this.setPrescriptionData();\n        this.setPhysicianData();\n    }\n\n    private setPrescriptionData(): void {\n        const prescriptionSet = new Set<string>();\n        this.data.rxReports.forEach(prescription => {\n            if (prescription.DrugName && !prescriptionSet.has(prescription.DrugName)) {\n                prescriptionSet.add(prescription.DrugName);\n                this.prescriptionData.push(prescription);\n            }\n        });\n    }\n\n    private setPhysicianData(): void {\n        const physicianSet = new Set<string>();\n        this.data.rxReports.forEach(physician => {\n            if (physician.PhyscianName && !physicianSet.has(physician.PhyscianName)) {\n                physicianSet.add(physician.PhyscianName);\n                this.physicianData.push(physician);\n            }\n        });\n    }\n\n    private setFullName(): void {\n        this.fullName = NameUtil.getFullNameWithMiddleInitial({\n            firstName: this.firstRxReportItem.InsuredFirstName,\n            lastName: this.firstRxReportItem.InsuredLastName\n        });\n    }\n\n    private setClientScoreFlag(): void {\n        this.isClientScoreFieldVisible = this._rxReportUtil.checkIfDefaultProvider(this.listData['RxReport']);\n    }\n\n    protected getDataToSave(): PolicyDTO {\n        return this.data.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n}\n","﻿export * from './rx-rules.component';\r\nexport * from './rx-rules-summary/rx-rules-summary.component';\r\nexport * from './rx-usage/rx-usage.component';\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class RxRulesSummaryColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Rate Class', id: 'policy.rx.rules.gridheader.rateclass' }),\r\n            field: RxRulesSummaryFields.RulesIndex,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Decision', id: 'policy.rx.rules.gridheader.decision' }),\r\n            field: RxRulesSummaryFields.RulesLevel,\r\n            width: 70\r\n        });\r\n\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nexport const RxRulesSummaryFields = {\r\n    RulesIndex: 'RulesIndex',\r\n    RulesLevel: 'RulesLevel'\r\n};\r\n","module.exports = \"<div class=\\\"lf-solid-bottom-border\\\">\\r\\n    <div class=\\\"lf-page-subheader\\\">{{title}}</div>\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\">\\r\\n    </data-grid>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</div>\"","import { Component, Injector, Input } from '@angular/core';\r\nimport { RxRulesSummaryProxy } from 'ls-core/model';\r\nimport { RxRulesSummaryColumnsBuilder } from './rx-rules-summary-grid-columns.builder';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared';\r\nimport {\r\n    IGridColumnsBuilder,\r\n    IDataGridOptions,\r\n    DataGridColumns,\r\n    DataGridOptionsUtil,\r\n    DataGridCommonOptions\r\n} from 'life-core/component/grid';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Component({\r\n    selector: 'rx-rules-summary',\r\n    templateUrl: './rx-rules-summary.component.html',\r\n    providers: [PolicySubscriber, RxRulesSummaryColumnsBuilder]\r\n})\r\nexport class RxRulesSummaryComponent extends BasePolicyGridViewModel<RxRulesSummaryProxy> {\r\n    private _rxRules: RxRulesSummaryProxy[];\r\n    private _gridColumnBuilder: RxRulesSummaryColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnBuilder: RxRulesSummaryColumnsBuilder, i18n: I18n) {\r\n        super(injector);\r\n        this._gridColumnBuilder = gridColumnBuilder;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    @Input()\r\n    public set rxRules(value: RxRulesSummaryProxy[]) {\r\n        this._rxRules = value;\r\n        this.refreshGrid();\r\n    }\r\n\r\n    public getGridOptions(): IDataGridOptions {\r\n        const gridColumns: DataGridColumns = this.getGridColumns();\r\n        return DataGridOptionsUtil.getGridOptions(\r\n            {\r\n                rowData: this.loadItems(),\r\n                columnDefs: gridColumns.getLayout(),\r\n                rowSelection: 'single',\r\n                rowDeselection: true,\r\n                enableColResize: true,\r\n                enableSorting: true,\r\n                headerRows: 1,\r\n                context: {\r\n                    hostComponent: this\r\n                }\r\n            },\r\n            DataGridCommonOptions\r\n        );\r\n    }\r\n\r\n    public getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnBuilder;\r\n    }\r\n\r\n    public getRowNodeId(data: RxRulesSummaryProxy): any {\r\n        return data.PrescriptionDrugHeaderId;\r\n    }\r\n\r\n    protected loadItems(): RxRulesSummaryProxy[] {\r\n        return this._rxRules || [];\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'RxRules Summary', id: 'policy.evidence.tab.label.rxrules' });\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <lf-form-input [control]=\\\"status\\\" label=\\\"Status\\\" i18n-label=\\\"@@policy.rx.rules.status\\\">\\r\\n            <lf-statictext #status name=\\\"status\\\" [value]=\\\"firstRxItem.OrderResultStatus\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <lf-form-input [control]=\\\"fillCount\\\" label=\\\"Fill Count\\\" i18n-label=\\\"@@policy.rx.rules.fillcount\\\">\\r\\n            <lf-statictext #fillCount name=\\\"fillCount\\\" [value]=\\\"firstRxItem.PrescriptionFillCount\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <rx-web-buttons [firstRxItem]=\\\"firstRxItem\\\"></rx-web-buttons>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <lf-form-input [control]=\\\"gender\\\" label=\\\"Gender\\\" i18n-label=\\\"@@policy.rx.rules.gender\\\">\\r\\n            <lf-statictext #gender name=\\\"gender\\\" [value]=\\\"firstRxItem.ApplicantGender\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <lf-form-input [control]=\\\"dOB\\\" label=\\\"DOB\\\" i18n-label=\\\"@@policy.rx.rules.birthdate\\\">\\r\\n            <lf-statictext #dOB name=\\\"dOB\\\" [value]=\\\"firstRxItem.ApplicantBirthDate\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 col-md-12 col-xl-12 lf-solid-bottom-border\\\">\\r\\n        <!-- no content here. need border bottom -->\\r\\n    </div>\\r\\n    <div class=\\\"col-12 col-md-12 col-xl-12\\\">\\r\\n        <rx-rules-summary *ngIf=\\\"rxRulesExist\\\" [rxRules]=\\\"rxRules\\\"></rx-rules-summary>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 col-md-12 col-xl-12\\\">\\r\\n        <rx-usage></rx-usage>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\n\nimport { TertiaryTabHostViewModel } from 'life-core/component/layout/tabview';\nimport { ConvertUtil } from 'life-core/util/lang';\nimport { DateFormatter } from 'life-core/util';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { BaseTransferObject, InsuredDTO, RxRulesSummaryProxy } from 'ls-core/model';\nimport { DataService, DataServiceParams, UIServiceNames, UIServiceMethods } from 'ls-core/service';\n\nimport { ApplicantListHelper } from 'business/policy/shared';\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\n\n@Component({\n    selector: 'rx-rules',\n    templateUrl: './rx-rules.component.html',\n    providers: [PolicySubscriber]\n})\nexport class RxRulesComponent extends TertiaryTabHostViewModel<PolicyDataModel> {\n    public firstRxItem: RxRulesSummaryProxy;\n    public rxRules: RxRulesSummaryProxy[];\n    public rxRulesExist: boolean = false;\n    private _applicant: InsuredDTO;\n    private _dataService: DataService;\n    private _applicantListHelper: ApplicantListHelper;\n    private _dateFormatter: DateFormatter;\n\n    constructor(\n        injector: Injector,\n        dataService: DataService,\n        applicantListHelper: ApplicantListHelper,\n        policySubscriber: PolicySubscriber,\n        dateFormatter: DateFormatter\n    ) {\n        super(injector);\n        this._dataService = dataService;\n        this._applicantListHelper = applicantListHelper;\n        this._dateFormatter = dateFormatter;\n        this.firstRxItem = new RxRulesSummaryProxy();\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n    }\n\n    public loadData(): Promise<void> {\n        this.setApplicant();\n        this.loadRules();\n        return Promise.resolve();\n    }\n\n    protected getLoadRulesServiceParams(): DataServiceParams {\n        return new DataServiceParams({\n            serviceInterface: UIServiceNames.RX_RULES_SUMMARY_PROXY_SERVICE,\n            serviceMethod: UIServiceMethods.GET_DATA,\n            requestPayload: new RxRulesSummaryRequest(ConvertUtil.toNumber(this._applicant.PolicyPersonId))\n        });\n    }\n\n    private setApplicant(): void {\n        this._applicant = this._applicantListHelper.getActiveApplicantOrDefault(this.data.policy.Insureds_LazyLoad);\n    }\n\n    private loadRules(): Promise<any> {\n        return this._dataService.getData(this.getLoadRulesServiceParams()).then(response => {\n            this.setupRules(response.responsePayload as RxRulesSummaryProxy[]);\n            this.setApplicantBirthDate();\n            this.rxRulesExist = true;\n        });\n    }\n\n    private setupRules(rxRules: RxRulesSummaryProxy[]): void {\n        this.firstRxItem = rxRules[0] || new RxRulesSummaryProxy();\n        this.rxRules = rxRules;\n    }\n\n    private setApplicantBirthDate(): void {\n        this.firstRxItem.ApplicantBirthDate = this._dateFormatter.format(this.firstRxItem.ApplicantBirthDate);\n    }\n}\n\nexport class RxRulesSummaryRequest extends BaseTransferObject {\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.RxRulesSummaryRequest, LifeSuite.UIServiceDTO';\n\n    public policyPersonId: number;\n\n    constructor(policyPersonId: number) {\n        super();\n        this.policyPersonId = policyPersonId;\n    }\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\nconst RxUsageFields = {\r\n    MibCodes: 'MibCodes', //\r\n    DateAdded: 'DateAdded' //\r\n};\r\n\r\n@Injectable()\r\nexport class RxUsageColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'MIB Code', id: 'policy.mib.submitted.codes.gridheader.mibcode' }),\r\n            field: RxUsageFields.MibCodes,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created On', id: 'policy.mib.submitted.codes.gridheader.createdon' }),\r\n            field: RxUsageFields.DateAdded,\r\n            width: 70,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-page-subheader\\\">{{title}}</div>\\r\\n<data-grid #dataGrid [ngStyle]=\\\"{height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\">\\r\\n</data-grid>\\r\\n<data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport {\r\n    IGridColumnsBuilder,\r\n    IDataGridOptions,\r\n    DataGridColumns,\r\n    DataGridOptionsUtil,\r\n    DataGridCommonOptions\r\n} from 'life-core/component/grid';\r\nimport { MIBCodingDTO, InsuredDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\nimport { RxUsageColumnsBuilder } from './rx-usage-grid-columns.builder';\r\nimport { BasePolicyGridViewModel, ApplicantListHelper } from 'business/policy/shared';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Component({\r\n    selector: 'rx-usage',\r\n    templateUrl: './rx-usage.component.html',\r\n    providers: [PolicySubscriber, RxUsageColumnsBuilder]\r\n})\r\nexport class RxUsageComponent extends BasePolicyGridViewModel<MIBCodingDTO> {\r\n    private _gridColumnsBuilder: RxUsageColumnsBuilder;\r\n    private _applicant: InsuredDTO;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        applicantListHelper: ApplicantListHelper,\r\n        rxUsageColumnsBuilder: RxUsageColumnsBuilder,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this._applicantListHelper = applicantListHelper;\r\n        this._gridColumnsBuilder = rxUsageColumnsBuilder;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public getGridOptions(): IDataGridOptions {\r\n        const gridColumns: DataGridColumns = this.getGridColumns();\r\n        return DataGridOptionsUtil.getGridOptions(\r\n            {\r\n                rowData: this.loadItems(),\r\n                columnDefs: gridColumns.getLayout(),\r\n                rowSelection: 'single',\r\n                rowDeselection: true,\r\n                enableColResize: true,\r\n                enableSorting: true,\r\n                headerRows: 1,\r\n                context: {\r\n                    hostComponent: this\r\n                }\r\n            },\r\n            DataGridCommonOptions\r\n        );\r\n    }\r\n    public getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    public getRowNodeId(data: MIBCodingDTO): any {\r\n        return data.PolicyPersonId;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setApplicant();\r\n        return super.loadData();\r\n    }\r\n\r\n    protected loadItems(): MIBCodingDTO[] {\r\n        return this._applicant.MibCodings_LazyLoad.filter(item => item.RxRuleGenerated);\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'MIB Codes for Adverse Rx Usage', id: 'policy.rx.rules.codesummarysectiontitle' });\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this._applicant = this._applicantListHelper.getActiveApplicantOrDefault(this.policy.Insureds_LazyLoad);\r\n    }\r\n}\r\n","module.exports = \".ls-justify-content-center-layout {\\r\\n    display: flex;\\r\\n    justify-content: center;\\r\\n    flex-basis: 100%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS9ldmlkZW5jZS9yeC9yeC13ZWItYnV0dG9ucy9yeC13ZWItYnV0dG9ucy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksY0FBYztJQUNkLHdCQUF3QjtJQUN4QixpQkFBaUI7Q0FDcEIiLCJmaWxlIjoic3JjL2xpZmVzdWl0ZS1hcHAvYnVzaW5lc3MvcG9saWN5L2V2aWRlbmNlL3J4L3J4LXdlYi1idXR0b25zL3J4LXdlYi1idXR0b25zLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIubHMtanVzdGlmeS1jb250ZW50LWNlbnRlci1sYXlvdXQge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG4gICAgZmxleC1iYXNpczogMTAwJTtcclxufVxyXG4iXX0= */\"","module.exports = \"<div class=\\\"pb-2\\\">\\r\\n    <div class=\\\"ls-justify-content-center-layout\\\">\\r\\n        <ng-container i18n=\\\"@@policy.rx.prescription.rxrules\\\">Rx Rules</ng-container>\\r\\n    </div>\\r\\n    <div class=\\\"ls-justify-content-center-layout\\\">\\r\\n        <lf-button id=\\\"webButton\\\" label=\\\"Web\\\" [disabled]=\\\"disableWebButton\\\" i18n-label=\\\"@@policy.rx.button.web\\\" (click)=\\\"onWebButtonClick()\\\"\\r\\n            secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n        <lf-button id=\\\"pdfButton\\\" label=\\\"PDF\\\" [disabled]=\\\"disablePDFButton\\\" i18n-label=\\\"@@policy.rx.button.pdf\\\" (click)=\\\"onPdfButtonClick()\\\"\\r\\n            secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n    </div>\\r\\n</div>\"","import { Component, Input, Injector } from '@angular/core';\n\nimport { RxRulesSummaryProxy, RXReportProxy } from 'ls-core/model';\n\nimport { OpenURLDelegate } from 'ls-core/handler/open-url-delegate';\nimport { LsAppConfig, SystemSetting } from 'ls-core/config';\nimport { AppSession } from 'ls-core/session';\n\n@Component({\n    selector: 'rx-web-buttons',\n    templateUrl: './rx-web-buttons.component.html',\n    styleUrls: ['./rx-web-buttons.component.css']\n})\nexport class RxWebButtonsComponent {\n    public _firstRxItem: RxRulesSummaryProxy | RXReportProxy;\n    public disableWebButton: boolean;\n    public disablePDFButton: boolean;\n\n    private _openURLDelegate: OpenURLDelegate;\n    private _appConfig: LsAppConfig;\n    constructor(openURLDelegate: OpenURLDelegate, appConfig: LsAppConfig) {\n        this._openURLDelegate = openURLDelegate;\n        this._appConfig = appConfig;\n    }\n\n    @Input()\n    public set firstRxItem(item: RxRulesSummaryProxy | RXReportProxy) {\n        this._firstRxItem = item;\n        this.setButtonsAvailability();\n    }\n\n    public onWebButtonClick(): void {\n        if (this._firstRxItem && this._firstRxItem.OrderResultsUrl) {\n            const destinationURL = this.getDestinationURL('web');\n            this.openWebUrl(destinationURL);\n        }\n    }\n\n    public onPdfButtonClick(): void {\n        if (this._firstRxItem && this._firstRxItem.ImageFileName) {\n            const destinationURL = this.getDestinationURL('pdf');\n            this.openWebUrl(destinationURL);\n        }\n    }\n\n    private openWebUrl(navigateUrl: string): void {\n        this._openURLDelegate.openURL(navigateUrl);\n    }\n\n    private setButtonsAvailability(): void {\n        this.disableWebButton = !this._firstRxItem.OrderResultsUrl;\n        this.disablePDFButton = !this._firstRxItem.ImageFileName;\n    }\n\n    private getDestinationURL(reportType: string): string {\n        let legacyUrl = this._appConfig.getSystemSetting(SystemSetting.LSLegacyUrl);\n        legacyUrl += legacyUrl.endsWith('/') ? '' : '/';\n        return `${legacyUrl}MillimanWebAccess/MillimanReportData.aspx?type=${reportType}&PdhId=${\n            this._firstRxItem.PrescriptionDrugHeaderId\n        }`;\n    }\n}\n","module.exports = \"<tabview-rx></tabview-rx>\"","import { Component, Injector, Injectable } from '@angular/core';\n\nimport { SecondaryTabHostViewModel } from 'life-core/component/layout/tabview';\nimport { AuthorizationProvider } from 'life-core/authorization';\n\nimport { SavePolicyDataDelegate } from 'ls-core/service';\nimport { PolicySubscriber } from 'ls-core/session';\nimport { PolicyDTO } from 'ls-core/model';\n\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\nimport { RxAuthorizationProvider } from './rx-authorization.provider';\n\n@Component({\n    selector: 'rx-tab',\n    templateUrl: './rx.component.html',\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: RxAuthorizationProvider }]\n})\n@Injectable()\nexport class RxTabComponent extends SecondaryTabHostViewModel<PolicyDataModel> {\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n        });\n    }\n\n    protected getDataToSave(): PolicyDTO {\n        return this.data.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n}\n","export const OtherMedicalConditionTypes = {\r\n     Other: 'Other'\r\n};\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { TabViewRxComponent } from './tab/tabview-rx.component';\r\nimport { RxTabComponent } from './rx.component';\r\nimport { RxReportComponent, RxReportDataResolver, RxReportLazyDataResolver, RxReportUtil } from './rx-report';\r\nimport { RxRulesComponent, RxRulesSummaryComponent, RxUsageComponent } from './rx-rules';\r\nimport { PrescriptionInformationComponent } from 'business/policy/evidence/rx/rx-report/prescription-information';\r\nimport { PhysicianComponent } from 'business/policy/evidence/rx/rx-report/physician';\r\nimport { RxDetailComponent } from 'business/policy/evidence/rx/rx-report/rx-detail';\r\nimport { RxReportMetaDataResolver } from './rx-report/rx-report-metadata.resolver';\r\nimport { RxOtherMedicationModule } from 'business/policy/evidence/rx/rx-other-medication/rx-other-medication.module';\r\nimport { RxWebButtonsComponent } from 'business/policy/evidence/rx';\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule, RxOtherMedicationModule],\r\n    declarations: [\r\n        RxTabComponent,\r\n        TabViewRxComponent,\r\n        RxRulesComponent,\r\n        RxReportComponent,\r\n        PrescriptionInformationComponent,\r\n        PhysicianComponent,\r\n        RxDetailComponent,\r\n        RxRulesSummaryComponent,\r\n        RxUsageComponent,\r\n        RxWebButtonsComponent\r\n    ],\r\n    providers: [RxReportDataResolver, RxReportLazyDataResolver, RxReportMetaDataResolver, RxReportUtil]\r\n})\r\nexport class RxModule {}\r\n","module.exports = \"<lf-routedTabView id=\\\"tabViewRx\\\" tabViewType=\\\"tertiary\\\"\\r\\n\\t\\t\\t\\t\\t[tabs]=\\\"tabsData$\\\" [initialSelectedIndex]=\\\"initialSelectedIndex$\\\"\\r\\n\\t\\t\\t\\t\\tcontrolClose=\\\"true\\\" (onClose)=\\\"onTabClose($event)\\\" (onChange)=\\\"onTabSelectionChange($event)\\\">\\r\\n\\r\\n\\t<router-outlet></router-outlet>\\r\\n\\r\\n</lf-routedTabView>\\r\\n\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { TabDescriptor, TertiaryTabViewHostViewModel } from 'life-core/component/layout/tabview';\r\nimport { LsTabDescriptorFactory } from 'ui/tabview';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { PolicyDTO } from 'ls-core/model';\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\n\r\n@Component({\r\n    selector: 'tabview-rx',\r\n    templateUrl: './tabview-rx.component.html',\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class TabViewRxComponent extends TertiaryTabViewHostViewModel {\r\n    protected policy: PolicyDTO;\r\n\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.policy = p;\r\n        });\r\n    }\r\n\r\n    protected get tabViewId(): string {\r\n        return `rx-${this.policy.PolicyId}`;\r\n    }\r\n\r\n    protected getStaticTabs(): TabDescriptor[] {\r\n        const policyId = ConvertUtil.toNumber(this.policy.PolicyId);\r\n        const tabDescriptorFactory = this.tabDescriptorFactory as LsTabDescriptorFactory;\r\n        const tabRxReport = tabDescriptorFactory.createTertiaryTabDescriptorRxReport(policyId);\r\n        const tabRxRules = tabDescriptorFactory.createTertiaryTabDescriptorRxRules(policyId);\r\n        const tabRxOtherMedication = tabDescriptorFactory.createTertiaryTabDescriptorRxOtherMedication(policyId);\r\n        const tabs = [tabRxReport, tabRxRules, tabRxOtherMedication];\r\n        tabRxReport.selected = true;\r\n        return tabs;\r\n    }\r\n}\r\n","module.exports = \"<lf-routedTabView id=\\\"tabViewEvidence\\\" tabViewType=\\\"secondary\\\" [tabs]=\\\"tabsData$\\\" [initialSelectedIndex]=\\\"initialSelectedIndex$\\\"\\r\\n controlClose=\\\"true\\\" (onClose)=\\\"onTabClose($event)\\\" (onChange)=\\\"onTabSelectionChange($event)\\\">\\r\\n\\r\\n\\t<router-outlet></router-outlet>\\r\\n\\r\\n</lf-routedTabView>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\nimport { TabDescriptor, SecondaryTabViewHostViewModel } from 'life-core/component/layout/tabview';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { NavigationTargetTypes, NavigationTarget, INavigationSequence } from 'ls-core/model/auto-navigation';\r\nimport { PolicyDTO, InsuredDTO } from 'ls-core/model';\r\nimport { IAutoNavigation, AutoNavigationManager } from 'ls-core/auto-navigation';\r\n\r\nimport { AutoNavigationChannels } from 'business/shared/auto-navigation';\r\nimport { LsTabDescriptorFactory } from 'ui/tabview';\r\nimport { MetadataUtil } from 'ls-core/util';\r\nimport { ApplicantListHelper } from 'business/policy/shared';\r\n\r\n@Component({\r\n    selector: 'tabview-evidence',\r\n    templateUrl: './tabview-evidence.component.html',\r\n    providers: [PolicySubscriber, AutoNavigationManager]\r\n})\r\nexport class TabViewEvidenceComponent extends SecondaryTabViewHostViewModel implements IAutoNavigation {\r\n    private _autoNavigationManager: AutoNavigationManager;\r\n    private _policy: PolicyDTO;\r\n    private _applicant: InsuredDTO;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        autoNavigationManager: AutoNavigationManager,\r\n        applicantListHelper: ApplicantListHelper\r\n    ) {\r\n        super(injector);\r\n        this._autoNavigationManager = autoNavigationManager;\r\n        policySubscriber.subscribe(this, p => {\r\n            this._policy = p;\r\n        });\r\n        this._applicantListHelper = applicantListHelper;\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        super.ngAfterViewInit();\r\n        this.initializeAutoNavigationChannel();\r\n    }\r\n\r\n    public initializeAutoNavigationChannel(): void {\r\n        this._autoNavigationManager.registerWithNavigationChannel(\r\n            AutoNavigationChannels.Evidence,\r\n            (sequence: INavigationSequence) => {\r\n                this.processNavigationSequence(sequence);\r\n            }\r\n        );\r\n    }\r\n\r\n    public processNavigationSequence(sequence: INavigationSequence): void {\r\n        const target = sequence.getNextNavigationTarget();\r\n        if (target && target.targetType === NavigationTargetTypes.Tab) {\r\n            const tabName = target.getParam(NavigationTarget.PARAM_TARGET_ID);\r\n\r\n            // using setTimeout to avoid ExpressionChangedAfterItHasBeenCheckedError error\r\n            setTimeout(() => {\r\n                this.setSelectedTabByName(tabName);\r\n            });\r\n\r\n            this._autoNavigationManager.continueNavigation(sequence, target, AutoNavigationChannels.Evidence);\r\n        }\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        this.setApplicant();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.updateTabsEnabled();\r\n    }\r\n\r\n    protected get tabViewId(): string {\r\n        return `evidence-${this._policy.PolicyId}`;\r\n    }\r\n\r\n    protected getStaticTabs(): TabDescriptor[] {\r\n        const tabs = this.getEvidenceTabs();\r\n        tabs.evidenceLab.selected = true;\r\n        const tabsArray = tabs.toArray();\r\n        return tabsArray;\r\n    }\r\n\r\n    protected updateTabsEnabled(): void {\r\n        const tabs = this.getEvidenceTabs();\r\n        this.setTabsVisibility(tabs);\r\n        this.tabViewManager.removeHiddenTabs(tabs.toArray());\r\n    }\r\n\r\n    private setTabsVisibility(tabs: EvidenceTabs): void {\r\n        tabs.evidenceVelogica.hidden = this.isVelogicaTabHidden();\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this._applicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    private getEvidenceTabs(): EvidenceTabs {\r\n        const policyId = ConvertUtil.toNumber(this._policy.PolicyId);\r\n        const tabDescriptorFactory = this.tabDescriptorFactory as LsTabDescriptorFactory;\r\n        const tabs = new EvidenceTabs(\r\n            tabDescriptorFactory.createSecondaryTabDescriptorLab(policyId),\r\n            tabDescriptorFactory.createSecondaryTabDescriptorMIB(policyId),\r\n            tabDescriptorFactory.createSecondaryTabDescriptorMVR(policyId),\r\n            tabDescriptorFactory.createSecondaryTabDescriptorRx(policyId),\r\n            tabDescriptorFactory.createSecondaryTabDescriptorMedicalCondition(policyId),\r\n            tabDescriptorFactory.createSecondaryTabDescriptorParamedical(policyId),\r\n            tabDescriptorFactory.createSecondaryTabDescriptorVelogica(policyId)\r\n        );\r\n        return tabs;\r\n    }\r\n\r\n    private isVelogicaTabHidden(): boolean {\r\n        let isTabDisabled = true;\r\n        if (\r\n            this.listData.System &&\r\n            this.listData.System.length > 0 &&\r\n            this._applicant.Velogicas_LazyLoad &&\r\n            this._applicant.Velogicas_LazyLoad.length > 0\r\n        ) {\r\n            const velogicaDisplayCondition = MetadataUtil.getLabelByValue(\r\n                this.listData.System,\r\n                'DisplayVelogicaEvidenceTab'\r\n            );\r\n            if (!!velogicaDisplayCondition && velogicaDisplayCondition.toUpperCase() === 'TRUE') {\r\n                isTabDisabled = false;\r\n            }\r\n        }\r\n        return isTabDisabled;\r\n    }\r\n}\r\n\r\nclass EvidenceTabs {\r\n    public evidenceLab: TabDescriptor;\r\n    public evidenceMIB: TabDescriptor;\r\n    public evidenceMVR: TabDescriptor;\r\n    public evidenceRx: TabDescriptor;\r\n    public evidenceParamedical: TabDescriptor;\r\n    public evidenceMedicalCondition: TabDescriptor;\r\n    public evidenceVelogica: TabDescriptor;\r\n\r\n    constructor(...tabs: TabDescriptor[]) {\r\n        this.evidenceLab = tabs[0];\r\n        this.evidenceMIB = tabs[1];\r\n        this.evidenceMVR = tabs[2];\r\n        this.evidenceRx = tabs[3];\r\n        this.evidenceParamedical = tabs[4];\r\n        this.evidenceMedicalCondition = tabs[5];\r\n        this.evidenceVelogica = tabs[6];\r\n    }\r\n\r\n    public toArray(): TabDescriptor[] {\r\n        return [\r\n            this.evidenceLab,\r\n            this.evidenceMIB,\r\n            this.evidenceMVR,\r\n            this.evidenceRx,\r\n            this.evidenceParamedical,\r\n            this.evidenceMedicalCondition,\r\n            this.evidenceVelogica\r\n        ];\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst VelogicaDetailFields = {\r\n    ReasonCode: 'ReasonCode',\r\n    ReasonDescription: 'ReasonDescription',\r\n    CategoryCode: 'CategoryCode',\r\n    ReasonSource: 'ReasonSource'\r\n};\r\n@Injectable()\r\nexport class VelogicaReasonsDataColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Reason Code', id: 'policy.velogica.detail.gridheader.reasoncode' }),\r\n            field: VelogicaDetailFields.ReasonCode,\r\n            width: 200\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Reason Description',\r\n                id: 'policy.velogica.detail.gridheader.reasondescription'\r\n            }),\r\n            field: VelogicaDetailFields.ReasonDescription,\r\n            width: 300\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Category Code', id: 'policy.velogica.detail.gridheader.category' }),\r\n            field: VelogicaDetailFields.CategoryCode,\r\n            width: 50\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Reason Source', id: 'policy.velogica.detail.gridheader.reasonsource' }),\r\n            field: VelogicaDetailFields.ReasonSource,\r\n            width: 50\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{width: '100%', height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\"\\r\\n        (rowClicked)=\\\"onRowClicked($event)\\\">\\r\\n    </data-grid>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</div>\"","import { Component, Injector, Input } from '@angular/core';\r\n\r\nimport { IGridColumnsBuilder, DataGridRowNumber } from 'life-core/component/grid';\r\n\r\nimport { VelogicaDetailDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared';\r\nimport { VelogicaReasonsDataColumnsBuilder } from './velogica-reasons-data-grid-columns.builder';\r\n\r\n@Component({\r\n    selector: 'velogica-reasons-data',\r\n    templateUrl: 'velogica-reasons-data.component.html',\r\n    providers: [PolicySubscriber, VelogicaReasonsDataColumnsBuilder]\r\n})\r\nexport class VelogicaReasonsDataComponent extends BasePolicyGridViewModel<VelogicaDetailDTO> {\r\n    public rowCount: number;\r\n    private _gridColumnsBuilder: VelogicaReasonsDataColumnsBuilder;\r\n    private _velogicaDetailList: VelogicaDetailDTO[];\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: VelogicaReasonsDataColumnsBuilder) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n\r\n    @Input()\r\n    public set velogicaDetailList(value: VelogicaDetailDTO[]) {\r\n        this._velogicaDetailList = value;\r\n        this.rowCount = this.getRowCount();\r\n        this.refreshGrid();\r\n    }\r\n\r\n    protected loadItems(): VelogicaDetailDTO[] {\r\n        return this._velogicaDetailList || [];\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: VelogicaDetailDTO): any {\r\n        return data.VelogicaHeaderId;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n\r\n    protected getGridMinRows(): number {\r\n        return DataGridRowNumber.Small;\r\n    }\r\n\r\n    private getRowCount(): number {\r\n        return this._velogicaDetailList ? this._velogicaDetailList.length : 0;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-solid-bottom-border\\\">\\r\\n    <div class=\\\"lf-page-subheader\\\" i18n=\\\"@@mywork.applicantpreview.label.applicantInformation\\\">Applicant Information</div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input label=\\\"Applicant Name\\\" i18n-label=\\\"@@policy.velogica.detail.applicantname\\\" [control]=\\\"applicantName\\\">\\r\\n                <lf-statictext #applicantName name=\\\"applicantName\\\" [value]=\\\"applicantFullName\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input label=\\\"Tax ID\\\" i18n-label=\\\"@@policy.velogica.detail.taxid\\\" [control]=\\\"taxId\\\">\\r\\n                <lf-statictext #taxId name=\\\"taxId\\\" [value]=\\\"applicant.TaxId\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input label=\\\"Birth Date\\\" i18n-label=\\\"@@policy.velogica.detail.birthdate\\\" [control]=\\\"birthDate\\\">\\r\\n                <lf-statictext #birthDate name=\\\"birthDate\\\" [value]=\\\"applicant.BirthDate | dbDate\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-4\\\">\\r\\n            <lf-form-input label=\\\"Gender\\\" i18n-label=\\\"@@policy.velogica.detail.gender\\\" [control]=\\\"gender\\\">\\r\\n                <lf-statictext #gender name=\\\"gender\\\" [value]=\\\"applicant.Sex\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"lf-page-subheader\\\" i18n=\\\"@@policy.velogica.result.sectiontitle\\\">Velogica Underwriting Decision</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <lf-form-input label=\\\"Status\\\" i18n-label=\\\"@@policy.velogica.detail.status\\\" [control]=\\\"status\\\">\\r\\n            <lf-statictext #status name=\\\"status\\\" [value]=\\\"data.StatusResponse\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <lf-form-input label=\\\"UW Class Approved\\\" i18n-label=\\\"@@policy.velogica.detail.uwclassapproved\\\" [control]=\\\"uwClassApproved\\\">\\r\\n            <lf-statictext #uwClassApproved name=\\\"uwClassApproved\\\" [value]=\\\"data.UnderwritingClass\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <lf-form-input label=\\\"Coverage Information\\\" i18n-label=\\\"@@policy.velogica.detail.coverage\\\" [control]=\\\"coverageInformation\\\">\\r\\n            <lf-statictext #coverageInformation name=\\\"coverageInformation\\\" [value]=\\\"coveragePlanName\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <lf-form-input label=\\\"Decision\\\" i18n-label=\\\"@@policy.velogica.detail.decision\\\" [control]=\\\"decision\\\">\\r\\n            <lf-statictext #decision name=\\\"decision\\\" [value]=\\\"data.Decision\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <lf-form-input label=\\\"UW Smoker Class\\\" i18n-label=\\\"@@policy.velogica.detail.uwSmoker\\\" [control]=\\\"uwSmokerClass\\\">\\r\\n            <lf-statictext #uwSmokerClass name=\\\"uwSmokerClass\\\" [value]=\\\"data.SmokerClass\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <lf-form-input label=\\\"Support Information Received\\\" i18n-label=\\\"@@policy.velogica.detail.evidenceIncluded\\\" [control]=\\\"supportInformationReceived\\\">\\r\\n            <lf-statictext #supportInformationReceived name=\\\"supportInformationReceived\\\" [value]=\\\"data.EvidenceIncluded\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"lf-dashed-bottom-border\\\"></div>\\r\\n<velogica-reasons-data [velogicaDetailList]=\\\"data.Details_LazyLoad\\\"></velogica-reasons-data>\"","import { Component, Injector } from '@angular/core';\nimport { DetailViewModel } from 'life-core/component/master-detail';\nimport { InsuredDTO, VelogicaDTO } from 'ls-core/model';\nimport { ApplicantListHelper } from 'business/policy/shared';\nimport { AppSession } from 'ls-core/session';\nimport { PrimaryCoverageUtil } from 'business/policy/shared/primary-coverage.util';\nimport { NameFormatter } from 'life-core/util/formatter/name.formatter';\nimport { NamePattern } from 'life-core/util/formatter/name-pattern';\n\n@Component({\n    selector: 'velogica-detail',\n    templateUrl: './velogica-detail.component.html'\n})\nexport class VelogicaDetailComponent extends DetailViewModel<VelogicaDTO> {\n    public applicant: InsuredDTO;\n    public coveragePlanName: string;\n    public applicantFullName: string;\n    private _applicantListHelper: ApplicantListHelper;\n    private _appSession: AppSession;\n    private _nameFormatter: NameFormatter;\n    constructor(\n        injector: Injector,\n        appSession: AppSession,\n        applicantListHelper: ApplicantListHelper,\n        nameFormatter: NameFormatter\n    ) {\n        super(injector);\n        this._appSession = appSession;\n        this._applicantListHelper = applicantListHelper;\n        this._nameFormatter = nameFormatter;\n    }\n\n    public setModel(model: VelogicaDTO): void {\n        this.setContext(model);\n        this.setActiveApplicant();\n        this.setApplicantData();\n    }\n\n    private setActiveApplicant(): void {\n        this.applicant = this._applicantListHelper.getActiveApplicantOrDefault(\n            this._appSession.policyDTO.Insureds_LazyLoad\n        );\n    }\n\n    private setContext(context: VelogicaDTO): void {\n        this.data = context;\n    }\n\n    private setApplicantData(): void {\n        const primaryCoverage = PrimaryCoverageUtil.getPrimaryCoverage(this.applicant);\n        this.coveragePlanName = primaryCoverage ? primaryCoverage.planName : '';\n        this.applicantFullName = this._nameFormatter.format(\n            NamePattern.LastFirstAndMiddleInitial,\n            this.applicant.FirstName,\n            this.applicant.LastName,\n            this.applicant.MiddleName\n        );\n    }\n}\n","export * from './velogica-data.resolver';\r\nexport * from './velogica-tab.component';\r\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class VelogicaDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getLazyLoadTree());\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n\r\n    private getLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            const velogicaNode = insuredDTOLoadTree.AddChild(DataCollectionNames.Velogicas);\r\n            {\r\n                velogicaNode.AddChild(DataCollectionNames.VelogicaDetails);\r\n            }\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\nconst VelogicaGridFields = {\r\n    StatusDate: 'StatusDate',\r\n    StatusResponse: 'StatusResponse',\r\n    Decision: 'Decision'\r\n};\r\n\r\n@Injectable()\r\nexport class VelogicaGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Status Date', id: 'policy.velogica.gridheader.date' }),\r\n            field: VelogicaGridFields.StatusDate,\r\n            width: 80,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Status', id: 'policy.velogica.gridheader.status' }),\r\n            field: VelogicaGridFields.StatusResponse,\r\n            width: 200\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Decision', id: 'policy.velogica.gridheader.decision' }),\r\n            field: VelogicaGridFields.Decision,\r\n            width: 200\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { VelogicaDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class VelogicaItemFactory extends BaseDTOItemFactory<VelogicaDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<VelogicaDTO>): VelogicaDTO {\r\n        const velogicaDTO = new VelogicaDTO();\r\n        velogicaDTO.VelogicaHeaderId = this.getNextId(createItemParams.items, 'VelogicaHeaderId');\r\n        return velogicaDTO;\r\n    }\r\n}\r\n","module.exports = \"<velogica></velogica>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { SecondaryTabHostViewModel } from 'life-core/component';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { PolicyDTO } from 'ls-core/model';\r\n\r\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\r\n\r\n@Component({\r\n    selector: 'velogica-tab',\r\n    templateUrl: './velogica-tab.component.html',\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class VelogicaTabComponent extends SecondaryTabHostViewModel<PolicyDataModel> {\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.data.policy = p;\r\n        });\r\n    }\r\n\r\n    protected getDataToSave(): PolicyDTO {\r\n        return this.data.policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12\\\">\\r\\n        <master-detail name=\\\"velogica\\\" [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\" secureComponent\\r\\n            [ngStyle]=\\\"{'width': '100%'}\\\">\\r\\n        </master-detail>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\n\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\nimport {\n    MasterButton,\n    BaseDataManager,\n    RowManagementDelegate,\n    MasterDetailComponentResolver\n} from 'life-core/component/master-detail';\n\nimport { VelogicaDTO, InsuredDTO } from 'ls-core/model';\nimport { AppSession } from 'ls-core/session';\n\nimport { BasePolicyMasterDetailViewModel, ApplicantListHelper } from 'business/policy/shared';\nimport { VelogicaGridColumnsBuilder } from './velogica-grid-columns.builder';\nimport { VelogicaDetailComponent } from './detail/velogica-detail.component';\nimport { VelogicaItemFactory } from './velogica-item-factory';\n\nexport function rowManagementDelegateFactory(\n    itemFactory: VelogicaItemFactory,\n    dataManager: BaseDataManager<VelogicaDTO>\n): any {\n    return new RowManagementDelegate({\n        itemName: 'Velogica',\n        itemIDPropertyName: 'VelogicaHeaderId',\n        itemFactory: itemFactory,\n        dataManager: dataManager\n    });\n}\n\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<VelogicaDTO> {\n    return new MasterDetailComponentResolver({\n        itemComponents: VelogicaDetailComponent\n    });\n}\n\n@Component({\n    selector: 'velogica',\n    templateUrl: './velogica.component.html',\n    providers: [\n        BaseDataManager,\n        VelogicaItemFactory,\n        {\n            provide: RowManagementDelegate,\n            useFactory: rowManagementDelegateFactory,\n            deps: [VelogicaItemFactory, BaseDataManager]\n        },\n        {\n            provide: MasterDetailComponentResolver,\n            useFactory: itemComponentResolverFactory\n        },\n        VelogicaGridColumnsBuilder\n    ]\n})\nexport class VelogicaComponent extends BasePolicyMasterDetailViewModel<VelogicaDTO> {\n    private _gridColumnsBuilder: IGridColumnsBuilder;\n    private _applicantListHelper: ApplicantListHelper;\n    private _appSession: AppSession;\n    private _applicant: InsuredDTO;\n\n    constructor(\n        injector: Injector,\n        appSession: AppSession,\n        velogicaGridColumnsBuilder: VelogicaGridColumnsBuilder,\n        applicantListHelper: ApplicantListHelper\n    ) {\n        super(injector);\n\n        this._appSession = appSession;\n        this._gridColumnsBuilder = velogicaGridColumnsBuilder;\n        this._applicantListHelper = applicantListHelper;\n    }\n\n    public get showDetailAsPopup(): boolean {\n        return false;\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedMetaData();\n        this.setActiveApplicant();\n        return Promise.resolve();\n    }\n\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\n        return this._gridColumnsBuilder;\n    }\n\n    protected loadItems(): VelogicaDTO[] {\n        return this._applicant.Velogicas_LazyLoad;\n    }\n\n    protected getRowNodeId(data: VelogicaDTO): any {\n        return data.VelogicaHeaderId;\n    }\n\n    protected getInlineDetailButtons(): MasterButton<VelogicaDTO>[] {\n        return [];\n    }\n\n    protected getRemoveItemMessage(item: VelogicaDTO): string {\n        return '';\n    }\n\n    private setActiveApplicant(): void {\n        this._applicant = this._applicantListHelper.getActiveApplicantOrDefault(\n            this._appSession.policyDTO.Insureds_LazyLoad\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { VelogicaTabComponent } from './velogica-tab.component';\r\nimport { VelogicaComponent } from './velogica.component';\r\nimport { VelogicaDetailComponent } from './detail/velogica-detail.component';\r\nimport { VelogicaDataResolver } from './velogica-data.resolver';\r\nimport { VelogicaReasonsDataComponent } from './detail/reasons/velogica-reasons-data.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, LsComponentsModule],\r\n    declarations: [VelogicaTabComponent, VelogicaComponent, VelogicaDetailComponent, VelogicaReasonsDataComponent],\r\n    providers: [VelogicaDataResolver],\r\n\r\n    entryComponents: [VelogicaDetailComponent]\r\n})\r\nexport class VelogicaModule {}\r\n","﻿export * from './case-notes.component';\r\nexport * from './uw-notes.component';\r\nexport * from './note-list/note-list.component';\r\nexport * from './note-info.component';\r\nexport * from './type';\r\nexport * from './view-notes';\r\nexport * from './notes-data.resolver';\r\nexport * from './notes-meta-data.resolver';\r\n","﻿export * from './view-notes.component';\r\n","import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes, Route } from '@angular/router';\r\n\r\nimport { ResetFormDeactivateGuard, CanDeactivateGuard } from 'life-core/view-model/validation';\r\nimport { RoutePath } from 'life-core/routing';\r\nimport { LsRoutePath } from 'ui/routing';\r\nimport { LsResolveUtil } from 'ls-core/routing';\r\n\r\n// POLICY TAB\r\nimport { TabPolicyComponent } from 'business/policy/tab/tab-policy.component';\r\nimport { BasePolicyDataResolver, TabPolicyDataResolver } from 'business/policy/shared';\r\n\r\n// Worksheet\r\nimport { TabViewWorksheetComponent } from 'business/policy/worksheet/tab/tabview-worksheet.component';\r\nimport {\r\n    CaseDispositionComponent,\r\n    CaseDispositionDataResolver,\r\n    CaseDispositionListDataResolver,\r\n    CaseDispositionMetaDataResolver\r\n} from 'business/policy/worksheet/case-disp';\r\nimport { ReviewMessagesComponent } from 'business/policy/worksheet/review-messages/review-messages.component';\r\nimport { ReviewMessagesDataResolver } from 'business/policy/worksheet/review-messages/review-messages-data.resolver';\r\n\r\nimport {\r\n    DebitCreditComponent,\r\n    DebitCreditDataResolver,\r\n    DebitCreditMetaDataResolver\r\n} from 'business/policy/worksheet/debit-credit';\r\n\r\n// Notes\r\nimport { CaseNotesComponent, UWNotesComponent, NotesDataResolver, NotesMetaDataResolver } from 'business/policy/note';\r\n\r\n// CaseInfo\r\nimport { CaseInfoComponent, CaseDataResolver, CaseListDataResolver, CaseMetaDataResolver } from 'business/policy/case/';\r\n\r\n// Requirement\r\nimport {\r\n    RequirementComponent,\r\n    RequirementDataResolver,\r\n    RequirementMetaDataResolver,\r\n    RequirementListDataResolver\r\n} from 'business/policy/requirements';\r\n\r\n// Documents\r\nimport {\r\n    CaseDocumentsComponent,\r\n    CaseAttachmentsMetaDataResolver,\r\n    CaseAttachmentsResolver,\r\n    CaseAttachmentsComponent,\r\n    CaseTemplatesMetaDataResolver\r\n} from './documents';\r\n\r\n// Evidence\r\n\r\nimport {\r\n    EvidenceComponent,\r\n    EvidenceDataResolver,\r\n    EvidenceInfoDataInitializer,\r\n    LabTabComponent,\r\n    LabDataResolver,\r\n    RxTabComponent,\r\n    RxReportDataResolver,\r\n    RxReportMetaDataResolver,\r\n    RxReportLazyDataResolver,\r\n    RxReportComponent,\r\n    RxRulesComponent,\r\n    RxOtherMedicationTabComponent,\r\n    RxOtherMedicationMetaDataResolver,\r\n    MIBTabComponent,\r\n    MIBReportComponent,\r\n    MIBCodingTabComponent,\r\n    MIBReportDataResolver,\r\n    MIBCodingDataResolver,\r\n    MIBCodingMetaDataResolver,\r\n    MVRTabComponent,\r\n    ParamedicalTabComponent,\r\n    ParamedicalDataResolver,\r\n    TabViewEvidenceComponent,\r\n    VelogicaDataResolver,\r\n    VelogicaTabComponent,\r\n    EvidenceMetaDataResolver\r\n} from 'business/policy/evidence';\r\n\r\n// Applicant\r\nimport { ApplicantInfoComponent } from 'business/policy/applicant/applicant-info.component';\r\nimport { ApplicantInfoDataResolver } from 'business/policy/applicant/applicant-info-data.resolver';\r\nimport { ApplicantInfoListDataResolver } from 'business/policy/applicant/applicant-info-list-data.resolver';\r\nimport { ApplicantDetailComponent } from 'business/policy/applicant/applicant-detail/applicant-detail.component';\r\nimport { MVRDataResolver } from 'business/policy/evidence/mvr';\r\nimport { RelatedCasesComponent } from 'business/policy/related-cases/';\r\nimport { RelatedCasesDataResolver } from 'business/policy/related-cases/related-cases-data.resolver';\r\nimport { MedicalConditionTabComponent } from 'business/policy/evidence/medical-condition//medical-condition-tab.component';\r\nimport { MedicalConditionDataResolver } from 'business/policy/evidence/medical-condition/medical-condition-data.resolver';\r\nimport { MedicalConditionMetaDataResolver } from 'business/policy/evidence/medical-condition/medical-condition-meta-data.resolver';\r\nimport { CaseTemplatesComponent } from 'business/policy/documents';\r\nimport { ApplicantMetaDataResolver } from 'business/policy/applicant/applicant-meta-data.resolver';\r\nimport {\r\n    RequirementDetailBasicInfo,\r\n    RequirementDetailProvidersInfo,\r\n    RequirementDetailProvidersInfoMetaDataResolver\r\n} from 'business/policy/requirements/detail';\r\n\r\nconst DefaultPolicyRoute: Route = {\r\n    path: '',\r\n    redirectTo: LsRoutePath.Worksheet,\r\n    pathMatch: 'prefix'\r\n};\r\n\r\n// WORKSHEET\r\nconst WorksheetCaseDispRoute: Route = {\r\n    path: LsRoutePath.CaseDisp,\r\n    component: CaseDispositionComponent,\r\n    resolve: {\r\n        data: CaseDispositionDataResolver,\r\n        listData: CaseDispositionListDataResolver,\r\n        metaData: CaseDispositionMetaDataResolver\r\n    }\r\n};\r\n\r\nconst WorksheetReviewMessagesRoute: Route = {\r\n    path: LsRoutePath.ReviewMessages,\r\n    component: ReviewMessagesComponent,\r\n    resolve: {\r\n        data: ReviewMessagesDataResolver\r\n    }\r\n};\r\n\r\nconst WorksheetDebitCreditRoute: Route = {\r\n    path: LsRoutePath.DebitCredit,\r\n    component: DebitCreditComponent,\r\n    resolve: {\r\n        data: DebitCreditDataResolver,\r\n        metaData: DebitCreditMetaDataResolver\r\n    }\r\n};\r\n\r\nconst PolicyWorksheetRoute: Route = {\r\n    path: LsRoutePath.Worksheet,\r\n    component: TabViewWorksheetComponent,\r\n    resolve: LsResolveUtil.getDataResolver(BasePolicyDataResolver),\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard],\r\n    children: [WorksheetCaseDispRoute, WorksheetReviewMessagesRoute, WorksheetDebitCreditRoute]\r\n};\r\nconst PolicyWorksheetRouteRefresh: Route = {\r\n    path: `${LsRoutePath.Worksheet}/${RoutePath.Refresh}`,\r\n    component: TabViewWorksheetComponent,\r\n    resolve: LsResolveUtil.getDataResolver(BasePolicyDataResolver),\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard],\r\n    children: [WorksheetCaseDispRoute, WorksheetReviewMessagesRoute, WorksheetDebitCreditRoute]\r\n};\r\n\r\n// NOTES\r\nconst PolicyCaseNotesRoute: Route = {\r\n    path: LsRoutePath.CaseNotes,\r\n    component: CaseNotesComponent,\r\n    resolve: {\r\n        data: NotesDataResolver,\r\n        metaData: NotesMetaDataResolver\r\n    },\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\nconst PolicyCaseNotesRouteRefresh: Route = {\r\n    path: `${LsRoutePath.CaseNotes}/${RoutePath.Refresh}`,\r\n    component: CaseNotesComponent,\r\n    resolve: {\r\n        data: NotesDataResolver,\r\n        metaData: NotesMetaDataResolver\r\n    },\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\n\r\nconst PolicyUWNotesRoute: Route = {\r\n    path: LsRoutePath.UWNotes,\r\n    component: UWNotesComponent,\r\n    resolve: {\r\n        data: NotesDataResolver,\r\n        metaData: NotesMetaDataResolver\r\n    },\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\nconst PolicyUWNotesRouteRefresh: Route = {\r\n    path: `${LsRoutePath.UWNotes}/${RoutePath.Refresh}`,\r\n    component: UWNotesComponent,\r\n    resolve: {\r\n        data: NotesDataResolver,\r\n        metaData: NotesMetaDataResolver\r\n    },\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\n\r\n// CASE\r\nconst CaseInfoRoute: Route = {\r\n    // Setup CaseListDataResolver in the child route because\r\n    // it depends on some data preloaded in the parent route.\r\n    path: '',\r\n    component: CaseInfoComponent,\r\n    resolve: { listData: CaseListDataResolver, metaData: CaseMetaDataResolver },\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\n\r\nconst PolicyCaseRoute: Route = {\r\n    path: LsRoutePath.Case,\r\n    resolve: { data: CaseDataResolver },\r\n    children: [CaseInfoRoute]\r\n};\r\nconst PolicyCaseRouteRefresh: Route = {\r\n    path: `${LsRoutePath.Case}/${RoutePath.Refresh}`,\r\n    resolve: { data: CaseDataResolver },\r\n    children: [CaseInfoRoute]\r\n};\r\n\r\n// REQUIREMENTS\r\nconst RequirementBasicInfoRoute: Route = {\r\n    path: LsRoutePath.RequirementBasicInfo,\r\n    component: RequirementDetailBasicInfo\r\n};\r\n\r\nconst RequirementProvidersInfoRoute: Route = {\r\n    path: LsRoutePath.RequirementProvidersInfo,\r\n    component: RequirementDetailProvidersInfo,\r\n    resolve: LsResolveUtil.getMetaDataResolver(RequirementDetailProvidersInfoMetaDataResolver)\r\n};\r\n\r\nconst PolicyRequirementsRoute: Route = {\r\n    path: LsRoutePath.Requirements,\r\n    component: RequirementComponent,\r\n    resolve: {\r\n        data: RequirementDataResolver,\r\n        metaData: RequirementMetaDataResolver,\r\n        listData: RequirementListDataResolver\r\n    },\r\n    children: [RequirementBasicInfoRoute, RequirementProvidersInfoRoute],\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\nconst PolicyRequirementsRouteRefresh: Route = {\r\n    path: `${LsRoutePath.Requirements}/${RoutePath.Refresh}`,\r\n    component: RequirementComponent,\r\n    resolve: {\r\n        data: RequirementDataResolver,\r\n        listData: RequirementListDataResolver,\r\n        metaData: RequirementMetaDataResolver\r\n    },\r\n    children: [RequirementBasicInfoRoute, RequirementProvidersInfoRoute],\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\n\r\n// EVIDENCE\r\n// Lab\r\nconst EvidenceLabRoute: Route = {\r\n    path: LsRoutePath.Lab,\r\n    component: LabTabComponent,\r\n    resolve: LsResolveUtil.getDataResolver(LabDataResolver)\r\n};\r\n\r\n// Paramedical\r\nconst EvidenceParamedicalRoute: Route = {\r\n    path: LsRoutePath.Paramedical,\r\n    component: ParamedicalTabComponent,\r\n    resolve: { data: ParamedicalDataResolver }\r\n};\r\n\r\n// Medical Condition\r\nconst EvidenceMedicalConditionRoute: Route = {\r\n    path: LsRoutePath.MedicalCondition,\r\n    component: MedicalConditionTabComponent,\r\n    resolve: {\r\n        data: MedicalConditionDataResolver,\r\n        metaData: MedicalConditionMetaDataResolver\r\n    }\r\n};\r\n\r\n// Velogica\r\nconst EvidenceVelogicaRoute: Route = {\r\n    path: LsRoutePath.Velogica,\r\n    component: VelogicaTabComponent,\r\n    resolve: {\r\n        data: VelogicaDataResolver\r\n    }\r\n};\r\n// Rx\r\nconst EvidenceRxReportRoute: Route = {\r\n    path: LsRoutePath.RxReport,\r\n    resolve: { data: RxReportLazyDataResolver },\r\n    children: [\r\n        {\r\n            // Setup ApplicantInfoListDataResolver in the child route because\r\n            // it depends on some data preloaded in the parent route.\r\n            path: '',\r\n            component: RxReportComponent,\r\n            resolve: {\r\n                rxReports: RxReportDataResolver,\r\n                metaData: RxReportMetaDataResolver\r\n            }\r\n        }\r\n    ]\r\n};\r\n\r\nconst EvidenceRxRulesRoute: Route = {\r\n    path: LsRoutePath.RxRules,\r\n    component: RxRulesComponent\r\n};\r\n\r\nconst EvidenceRxOtherMedicationRoute: Route = {\r\n    path: LsRoutePath.RxOtherMedication,\r\n    component: RxOtherMedicationTabComponent,\r\n    resolve: {\r\n        metaData: RxOtherMedicationMetaDataResolver\r\n    }\r\n};\r\n\r\nconst EvidenceRxRoute: Route = {\r\n    path: LsRoutePath.Rx,\r\n    component: RxTabComponent,\r\n    children: [EvidenceRxReportRoute, EvidenceRxRulesRoute, EvidenceRxOtherMedicationRoute]\r\n};\r\n\r\n// MIB Report route\r\nconst EvidenceMIBReportRoute: Route = {\r\n    path: LsRoutePath.MIBReport,\r\n    component: MIBReportComponent,\r\n    resolve: LsResolveUtil.getDataResolver(MIBReportDataResolver)\r\n};\r\n\r\n// MIB Coding route\r\nconst EvidenceMIBCodingRoute: Route = {\r\n    path: LsRoutePath.MIBCoding,\r\n    component: MIBCodingTabComponent,\r\n    resolve: {\r\n        data: MIBCodingDataResolver,\r\n        metaData: MIBCodingMetaDataResolver\r\n    }\r\n};\r\n\r\n// MIB route\r\nconst EvidenceMIBRoute: Route = {\r\n    path: LsRoutePath.MIB,\r\n    component: MIBTabComponent,\r\n    children: [EvidenceMIBReportRoute, EvidenceMIBCodingRoute]\r\n};\r\n\r\n// MVR route\r\nconst EvidenceMVRRoute: Route = {\r\n    path: LsRoutePath.MVR,\r\n    component: MVRTabComponent,\r\n    resolve: LsResolveUtil.getDataResolver(MVRDataResolver)\r\n};\r\n\r\nconst PolicyEvidenceDetailRoute: Route = {\r\n    path: `${LsRoutePath.EvidenceDetail}/:id`,\r\n    component: TabViewEvidenceComponent,\r\n    children: [\r\n        EvidenceLabRoute,\r\n        EvidenceMIBRoute,\r\n        EvidenceMVRRoute,\r\n        EvidenceRxRoute,\r\n        EvidenceParamedicalRoute,\r\n        EvidenceMedicalConditionRoute,\r\n        EvidenceVelogicaRoute\r\n    ],\r\n    resolve: LsResolveUtil.getMetaDataResolver(EvidenceMetaDataResolver),\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\n\r\nconst PolicyEvidenceApplicantRoute: Route = {\r\n    path: '',\r\n    component: EvidenceComponent,\r\n    resolve: LsResolveUtil.getDataResolver(EvidenceDataResolver),\r\n    children: [PolicyEvidenceDetailRoute],\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\n\r\n// Evidence Routes\r\nconst PolicyEvidenceRoute: Route = {\r\n    path: LsRoutePath.Evidence,\r\n    resolve: LsResolveUtil.getDataResolver(EvidenceInfoDataInitializer),\r\n    children: [PolicyEvidenceApplicantRoute]\r\n};\r\nconst PolicyEvidenceRouteRefresh: Route = {\r\n    path: `${LsRoutePath.Evidence}/${RoutePath.Refresh}`,\r\n    resolve: LsResolveUtil.getDataResolver(EvidenceInfoDataInitializer),\r\n    children: [PolicyEvidenceApplicantRoute]\r\n};\r\n\r\n// APPLICANT\r\nconst ApplicantDetailRoute: Route = {\r\n    path: `${LsRoutePath.ApplicantDetail}/:id`,\r\n    // Setup ApplicantInfoListDataResolver in the child route because\r\n    // it depends on some data preloaded in the parent route.\r\n    resolve: { data: ApplicantInfoDataResolver },\r\n    children: [\r\n        {\r\n            path: '',\r\n            component: ApplicantDetailComponent,\r\n            resolve: { listData: ApplicantInfoListDataResolver, metaData: ApplicantMetaDataResolver }\r\n        }\r\n    ]\r\n};\r\n\r\nconst PolicyApplicantsRoute: Route = {\r\n    path: LsRoutePath.Applicant,\r\n    component: ApplicantInfoComponent,\r\n    children: [ApplicantDetailRoute],\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\nconst PolicyApplicantsRouteRefresh: Route = {\r\n    path: `${LsRoutePath.Applicant}/${RoutePath.Refresh}`,\r\n    component: ApplicantInfoComponent,\r\n    children: [ApplicantDetailRoute],\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\n\r\n// RELATED CASES\r\nconst PolicyRelatedCasesRoute: Route = {\r\n    path: LsRoutePath.RelatedCases,\r\n    component: RelatedCasesComponent,\r\n    resolve: LsResolveUtil.getDataResolver(RelatedCasesDataResolver),\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\nconst PolicyRelatedCasesRouteRefresh: Route = {\r\n    path: `${LsRoutePath.RelatedCases}/${RoutePath.Refresh}`,\r\n    component: RelatedCasesComponent,\r\n    resolve: LsResolveUtil.getDataResolver(RelatedCasesDataResolver),\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\n\r\n// DOCUMENTS\r\nconst PolicyDocumentsAttachmentRoute: Route = {\r\n    path: LsRoutePath.DocumentsAttachment,\r\n    component: CaseAttachmentsComponent,\r\n    // resolve: LsResolveUtil.getDataResolver(CaseAttachmentsResolver),\r\n    resolve: {\r\n        data: CaseAttachmentsResolver,\r\n        metaData: CaseAttachmentsMetaDataResolver\r\n    }\r\n};\r\n\r\nconst PolicyDocumentsTemplateRoute: Route = {\r\n    path: LsRoutePath.DocumentsTemplate,\r\n    component: CaseTemplatesComponent,\r\n    resolve: LsResolveUtil.getMetaDataResolver(CaseTemplatesMetaDataResolver)\r\n};\r\n\r\nconst PolicyDocumentsRoute: Route = {\r\n    path: LsRoutePath.PolicyDocuments,\r\n    component: CaseDocumentsComponent,\r\n    children: [PolicyDocumentsAttachmentRoute, PolicyDocumentsTemplateRoute],\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\nconst PolicyDocumentsRouteRefresh: Route = {\r\n    path: `${LsRoutePath.PolicyDocuments}/${RoutePath.Refresh}`,\r\n    component: CaseDocumentsComponent,\r\n    children: [PolicyDocumentsAttachmentRoute, PolicyDocumentsTemplateRoute],\r\n    canDeactivate: [CanDeactivateGuard, ResetFormDeactivateGuard]\r\n};\r\n\r\nconst PolicyRoutes: Routes = [\r\n    {\r\n        path: '',\r\n        component: TabPolicyComponent,\r\n        resolve: LsResolveUtil.getDataResolver(TabPolicyDataResolver),\r\n        children: [\r\n            DefaultPolicyRoute,\r\n            PolicyWorksheetRoute,\r\n            PolicyWorksheetRouteRefresh,\r\n            PolicyCaseNotesRoute,\r\n            PolicyCaseNotesRouteRefresh,\r\n            PolicyUWNotesRoute,\r\n            PolicyUWNotesRouteRefresh,\r\n            PolicyCaseRoute,\r\n            PolicyCaseRouteRefresh,\r\n            PolicyRequirementsRoute,\r\n            PolicyRequirementsRouteRefresh,\r\n            PolicyEvidenceRoute,\r\n            PolicyEvidenceRouteRefresh,\r\n            PolicyApplicantsRoute,\r\n            PolicyApplicantsRouteRefresh,\r\n            PolicyRelatedCasesRoute,\r\n            PolicyRelatedCasesRouteRefresh,\r\n            PolicyDocumentsRoute,\r\n            PolicyDocumentsRouteRefresh\r\n        ]\r\n    }\r\n];\r\n\r\n// addRefreshRoutes(PolicyRoutes);\r\n\r\n@NgModule({\r\n    imports: [RouterModule.forChild(PolicyRoutes)],\r\n    exports: [RouterModule]\r\n})\r\nexport class PolicyRoutingModule {}\r\n\r\n// function addRefreshRoutes(policyRoutes: Routes): void {\r\n//     const refreshPolicyRoutes = policyRoutes[0].children.reduce((refreshRoutes: Route[], childRoute: Route) => {\r\n//         if (childRoute.path.length > 0) {\r\n//             const refreshRoute = { ...childRoute, path: `${childRoute.path}/${RoutePath.Refresh}` } as Route;\r\n//             refreshRoutes.push(refreshRoute);\r\n//         }\r\n//         return refreshRoutes;\r\n//     }, []);\r\n\r\n//     policyRoutes[0].children.push(...refreshPolicyRoutes);\r\n// }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { TabPolicyModule } from './tab/tab-policy.module';\r\nimport { WorksheetModule } from './worksheet/worksheet.module';\r\nimport { NotesModule } from './note/notes.module';\r\nimport { CaseModule } from './case/case.module';\r\nimport { RequirementModule } from './requirements/requirement.module';\r\nimport { EvidenceModule } from './evidence/evidence.module';\r\nimport { PolicyRoutingModule } from './policy-routing.module';\r\nimport { ApplicantModule } from './applicant/applicant.module';\r\nimport { OpenViewNotesHandler } from 'business/policy/shared';\r\nimport { PolicyQuickInfoPanelModule } from './policy-quick-info-panel';\r\nimport { RelatedCasesModule } from './related-cases/related-cases.module';\r\nimport { CaseDocumentsModule } from './documents';\r\nimport { CaseLogModule } from 'business/policy/case-log/case-log.module';\r\nimport { ScratchPadModule } from 'business/policy/scratch-pad/scratch-pad.module';\r\nimport { PolicyInSessionUpdater } from 'ls-core/session';\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { PolicyViewModelChangeManager } from 'business/policy/shared';\r\nimport { ViewModelChangeManager } from 'life-core/view-model';\r\nimport { RefreshPolicyHandler } from 'business/policy/shared/refresh-policy/refresh-policy.handler';\r\nimport { RefreshPolicyDataResolver } from 'business/policy/shared/refresh-policy/refresh-policy-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        WorksheetModule,\r\n        NotesModule,\r\n        CaseModule,\r\n        RequirementModule,\r\n        EvidenceModule,\r\n        TabPolicyModule,\r\n        PolicyRoutingModule,\r\n        ApplicantModule,\r\n        PolicyQuickInfoPanelModule,\r\n        RelatedCasesModule,\r\n        CaseDocumentsModule,\r\n        CaseLogModule,\r\n        ScratchPadModule\r\n    ],\r\n    providers: [\r\n        OpenViewNotesHandler,\r\n        PolicyInSessionUpdater,\r\n        SavePolicyDataDelegate,\r\n        RefreshPolicyHandler,\r\n        RefreshPolicyDataResolver,\r\n        { provide: ViewModelChangeManager, useClass: PolicyViewModelChangeManager }\r\n    ]\r\n})\r\nexport class PolicyModule {}\r\n","export * from './related-cases.component';","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { PolicyProxy } from 'ls-core/model';\r\n\r\nimport { RelatedPolicyHelper } from 'business/policy/shared';\r\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { BaseViewDataResolver } from 'ls-core/view-model';\r\nimport { AppSession } from 'ls-core/session';\r\n\r\n@Injectable()\r\nexport class RelatedCasesDataResolver extends BaseViewDataResolver {\r\n    protected _relatedPoliciesHelper: RelatedPolicyHelper;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, relatedPolicyHelper: RelatedPolicyHelper, appSession: AppSession) {\r\n        super(injector);\r\n        this._relatedPoliciesHelper = relatedPolicyHelper;\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected resolveData(route?: ActivatedRouteSnapshot, state?: RouterStateSnapshot): Promise<PolicyProxy[]> {\r\n        return this._relatedPoliciesHelper.getRelatedPolicies(this._appSession.policyDTO);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst RelatedCasesGridFields = {\r\n    PolicyNumber: 'PolicyNumber',\r\n    InsuredNameFull: 'InsuredNameFull',\r\n    PrimaryPlanCode: 'PrimaryPlanCode',\r\n    RelationshipToInsured: 'RelationshipToInsured',\r\n    ApplicantStatusShort: 'ApplicantStatusShort',\r\n    AdverseHistory: 'AdverseHistory'\r\n};\r\n\r\n@Injectable()\r\nexport class RelatedCasesGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Cases', id: 'policy.relatedcases.gridheader.policynumber' }),\r\n            field: RelatedCasesGridFields.PolicyNumber,\r\n            width: 120\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Applicant', id: 'policy.relatedcases.gridheader.insuredname' }),\r\n            field: RelatedCasesGridFields.InsuredNameFull,\r\n            width: 140\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Plan Code', id: 'policy.relatedcases.gridheader.plancode' }),\r\n            field: RelatedCasesGridFields.PrimaryPlanCode,\r\n            width: 120\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Relationship', id: 'policy.relatedcases.gridheader.relationship' }),\r\n            field: RelatedCasesGridFields.RelationshipToInsured,\r\n            width: 120\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Status', id: 'policy.relatedcases.gridheader.policystatuscode' }),\r\n            field: RelatedCasesGridFields.ApplicantStatusShort,\r\n            width: 120\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Adverse History', id: 'policy.relatedcases.gridheader.adversehistory' }),\r\n            field: RelatedCasesGridFields.AdverseHistory,\r\n            width: 120\r\n        });\r\n\r\n        return this.columns;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-page-header\\\">{{title}}</div>\\r\\n<div class=\\\"row col-12 justify-content-end\\\" style=\\\"padding-bottom: 5px;\\\">\\r\\n\\t<lf-button id=\\\"openPolicyButton\\\" label=\\\"Open\\\" i18n-label=\\\"@@general.button.label.open\\\" (onClick)=\\\"openPolicy()\\\" styleClass=\\\"btn btn-primary\\\"\\r\\n\\t [disabled]=\\\"isOpenEnabled\\\" secureComponent></lf-button>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-12\\\">\\r\\n\\t\\t<data-grid [ngStyle]=\\\"{width: '100%', height: '450px'}\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\" (rowDoubleClicked)=\\\"onRowDoubleClicked($event)\\\">\\r\\n\\t\\t</data-grid>\\r\\n\\t</div>\\r\\n</div>\\r\\n\\r\\n<data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\"","import { Component, Injector } from '@angular/core';\n\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { TabStateValueAccessor, TabStateManager } from 'life-core/util';\n\nimport { PolicyProxy } from 'ls-core/model';\nimport { PolicySubscriber } from 'ls-core/session';\n\nimport { BasePolicyGridViewModel } from 'business/policy/shared';\nimport { OpenPolicyDelegate } from 'business/shared/open-policy';\nimport { RelatedCasesGridColumnsBuilder } from 'business/policy/related-cases/related-cases-grid-columns.builder';\nimport { TabHomeDataKeys } from 'business/home/tab';\nimport { CaseAuthorizationProvider } from 'business/policy/shared/authorization';\n\n@Component({\n    selector: 'related-cases',\n    templateUrl: './related-cases.component.html',\n    providers: [\n        PolicySubscriber,\n        RelatedCasesGridColumnsBuilder,\n        { provide: AuthorizationProvider, useClass: CaseAuthorizationProvider }\n    ]\n})\nexport class RelatedCasesComponent extends BasePolicyGridViewModel<PolicyProxy> {\n    public showDetailAsPopup: boolean;\n    public isOpenEnabled: boolean;\n    private _activePolicy: PolicyProxy;\n    private _gridColumnsBuilder: RelatedCasesGridColumnsBuilder;\n    private _policyProxyStateValueAccessor: TabStateValueAccessor<PolicyProxy>;\n    private _openPolicyDelegate: OpenPolicyDelegate;\n\n    constructor(\n        injector: Injector,\n        gridColumnsBuilder: RelatedCasesGridColumnsBuilder,\n        tabStateManager: TabStateManager,\n        openPolicyDelegate: OpenPolicyDelegate\n    ) {\n        super(injector);\n        this._gridColumnsBuilder = gridColumnsBuilder;\n        this.createStateValueAccessors(tabStateManager);\n        this._openPolicyDelegate = openPolicyDelegate;\n        this.isOpenEnabled = true;\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedData('relatedCases');\n        return super.loadData();\n    }\n\n    public onRowClicked(event: any): void {\n        super.onRowClicked(event);\n        this.isOpenEnabled = false;\n        this._activePolicy = event.node.data;\n    }\n\n    public onRowDoubleClicked(event): void {\n        this._activePolicy = event.node.data;\n        this.openPolicy();\n    }\n\n    public openPolicy(): void {\n        this._policyProxyStateValueAccessor.setValue(this._activePolicy);\n        this._openPolicyDelegate.openPolicy(this._activePolicy);\n    }\n\n    public getRowSelectionType(): string {\n        return 'single';\n    }\n\n    protected setGridTitle(): string {\n        return 'Related Cases';\n    }\n\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\n        return this._gridColumnsBuilder;\n    }\n\n    protected getRowNodeId(data: PolicyProxy): Object {\n        return data.PolicyPersonId;\n    }\n\n    protected getRemoveItemMessage(item: PolicyProxy): string {\n        return ''; // It's not needed as there is no way to delete the related policies.\n    }\n\n    protected loadItems(): PolicyProxy[] {\n        return this.data.relatedCases || [];\n    }\n\n    private createStateValueAccessors(tabStateManager: TabStateManager): void {\n        this._policyProxyStateValueAccessor = new TabStateValueAccessor<PolicyProxy>(\n            tabStateManager,\n            TabHomeDataKeys.ACTIVE_POLICY_PROXY\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { RelatedCasesComponent } from './related-cases.component';\r\nimport { RelatedCasesDataResolver } from 'business/policy/related-cases/related-cases-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [RelatedCasesComponent],\r\n    providers: [RelatedCasesDataResolver]\r\n})\r\nexport class RelatedCasesModule {}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"requirement\\\" label=\\\"Requirement\\\" i18n-label=\\\"@@policy.requirement.detail.requirement\\\">\\r\\n\\t\\t\\t<lf-select #requirement name=\\\"requirement\\\" [items]=\\\"listData.RequirementCode | listItems:'value':'Id'| sortList\\\"\\r\\n\\t\\t\\t[clearable]=\\\"false\\\"  secureComponent required style=\\\"width:300px \\\" (change)=\\\"onRequirementChange($event) \\\"></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</form>\"","import { Component, Injector, Injectable, Input, EventEmitter } from '@angular/core';\n\nimport { ViewModel, ParentChildRegistry } from 'life-core/view-model';\nimport { ICompose } from 'life-core/component/compose';\nimport {\n    IDialogViewModel,\n    IDialogResultEventEmitter,\n    DialogData,\n    DialogViewModelResult\n} from 'life-core/component/dialog';\n\n@Component({\n    selector: 'dialog-detail',\n    templateUrl: './create-requirement-detail.html',\n    providers: [ParentChildRegistry]\n})\n@Injectable()\nexport class CreateRequirementDetail extends ViewModel\n    implements ICompose, IDialogViewModel, IDialogResultEventEmitter {\n    @Input() public data: any;\n\n    public dialogResultEventEmitter: EventEmitter<any> = new EventEmitter<any>();\n\n    constructor(injector: Injector) {\n        super(injector);\n    }\n\n    public setModel(model: DialogData): void {\n        this.listData = model.parameterData;\n    }\n\n    public onRequirementChange(selectedRequirement: any): void {\n        if (selectedRequirement.value) {\n            this.dialogResultEventEmitter.emit(new DialogViewModelResult(selectedRequirement.value, true, true));\n        }\n    }\n\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\n        return Promise.resolve(null);\n    }\n}\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\nimport { MasterButtonType } from 'life-core/component/master-detail';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class BasicInfoAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const matchUnMatchAuthorizationLevel = this.getParentAuthorizationLevel(MasterButtonType.ADD);\r\n\r\n        this.authorizationData.componentLevel['matchButton'] = matchUnMatchAuthorizationLevel;\r\n        this.authorizationData.componentLevel['unMatchButton'] = matchUnMatchAuthorizationLevel;\r\n\r\n        const existingEvidenceAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.REQORDEROVERRIDE]\r\n        );\r\n\r\n        this.authorizationData.componentLevel['chkUseExistingEvidence'] = existingEvidenceAuthorizationLevel;\r\n    }\r\n}\r\n","export * from './medical-provider-search';\r\nexport * from './requirement-detail-providers-info-meta-data.resolver';\r\nexport * from './requirement-detail-basic-info.component';\r\nexport * from './requirement-detail-providers-info.component';\r\n","export * from './medical-provider-search.component';\r\nexport * from './medical-provider-list';\r\nexport * from './medical-provider-types';\r\nexport * from './medical-search-meta-data.resolver';","export * from './medical-provider-list.component';","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { ProviderSearchTypes } from 'ls-core/model';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst MedicalProviderGridFields = {\r\n    LastName: 'LastName',\r\n    MiddleName: 'MiddleName',\r\n    FirstName: 'FirstName',\r\n    Company: 'Company',\r\n    AddressLine1: 'AddressLine1',\r\n    AddressCity: 'AddressCity',\r\n    AddressState: 'AddressState',\r\n    Zip: 'Zip',\r\n    Phone: 'Phone',\r\n    GovtID: 'GovtID'\r\n};\r\n\r\n@Injectable()\r\nexport class MedicalProviderListColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(searchType: string): DataGridColumns {\r\n        this.resetColumns();\r\n        this.getMedicalProviderListGridColumns(searchType);\r\n        return this.columns;\r\n    }\r\n\r\n    private getMedicalProviderListGridColumns(searchType: string): void {\r\n        const filterButtonParams: any = { applyButton: true, clearButton: true };\r\n        const isFacilitySearchCriteria = searchType === ProviderSearchTypes.FACILITY_NAME;\r\n\r\n        if (!isFacilitySearchCriteria) {\r\n            this.addColumn({\r\n                headerName: this.i18n({ value: 'Last Name', id: 'policy.requirement.providersearch.lastname' }),\r\n                filter: 'text',\r\n                field: MedicalProviderGridFields.LastName,\r\n                filterParams: filterButtonParams\r\n            });\r\n            this.addColumn({\r\n                headerName: this.i18n({ value: 'Middle Name', id: 'policy.requirement.providersearch.middlename' }),\r\n                filter: 'text',\r\n                field: MedicalProviderGridFields.MiddleName,\r\n                filterParams: filterButtonParams\r\n            });\r\n            this.addColumn({\r\n                headerName: this.i18n({ value: 'First Name', id: 'policy.requirement.providersearch.firstname' }),\r\n                filter: 'text',\r\n                field: MedicalProviderGridFields.FirstName,\r\n                filterParams: filterButtonParams\r\n            });\r\n        }\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Organization', id: 'policy.requirement.providersearch.company' }),\r\n            filter: 'text',\r\n            field: MedicalProviderGridFields.Company,\r\n            filterParams: filterButtonParams\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Address', id: 'policy.requirement.providersearch.address' }),\r\n            filter: 'text',\r\n            field: MedicalProviderGridFields.AddressLine1,\r\n            filterParams: filterButtonParams\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'City', id: 'policy.requirement.providersearch.city' }),\r\n            filter: 'text',\r\n            field: MedicalProviderGridFields.AddressCity,\r\n            filterParams: filterButtonParams\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'State', id: 'policy.requirement.providersearch.state' }),\r\n            filter: 'text',\r\n            field: MedicalProviderGridFields.AddressState,\r\n            filterParams: filterButtonParams\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Zip', id: 'policy.requirement.providersearch.zip' }),\r\n            filter: 'text',\r\n            field: MedicalProviderGridFields.Zip,\r\n            filterParams: filterButtonParams\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Phone', id: 'policy.requirement.providersearch.phone' }),\r\n            filter: 'text',\r\n            field: MedicalProviderGridFields.Phone,\r\n            filterParams: filterButtonParams\r\n        });\r\n        if (!isFacilitySearchCriteria) {\r\n            this.addColumn({\r\n                headerName: this.i18n({ value: 'NPI', id: 'policy.requirement.providersearch.npi' }),\r\n                filter: 'text',\r\n                field: MedicalProviderGridFields.GovtID,\r\n                filterParams: filterButtonParams\r\n            });\r\n        }\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid style=\\\"height:300px;\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\"></data-grid>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</div>\"","import { Component, Injector, Input, Output, ViewChild, EventEmitter } from '@angular/core';\r\nimport { IGridColumnsBuilder, DataGridColumns, DataGrid } from 'life-core/component/grid';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared/grid/base-policy-grid.vm';\r\nimport { MedicalProviderProxyDTO } from 'ls-core/model';\r\nimport { MedicalProviderListColumnsBuilder } from './medical-provider-list-columns.builder';\r\n\r\n@Component({\r\n    selector: 'medical-provider-list',\r\n    templateUrl: './medical-provider-list.component.html',\r\n    providers: [PolicySubscriber, MedicalProviderListColumnsBuilder]\r\n})\r\nexport class MedicalProviderListComponent extends BasePolicyGridViewModel<MedicalProviderProxyDTO> {\r\n    @Output() public onRowSelect = new EventEmitter<MedicalProviderProxyDTO>();\r\n\r\n    @ViewChild(DataGrid) public refDataGrid: DataGrid;\r\n\r\n    private _gridColumnsBuilder: MedicalProviderListColumnsBuilder;\r\n\r\n    private _providerList: MedicalProviderProxyDTO[];\r\n\r\n    private _searchType: string;\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: MedicalProviderListColumnsBuilder) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n\r\n    public get providerList(): MedicalProviderProxyDTO[] {\r\n        return this._providerList;\r\n    }\r\n\r\n    @Input() public set providerList(value: MedicalProviderProxyDTO[]) {\r\n        this._providerList = value;\r\n        this.refreshGrid();\r\n    }\r\n\r\n    public get searchType(): string {\r\n        return this._searchType;\r\n    }\r\n\r\n    @Input() public set searchType(value: string) {\r\n        this._searchType = value;\r\n        if (this.refDataGrid.api) {\r\n            this.refDataGrid.rebuildGrid(this.getGridColumns().getLayout());\r\n        }\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        return super.loadData();\r\n    }\r\n\r\n    public getGridColumns(): DataGridColumns {\r\n        return this._gridColumnsBuilder.build(this.searchType);\r\n    }\r\n\r\n    public onRowClicked($event: any): void {\r\n        super.onRowClicked($event);\r\n        this.onRowSelect.emit($event.data);\r\n    }\r\n\r\n    public getRowSelectionType(): string {\r\n        return 'single';\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected loadItems(): MedicalProviderProxyDTO[] {\r\n        return this.providerList;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n\r\n    protected getRowNodeId(data: MedicalProviderProxyDTO) {\r\n        return data.ClientID;\r\n    }\r\n}\r\n","module.exports = \".ls-justify-content-end-flex-layout {\\r\\n    display: flex;\\r\\n    justify-content: flex-end;\\r\\n    flex-basis: 100%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS9yZXF1aXJlbWVudHMvZGV0YWlsL21lZGljYWwtcHJvdmlkZXItc2VhcmNoL21lZGljYWwtcHJvdmlkZXItc2VhcmNoLmNvbXBvbmVudC5jc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7SUFDSSxjQUFjO0lBQ2QsMEJBQTBCO0lBQzFCLGlCQUFpQjtDQUNwQiIsImZpbGUiOiJzcmMvbGlmZXN1aXRlLWFwcC9idXNpbmVzcy9wb2xpY3kvcmVxdWlyZW1lbnRzL2RldGFpbC9tZWRpY2FsLXByb3ZpZGVyLXNlYXJjaC9tZWRpY2FsLXByb3ZpZGVyLXNlYXJjaC5jb21wb25lbnQuY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLmxzLWp1c3RpZnktY29udGVudC1lbmQtZmxleC1sYXlvdXQge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogZmxleC1lbmQ7XHJcbiAgICBmbGV4LWJhc2lzOiAxMDAlO1xyXG59XHJcbiJdfQ== */\"","module.exports = \"<div class=\\\"container\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12 lf-dashed-bottom-border\\\">\\r\\n            <lf-form-input [control]='providerType'>\\r\\n                <lf-radiobuttongroup #providerType name=\\\"providerType\\\" [(ngModel)]=\\\"searchFilter.providerSearchSource\\\"\\r\\n                    secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"providerType\\\" value=\\\"LS\\\" label=\\\"LifeSuite Internal Provider Search\\\"\\r\\n                            i18n-label=\\\"@@policy.requirement.providersearch.lssearch\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"providerType\\\" value=\\\"EXT\\\" label=\\\"External Provider Search\\\" i18n-label=\\\"@@policy.requirement.providersearch.epssearch\\\"\\r\\n                            [disabled]=\\\"true\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n            <div class=\\\"col-12\\\">\\r\\n                <lf-form-input label=\\\"Search Type\\\" i18n-label=\\\"@@policy.requirement.providersearch.searchtype\\\"\\r\\n                    [control]=\\\"searchType\\\">\\r\\n                    <lf-select #searchType name=\\\"searchType\\\" [items]=\\\"data.resolvedData.metaData.MedicalProviderSearchType | sortList: 'externalCode' | listItems:'label':'value'\\\"\\r\\n                        [(ngModel)]=\\\"searchFilter.searchType\\\" secureComponent (change)=\\\"onProviderSearchTypeChange($event)\\\"\\r\\n                        required></lf-select>\\r\\n                </lf-form-input>\\r\\n            </div>\\r\\n        </div>\\r\\n        <compose [model]=\\\"data\\\" [componentType]=\\\"itemComponentType\\\"></compose>\\r\\n        <div class=\\\"row lf-dashed-bottom-border\\\">\\r\\n            <div class=\\\"ls-justify-content-end-flex-layout pb-2\\\">\\r\\n                <lf-button id=\\\"search\\\" label=\\\"Search\\\" i18n-label=\\\"@@general.button.label.search\\\" (onClick)=\\\"onSearchButtonClick()\\\"\\r\\n                    secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n                <lf-button id=\\\"clear\\\" label=\\\"Clear\\\" i18n-label=\\\"@@general.button.label.clear\\\" (onClick)=\\\"setFormDataToInitialState()\\\"\\r\\n                    secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n            </div>\\r\\n        </div>\\r\\n    </form>\\r\\n    <medical-provider-list [providerList]=\\\"medicalProviders\\\" [searchType]=\\\"activeSearchType\\\" (onRowSelect)=\\\"onMedicalProviderSelection($event)\\\"></medical-provider-list>\\r\\n</div>\"","import { Component, Injector, Type } from '@angular/core';\r\nimport {\r\n    IDialogViewModel,\r\n    DialogData,\r\n    DialogButtonType,\r\n    DialogViewModelResult,\r\n    DialogButton,\r\n    ConfirmDialog,\r\n    DialogResult\r\n} from 'life-core/component/dialog';\r\nimport { IComponentResolver, ComponentResolver, ComponentMap } from 'life-core/util';\r\nimport { MedicalProviderProxyDTO, filterCountryListPredicate } from 'ls-core/model';\r\nimport {\r\n    PhysicianNameComponent,\r\n    PhysicianFacilityNameComponent,\r\n    PhysicianAssociatedWithFacilityComponent\r\n} from './medical-provider-types';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { ViewModel, ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\r\nimport { ListItem } from 'life-core/model';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { ProviderSearchTypes } from 'ls-core/model';\r\nimport { MedicalProviderService } from './medical-provider.service';\r\nimport { RequirementsAuthorizationProvider } from 'business/policy/requirements/requirements-authorization.provider';\r\n\r\ninterface IProviderSearchFilter {\r\n    searchType: string;\r\n    countryID: string;\r\n    state: string;\r\n    city: string;\r\n    lastName: string;\r\n    firstName: string;\r\n    organization: string;\r\n    providerSearchSource: string;\r\n}\r\n\r\n@Component({\r\n    selector: 'medical-provider-search',\r\n    templateUrl: './medical-provider-search.component.html',\r\n    styleUrls: ['./medical-provider-search.component.css'],\r\n    providers: [\r\n        ParentChildRegistry,\r\n        MedicalProviderService,\r\n        { provide: AuthorizationProvider, useClass: RequirementsAuthorizationProvider }\r\n    ]\r\n})\r\nexport class MedicalProviderSearchComponent extends ViewModel implements ICompose, IDialogViewModel {\r\n    public searchFilter: IProviderSearchFilter;\r\n\r\n    public searchTypes: ListItem[];\r\n\r\n    public activeSearchType: string;\r\n\r\n    public medicalProviders: MedicalProviderProxyDTO[];\r\n\r\n    public itemComponentType: Type<any>;\r\n\r\n    protected confirmDialog: ConfirmDialog;\r\n\r\n    private _selectedMedicalProvider: MedicalProviderProxyDTO;\r\n\r\n    private _medicalProviderService: MedicalProviderService;\r\n\r\n    private _componentMapResolver: IComponentResolver<string>;\r\n\r\n    constructor(injector: Injector, medicalProviderService: MedicalProviderService) {\r\n        super(injector);\r\n        this._medicalProviderService = medicalProviderService;\r\n        this._componentMapResolver = this.getComponentMapResolver();\r\n        this.confirmDialog = injector.get(ConfirmDialog);\r\n        this.i18n = injector.get(I18n);\r\n    }\r\n\r\n    public setModel(model: DialogData): void {\r\n        this.initializeSearchFilter();\r\n        this.setContext(model);\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        // show default filter section\r\n        this.setItemComponentType(ProviderSearchTypes.PHYSICIAN_NAME);\r\n        this.setFormDataToInitialState();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId == DialogButtonType.SELECT) {\r\n            const isDirty = this.isDirty();\r\n            if (this.isMedicalProviderSearchFieldsEmpty() || !!this._selectedMedicalProvider) {\r\n                return this.validate().then(result => {\r\n                    if (result) {\r\n                        this._selectedMedicalProvider.CountryID = this.searchFilter.countryID || '';\r\n                        const selectedMedicalProvider = { selectedMedicalProvider: this._selectedMedicalProvider };\r\n                        const isMedicalProviderExistFlag: boolean = !!this._selectedMedicalProvider;\r\n                        const closeDialog = result == ViewValidationResult.pass && isMedicalProviderExistFlag;\r\n                        return Promise.resolve(\r\n                            new DialogViewModelResult(selectedMedicalProvider, closeDialog, isDirty)\r\n                        );\r\n                    } else {\r\n                        return Promise.resolve(new DialogViewModelResult([], false));\r\n                    }\r\n                });\r\n            } else if (\r\n                !(this.isMedicalProviderSearchFieldsEmpty() && !!this._selectedMedicalProvider) &&\r\n                this.medicalProviders.length > 0\r\n            ) {\r\n                this.confirmSelectionDialog();\r\n                return Promise.resolve(new DialogViewModelResult({}, false));\r\n            } else if (\r\n                !(\r\n                    this.isMedicalProviderSearchFieldsEmpty() &&\r\n                    !!(this.medicalProviders.length <= 0) &&\r\n                    !!this._selectedMedicalProvider\r\n                )\r\n            ) {\r\n                this.confirmSearchDialog();\r\n                return Promise.resolve(new DialogViewModelResult({}, false));\r\n            }\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    public onMedicalProviderSelection(event: MedicalProviderProxyDTO): void {\r\n        this._selectedMedicalProvider = event;\r\n    }\r\n\r\n    public onProviderSearchTypeChange(providerSearchType: any): void {\r\n        if (providerSearchType) {\r\n            this.setFormDataToInitialState(providerSearchType.value);\r\n        }\r\n    }\r\n\r\n    public onSearchButtonClick(): void {\r\n        this.validate().then(result => {\r\n            if (result) {\r\n                this.invokeMedicalProviderSearch();\r\n            }\r\n        });\r\n    }\r\n\r\n    public setFormDataToInitialState(searchType?: string): void {\r\n        this.activeSearchType = searchType || ProviderSearchTypes.PHYSICIAN_NAME;\r\n        this.resetView();\r\n        this.medicalProviders = [];\r\n    }\r\n\r\n    private isMedicalProviderSearchFieldsEmpty(): boolean {\r\n        return this.searchFilter.searchType === 'mp'\r\n            ? this.isCountryStateAvaliable() ||\r\n                  this.searchFilter.lastName === undefined ||\r\n                  this.searchFilter.lastName === '' ||\r\n                  this.searchFilter.lastName === null\r\n            : this.isCountryStateAvaliable() ||\r\n                  this.searchFilter.organization === undefined ||\r\n                  this.searchFilter.organization === '' ||\r\n                  this.searchFilter.organization === null;\r\n    }\r\n\r\n    private isCountryStateAvaliable(): boolean {\r\n        return (\r\n            this.searchFilter.countryID === undefined ||\r\n            this.searchFilter.countryID === '' ||\r\n            this.searchFilter.countryID === null ||\r\n            this.searchFilter.state === undefined ||\r\n            this.searchFilter.state === '' ||\r\n            this.searchFilter.state === null ||\r\n            this.searchFilter.city === undefined ||\r\n            this.searchFilter.city === '' ||\r\n            this.searchFilter.city === null\r\n        );\r\n    }\r\n\r\n    private resetView(): void {\r\n        this.form.resetForm({\r\n            searchType: this.activeSearchType\r\n        });\r\n        this.switchView(this.activeSearchType);\r\n    }\r\n\r\n    private confirmSelectionDialog(): Promise<DialogResult> {\r\n        return this.confirmDialog.open({\r\n            title: this.getWarningDialogTitle(),\r\n            message: this.getConfirmSelectionMessage(),\r\n            buttons: [\r\n                new DialogButton({ type: DialogButtonType.OK }),\r\n                new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\r\n            ]\r\n        });\r\n    }\r\n\r\n    private confirmSearchDialog(): Promise<DialogResult> {\r\n        return this.confirmDialog.open({\r\n            title: this.getWarningDialogTitle(),\r\n            message: this.getConfirmSearchMessage(),\r\n            buttons: [\r\n                new DialogButton({ type: DialogButtonType.OK }),\r\n                new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\r\n            ]\r\n        });\r\n    }\r\n\r\n    private getWarningDialogTitle(): string {\r\n        return this.i18n({\r\n            value: 'Warning',\r\n            id: 'policy.requirement.medicalprovidersearch.dialog.warning.title'\r\n        });\r\n    }\r\n\r\n    private getConfirmSelectionMessage(): string {\r\n        return this.i18n({\r\n            value: 'Please select a record.',\r\n            id: 'policy.requirement.medicalprovidersearch.dialog.selection.message'\r\n        });\r\n    }\r\n\r\n    private getConfirmSearchMessage(): string {\r\n        return this.i18n({\r\n            value: 'Please perform valid search.',\r\n            id: 'policy.requirement.medicalprovidersearch.dialog.search.message'\r\n        });\r\n    }\r\n\r\n    private initializeSearchFilter(): void {\r\n        this.searchFilter = {\r\n            searchType: ProviderSearchTypes.PHYSICIAN_NAME,\r\n            state: '',\r\n            city: '',\r\n            lastName: '',\r\n            firstName: '',\r\n            organization: '',\r\n            providerSearchSource: 'LS',\r\n            countryID: ''\r\n        };\r\n    }\r\n\r\n    private setContext(model: any): void {\r\n        this.data = model;\r\n        this.data.resolvedData.listData.CountryId = this.data.resolvedData.listData.CountryId.filter(\r\n            filterCountryListPredicate\r\n        );\r\n        this.data.searchFilter = this.searchFilter;\r\n        this.activeSearchType = this.searchFilter.searchType;\r\n    }\r\n\r\n    private getComponentMapResolver(): IComponentResolver<string> {\r\n        const componentMap: ComponentMap = new ComponentMap();\r\n        componentMap.add(ProviderSearchTypes.PHYSICIAN_NAME, PhysicianNameComponent);\r\n        componentMap.add(ProviderSearchTypes.FACILITY_NAME, PhysicianFacilityNameComponent);\r\n        componentMap.add(\r\n            ProviderSearchTypes.PHYSICIAN_ASSOCIATED_WITH_FACILITY,\r\n            PhysicianAssociatedWithFacilityComponent\r\n        );\r\n        return new ComponentResolver<string>(componentMap);\r\n    }\r\n\r\n    private switchView(searchType: string): void {\r\n        this.setItemComponentType(searchType);\r\n    }\r\n\r\n    private setItemComponentType(searchType: string): void {\r\n        this.itemComponentType = this._componentMapResolver.resolve(searchType);\r\n    }\r\n\r\n    private invokeMedicalProviderSearch(): void {\r\n        const params = this.getSearchParameters();\r\n        this._medicalProviderService.fetchMedicalProviderList(params).then((result: MedicalProviderProxyDTO[]) => {\r\n            this.medicalProviders = result;\r\n        });\r\n    }\r\n\r\n    private getSearchParameters(): string[] {\r\n        const searchParams = { ...this.searchFilter, ...this.data['searchFilter'] };\r\n        return this.getFilterValues(searchParams);\r\n    }\r\n\r\n    private getFilterValues(filter: Object): Array<any> {\r\n        return Object.keys(filter).map(key => filter[key]);\r\n    }\r\n}\r\n","export * from './physician-facility-name.component';","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"physicianCountry\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.requirement.providersearch.country\\\">\\r\\n            <lf-select #physicianCountry name=\\\"physicianCountry\\\" [items]=\\\"data.resolvedData.listData.CountryId | listItems: 'value':'Id' | emptyItem\\\" \\r\\n            [(ngModel)]=\\\"data.searchFilter.countryID\\\" style=\\\"width:150px\\\" required ></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"State\\\" i18n-label=\\\"@@policy.requirement.providersearch.state\\\" [control]=\\\"state\\\">\\r\\n            <lf-select #state name=\\\"state\\\" [items]=\\\"data.resolvedData.metaData | stateListPicker: data.searchFilter.countryID | emptyItem | sortList\\\"\\r\\n                [(ngModel)]=\\\"data.searchFilter.state\\\" secureComponent style=\\\"width:150px\\\" required></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"City\\\" i18n-label=\\\"@@policy.requirement.providersearch.city\\\" [control]=\\\"city\\\">\\r\\n            <lf-inputtext #city name=\\\"city\\\" [(ngModel)]=\\\"data.searchFilter.city\\\" secureComponent [style]=\\\"{width:'150px'}\\\" required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Organization\\\" i18n-label=\\\"@@policy.requirement.providersearch.organization\\\" [control]=\\\"organization\\\">\\r\\n            <lf-inputtext #organization name=\\\"organization\\\" [(ngModel)]=\\\"data.searchFilter.organization\\\" secureComponent [style]=\\\"{width:'150px'}\\\"\\r\\n                required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { PhysicianTypesComponent } from '../physician-types.component';\r\n\r\n@Component({\r\n    selector: 'physician-facility-name',\r\n    templateUrl: './physician-facility-name.component.html'\r\n})\r\nexport class PhysicianFacilityNameComponent extends PhysicianTypesComponent {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n}\r\n","export * from './physician-name';\r\nexport * from './facility-name';\r\nexport * from './physician-facility';","export * from './physician-facility.component';","module.exports = \"<div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n        <lf-form-input [control]=\\\"physicianCountry\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.requirement.providersearch.country\\\">\\r\\n            <lf-select #physicianCountry name=\\\"physicianCountry\\\" [items]=\\\"data.resolvedData.listData.CountryId | listItems: 'value':'Id' | emptyItem\\\" \\r\\n            [(ngModel)]=\\\"data.searchFilter.countryID\\\" style=\\\"width:150px\\\" required ></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"State\\\" i18n-label=\\\"@@policy.requirement.providersearch.state\\\" [control]=\\\"state\\\">\\r\\n            <lf-select #state name=\\\"state\\\" [items]=\\\"data.resolvedData.metaData | stateListPicker: data.searchFilter.countryID | emptyItem | sortList\\\"\\r\\n                [(ngModel)]=\\\"data.searchFilter.state\\\" secureComponent style=\\\"width:150px\\\" required></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"City\\\" [control]=\\\"city\\\" i18n-label=\\\"@@policy.requirement.providersearch.city\\\">\\r\\n            <lf-inputtext #city name=\\\"city\\\" [(ngModel)]=\\\"data.searchFilter.city\\\" secureComponent [style]=\\\"{width:'150px'}\\\" required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Organization\\\" i18n-label=\\\"@@policy.requirement.providersearch.organization\\\" [control]=\\\"organization\\\">\\r\\n            <lf-inputtext #organization name=\\\"organization\\\" [(ngModel)]=\\\"data.searchFilter.organization\\\" secureComponent [style]=\\\"{width:'150px'}\\\"\\r\\n                required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { PhysicianTypesComponent } from '../physician-types.component';\r\n\r\n@Component({\r\n    selector: 'physician-facility',\r\n    templateUrl: './physician-facility.component.html'\r\n})\r\nexport class PhysicianAssociatedWithFacilityComponent extends PhysicianTypesComponent {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n}\r\n","export * from './physician-name.component';","module.exports = \"<div class=\\\"row\\\">\\r\\n        <div class=\\\"col-2\\\">\\r\\n        <lf-form-input [control]=\\\"physicianCountry\\\" label=\\\"Country\\\" i18n-label=\\\"@@policy.requirement.providersearch.country\\\">\\r\\n            <lf-select #physicianCountry name=\\\"physicianCountry\\\" [items]=\\\"data.resolvedData.listData.CountryId | listItems: 'value':'Id' | emptyItem\\\" \\r\\n            [(ngModel)]=\\\"data.searchFilter.countryID\\\" style=\\\"width:120px\\\" required ></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input label=\\\"State\\\" [control]=\\\"state\\\" i18n-label=\\\"@@policy.requirement.providersearch.state\\\">\\r\\n            <lf-select #state name=\\\"state\\\" [items]=\\\"data.resolvedData.metaData | stateListPicker: data.searchFilter.countryID | emptyItem | sortList\\\"\\r\\n                [(ngModel)]=\\\"data.searchFilter.state\\\" secureComponent style=\\\"width:120px\\\" required></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input label=\\\"City\\\" [control]=\\\"city\\\" i18n-label=\\\"@@policy.requirement.providersearch.city\\\">\\r\\n            <lf-inputtext #city name=\\\"city\\\" [(ngModel)]=\\\"data.searchFilter.city\\\" secureComponent [style]=\\\"{width:'120px'}\\\" required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Last Name\\\" i18n-label=\\\"@@policy.requirement.providersearch.lastname\\\" [control]=\\\"lastName\\\">\\r\\n            <lf-inputtext #lastName name=\\\"lastName\\\" [(ngModel)]=\\\"data.searchFilter.lastName\\\" secureComponent [style]=\\\"{width:'150px'}\\\"\\r\\n                required [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"First Name\\\" i18n-label=\\\"@@policy.requirement.providersearch.firstname\\\" [control]=\\\"firstName\\\">\\r\\n            <lf-inputtext #firstName name=\\\"firstName\\\" [(ngModel)]=\\\"data.searchFilter.firstName\\\" secureComponent [style]=\\\"{width:'150px'}\\\"\\r\\n                ngModel [autocomplete]=\\\"false\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { PhysicianTypesComponent } from '../physician-types.component';\r\n\r\n@Component({\r\n    selector: 'physician-name',\r\n    templateUrl: './physician-name.component.html'\r\n})\r\nexport class PhysicianNameComponent extends PhysicianTypesComponent {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n}\r\n","import { Component, Injector, Injectable } from '@angular/core';\r\n\r\nimport { ViewModel } from 'life-core/view-model';\r\nimport { ICompose } from 'life-core/component/compose';\r\n\r\n@Injectable()\r\nexport class PhysicianTypesComponent extends ViewModel implements ICompose {\r\n\tconstructor(injector: Injector) {\r\n\t\tsuper(injector);\r\n\t}\r\n\r\n\tpublic setModel(model: any) {\r\n\t\tthis.data = model;\r\n\t}\r\n}","import { Injector, Injectable } from '@angular/core';\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods, DataService } from 'ls-core/service';\r\nimport { MedicalProviderProxyDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class MedicalProviderService {\r\n    private _dataService: DataService;\r\n\r\n    constructor(dataService: DataService) {\r\n        this._dataService = dataService;\r\n    }\r\n\r\n    private getServiceParams(parameterList: string[]): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.REQUIREMENT_MEDICALPROVIDER_SEARCH,\r\n            serviceMethod: UIServiceMethods.GET_MEDICAL_PROVIDER_LIST,\r\n            requestPayload: this.buildMIBCodingsSubmitRequest(parameterList)\r\n        });\r\n    }\r\n\r\n    private buildMIBCodingsSubmitRequest(parameterList: string[]): RequirementMedicalProviderSearchRequest {\r\n        const request = new RequirementMedicalProviderSearchRequest();\r\n        request.parametersList = parameterList;\r\n        return request;\r\n    }\r\n\r\n    public fetchMedicalProviderList(parameterList: string[]): Promise<MedicalProviderProxyDTO[]> {\r\n        const serviceParams = this.getServiceParams(parameterList);\r\n        return this._dataService\r\n            .getData(serviceParams)\r\n            .then(response => {\r\n                return response.responsePayload ? (response.responsePayload as MedicalProviderProxyDTO[]) : [];\r\n            })\r\n            .catch(response => {\r\n                return [];\r\n            });\r\n    }\r\n}\r\n\r\nclass RequirementMedicalProviderSearchRequest {\r\n    public readonly $type: string =\r\n        'life.ls.ui.ria.dto.requests.RequirementMedicalProviderSearchRequest, LifeSuite.UIServiceDTO';\r\n    public parametersList: string[];\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class MedicalSearchMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['country_state_usa', 'country_state_canada', 'MedicalProviderSearchType'];\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n        <lf-form-input [control]=\\\"chkUseExistingEvidence\\\" label=\\\"\\\">\\r\\n            <lf-checkbox #chkUseExistingEvidence name=\\\"chkUseExistingEvidence\\\" [(ngModel)]=\\\"data.AlwaysOrder\\\" label=\\\"Do Not Use Existing Evidence\\\" \\r\\n            i18n-label=\\\"@@policy.requirement.detail.alwaysorder\\\" valueType=\\\"BinaryString\\\" secureComponent\\r\\n            ></lf-checkbox>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-3\\\">\\r\\n        <lf-form-input [control]=\\\"requirement\\\" label=\\\"Requirement\\\" i18n-label=\\\"@@policy.requirement.detail.requirement\\\">\\r\\n            <lf-select #requirement name=\\\"requirement\\\" [items]=\\\"listData.RequirementCode | listItems: 'value':'Id'\\\" \\r\\n            [(ngModel)]=\\\"data.RequirementCode\\\" secureComponent required disabled style=\\\"width:200px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-3\\\">\\r\\n        <lf-form-input [control]=\\\"applicant\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.requirement.detail.applicant\\\">\\r\\n            <lf-select #applicant name=\\\"applicant\\\" [items]=\\\"applicantList\\\" [(ngModel)]=\\\"data.PolicyPersonId\\\" secureComponent \\r\\n            [clearable]=\\\"false\\\" style=\\\"width:200px\\\" [disabled]=\\\"controlDisabledMap.applicant\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-2\\\" *ngIf=\\\"isRequirementCodeMVR\\\">\\r\\n        <lf-form-input [control]=\\\"dlNumber\\\" label=\\\"Driver's License\\\" i18n-label=\\\"@@policy.requirement.detail.dlnumber\\\">\\r\\n            <lf-inputtext #dlNumber name=\\\"dlNumber\\\" [disabled]=\\\"controlDisabledMap.dlNumber\\\" [(ngModel)]=\\\"data.DLNumber\\\" (blur)=\\\"onDLDataChange()\\\" \\r\\n            maxLength=\\\"20\\\" secureComponent [style]=\\\"{ width: '150px' }\\\" required></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-2\\\" *ngIf=\\\"isRequirementCodeMVR\\\">\\r\\n        <lf-form-input [control]=\\\"dlCountry\\\" style=\\\"word-wrap: break-word\\\" label=\\\"Driver's License Country\\\" i18n-label=\\\"@@policy.requirement.detail.dlcountry\\\"> \\r\\n            <lf-select #dlCountry name=\\\"dlCountry\\\" [items]=\\\"listData.CountryId | listItems: 'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"countryId\\\" \\r\\n            [disabled]=\\\"controlDisabledMap.dlState\\\" secureComponent style=\\\"width:150px\\\" required></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-2\\\" *ngIf=\\\"isRequirementCodeMVR\\\">\\r\\n        <lf-form-input [control]=\\\"dlState\\\" label=\\\"Driver's License State\\\" i18n-label=\\\"@@policy.requirement.detail.dlstate\\\">\\r\\n            <lf-select #dlState name=\\\"dlState\\\" [items]=\\\"listData | stateListPicker: countryId | emptyItem | sortList\\\" [(ngModel)]=\\\"data.DLState\\\" \\r\\n            (change)=\\\"onDLDataChange()\\\" [disabled]=\\\"controlDisabledMap.dlState\\\" secureComponent style=\\\"width:150px\\\" required></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-3\\\">\\r\\n        <lf-form-input [control]=\\\"status\\\" label=\\\"Status\\\" i18n-label=\\\"@@policy.requirement.detail.status\\\">\\r\\n            <lf-select #status name=\\\"status\\\" [items]=\\\"listData.ClosedDisposition | listItems: 'value':'Id'\\\" [(ngModel)]=\\\"reqStatus\\\" \\r\\n            [disabled]=\\\"controlDisabledMap.status\\\" (change)=\\\"onStatusChange($event)\\\" [clearable]=\\\"false\\\" secureComponent style=\\\"width:100px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-3\\\">\\r\\n        <lf-form-input [control]=\\\"orderedBy\\\" label=\\\"Ordered By\\\" i18n-label=\\\"@@policy.requirement.detail.orderedby\\\">\\r\\n            <lf-select #orderedBy name=\\\"orderedBy\\\" [items]=\\\"listData.OrderedBy | listItems: 'value':'value'\\\" [(ngModel)]=\\\"data.OrderedBy\\\" \\r\\n            secureComponent (change)=\\\"onOrderByChange()\\\" [disabled]=\\\"controlDisabledMap.orderedBy\\\" style=\\\"width:200px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-2\\\">\\r\\n        <lf-form-input [control]=\\\"orderedDate\\\" label=\\\"Ordered Date\\\" i18n-label=\\\"@@policy.requirement.detail.ordereddate\\\">\\r\\n            <ls-inputdate #orderedDate name=\\\"orderedDate\\\" [disabled]=\\\"controlDisabledMap.orderedDate\\\" [(ngModel)]=\\\"data.OrderedDate\\\" secureComponent></ls-inputdate>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-2\\\">\\r\\n        <lf-form-input [control]=\\\"orderedFrom\\\" label=\\\"Ordered From\\\" i18n-label=\\\"@@policy.requirement.detail.orderedfrom\\\">\\r\\n            <lf-select #orderedFrom name=\\\"orderedFrom\\\" [items]=\\\"listData.Provider | listItems: 'value':'value'\\\" [(ngModel)]=\\\"data.Provider\\\" \\r\\n            secureComponent (change)=\\\"onOrderFromChange()\\\" [disabled]=\\\"controlDisabledMap.orderedFrom\\\" style=\\\"width:200px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-2\\\" style=\\\"margin-top: 24px;\\\" *ngIf=\\\"isMatchButtonAvailable\\\">\\r\\n        <lf-button id=\\\"matchButton\\\" name=\\\"matchButton\\\" label=\\\"Match\\\" i18n-label=\\\"@@policy.requirement.detail.match\\\" (onClick)=\\\"onMatchClick()\\\" \\r\\n        secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-2\\\" style=\\\"margin-top: 24px;\\\" *ngIf=\\\"isUnmatchButtonAvailable\\\">\\r\\n        <lf-button id=\\\"unMatchButton\\\" name=\\\"unMatchButton\\\" label=\\\"Unmatch\\\" i18n-label=\\\"@@policy.requirement.detail.unmatch\\\" \\r\\n        (onClick)=\\\"onUnmatchClick()\\\" secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-3\\\" [ngStyle]=\\\"{display: 'flex'}\\\">\\r\\n            <lf-form-input [control]=\\\"followup\\\" label=\\\"\\\" style=\\\"margin-right: 15px; margin-top: 10px;\\\">\\r\\n                <lf-checkbox #followup name=\\\"followup\\\" [ngModel]=\\\"isFollowedUp\\\" secureComponent (ngModelChange)=\\\"onIsFollowedUpChange($event)\\\" \\r\\n                binary=\\\"true\\\" [disabled]=\\\"controlDisabledMap.followup\\\"></lf-checkbox>\\r\\n            </lf-form-input>\\r\\n            \\r\\n            <lf-form-input [control]=\\\"followupDate\\\" label=\\\"Follow Up Date\\\" i18n-label=\\\"@@policy.requirement.detail.followupdate\\\">\\r\\n                <ls-inputdate #followupDate name=\\\"followupDate\\\" [(ngModel)]=\\\"data.FollowupDate\\\" secureComponent \\r\\n                [disabled]=\\\"!isFollowedUp || controlDisabledMap.followup\\\"></ls-inputdate>\\r\\n            </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-3\\\">\\r\\n        <lf-form-input [control]=\\\"followupTime\\\" label=\\\"Follow Up Time\\\" i18n-label=\\\"@@policy.requirement.detail.followuptime\\\">\\r\\n            <ls-inputtime #followupTime name=\\\"followupTime\\\" [(ngModel)]=\\\"data.FollowupDate\\\" secureComponent \\r\\n            [disabled]=\\\"!isFollowedUp || controlDisabledMap.followup\\\"></ls-inputtime>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-2\\\">\\r\\n        <lf-form-input [control]=\\\"addedBy\\\" label=\\\"Added By\\\" i18n-label=\\\"@@policy.requirement.detail.addedby\\\">\\r\\n            <lf-statictext #addedBy name=\\\"addedBy\\\" [value]=\\\"addedByName\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-2\\\">\\r\\n        <lf-form-input [control]=\\\"accountCode\\\" label=\\\"Account Code\\\" i18n-label=\\\"@@policy.requirement.detail.accountcode\\\">\\r\\n            <lf-select #accountCode name=\\\"accountCode\\\" [items]=\\\"listData.AccountCode | listItems: 'externalCode':'Id' | emptyItem\\\" \\r\\n            [(ngModel)]=\\\"data.AccountCode\\\" secureComponent [disabled]=\\\"controlDisabledMap.accountCode\\\" style=\\\"width:200px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n        <lf-form-input [control]=\\\"vendorInstruction\\\" label=\\\"Vendor Special Instructions\\\" i18n-label=\\\"@@policy.requirement.detail.vendorspecialinstructions\\\">\\r\\n            <lf-inputtextarea #vendorInstruction name=\\\"vendorInstruction\\\" [(ngModel)]=\\\"data.CreateComment\\\" maxLength=\\\"1000\\\" secureComponent \\r\\n            rows=\\\"10\\\" cols=\\\"40\\\"></lf-inputtextarea>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-md-6\\\">\\r\\n        <lf-form-input [control]=\\\"requirementComment\\\" label=\\\"Requirement Comment\\\" i18n-label=\\\"@@policy.requirement.detail.requirementcomment\\\">\\r\\n            <lf-inputtextarea #requirementComment name=\\\"requirementComment\\\" [(ngModel)]=\\\"data.RequirementComment\\\" maxLength=\\\"1000\\\" \\r\\n            secureComponent rows=\\\"10\\\" cols=\\\"40\\\"></lf-inputtextarea>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector, SkipSelf, Optional } from '@angular/core';\r\n\r\nimport { ObjectUtil, ConvertUtil } from 'life-core/util/lang';\r\nimport { SecondaryTabHostViewModel } from 'life-core/component/layout/tabview';\r\nimport { ListItem } from 'life-core/model';\r\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\r\nimport { ListUtil, DateUtil } from 'life-core/util';\r\nimport {\r\n    DialogButton,\r\n    DialogButtonType,\r\n    ModalDialog,\r\n    DialogResult,\r\n    ConfirmDialog,\r\n    DialogSize\r\n} from 'life-core/component';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { IRowManagementDelegate, RowManagementDelegate } from 'life-core/component/master-detail';\r\n\r\nimport { PolicyDTO, RequirementDTO, AddressDTO, InsuredDTO, CountryFilterList } from 'ls-core/model';\r\nimport { ListDataService, ListDataRequestBuilder, ListsDataRequest, ListDataUtil, ListDataItems, ListDataItem, SetDefaultDataRequest, DefaultDataService } from 'ls-core/service';\r\nimport { MetadataLoader, DBDateUtil } from 'ls-core/util';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\nimport {\r\n    RequirementMatchComponent,\r\n    RequirementMatchUnmatchChannels,\r\n    MatchUnmatchType\r\n} from 'business/policy/requirements/match';\r\nimport {\r\n    ApplicantHelper,\r\n    ApplicantListHelper,\r\n    ApplicationCountersHelper,\r\n    CountryStateCodes\r\n} from 'business/policy/shared';\r\nimport { RequirementDetailContext, RequirementDetailContextModel } from './requirement-detail-context';\r\nimport { RequirementTypes } from './../requirement.type';\r\nimport { BasicInfoAuthorizationProvider } from './authorization/basic-info-authorization.provider';\r\nimport { RequirementStatuses } from '../../shared/requirement-statuses';\r\nimport { ViewValidationResult, ValidationRenderType } from 'life-core/view-model/validation';\r\nimport { RequirementDeactivateGuard } from '../requirement-deactivate.guard';\r\n\r\nconst REQUIREMENT_ORDEREDFROM_MANUAL = 'Manual';\r\nconst SYSTEM_ADDED = 'System';\r\n\r\nenum RequirementDetailBasicControls {\r\n    ACCOUNT_CODE = 'accountCode',\r\n    APPLICANT = 'applicant',\r\n    DL_NUMBER = 'dlNumber',\r\n    DL_STATE = 'dlState',\r\n    EXISTING_EVIDENCE = 'chkUseExistingEvidence',\r\n    FOLLOWUP = 'followup',\r\n    ORDERED_BY = 'orderedBy',\r\n    ORDERED_DATE = 'orderedDate',\r\n    ORDERED_FROM = 'orderedFrom',\r\n    STATUS = 'status'\r\n}\r\n\r\nconst FieldsDisabledForRequirementStatusMap = {\r\n    // specifies the field for which requirement all statuses it's disabled\r\n    [RequirementDetailBasicControls.ACCOUNT_CODE]: [\r\n        RequirementStatuses.SATISFIED,\r\n        RequirementStatuses.DELETED,\r\n        RequirementStatuses.CANCELED,\r\n        RequirementStatuses.WAIVED,\r\n        RequirementStatuses.RECEIVED,\r\n        RequirementStatuses.ORDERED\r\n    ],\r\n\r\n    [RequirementDetailBasicControls.APPLICANT]: [\r\n        RequirementStatuses.OPEN,\r\n        RequirementStatuses.SATISFIED,\r\n        RequirementStatuses.CANCELED,\r\n        RequirementStatuses.WAIVED,\r\n        RequirementStatuses.RECEIVED,\r\n        RequirementStatuses.ORDERED,\r\n        RequirementStatuses.HOLD\r\n    ],\r\n    [RequirementDetailBasicControls.DL_NUMBER]: [\r\n        RequirementStatuses.SATISFIED,\r\n        RequirementStatuses.CANCELED,\r\n        RequirementStatuses.WAIVED,\r\n        RequirementStatuses.RECEIVED,\r\n        RequirementStatuses.ORDERED,\r\n        RequirementStatuses.DELETED\r\n    ],\r\n    [RequirementDetailBasicControls.DL_STATE]: [\r\n        RequirementStatuses.SATISFIED,\r\n        RequirementStatuses.CANCELED,\r\n        RequirementStatuses.WAIVED,\r\n        RequirementStatuses.RECEIVED,\r\n        RequirementStatuses.ORDERED,\r\n        RequirementStatuses.DELETED\r\n    ],\r\n    [RequirementDetailBasicControls.EXISTING_EVIDENCE]: [\r\n        RequirementStatuses.OPEN,\r\n        RequirementStatuses.SATISFIED,\r\n        RequirementStatuses.CANCELED,\r\n        RequirementStatuses.WAIVED,\r\n        RequirementStatuses.RECEIVED,\r\n        RequirementStatuses.ORDERED,\r\n        RequirementStatuses.HOLD\r\n    ],\r\n    [RequirementDetailBasicControls.FOLLOWUP]: [\r\n        RequirementStatuses.SATISFIED,\r\n        RequirementStatuses.DELETED,\r\n        RequirementStatuses.CANCELED,\r\n        RequirementStatuses.WAIVED\r\n    ],\r\n    [RequirementDetailBasicControls.ORDERED_BY]: [\r\n        RequirementStatuses.OPEN,\r\n        RequirementStatuses.SATISFIED,\r\n        RequirementStatuses.CANCELED,\r\n        RequirementStatuses.WAIVED,\r\n        RequirementStatuses.RECEIVED,\r\n        RequirementStatuses.ORDERED,\r\n        RequirementStatuses.HOLD\r\n    ],\r\n    [RequirementDetailBasicControls.ORDERED_FROM]: [\r\n        RequirementStatuses.SATISFIED,\r\n        RequirementStatuses.DELETED,\r\n        RequirementStatuses.CANCELED,\r\n        RequirementStatuses.WAIVED,\r\n        RequirementStatuses.RECEIVED\r\n    ],\r\n    [RequirementDetailBasicControls.ORDERED_DATE]: [RequirementStatuses.SATISFIED],\r\n    [RequirementDetailBasicControls.STATUS]: [\r\n        RequirementStatuses.SATISFIED,\r\n        RequirementStatuses.DELETED,\r\n        RequirementStatuses.CANCELED,\r\n        RequirementStatuses.WAIVED\r\n    ]\r\n};\r\n\r\n@Component({\r\n    selector: 'requirement-detail-basic-info',\r\n    templateUrl: './requirement-detail-basic-info.component.html',\r\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: BasicInfoAuthorizationProvider }]\r\n})\r\nexport class RequirementDetailBasicInfo extends SecondaryTabHostViewModel<RequirementDTO> {\r\n    public isRequirementCodeMVR: boolean;\r\n    public applicantList: Array<ListItem>;\r\n    public addedByName: string = '';\r\n    public isFollowedUp: boolean;\r\n    public isMatchButtonAvailable: boolean;\r\n    public isUnmatchButtonAvailable: boolean;\r\n    public controlDisabledMap: { [controlName: string]: boolean };\r\n    public countryId: string;\r\n    private _applicant: InsuredDTO;\r\n    private _policy: PolicyDTO;\r\n    private _listDataService: ListDataService;\r\n    private _metadataLoader: MetadataLoader;\r\n    private _modalDialog: ModalDialog;\r\n    private _confirmDialog: ConfirmDialog;\r\n    private _messagingService: IMessagingService;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _requirementDetailContext: RequirementDetailContext;\r\n    private _deactivateGuard: RequirementDeactivateGuard;\r\n    private _rowManagementDelegate: IRowManagementDelegate<RequirementDTO>;\r\n    private _requirementTypes: RequirementTypes;\r\n    private _applicationCountersHelper: ApplicationCountersHelper;\r\n    private _initialStatus: string;\r\n    public reqStatus: string;\r\n    private _defaultDataService: DefaultDataService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        applicantListHelper: ApplicantListHelper,\r\n        requirementDetailContext: RequirementDetailContext,\r\n        listDataService: ListDataService,\r\n        metadataLoader: MetadataLoader,\r\n        modalDialog: ModalDialog,\r\n        confirmDialog: ConfirmDialog,\r\n        messagingService: MessagingService,\r\n        parentAuthProvider: AuthorizationProvider,\r\n        @SkipSelf()\r\n        @Optional()\r\n        rowManagementDelegate: RowManagementDelegate<RequirementDTO>,\r\n        requirementDeactivateGuard: RequirementDeactivateGuard,\r\n        i18n: I18n,\r\n        requirementTypes: RequirementTypes,\r\n        applicationCountersHelper: ApplicationCountersHelper,\r\n        defaultDataService: DefaultDataService\r\n    ) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        this._listDataService = listDataService;\r\n        this._metadataLoader = metadataLoader;\r\n        this._modalDialog = modalDialog;\r\n        this._confirmDialog = confirmDialog;\r\n        this._messagingService = messagingService;\r\n        policySubscriber.subscribe(this, p => {\r\n            this._policy = p;\r\n            this.setButtonsAvailability();\r\n        });\r\n        this._requirementDetailContext = requirementDetailContext;\r\n        this._applicantListHelper = applicantListHelper;\r\n        this.controlDisabledMap = {};\r\n        this.registerHandlers();\r\n        this._deactivateGuard = requirementDeactivateGuard;\r\n        this._rowManagementDelegate = rowManagementDelegate;\r\n        this.handleNewRequirementFields();\r\n        this._requirementTypes = requirementTypes;\r\n        this._applicationCountersHelper = applicationCountersHelper;\r\n        this._defaultDataService = defaultDataService;\r\n    }\r\n\r\n    public registerHandlers(): void {\r\n        this.subscriptionTracker.track(\r\n            this._requirementDetailContext.contextObservable.subscribe(context => {\r\n                this.setContext(context);\r\n            })\r\n        );\r\n    }\r\n\r\n    public onIsFollowedUpChange(value: any): void {\r\n        if (value) {\r\n            const currentDate = DateUtil.truncateTimeFromDate(new Date());\r\n            this.data.FollowupDate = DBDateUtil.dateToDBDate(currentDate);\r\n        } else {\r\n            this.data.FollowupDate = null;\r\n        }\r\n        this.isFollowedUp = value;\r\n    }\r\n\r\n    public onMatchClick(): void {\r\n        this.openRequirementMatchDialog();\r\n    }\r\n\r\n    public onOrderByChange(): void {\r\n        this.loadListData();\r\n    }\r\n\r\n    public onOrderFromChange(): void {\r\n        this.resetAccountCode();\r\n        this.loadListData();\r\n        this.loadAndAssignEvidenceTypeMetadata();\r\n    }\r\n\r\n    private loadAndAssignEvidenceTypeMetadata(): Promise<void> {\r\n        const reqProv = 'requirement_provider_' + this.data.RequirementCode;\r\n        return this._metadataLoader.load([reqProv]).then(data => {\r\n            this.setListData(data);\r\n            var evidencyTypeList: Array<ListDataItem> = ListDataUtil.convertToListDataItemArray(this.listData[reqProv]);\r\n            this.data.EvidenceType = ListDataUtil.getExternalCodeFromListDataById(evidencyTypeList,this.data.Provider);\r\n        });\r\n    }\r\n\r\n    public onStatusChange(selectedStatus: any): void {\r\n        if (selectedStatus.value == RequirementStatuses.SATISFIED) {\r\n            this.setFollowupFieldAvailability(true);\r\n        } else if (selectedStatus.value == RequirementStatuses.OPEN) {\r\n            this.setFollowupFieldAvailability(false);\r\n        }\r\n        else if (selectedStatus.value == RequirementStatuses.ORDERED) {\r\n            this.isFollowedUp = true;\r\n            const reqDTO: RequirementDTO = new RequirementDTO();\r\n            const defaultDataRequest = new SetDefaultDataRequest(this._policy, this.data, '');\r\n            this._defaultDataService.setDefaultData(defaultDataRequest).then(data => {\r\n                                Object.assign(reqDTO, data.workingDTO as RequirementDTO);\r\n                                this.data.FollowupDate = reqDTO.FollowupDate;\r\n            });\r\n        }\r\n        if (!this.data._counterIncreased) {\r\n            this._applicationCountersHelper.incrementManualActionCounter(this._policy);\r\n            this.data._counterIncreased = true;\r\n        } else if (selectedStatus.value == this._initialStatus) {\r\n            this._applicationCountersHelper.decrementManualActionCounter(this._policy);\r\n            this.data._counterIncreased = false;\r\n        }\r\n        this.setReqStatus();\r\n    }\r\n\r\n    public onUnmatchClick(): void {\r\n        this.confirmUnmatchRequirement().then(dialogRef => {\r\n            if (dialogRef.buttonId === DialogButtonType.YES) {\r\n                this.changeManager.setIsDirty(true);\r\n                this.data.RequirementInformationId = null;\r\n                this.publishUnmatchSelection();\r\n            }\r\n        });\r\n    }\r\n\r\n    public onDLDataChange(): void {\r\n        this._applicant.Applications_LazyLoad[0].DriversLicenseCountryId = this.countryId;\r\n        this._applicant.Applications_LazyLoad[0].DriversLicenseState = this.data.DLState;\r\n        this._applicant.Applications_LazyLoad[0].DriversLicenseNumber = this.data.DLNumber;\r\n    }\r\n\r\n    public setFollowupFieldAvailability(isDisabled: boolean): void {\r\n        this.isFollowedUp = !isDisabled;\r\n        this.disableControl(RequirementDetailBasicControls.FOLLOWUP, isDisabled);\r\n    }\r\n\r\n    public doCustomValidation(validationRenderType: ValidationRenderType): ViewValidationResult {\r\n        return this._deactivateGuard.isProviderInfoValid(this.data, validationRenderType != ValidationRenderType.never)\r\n            ? ViewValidationResult.pass\r\n            : ViewValidationResult.fail;\r\n    }\r\n\r\n    private setContext(context: RequirementDetailContextModel): void {\r\n        this.data = context.requirement;\r\n        this.loadListData();\r\n        this.getReqStatus();\r\n        this.loadMetadata();\r\n        this.setAddedByName();\r\n        this.setFollowedUp();\r\n        this.setButtonsAvailability();\r\n        this.setDLDetailsAvailability();\r\n        this.getApplicant();\r\n        this.loadApplicantList();\r\n        this.setControlsAvailability();\r\n        this.setDefaultApplicant();\r\n        this._initialStatus = this.reqStatus;\r\n    }\r\n\r\n    private loadListData(): Promise<void> {\r\n        const request = this.getListsDataRequest();\r\n        return this._listDataService.load(request).then(data => {\r\n            this.setListData(data);\r\n            this.setDefaultProvider();\r\n            this.setOrderedDetailsDisability();\r\n            this.handleNewRequirementFields();\r\n            this.getFilteredCountryList();\r\n        });\r\n    }\r\n\r\n    private setDefaultProvider(): void {\r\n        if (!this.data.Provider) {\r\n            this.data.Provider = ListDataUtil.getFirstOrDefaultListItemValue(this.listData.Provider);\r\n            if (this.data.Provider) {\r\n                this.loadListData();\r\n            }\r\n        }\r\n    }\r\n\r\n    private setReqStatus():void{\r\n        this.data.ClosedDisposition = this.reqStatus;\r\n    }\r\n\r\n    private getReqStatus():void{\r\n        this.reqStatus = (this.data.ClosedDisposition ==null || this.data.ClosedDisposition =='') ? 'O' : this.data.ClosedDisposition;\r\n    }\r\n\r\n    private setOrderedDetailsDisability(): void {\r\n        this.disableControl(\r\n            RequirementDetailBasicControls.ORDERED_BY,\r\n            this.data.Provider != REQUIREMENT_ORDEREDFROM_MANUAL\r\n        );\r\n        this.disableControl(\r\n            RequirementDetailBasicControls.ORDERED_DATE,\r\n            this.data.Provider != REQUIREMENT_ORDEREDFROM_MANUAL\r\n        );\r\n    }\r\n\r\n    private handleNewRequirementFields(): void {\r\n        if (this._rowManagementDelegate.isNewItem()) {\r\n            this.disableControl(RequirementDetailBasicControls.ORDERED_BY, false);\r\n            this.disableControl(RequirementDetailBasicControls.APPLICANT, false);\r\n        }\r\n    }\r\n\r\n    private setAddedByName(): void {\r\n        if (this.data.AddedBy) {\r\n            this.addedByName =\r\n                ConvertUtil.toNumber(this.data.AddedBy) == -255\r\n                    ? SYSTEM_ADDED\r\n                    : ListUtil.getLabelByValue(this.listData.aus_users, this.data.AddedBy.toString());\r\n        }\r\n    }\r\n\r\n    private setFollowedUp(): void {\r\n        this.isFollowedUp = false;\r\n        if (this.data.FollowupDate != null && this.data.FollowupDate.dateAsString !== '') {\r\n            this.isFollowedUp = DateUtil.isDateSet(this.data.FollowupDate.datetime) ? true : this.isFollowedUp;\r\n        }\r\n    }\r\n\r\n    private setButtonsAvailability(): any {\r\n        this.isMatchButtonAvailable = this.data.supportsMatch && this.data.RequirementInformationId == null;\r\n        this.isUnmatchButtonAvailable = this.data.supportsMatch && !this.isMatchButtonAvailable;\r\n    }\r\n\r\n    private setDLDetailsAvailability(): void {\r\n        this.isRequirementCodeMVR = this.data.RequirementCode === 'MVR';\r\n    }\r\n\r\n    private getApplicant(): void {\r\n        this._applicant = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    private loadApplicantList(): void {\r\n        let applicantName: string;\r\n        this.applicantList = new Array<ListItem>();\r\n        this._policy.Insureds_LazyLoad.forEach(applicant => {\r\n            applicantName = ApplicantHelper.getApplicantFullName(applicant);\r\n            this.applicantList.push(\r\n                new ListItem(applicantName, applicant.PolicyPersonId ? applicant.PolicyPersonId.toString() : '')\r\n            );\r\n        });\r\n    }\r\n\r\n    private setControlsAvailability(): void {\r\n        Object.keys(RequirementDetailBasicControls).forEach(key => {\r\n            const field = RequirementDetailBasicControls[key];\r\n            this.isFieldDisabledBasedOnRequirementStatus(field)\r\n                ? this.disableControl(field, true)\r\n                : this.disableControl(field, false);\r\n        });\r\n    }\r\n\r\n    private setDefaultApplicant(): void {\r\n        if (!this.data.PolicyPersonId) {\r\n            this.data.PolicyPersonId = this._applicant.PolicyPersonId;\r\n        }\r\n    }\r\n\r\n    private setDLData(): void {\r\n        if (this.isRequirementCodeMVR) {\r\n            this.countryId = this._applicant.Applications_LazyLoad[0].DriversLicenseCountryId;\r\n            this.data.DLState = this._applicant.Applications_LazyLoad[0].DriversLicenseState;\r\n            this.data.DLNumber = this._applicant.Applications_LazyLoad[0].DriversLicenseNumber;\r\n        }\r\n    }\r\n\r\n    private resetAccountCode(): void {\r\n        this.data.AccountCode = '';\r\n    }\r\n\r\n    private getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._policy);\r\n        const requirementDTO = ObjectUtil.createObjectOfType(this.data, RequirementDTO);\r\n        const addressDTO = new AddressDTO();\r\n        listDataRequestBuilder.addListRequestItem(requirementDTO, 'RequirementCode');\r\n        listDataRequestBuilder.addListRequestItem(requirementDTO, 'ClosedDisposition');\r\n        listDataRequestBuilder.addListRequestItem(requirementDTO, 'OrderedBy');\r\n        listDataRequestBuilder.addListRequestItem(requirementDTO, 'Provider');\r\n        listDataRequestBuilder.addListRequestItem(requirementDTO, 'AccountCode');\r\n        listDataRequestBuilder.addListRequestItem(addressDTO, 'CountryStateId');\r\n        listDataRequestBuilder.addListRequestItem(addressDTO, 'CountryId');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n\r\n    private loadMetadata(): Promise<void> {\r\n        return this._metadataLoader.load(['aus_users', ...CountryStateCodes]).then(data => {\r\n            this.setAddedByName();\r\n            this.setListData(data);\r\n            this.setDLData();\r\n        });\r\n    }\r\n\r\n    private getFilteredCountryList(): void {\r\n        this.listData.CountryId = this.listData.CountryId.filter(\r\n            country => CountryFilterList.indexOf(country.Id) != -1\r\n        );\r\n    }\r\n\r\n    private openRequirementMatchDialog(): void {\r\n        this._modalDialog.open({\r\n            view: RequirementMatchComponent,\r\n            title: this.getRequirementMatchDialogTitle(),\r\n            buttons: [\r\n                new DialogButton({ type: DialogButtonType.ACCEPT }),\r\n                new DialogButton({\r\n                    type: DialogButtonType.CANCEL,\r\n                    options: { isDefault: true }\r\n                })\r\n            ],\r\n            data: this.data,\r\n            size: DialogSize.large\r\n        });\r\n    }\r\n\r\n    private getRequirementMatchDialogTitle(): string {\r\n        return this.data.requirementType === this._requirementTypes.mvr\r\n            ? this.i18n({ value: 'Manual Match MVR', id: 'policy.matching.mvr.title' })\r\n            : this.i18n({ value: 'Manual Match Lab', id: 'policy.matching.lab.title' });\r\n    }\r\n\r\n    private confirmUnmatchRequirement(): Promise<DialogResult> {\r\n        return this._confirmDialog.open({\r\n            message: this.i18n(\r\n                {\r\n                    value: 'Are you sure you want to Unmatch the {{requirementType}}',\r\n                    id: 'policy.requirement.dialog.umatch.message'\r\n                },\r\n                { requirementType: this.data.requirementType }\r\n            ),\r\n            title: this.data.requirementType === 'MVR' ? this._requirementTypes.mvr : this._requirementTypes.lab,\r\n            buttons: [new DialogButton({ type: DialogButtonType.YES }), new DialogButton({ type: DialogButtonType.NO })]\r\n        });\r\n    }\r\n\r\n    private publishUnmatchSelection(): void {\r\n        const requirement = this._policy.Requirements_LazyLoad.find(\r\n            requirements => requirements.RequirementCode === this.data.RequirementCode\r\n        );\r\n        requirement.RequirementInformationId = this.data.RequirementInformationId;\r\n        this._messagingService.publish(RequirementMatchUnmatchChannels.RequirementMatchUnmatch, {\r\n            requirement: requirement,\r\n            matchUnmatchType: MatchUnmatchType.Unmatch\r\n        });\r\n    }\r\n\r\n    private disableControl(control: string, isDisabled: boolean): void {\r\n        this.controlDisabledMap[control] = isDisabled;\r\n    }\r\n\r\n    private isFieldDisabledBasedOnRequirementStatus(field: string): boolean {\r\n        return (\r\n            FieldsDisabledForRequirementStatusMap[field].find(\r\n                status => status == this.reqStatus.toUpperCase()\r\n            ) != undefined\r\n        );\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\n\nimport { RequirementDTO } from 'ls-core/model';\n\n@Injectable()\nexport class RequirementDetailContext {\n    private _contextSubject: BehaviorSubject<RequirementDetailContextModel> = new BehaviorSubject<\n        RequirementDetailContextModel\n    >(null);\n\n    public updateContext(context: RequirementDetailContextModel): void {\n        this._contextSubject.next(context);\n    }\n\n    public get contextObservable(): Observable<RequirementDetailContextModel> {\n        return this._contextSubject.asObservable();\n    }\n}\n\nexport class RequirementDetailContextModel {\n    public requirement: RequirementDTO;\n\n    constructor(requirement: RequirementDTO) {\n        this.requirement = requirement;\n    }\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\nimport { CountryStateCodes } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class RequirementDetailProvidersInfoMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return [...CountryStateCodes, 'country'];\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-10\\\">\\r\\n        <lf-form-input label=\\\"Physician\\\" i18n-label=\\\"@@policy.requirement.provider.physician\\\" [control]=\\\"physician\\\">\\r\\n            <lf-select #physician name=\\\"physician\\\" [items]=\\\"physicianList | listItems:'label':'value' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"selectedPhysician\\\" secureComponent style=\\\"width:150px\\\" (change)=\\\"onPhysicianChange($event)\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"justify-content-end col-sm-2 pt-24\\\">\\r\\n        <lf-button id=\\\"providerSearch\\\" (click)=\\\"onProviderSearchButtonClick()\\\" label=\\\"Provider Search\\\" i18n-label=\\\"@@policy.requirement.provider.providersearch\\\"\\r\\n            secureComponent styleClass=\\\"btn btn-primary\\\"></lf-button>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"Hospital/Clinic\\\" i18n-label=\\\"@@policy.requirement.provider.hospitalclinic\\\" [control]=\\\"hospital\\\">\\r\\n            <lf-inputtext #hospital name=\\\"hospital\\\" [(ngModel)]=\\\"data.medicalProviderProxyDTO.Company\\\" maxLength=\\\"50\\\"\\r\\n                secureComponent [required]=\\\"isHospitalFieldRequired\\\" (blur)=\\\"updateHospitalFieldRequired()\\\" [disabled]=\\\"isRequirementSatisfied\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"First Name\\\" i18n-label=\\\"@@policy.requirement.provider.physicianfirstname\\\" [control]=\\\"firstName\\\">\\r\\n            <lf-inputtext #firstName name=\\\"firstName\\\" [(ngModel)]=\\\"data.medicalProviderProxyDTO.FirstName\\\" maxLength=\\\"250\\\"\\r\\n                secureComponent [required]=\\\"!isHospitalFieldRequired\\\" (blur)=\\\"updateNameFieldsRequired()\\\"\\r\\n                [autocomplete]=\\\"false\\\" [disabled]=\\\"isRequirementSatisfied\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"Last Name\\\" i18n-label=\\\"@@policy.requirement.provider.physicianlastname\\\" [control]=\\\"lastName\\\">\\r\\n            <lf-inputtext #lastName name=\\\"lastName\\\" [(ngModel)]=\\\"data.medicalProviderProxyDTO.LastName\\\" maxLength=\\\"250\\\"\\r\\n                secureComponent [required]=\\\"!isHospitalFieldRequired\\\" (blur)=\\\"updateNameFieldsRequired()\\\"\\r\\n                [autocomplete]=\\\"false\\\" [disabled]=\\\"isRequirementSatisfied\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"Address\\\" i18n-label=\\\"@@policy.requirement.provider.address1\\\" [control]=\\\"address1\\\">\\r\\n            <lf-inputtext #address1 name=\\\"address1\\\" [(ngModel)]=\\\"data.medicalProviderProxyDTO.AddressLine1\\\" maxLength=\\\"100\\\"\\r\\n                secureComponent [autocomplete]=\\\"false\\\" [disabled]=\\\"isRequirementSatisfied\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"\\\" [control]=\\\"address2\\\">\\r\\n            <lf-inputtext #address2 name=\\\"address2\\\" [(ngModel)]=\\\"data.medicalProviderProxyDTO.AddressLine2\\\" maxLength=\\\"100\\\"\\r\\n                secureComponent [autocomplete]=\\\"false\\\" [disabled]=\\\"isRequirementSatisfied\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"City\\\" i18n-label=\\\"@@policy.requirement.provider.city\\\" [control]=\\\"city\\\">\\r\\n            <lf-inputtext #city name=\\\"city\\\" [(ngModel)]=\\\"data.medicalProviderProxyDTO.AddressCity\\\" maxLength=\\\"255\\\"\\r\\n                secureComponent required [autocomplete]=\\\"false\\\" [disabled]=\\\"isRequirementSatisfied\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"Country\\\" i18n-label=\\\"@@policy.requirement.provider.physiciancountry\\\" [control]=\\\"country\\\">\\r\\n            <lf-select #country name=\\\"country\\\" [items]=\\\"listData.country | listItems:'label':'value' | emptyItem\\\"\\r\\n                [(ngModel)]=\\\"data.medicalProviderProxyDTO.CountryID\\\" (change)=\\\"onCountryChange()\\\" style=\\\"width:150px\\\"\\r\\n                secureComponent required [disabled]=\\\"isRequirementSatisfied\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"State\\\" i18n-label=\\\"@@policy.requirement.provider.physicianstate\\\" [control]=\\\"state\\\">\\r\\n            <lf-select #state name=\\\"state\\\" \\r\\n                [items]=\\\"listData | stateListPicker: data.medicalProviderProxyDTO.CountryID | listItems:'label':'externalCode'  | emptyItem | sortList\\\"\\r\\n                [(ngModel)]=\\\"data.medicalProviderProxyDTO.AddressState\\\" style=\\\"width:150px\\\" secureComponent required\\r\\n                [disabled]=\\\"isRequirementSatisfied\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"Postal Code\\\" i18n-label=\\\"@@policy.requirement.provider.physicianpostalcode\\\" [control]=\\\"postalCode\\\">\\r\\n            <lf-inputzipcode #postalCode name=\\\"postalCode\\\" [zipCodeType]=\\\"data.medicalProviderProxyDTO.CountryID | getZipCodeType\\\"\\r\\n                [(ngModel)]=\\\"data.medicalProviderProxyDTO.Zip\\\" secureComponent [autocomplete]=\\\"false\\\" [disabled]=\\\"isRequirementSatisfied\\\"></lf-inputzipcode>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"Phone Number\\\" i18n-label=\\\"@@policy.requirement.provider.physicianworkphone\\\" [control]=\\\"phoneNumber\\\">\\r\\n            <ls-inputphone #phoneNumber name=\\\"phoneNumber\\\" [(ngModel)]=\\\"data.medicalProviderProxyDTO.PhoneDTO\\\"\\r\\n                secureComponent [autocomplete]=\\\"false\\\" [disabled]=\\\"isRequirementSatisfied\\\"></ls-inputphone>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"Provider ID\\\" i18n-label=\\\"@@policy.requirement.provider.providerid\\\" [control]=\\\"providerID\\\">\\r\\n            <lf-inputtext #providerID name=\\\"providerID\\\" [(ngModel)]=\\\"data.medicalProviderProxyDTO.GovtID\\\" maxLength=\\\"50\\\"\\r\\n                restrictDecimals=\\\"true\\\" secureComponent [disabled]=\\\"isRequirementSatisfied\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-3\\\">\\r\\n        <lf-form-input label=\\\"Patient ID\\\" i18n-label=\\\"@@policy.requirement.provider.patientid\\\" [control]=\\\"patientID\\\">\\r\\n            <lf-inputtext restrictDecimals=\\\"true\\\" #patientID name=\\\"patientID\\\" [(ngModel)]=\\\"data.medicalProviderProxyDTO.PatientID\\\"\\r\\n                maxLength=\\\"1024\\\" secureComponent [disabled]=\\\"isRequirementSatisfied\\\"></lf-inputtext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { SecondaryTabHostViewModel } from 'life-core/component/layout/tabview';\r\nimport { DialogButton, DialogButtonType, ModalDialog, DialogSize } from 'life-core/component/dialog';\r\nimport { ListItem } from 'life-core/model';\r\nimport { ResolvedDataNames, ValidationRenderType } from 'life-core/view-model';\r\nimport { MessagingService, IMessagingService } from 'life-core/messaging';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { NameFormatter } from 'life-core/util/formatter/name.formatter';\r\nimport { NamePattern } from 'life-core/util/formatter/name-pattern';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport {\r\n    PolicyDTO,\r\n    AddressDTO,\r\n    InsuredDTO,\r\n    PhoneDTO,\r\n    MedicalProviderProxyDTO,\r\n    PartyRelationDTO,\r\n    AddressTypes,\r\n    PhoneTypes,\r\n    RequirementDTO,\r\n    CountryFilterList\r\n} from 'ls-core/model';\r\nimport { AddressUtil, PhoneUtil } from 'ls-core/util';\r\n\r\nimport { RequirementDetailContext, RequirementDetailContextModel } from './requirement-detail-context';\r\nimport { MedicalProviderSearchComponent, MedicalSearchMetaDataResolver } from './medical-provider-search';\r\nimport { RequirementsTabChannels } from './requirements-tab.channels';\r\nimport { RequirementStatuses, PersonIdToPolicyPersonIdMapper } from 'business/policy/shared';\r\nimport { RequirementListDataResolver } from '../requirement-list-data.resolver';\r\n\r\n@Component({\r\n    selector: 'requirement-detail-providers-info',\r\n    templateUrl: './requirement-detail-providers-info.component.html',\r\n    styles: [\r\n        `\r\n            .pt-24 {\r\n                padding-top: 24px;\r\n            }\r\n        `\r\n    ],\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class RequirementDetailProvidersInfo extends SecondaryTabHostViewModel<RequirementDTO> {\r\n    public physicianList: Array<ListItem>;\r\n\r\n    public selectedPhysician: string;\r\n\r\n    public partyRelation: PartyRelationDTO;\r\n\r\n    public medicalProvider: MedicalProviderProxyDTO;\r\n\r\n    public providerDetails: any;\r\n\r\n    public hospitalName: string;\r\n\r\n    public patientId: string;\r\n\r\n    public isHospitalFieldRequired: boolean;\r\n\r\n    public isRequirementSatisfied: boolean;\r\n\r\n    private _messagingService: IMessagingService;\r\n\r\n    private _modalDialog: ModalDialog;\r\n\r\n    private _policy: PolicyDTO;\r\n\r\n    private _currentInsured: InsuredDTO;\r\n\r\n    private _nameFormatter: NameFormatter;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        messagingService: MessagingService,\r\n        requirementDetailContext: RequirementDetailContext,\r\n        modalDialog: ModalDialog,\r\n        nameFormatter: NameFormatter,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this._policy = p;\r\n        });\r\n        this.i18n = i18n;\r\n        this._messagingService = messagingService;\r\n        this.medicalProvider = new MedicalProviderProxyDTO();\r\n        this.partyRelation = new PartyRelationDTO();\r\n        this._modalDialog = modalDialog;\r\n        this._nameFormatter = nameFormatter;\r\n        this.subscriptionTracker.track(\r\n            requirementDetailContext.contextObservable.subscribe(context => {\r\n                this.setContext(context);\r\n            })\r\n        );\r\n        this.updateHospitalFieldRequired();\r\n    }\r\n\r\n    public onPhysicianChange(selectedPhysician: any): void {\r\n        if (selectedPhysician && selectedPhysician.value) {\r\n            this.partyRelation = this._currentInsured.Relations_LazyLoad.find(\r\n                relation => relation.PersonId.toString() === selectedPhysician.value\r\n            );\r\n            this.setMedicalProviderData();\r\n            this.updateHospitalFieldRequired();\r\n        } else {\r\n            this.setInitialMedicalProviderProxyDTO();\r\n            this.updateHospitalFieldRequired();\r\n        }\r\n    }\r\n\r\n    public onCountryChange(): void {\r\n        this.resetZipCode();\r\n    }\r\n\r\n    public updateHospitalFieldRequired(): void {\r\n        this.isHospitalFieldRequired = this.data.medicalProviderProxyDTO.Company ? true : false;\r\n    }\r\n\r\n    public updateNameFieldsRequired(): void {\r\n        this.isHospitalFieldRequired =\r\n            this.data.medicalProviderProxyDTO.FirstName || this.data.medicalProviderProxyDTO.LastName ? false : true;\r\n    }\r\n\r\n    public onProviderSearchButtonClick(): void {\r\n        this.openProviderSearchDialog();\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        super.ngAfterViewInit();\r\n        this.registerTabChangeHandler();\r\n    }\r\n\r\n    public registerTabChangeHandler(): void {\r\n        this._messagingService.subscribeExclusively(RequirementsTabChannels.ValidateProviderInfo, showError =>\r\n            this.triggerViewValidation(showError)\r\n        );\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.getFilteredCountryList();\r\n        this.setPhysicianListSelection();\r\n    }\r\n\r\n    protected loadPhysicianList(): void {\r\n        this._currentInsured = PersonIdToPolicyPersonIdMapper.getInsuredByPolicyPersonId(\r\n            this.data.PolicyPersonId.toString(),\r\n            this._policy.Insureds_LazyLoad\r\n        );\r\n        const relation: Array<any> = this._currentInsured.Relations_LazyLoad;\r\n        let physicianName: string;\r\n        this.physicianList = [];\r\n        relation.forEach(physician => {\r\n            physicianName = this._nameFormatter.format(\r\n                NamePattern.LastAndFirstName,\r\n                physician.FirstName,\r\n                physician.LastName\r\n            );\r\n\r\n            this.physicianList.push(\r\n                new ListItem(physicianName, physician.PersonId ? physician.PersonId.toString() : '')\r\n            );\r\n        });\r\n    }\r\n\r\n    private resetZipCode(): void {\r\n        this.data.medicalProviderProxyDTO.Zip = '';\r\n    }\r\n\r\n    private getAddressDetails(): AddressDTO {\r\n        AddressUtil.addAddressIfNotFound(this.partyRelation.Addresses_LazyLoad, AddressTypes.BUSINESS);\r\n        return AddressUtil.getAddress(this.partyRelation.Addresses_LazyLoad, AddressTypes.BUSINESS);\r\n    }\r\n\r\n    private getPhoneDetails(): PhoneDTO {\r\n        PhoneUtil.addPhoneIfNotFound(this.partyRelation.Phones_LazyLoad, PhoneTypes.BUSINESS);\r\n        return PhoneUtil.getPhone(this.partyRelation.Phones_LazyLoad, PhoneTypes.BUSINESS);\r\n    }\r\n\r\n    private setMedicalProviderData(): void {\r\n        const businessAddress = this.getAddressDetails();\r\n        const workPhone = this.getPhoneDetails();\r\n\r\n        // this.data.medicalProviderProxyDTO = new MedicalProviderProxyDTO();\r\n        this.data.medicalProviderProxyDTO.FirstName = this.partyRelation.FirstName;\r\n        this.data.medicalProviderProxyDTO.LastName = this.partyRelation.LastName;\r\n        this.data.medicalProviderProxyDTO.PhysicianID = this.partyRelation.PersonId.toString();\r\n        this.data.medicalProviderProxyDTO.ClientID = this.partyRelation.ClientId;\r\n        this.data.medicalProviderProxyDTO.AddressLine1 = businessAddress.AddressLine1;\r\n        this.data.medicalProviderProxyDTO.AddressLine2 = businessAddress.AddressLine2;\r\n        this.data.medicalProviderProxyDTO.AddressCity = businessAddress.City;\r\n        this.data.medicalProviderProxyDTO.AddressState = this.getAddressStateCode(businessAddress.CountryStateId);\r\n        this.data.medicalProviderProxyDTO.Zip = businessAddress.PostalCode;\r\n        this.data.medicalProviderProxyDTO.CountryID = businessAddress.CountryId;\r\n        this.data.medicalProviderProxyDTO.PhoneDTO = workPhone;\r\n    }\r\n\r\n    private setContext(context: RequirementDetailContextModel): void {\r\n        if (context) {\r\n            this.data = context.requirement;\r\n            this.loadPhysicianList();\r\n            if (!this.data.medicalProviderProxyDTO) {\r\n                this.setInitialMedicalProviderProxyDTO();\r\n                this.updateHospitalFieldRequired();\r\n            } else if (this.data.medicalProviderProxyDTO.FirstName || this.data.medicalProviderProxyDTO.Company) {\r\n                this.data.medicalProviderProxyDTO.AddressState = this.getAddressStateCode(\r\n                    this.data.medicalProviderProxyDTO.AddressState\r\n                );\r\n                this.setPhysicianListSelection();\r\n                this.updateHospitalFieldRequired();\r\n            }\r\n            this.setIsRequirementSatisfied();\r\n        }\r\n    }\r\n\r\n    private getAddressStateCode(addressState: string): string {\r\n        return addressState\r\n            ? addressState.slice(0, 3) === 'USA' || addressState.slice(0, 3) === 'CAN'\r\n                ? addressState.slice(3)\r\n                : addressState\r\n            : null;\r\n    }\r\n\r\n    private setInitialMedicalProviderProxyDTO(): void {\r\n        this.data.medicalProviderProxyDTO = new MedicalProviderProxyDTO();\r\n        this.data.medicalProviderProxyDTO.PhoneDTO = new PhoneDTO();\r\n    }\r\n\r\n    private getFilteredCountryList(): void {\r\n        this.listData.country = this.listData.country.filter(country => CountryFilterList.indexOf(country.value) != -1);\r\n    }\r\n\r\n    private openProviderSearchDialog(): void {\r\n        this._modalDialog\r\n            .open({\r\n                view: MedicalProviderSearchComponent,\r\n                resolve: [\r\n                    { resolveName: ResolvedDataNames.metaData, resolverClass: MedicalSearchMetaDataResolver },\r\n                    { resolveName: ResolvedDataNames.listData, resolverClass: RequirementListDataResolver }\r\n                ],\r\n                title: this.i18n({ value: 'Medical Provider Search', id: 'policy.requirement.providersearch' }),\r\n                buttons: [\r\n                    new DialogButton({ type: DialogButtonType.SELECT }),\r\n                    new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\r\n                ],\r\n                size: DialogSize.large\r\n            })\r\n            .then(dialogRef => {\r\n                dialogRef.result.then(result => {\r\n                    if (result.returnValue) {\r\n                        this.setSelectedMedicalProvider(result.returnValue.selectedMedicalProvider);\r\n                    }\r\n                });\r\n            });\r\n    }\r\n\r\n    private setSelectedMedicalProvider(provider: MedicalProviderProxyDTO): void {\r\n        this.data.medicalProviderProxyDTO = provider;\r\n        this.data.medicalProviderProxyDTO.AddressState = this.getAddressStateCode(provider.AddressState);\r\n        this.setPhysicianListSelection();\r\n    }\r\n\r\n    private setPhysicianListSelection(): void {\r\n        if (this.data.medicalProviderProxyDTO) {\r\n            const selectedPhysician = this.physicianList.find(\r\n                physician => physician.value == this.data.medicalProviderProxyDTO.PhysicianID\r\n            );\r\n            this.selectedPhysician = selectedPhysician ? selectedPhysician.value : '';\r\n        }\r\n    }\r\n\r\n    private triggerViewValidation(showError: boolean): void {\r\n        // without delay/setTimeout validation wont kick in\r\n        setTimeout(() => {\r\n            this.validate(showError ? ValidationRenderType.ifNeeded : ValidationRenderType.never);\r\n        });\r\n    }\r\n\r\n    private setIsRequirementSatisfied(): void {\r\n        this.isRequirementSatisfied =\r\n            this.data.ClosedDisposition && this.data.ClosedDisposition.toUpperCase() === RequirementStatuses.SATISFIED;\r\n    }\r\n}\r\n","export const RequirementsTabChannels = {\r\n    NavigateToProviderInfoTab: 'navigate-to-provider-information-tab',\r\n    ValidateProviderInfo: 'validate-provider-information'\r\n};\r\n","module.exports = \"<lf-routedTabView id=\\\"tabViewRequirement\\\" tabViewType=\\\"tertiary\\\"\\r\\n\\t\\t\\t\\t\\t[tabs]=\\\"tabsData$\\\" [initialSelectedIndex]=\\\"initialSelectedIndex$\\\"\\r\\n\\t\\t\\t\\t\\tcontrolClose=\\\"true\\\" (onClose)=\\\"onTabClose($event)\\\" (onChange)=\\\"onTabSelectionChange($event)\\\">\\r\\n\\r\\n\\t<router-outlet></router-outlet>\\r\\n\\r\\n</lf-routedTabView>\\r\\n\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { TabDescriptor, SecondaryTabViewHostViewModel } from 'life-core/component/layout/tabview';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { MessagingService, IMessagingService } from 'life-core/messaging';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { PolicyDTO, RequirementDTO } from 'ls-core/model';\r\nimport { PrivilegeType, PrivilegeObjectType, SubsystemType } from 'ls-core/authorization';\r\n\r\nimport { LsTabDescriptorFactory, SecondaryTabType } from 'ui/tabview';\r\n\r\nimport { RequirementDetailContext, RequirementDetailContextModel } from '../requirement-detail-context';\r\nimport { RequirementsTabChannels } from '../requirements-tab.channels';\r\n\r\nexport const APSRequirementCodes = ['APS', 'APSTWO'];\r\n\r\n@Component({\r\n    selector: 'requirement-detail',\r\n    templateUrl: './tab-view-requirement-detail.component.html',\r\n    providers: [RequirementDetailContext, PolicySubscriber]\r\n})\r\nexport class TabViewRequirementDetailComponent extends SecondaryTabViewHostViewModel implements ICompose {\r\n    protected policy: PolicyDTO;\r\n    private _requirementDetailContext: RequirementDetailContext;\r\n    private _requirement: RequirementDTO;\r\n    private _tabUpdatesDone: boolean;\r\n    private _messagingService: IMessagingService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        messagingService: MessagingService,\r\n        requirementDetailContext: RequirementDetailContext\r\n    ) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.policy = p;\r\n        });\r\n        this._messagingService = messagingService;\r\n        this._requirementDetailContext = requirementDetailContext;\r\n        this.registerTabChangeHandler();\r\n    }\r\n\r\n    public registerTabChangeHandler(): void {\r\n        this.subscriptionTracker.track(\r\n            this._messagingService.subscribeNewMessageOnly(\r\n                RequirementsTabChannels.NavigateToProviderInfoTab,\r\n                showError => this.setProvideInfoTab(showError)\r\n            )\r\n        );\r\n    }\r\n\r\n    protected get tabViewId(): string {\r\n        return `requirement-${this.policy.PolicyId}`;\r\n    }\r\n\r\n    public setModel(model: RequirementDTO): void {\r\n        this._requirementDetailContext.updateContext(new RequirementDetailContextModel(model));\r\n        this._requirement = model;\r\n        if (this.tabViewManager) {\r\n            this.updateTabsEnabled();\r\n        }\r\n    }\r\n\r\n    protected setupData(): void {\r\n        if (!this._tabUpdatesDone) {\r\n            this.updateTabsEnabled();\r\n        }\r\n    }\r\n\r\n    protected updateStaticTabs(tabDescriptors: TabDescriptor[]): void {\r\n        this.setTabsEnabled(new RequirementsTabs(...tabDescriptors));\r\n    }\r\n\r\n    protected getStaticTabs(): TabDescriptor[] {\r\n        const tabs = this.getRequirementTabs();\r\n        tabs.requirementBasicInfo.selected = true;\r\n        const tabsArray = tabs.toArray();\r\n        this.setupTabViewAuthorization(tabsArray);\r\n        return tabsArray;\r\n    }\r\n\r\n    protected setupTabViewAuthorization(tabs: Array<TabDescriptor>): void {\r\n        const tabAuthorizationLevel = this.authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.REQUIREMENT]\r\n        );\r\n        tabs.forEach(tab => (tab.authorizationLevel = tabAuthorizationLevel));\r\n    }\r\n\r\n    protected updateTabsEnabled(): void {\r\n        const tabs = this.getRequirementTabs();\r\n        this.setTabsEnabled(tabs);\r\n        this.tabViewManager.updateTabs(tabs.toArray());\r\n        this._tabUpdatesDone = true;\r\n    }\r\n\r\n    protected setTabsEnabled(tabs: RequirementsTabs): void {\r\n        tabs.requirementProviders.disabled = !this.tabProvidersInfoEnabled(this._requirement);\r\n        if (this.needToSetBasicInfoTab(tabs)) {\r\n            tabs.requirementBasicInfo.selected = true;\r\n            tabs.requirementProviders.selected = false;\r\n        }\r\n    }\r\n\r\n    private needToSetBasicInfoTab(tabs: RequirementsTabs): boolean {\r\n        // !this._requirement.requirementType - checks for newly created requirement\r\n        return tabs.requirementProviders.disabled || !this._requirement.requirementType;\r\n    }\r\n\r\n    private getRequirementTabs(): RequirementsTabs {\r\n        const policyId = this.policy.PolicyId as number;\r\n        const tabDescriptorFactory = this.tabDescriptorFactory as LsTabDescriptorFactory;\r\n        const tabs = new RequirementsTabs(\r\n            tabDescriptorFactory.createSecondaryTabDescriptorRequirementBasicInfo(policyId),\r\n            tabDescriptorFactory.createSecondaryTabDescriptorRequirementProvidersInfo(policyId)\r\n        );\r\n        return tabs;\r\n    }\r\n\r\n    private tabProvidersInfoEnabled(requirement: RequirementDTO): boolean {\r\n        return (\r\n            APSRequirementCodes.find(requirementCode => requirement.RequirementCode === requirementCode) !== undefined\r\n        );\r\n    }\r\n\r\n    private setProvideInfoTab(showError: boolean): void {\r\n        if (!this.isProviderInfoTabActive()) {\r\n            this.setSelectedTabByName('tabRequirementProvidersInfo');\r\n            this._messagingService.publish(RequirementsTabChannels.ValidateProviderInfo, showError);\r\n        }\r\n    }\r\n\r\n    private isProviderInfoTabActive(): boolean {\r\n        return this.getSelectedTab() && this.getSelectedTab().tabType === SecondaryTabType.RequirementProvidersInfo;\r\n    }\r\n}\r\n\r\nclass RequirementsTabs {\r\n    public requirementBasicInfo: TabDescriptor;\r\n    public requirementProviders: TabDescriptor;\r\n\r\n    constructor(...tabs: TabDescriptor[]) {\r\n        this.requirementBasicInfo = tabs[0];\r\n        this.requirementProviders = tabs[1];\r\n    }\r\n\r\n    public toArray(): TabDescriptor[] {\r\n        return [this.requirementBasicInfo, this.requirementProviders];\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\nimport { MetadataItem } from 'ls-core/model';\r\nimport { MetadataUtil } from 'ls-core/util';\r\nimport { DateTimeFormatWidth } from 'life-core/util';\r\n\r\n@Injectable()\r\nexport class EvidenceStatusListGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Date and Time', id: 'policy.requirement.history.gridheader.dateTime' }),\r\n            field: EvidenceStatusListFields.StatusDate,\r\n            width: 40,\r\n            valueFormatter: param =>\r\n                this._lsCellFormatters.dateCellFormatter(param, DateTimeFormatWidth.ShortDateMediumTime),\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Source', id: 'policy.requirement.history.gridheader.source' }),\r\n            field: EvidenceStatusListFields.AddedBy,\r\n            width: 40,\r\n            filter: 'text',\r\n            valueFormatter: this.getUserName\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Vendor Status Code',\r\n                id: 'policy.requirement.history.gridheader.statusCode'\r\n            }),\r\n            field: EvidenceStatusListFields.StatusId,\r\n            width: 30\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Follow-up Date',\r\n                id: 'policy.requirement.history.gridheader.followupDate'\r\n            }),\r\n            field: EvidenceStatusListFields.FollowupDate,\r\n            width: 40,\r\n            valueFormatter: param =>\r\n                this._lsCellFormatters.dateCellFormatter(param, DateTimeFormatWidth.ShortDateMediumTime),\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Status Text', id: 'policy.requirement.history.gridheader.statusText' }),\r\n            field: EvidenceStatusListFields.MessageText,\r\n            width: 70,\r\n            // TODO: use after ag-grid v18 upgrade\r\n            autoHeight: true\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getUserName(params: any): string {\r\n        if (params.data.AddedBy) {\r\n            return MetadataUtil.getItemLabelByCode(params.context.ausUsers, params.data.AddedBy as string);\r\n        }\r\n        return '';\r\n    }\r\n}\r\n\r\nconst EvidenceStatusListFields = {\r\n    StatusDate: 'StatusDate',\r\n    AddedBy: 'AddedBy',\r\n    StatusId: 'StatusId',\r\n    FollowupDate: 'FollowupDate',\r\n    MessageText: 'MessageText'\r\n};\r\n","module.exports = \"<div class=\\\"lf-page-subheader\\\">{{title}}</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\">\\r\\n    </data-grid>\\r\\n</div>\\r\\n<data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\"","import { Component, Injector, Input } from '@angular/core';\r\n\r\nimport { EvidenceStatusDTO, MetadataItem } from 'ls-core/model';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared/grid/base-policy-grid.vm.ts';\r\nimport { IGridColumnsBuilder, DataGridRowNumber, DataGridColumns } from 'life-core/component/grid';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { EvidenceStatusListGridColumnsBuilder } from './evidence-status-list-grid-columns.builder';\r\n\r\n@Component({\r\n    selector: 'evidence-status-list',\r\n    templateUrl: './evidence-status-list.component.html',\r\n    providers: [PolicySubscriber, EvidenceStatusListGridColumnsBuilder]\r\n})\r\nexport class EvidenceStatusListComponent extends BasePolicyGridViewModel<EvidenceStatusDTO> {\r\n    @Input() public ausUsers: MetadataItem[];\r\n\r\n    private _evidenceStatusData: EvidenceStatusDTO[];\r\n\r\n    private _gridColumnsBuilder: EvidenceStatusListGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnsBuilder: EvidenceStatusListGridColumnsBuilder) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n    }\r\n\r\n    public getGridColumns(): DataGridColumns {\r\n        return this.getGridColumnsBuilder().build();\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    public get evidenceStatusListData(): EvidenceStatusDTO[] {\r\n        return this._evidenceStatusData;\r\n    }\r\n\r\n    @Input()\r\n    public set evidenceStatusListData(value: EvidenceStatusDTO[]) {\r\n        this._evidenceStatusData = value;\r\n        this.refreshGrid();\r\n    }\r\n\r\n    protected loadItems(): Array<EvidenceStatusDTO> {\r\n        return this.evidenceStatusListData;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return 'Requirement History';\r\n    }\r\n\r\n    protected getRowNodeId(data: EvidenceStatusDTO): any {\r\n        return data.RequirementInformationId;\r\n    }\r\n\r\n    protected getGridMinRows(): number {\r\n        return DataGridRowNumber.Medium;\r\n    }\r\n}\r\n","﻿export * from './evidence-status-list.component';\r\n","﻿export * from './requirement-history.component';\r\nexport * from './requirement-history-meta-data.resolver';","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class RequirementHistoryMetaDataResolver extends BaseMetaDataResolver {\r\n  protected getMetadataTypes(): string[] {\r\n    return ['aus_users'];\r\n  }\r\n}\r\n","module.exports = \"<evidence-status-list [evidenceStatusListData]=\\\"evidenceStatusListData\\\" [ausUsers]=\\\"ausUsers\\\"></evidence-status-list>\"","import { Component, Injector, Injectable } from '@angular/core';\r\n\r\nimport { ViewModel, ParentChildRegistry } from 'life-core/view-model';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { EvidenceStatusDTO, MetadataItem } from 'ls-core/model';\r\nimport { IDialogViewModel, DialogViewModelResult } from 'life-core/component/dialog';\r\n\r\n@Component({\r\n    selector: 'requirement-history',\r\n    templateUrl: './requirement-history.component.html',\r\n    providers: [ParentChildRegistry]\r\n})\r\n@Injectable()\r\nexport class RequirementHistoryComponent extends ViewModel implements ICompose, IDialogViewModel {\r\n    public ausUsers: MetadataItem[];\r\n\r\n    public evidenceStatusListData: EvidenceStatusDTO[];\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        this.ausUsers = model.resolvedData.metaData['aus_users'];\r\n        this.evidenceStatusListData = model.parameterData || [];\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        return Promise.resolve(null);\r\n    }\r\n}\r\n","﻿export * from './requirement.component';\r\nexport * from './detail/tab/tab-view-requirement-detail.component';\r\nexport * from './requirement-data.resolver';\r\nexport * from './requirement-meta-data.resolver';\r\nexport * from './requirement-list-data.resolver';\r\nexport * from './requirement-deactivate.guard';\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { IGetRowsParams } from 'ag-grid-community';\r\n\r\nimport { IInfiniteGridDatasource } from 'life-core/component/grid';\r\n\r\nimport {\r\n    DataServiceParams,\r\n    UIServiceNames,\r\n    UIServiceMethods,\r\n    CompositeFilter,\r\n    DataService,\r\n    PagedDataRequest\r\n} from 'ls-core/service';\r\nimport { BaseGridDataSource } from 'business/shared/grid/base-grid-data-source';\r\n\r\nimport { RequirementTypes } from './../../requirement.type';\r\nimport { RequirementFilterModel } from './../requirement-filter.model';\r\n\r\n@Injectable()\r\nexport class RequirementMatchGridDataSource extends BaseGridDataSource implements IInfiniteGridDatasource {\r\n    private _requirementFilterModel: RequirementFilterModel;\r\n    private _requirementType: RequirementTypes;\r\n\r\n    constructor(injector: Injector, requirementTypes: RequirementTypes) {\r\n        super(injector);\r\n        this._requirementType = requirementTypes;\r\n    }\r\n\r\n    public updateFilter(filterModel: RequirementFilterModel): void {\r\n        this._requirementFilterModel = filterModel;\r\n        this.resetRowCount();\r\n    }\r\n\r\n    protected getRowsServiceParams(params: IGetRowsParams): DataServiceParams {\r\n        if (this.isMVRRequirementGrid()) {\r\n            return new DataServiceParams({\r\n                serviceInterface: UIServiceNames.MVR_MATCHINGREQUIREMENTS_LIST_DATA,\r\n                serviceMethod: UIServiceMethods.GET_DATA,\r\n                requestPayload: this.getMVRRowsPayLoad(params)\r\n            });\r\n        } else {\r\n            return new DataServiceParams({\r\n                serviceInterface: UIServiceNames.LAB_MATCHINGREQUIREMENTS_LIST_DATA,\r\n                serviceMethod: UIServiceMethods.GET_DATA,\r\n                requestPayload: this.getLabRowsPayLoad(params)\r\n            });\r\n        }\r\n    }\r\n\r\n    protected getRowCountServiceParams(params: IGetRowsParams): DataServiceParams {\r\n        if (this.isMVRRequirementGrid()) {\r\n            return new DataServiceParams({\r\n                serviceInterface: UIServiceNames.MVR_MATCHINGREQUIREMENTS_LIST_DATA,\r\n                serviceMethod: UIServiceMethods.GET_COUNT,\r\n                requestPayload: this.getMvrRowCountPayLoad(params)\r\n            });\r\n        } else {\r\n            return new DataServiceParams({\r\n                serviceInterface: UIServiceNames.LAB_MATCHINGREQUIREMENTS_LIST_DATA,\r\n                serviceMethod: UIServiceMethods.GET_COUNT,\r\n                requestPayload: this.getLabRowCountPayLoad(params)\r\n            });\r\n        }\r\n    }\r\n\r\n    private isMVRRequirementGrid(): boolean {\r\n        return this._requirementFilterModel.requirementType === this._requirementType.mvr;\r\n    }\r\n\r\n    private getMVRRowsPayLoad(params: IGetRowsParams): MVRPagedDataRequest {\r\n        const filterCriterion = this.getFilterCriterion(params.filterModel);\r\n        const numOfItems = params.endRow - params.startRow;\r\n        const request = this.mvrBuildRequestPayload(filterCriterion);\r\n        request.startIndex = params.startRow;\r\n        request.numItemsToFetch = numOfItems;\r\n        request.viewType = this._requirementFilterModel.selectedView;\r\n        request.sortFields = this.getSortFieldsForSortModel(params.sortModel);\r\n        return request;\r\n    }\r\n\r\n    private getLabRowsPayLoad(params: IGetRowsParams): LabPagedDataRequest {\r\n        const filterCriterion = this.getFilterCriterion(params.filterModel);\r\n        const numOfItems = params.endRow - params.startRow;\r\n        const request = this.labBuildRequestPayload(filterCriterion);\r\n        request.startIndex = params.startRow;\r\n        request.numItemsToFetch = numOfItems;\r\n        request.viewType = this._requirementFilterModel.selectedView;\r\n        request.sortFields = this.getSortFieldsForSortModel(params.sortModel);\r\n        return request;\r\n    }\r\n\r\n    private mvrBuildRequestPayload(filterCriterion: CompositeFilter): MVRPagedDataRequest {\r\n        const request = new MVRPagedDataRequest({\r\n            filters: filterCriterion ? filterCriterion.filters : []\r\n        });\r\n        return request;\r\n    }\r\n\r\n    private labBuildRequestPayload(filterCriterion: CompositeFilter): LabPagedDataRequest {\r\n        const request = new LabPagedDataRequest({\r\n            filters: filterCriterion ? filterCriterion.filters : []\r\n        });\r\n        return request;\r\n    }\r\n\r\n    private getMvrRowCountPayLoad(params: IGetRowsParams): MVRPagedDataRequest {\r\n        const filterCriterion = this.getFilterCriterion(params.filterModel);\r\n        const request = this.mvrBuildRequestPayload(filterCriterion);\r\n        request.viewType = this._requirementFilterModel.selectedView;\r\n        return request;\r\n    }\r\n\r\n    private getLabRowCountPayLoad(params: IGetRowsParams): LabPagedDataRequest {\r\n        const filterCriterion = this.getFilterCriterion(params.filterModel);\r\n        const request = this.labBuildRequestPayload(filterCriterion);\r\n        request.viewType = this._requirementFilterModel.selectedView;\r\n        return request;\r\n    }\r\n}\r\n\r\nexport class MVRPagedDataRequest extends PagedDataRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.MVRPagedDataRequest, LifeSuite.UIServiceDTO';\r\n    public viewType: string;\r\n}\r\n\r\nexport class LabPagedDataRequest extends PagedDataRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.LabPagedDataRequest, LifeSuite.UIServiceDTO';\r\n    public viewType: string;\r\n}\r\n","export * from './requirement-match-grid-columns.builder';\r\nexport * from './datasource/requirement-match-grid-datasource';\r\nexport * from './requirement-match-unmatch.type';\r\nexport * from './requirement-match.component';\r\n","export class RequirementFilterModel {\r\n    public selectedView: string;\r\n    public requirementType: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport {\r\n    BaseGridColumnsBuilder,\r\n    DataGridColumns,\r\n    GridFilterFrameworkComponentType,\r\n    TextFilterOptionExt\r\n} from 'life-core/component/grid';\r\nimport { LsCellFormatters } from 'ls-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { RequirementTypes } from './../requirement.type';\r\n\r\n@Injectable()\r\nexport class RequirementMatchGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _requirementType: RequirementTypes;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, i18n: I18n, requirementTypes: RequirementTypes) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this.i18n = i18n;\r\n        this._requirementType = requirementTypes;\r\n    }\r\n\r\n    public build(requirementType: string): DataGridColumns {\r\n        if (this.isMVRRequirementGrid(requirementType)) {\r\n            this.getMVRRequirementMatchGridColumns();\r\n        } else {\r\n            this.getLabRequirementMatchGridColumns();\r\n        }\r\n        return this.columns;\r\n    }\r\n\r\n    private isMVRRequirementGrid(requirementType: string): boolean {\r\n        return requirementType == this._requirementType.mvr;\r\n    }\r\n\r\n    private getMVRRequirementMatchGridColumns(): void {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Last Name', id: 'policy.matching.lab.lastname' }),\r\n            field: RequirementMatchGridFields.LastName,\r\n            filter: GridFilterFrameworkComponentType.TextFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'First Name', id: 'policy.matching.lab.firstname' }),\r\n            field: RequirementMatchGridFields.FirstName,\r\n            filter: GridFilterFrameworkComponentType.TextFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'License Number', id: 'policy.matching.mvr.licensenumber' }),\r\n            field: RequirementMatchGridFields.LicenseNumber,\r\n            filter: GridFilterFrameworkComponentType.TextFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'State', id: 'policy.matching.mvr.state' }),\r\n            field: RequirementMatchGridFields.State,\r\n            filter: GridFilterFrameworkComponentType.TextFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Report Status', id: 'policy.matching.mvr.reportstatus' }),\r\n            field: RequirementMatchGridFields.ReportStatus,\r\n            filter: GridFilterFrameworkComponentType.TextFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Tax ID', id: 'policy.matching.mvr.taxid' }),\r\n            field: RequirementMatchGridFields.TaxID,\r\n            valueFormatter: this._lsCellFormatters.taxIdFormatter,\r\n            filter: GridFilterFrameworkComponentType.TextFilter,\r\n            filterParams: { filterOptionExt: new TextFilterOptionExt({ regExp: /[0-9]/ }) }\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Report Date', id: 'policy.matching.mvr.reportdate' }),\r\n            field: RequirementMatchGridFields.ReportDate,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            filter: GridFilterFrameworkComponentType.DateFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Birth Date', id: 'policy.matching.lab.birthdate' }),\r\n            field: RequirementMatchGridFields.BirthDate,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            filter: GridFilterFrameworkComponentType.DateFilter\r\n        });\r\n    }\r\n\r\n    private getLabRequirementMatchGridColumns(): void {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Last Name', id: 'policy.matching.lab.lastname' }),\r\n            field: RequirementMatchGridFields.LastName,\r\n            filter: GridFilterFrameworkComponentType.TextFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'First Name', id: 'policy.matching.lab.firstname' }),\r\n            field: RequirementMatchGridFields.FirstName,\r\n            filter: GridFilterFrameworkComponentType.TextFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Middle Name', id: 'policy.matching.lab.middlename' }),\r\n            field: RequirementMatchGridFields.MiddleName,\r\n            filter: GridFilterFrameworkComponentType.TextFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Lab ID', id: 'policy.matching.lab.labid' }),\r\n            field: RequirementMatchGridFields.LabID,\r\n            filter: GridFilterFrameworkComponentType.TextFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Drawn Date', id: 'policy.matching.lab.drawndate' }),\r\n            field: RequirementMatchGridFields.DrawnDate,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            filter: GridFilterFrameworkComponentType.DateFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Tax ID', id: 'policy.matching.lab.taxid' }),\r\n            field: RequirementMatchGridFields.SSN,\r\n            valueFormatter: this._lsCellFormatters.taxIdFormatter,\r\n            filter: GridFilterFrameworkComponentType.TextFilter,\r\n            filterParams: { filterOptionExt: new TextFilterOptionExt({ regExp: /[0-9]/ }) }\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Gender', id: 'policy.matching.lab.sex' }),\r\n            field: RequirementMatchGridFields.Gender,\r\n            filter: GridFilterFrameworkComponentType.TextFilter\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Birth Date', id: 'policy.matching.lab.birthdate' }),\r\n            field: RequirementMatchGridFields.BirthDate,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            filter: GridFilterFrameworkComponentType.DateFilter\r\n        });\r\n    }\r\n}\r\n\r\nconst RequirementMatchGridFields = {\r\n    LastName: 'LastName',\r\n    FirstName: 'FirstName',\r\n    LicenseNumber: 'LicenseNumber',\r\n    State: 'State',\r\n    ReportStatus: 'ReportStatus',\r\n    TaxID: 'SocSecNo',\r\n    ReportDate: 'ReportDate',\r\n    BirthDate: 'BirthDate',\r\n    MiddleName: 'MiddleName',\r\n    LabID: 'LabIdNumber',\r\n    DrawnDate: 'DrawnDate',\r\n    SSN: 'Ssn',\r\n    Gender: 'Sex'\r\n};\r\n","export const RequirementMatchUnmatchChannels = {\r\n    RequirementMatchUnmatch: 'requirement-match-unmatch'\r\n}\r\n\r\nexport const MatchUnmatchType = {\r\n    Match: 'match',\r\n    Unmatch: 'unmatch'\r\n}","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"pb-3\\\">\\r\\n            <lf-form-input [control]=\\\"viewList\\\" label=\\\"View\\\" i18n-label=\\\"@@policy.matching.view\\\">\\r\\n                <lf-select #viewList name=\\\"viewList\\\" [(ngModel)]=\\\"filterModel.selectedView\\\" [items]=\\\"viewListOptions\\\"\\r\\n                    style=\\\"width:200px\\\" (change)=\\\"onViewChange()\\\" secureComponent></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <data-grid style=\\\"height: 450px;\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\"\\r\\n            (rowDoubleClicked)=\\\"onRowDoubleClicked($event)\\\" (filterChanged)=\\\"onFilterChange()\\\">\\r\\n        </data-grid>\\r\\n    </div>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</form>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { ParentChildRegistry } from 'life-core/view-model';\r\nimport { ListItem } from 'life-core/model';\r\nimport {\r\n    ICompose,\r\n    IDialogViewModel,\r\n    DialogViewModelResult,\r\n    DialogData,\r\n    DialogButtonType,\r\n    DialogButton,\r\n    DialogResult\r\n} from 'life-core/component';\r\nimport { DataGridColumns, BaseInfiniteGridViewModel } from 'life-core/component/grid';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { TabStateManager } from 'life-core/util';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { MVRProxy, RequirementDTO, PolicyDTO } from 'ls-core/model';\r\nimport { AppSession } from 'ls-core/session';\r\n\r\nimport { GridDataStateKeys } from 'business/shared/grid';\r\n\r\nimport { RequirementMatchGridColumnsBuilder } from './requirement-match-grid-columns.builder';\r\nimport { RequirementMatchGridDataSource } from './datasource/requirement-match-grid-datasource';\r\nimport { RequirementMatchUnmatchChannels, MatchUnmatchType } from './requirement-match-unmatch.type';\r\nimport { RequirementsAuthorizationProvider } from '../requirements-authorization.provider';\r\nimport { RequirementFilterModel } from './requirement-filter.model';\r\nimport { RequirementTypes } from '../requirement.type';\r\n\r\n@Component({\r\n    selector: 'requirement-match',\r\n    templateUrl: './requirement-match.component.html',\r\n    providers: [\r\n        ParentChildRegistry,\r\n        TabStateManager,\r\n        RequirementMatchGridDataSource,\r\n        RequirementMatchGridColumnsBuilder,\r\n        { provide: AuthorizationProvider, useClass: RequirementsAuthorizationProvider }\r\n    ]\r\n})\r\nexport class RequirementMatchComponent extends BaseInfiniteGridViewModel<RequirementDTO>\r\n    implements ICompose, IDialogViewModel {\r\n    public viewListOptions: Array<ListItem>;\r\n\r\n    protected i18n: I18n;\r\n\r\n    private _selectedEvidence: MVRProxy;\r\n    private _requirement: RequirementDTO;\r\n    private _policy: PolicyDTO;\r\n    private _requirementTypes: RequirementTypes;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        gridDataSource: RequirementMatchGridDataSource,\r\n        gridColumnsBuilder: RequirementMatchGridColumnsBuilder,\r\n        i18n: I18n,\r\n        requirementTypes: RequirementTypes,\r\n        appSession: AppSession\r\n    ) {\r\n        super(injector, gridDataSource, gridColumnsBuilder);\r\n        this.i18n = i18n;\r\n        this._policy = appSession.policyDTO;\r\n        this.filterModel = new RequirementFilterModel();\r\n        this._requirementTypes = requirementTypes;\r\n    }\r\n\r\n    public setModel(model: DialogData): void {\r\n        this._requirement = model.parameterData;\r\n    }\r\n\r\n    public getGridColumns(): DataGridColumns {\r\n        return this.getGridColumnsBuilder().build(this._requirement.requirementType);\r\n    }\r\n\r\n    public onViewChange(): void {\r\n        this.onFilterModelReceived();\r\n    }\r\n\r\n    public onRowClicked($event: any): void {\r\n        super.onRowClicked($event);\r\n        this._selectedEvidence = $event.node.data;\r\n    }\r\n\r\n    public onRowDoubleClicked($event: any): void {\r\n        this._selectedEvidence = $event.node.data;\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId === DialogButtonType.ACCEPT && this.isMatchSelected()) {\r\n            this.changeManager.setIsDirty(true);\r\n            if (this.isMatchExpired()) {\r\n                return this.handleExpiredRequirementMatch();\r\n            } else {\r\n                return this.saveMatchedEvidence();\r\n            }\r\n        } else if (buttonId === DialogButtonType.ACCEPT && !this.isMatchSelected()) {\r\n            this.showNoRowSelectedDialog(\r\n                this.i18n({ value: 'Please select a match.', id: 'component.requirementmatch.dialog.selectmatch' }),\r\n                this.i18n({ value: 'Error', id: 'component.requirementmatch.dialog.error' })\r\n            );\r\n            return Promise.resolve(new DialogViewModelResult(null, false, false));\r\n        }\r\n        return Promise.resolve(null);\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.initViewListOptions();\r\n        this.setDefaultView();\r\n        this.updateFilter();\r\n    }\r\n\r\n    protected updateFilter(filterModel?: RequirementFilterModel): void {\r\n        this.filterModel.requirementType = this._requirement.requirementType;\r\n        super.updateFilter(this.filterModel);\r\n    }\r\n\r\n    protected registerFilterChangeHandlers(): void {}\r\n\r\n    protected getGridStateKey(): string {\r\n        return GridDataStateKeys.REQUIREMENT_MATCH;\r\n    }\r\n\r\n    // no implementation needed\r\n    protected rowDataMatch(rowData1: RequirementDTO, rowData2: RequirementDTO): boolean {\r\n        return false;\r\n    }\r\n\r\n    // no implementation needed\r\n    protected openSelectedGridRow(): void {}\r\n\r\n    private initViewListOptions(): void {\r\n        // List options are being made in UI as the same thing is done in Flex\r\n        this.viewListOptions = [];\r\n        this.viewListOptions.push(new ListItem('All Records', 'All Records'));\r\n        this.viewListOptions.push(new ListItem('All Unexpired', 'All Unexpired'));\r\n        this.viewListOptions.push(new ListItem('Past 365 Days', 'Past 365 Days'));\r\n    }\r\n\r\n    private setDefaultView(): void {\r\n        this.filterModel.selectedView = 'All Unexpired';\r\n    }\r\n\r\n    private isMatchSelected(): boolean {\r\n        return this._selectedEvidence !== undefined;\r\n    }\r\n\r\n    private handleExpiredRequirementMatch(): Promise<DialogViewModelResult> {\r\n        return this.showMatchExpiredDialog().then(dialogRef => {\r\n            if (dialogRef.buttonId === DialogButtonType.OK) {\r\n                return this.saveMatchedEvidence();\r\n            } else {\r\n                return Promise.resolve(new DialogViewModelResult(null, false, false));\r\n            }\r\n        });\r\n    }\r\n\r\n    private saveMatchedEvidence(): Promise<DialogViewModelResult> {\r\n        this._requirement.RequirementInformationId = this._selectedEvidence.RequirementInformationId;\r\n        this.publishMatchSelection();\r\n        return Promise.resolve(new DialogViewModelResult(null, true, false));\r\n    }\r\n\r\n    private isMatchExpired(): boolean {\r\n        return new Date(this._selectedEvidence.ExpirationDate.datetime) <= new Date();\r\n    }\r\n\r\n    private showMatchExpiredDialog(): Promise<DialogResult> {\r\n        return this.confirmDialog.open({\r\n            message: this.i18n(\r\n                {\r\n                    value:\r\n                        'The selected {{requirementType}} has expired. Do you still wish to match it to this requirement?',\r\n                    id: 'component.requirementmatchexpired.dialog.error'\r\n                },\r\n                { requirementType: this._requirement.requirementType }\r\n            ),\r\n            title:\r\n                this._requirement.requirementType === 'MVR' ? this._requirementTypes.mvr : this._requirementTypes.lab,\r\n            buttons: [\r\n                new DialogButton({ type: DialogButtonType.OK }),\r\n                new DialogButton({ type: DialogButtonType.CANCEL })\r\n            ]\r\n        });\r\n    }\r\n\r\n    private publishMatchSelection(): void {\r\n        const requirement = this._policy.Requirements_LazyLoad.find(\r\n            requirements => requirements.RequirementCode === this._requirement.RequirementCode\r\n        );\r\n        requirement.RequirementInformationId = this._selectedEvidence.RequirementInformationId;\r\n\r\n        this.messagingService.publish(RequirementMatchUnmatchChannels.RequirementMatchUnmatch, {\r\n            requirement: requirement,\r\n            matchUnmatchType: MatchUnmatchType.Match\r\n        });\r\n    }\r\n}\r\n","export const RequirementStatuses = {\r\n    Canceled: 'C',\r\n    Deleted: 'D',\r\n    Hold: 'H',\r\n    Open: 'O',\r\n    Ordered: 'OR',\r\n    Received: 'R',\r\n    Satisfied: 'S',\r\n    Waived: 'W'\r\n};\r\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\n\r\n@Injectable()\r\nexport class RequirementDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getInsuredLazyLoadTree());\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Requirements, this.getRequirementLazyLoadTree());\r\n\r\n        return this.lazyDataLoader.batchLoad(request);\r\n    }\r\n\r\n    private getInsuredLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            insuredDTOLoadTree.AddChildren([\r\n                DataCollectionNames.Addresses,\r\n                DataCollectionNames.Phones,\r\n                DataCollectionNames.RelatedPolicies,\r\n                DataCollectionNames.Applications\r\n            ]);\r\n        }\r\n        const partyRelationsNode = insuredDTOLoadTree.AddChild(DataCollectionNames.Relations);\r\n        {\r\n            partyRelationsNode.AddChildren([DataCollectionNames.Addresses, DataCollectionNames.Phones]);\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n\r\n    private getRequirementLazyLoadTree(): NTree<string> {\r\n        const requirementDTOLoadTree = new NTree<string>(DataCollectionNames.Requirements);\r\n        {\r\n            requirementDTOLoadTree.AddChildren([DataCollectionNames.EvidenceStatuses]);\r\n        }\r\n\r\n        return requirementDTOLoadTree;\r\n    }\r\n}\r\n","import { RequirementsTabChannels } from './detail/requirements-tab.channels';\r\nimport { Injectable } from '@angular/core';\r\nimport { CanDeactivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\n\r\nimport { IViewModel } from 'life-core/view-model';\r\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\r\n\r\nimport { RequirementDTO, MedicalProviderProxyDTO } from 'ls-core/model';\r\nimport { APSRequirementCodes } from './detail/tab/tab-view-requirement-detail.component';\r\n\r\n/**\r\n * This deactivation guard validates provider information data.\r\n * Use this guard with requirement route\r\n * This guard stops user from navigating away when there is no provider information available for selected requirement\r\n */\r\n@Injectable()\r\nexport class RequirementDeactivateGuard implements CanDeactivate<IViewModel> {\r\n    private _messagingService: IMessagingService;\r\n\r\n    constructor(messagingService: MessagingService) {\r\n        this._messagingService = messagingService;\r\n    }\r\n\r\n    public canDeactivate(\r\n        target: IViewModel,\r\n        route: ActivatedRouteSnapshot,\r\n        state: RouterStateSnapshot\r\n    ): Promise<boolean> | boolean {\r\n        if (target.componentTreeDeactivating) {\r\n            return Promise.resolve(true);\r\n        }\r\n        const requirement = target['selectedItem'] as RequirementDTO;\r\n        return this.isProviderInfoValid(requirement, true);\r\n    }\r\n\r\n    public isProviderInfoValid(requirement: RequirementDTO, showError: boolean): boolean {\r\n        if (\r\n            requirement &&\r\n            this.needToValidateProviderInfo(requirement) &&\r\n            !this.isProviderInformationValid(requirement.medicalProviderProxyDTO)\r\n        ) {\r\n            this.navigateToProviderInfoTab(showError);\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private isProviderInformationValid(medicalProviderInfo: MedicalProviderProxyDTO): boolean {\r\n        if (\r\n            medicalProviderInfo &&\r\n            (medicalProviderInfo.Company || (medicalProviderInfo.FirstName && medicalProviderInfo.LastName)) &&\r\n            medicalProviderInfo.AddressCity &&\r\n            medicalProviderInfo.AddressState\r\n        ) {\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    // Checks whether requirement is of type APS\r\n    private needToValidateProviderInfo(requirement: RequirementDTO): boolean {\r\n        return APSRequirementCodes.indexOf(requirement.RequirementCode) != -1;\r\n    }\r\n\r\n    private navigateToProviderInfoTab(showError: boolean): void {\r\n        this._messagingService.publish(RequirementsTabChannels.NavigateToProviderInfoTab, showError);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { ListUtil } from 'life-core/util';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\nimport { ListDataUtil } from 'ls-core/service/list-data';\r\n\r\nimport { RequirementIconHelper } from './requirement-icon.helper';\r\nimport { CompareResult, compare } from 'life-core/util/lang';\r\nimport { RowNode } from 'ag-grid-community';\r\n\r\n@Injectable()\r\nexport class RequirementGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Alert', id: 'policy.requirement.gridheader.alert' }),\r\n            field: [RequirementGridFields.ClosedDisposition, RequirementGridFields.FollowupDate].toString(),\r\n            width: 50,\r\n            minWidth: 50,\r\n            cellRenderer: this.getAlertIcon,\r\n            comparator: this.compareAlertStatus\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Note', id: 'policy.requirement.gridheader.note' }),\r\n            field: RequirementGridFields.NoteId,\r\n            width: 50,\r\n            minWidth: 50,\r\n            cellRenderer: this.getNoteIcon\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Matched', id: 'policy.requirement.gridheader.matched' }),\r\n            field: RequirementGridFields.SupportsMatch,\r\n            width: 50,\r\n            minWidth: 50,\r\n            cellRenderer: this.getMatchUnmatchIcon\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Requirement', id: 'policy.requirement.gridheader.requirement' }),\r\n            field: RequirementGridFields.RequirementCode,\r\n            width: 200,\r\n            valueFormatter: function(params: any): string {\r\n                return ListDataUtil.getLabelFromListDataById(params.context.listData.Requirement, params.value);\r\n            }\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Applicant', id: 'policy.requirement.gridheader.applicant' }),\r\n            field: RequirementGridFields.PolicyPersonId,\r\n            width: 120,\r\n            valueFormatter: function(params: any): string {\r\n                return ListUtil.getLabelByValue(params.context.applicantListOptions, params.value);\r\n            }\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Status', id: 'policy.requirement.gridheader.status' }),\r\n            field: RequirementGridFields.ClosedDisposition,\r\n            width: 80,\r\n            valueFormatter: function(params: any): string {\r\n                return ListUtil.getLabelByValue(params.context.listData.RequirementStatus, ((params.value == null || params.value == '') ? \"O\" : params.value));\r\n            }\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Added', id: 'policy.requirement.gridheader.added' }),\r\n            field: RequirementGridFields.AddedDate,\r\n            width: 80,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Ordered', id: 'policy.requirement.gridheader.ordered' }),\r\n            field: RequirementGridFields.OrderedDate,\r\n            width: 80,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Received', id: 'policy.requirement.gridheader.received' }),\r\n            field: RequirementGridFields.ReceivedDate,\r\n            width: 80,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Final Disposition', id: 'policy.requirement.gridheader.finaldisposition' }),\r\n            field: RequirementGridFields.ClosedDate,\r\n            width: 80,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Follow Up Date', id: 'policy.requirement.gridheader.followupdate' }),\r\n            field: RequirementGridFields.FollowupDate,\r\n            width: 80,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Assigned To', id: 'policy.requirement.gridheader.assignedto' }),\r\n            field: RequirementGridFields.OrderedBy,\r\n            width: 100,\r\n            minWidth: 100,\r\n            valueFormatter: function(params: any): string {\r\n                let result: string;\r\n                let assignToId: any;\r\n                if (params.value == null || params.value == 'Home Office') return '';\r\n                switch (params.value.toUpperCase()) {\r\n                    case 'HO - UNDERWRITER':\r\n                        assignToId = params.context.policy.UnderwriterId;\r\n                        result = assignToId\r\n                            ? ListUtil.getLabelByValue(params.context.listData.underwriter, assignToId)\r\n                            : '';\r\n                        break;\r\n                    case 'TEAM':\r\n                        assignToId = params.context.policy.TeamId;\r\n                        result = assignToId ? ListUtil.getLabelByValue(params.context.listData.team, assignToId) : '';\r\n                        break;\r\n                    case 'HO - CASE MANAGER':\r\n                        assignToId = params.context.policy.ServiceAssociateId;\r\n                        result = assignToId\r\n                            ? ListUtil.getLabelByValue(params.context.listData.service_associate, assignToId)\r\n                            : '';\r\n                        break;\r\n                    default:\r\n                        result = params.value;\r\n                }\r\n                return result;\r\n            }\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getMatchUnmatchIcon(params: any): string {\r\n        return RequirementIconHelper.getMatchUnmatchIcon(params.data);\r\n    }\r\n\r\n    private getNoteIcon(params: any): string {\r\n        return RequirementIconHelper.getNoteIcon(params.data);\r\n    }\r\n\r\n    private getAlertIcon(params: any): string {\r\n        return RequirementIconHelper.getAlertIcon(params.data);\r\n    }\r\n\r\n    private compareAlertStatus(alert1: any, alert2: any, node1: RowNode, node2: RowNode): number {\r\n        const alertIconData2 = RequirementIconHelper.getAlertIcon(node2.data) === '' ? 0 : 1;\r\n        const alertIconData1 = RequirementIconHelper.getAlertIcon(node1.data) === '' ? 0 : 1;\r\n        return alertIconData1 > alertIconData2\r\n            ? CompareResult.greater\r\n            : alertIconData1 < alertIconData2\r\n            ? CompareResult.less\r\n            : CompareResult.equal;\r\n    }\r\n}\r\n\r\nexport const RequirementGridFields = {\r\n    RequirementCode: 'RequirementCode',\r\n    PolicyPersonId: 'PolicyPersonId',\r\n    ClosedDisposition: 'ClosedDisposition',\r\n    AddedDate: 'AddedDate',\r\n    OrderedDate: 'OrderedDate',\r\n    ReceivedDate: 'ReceivedDate',\r\n    ClosedDate: 'ClosedDate',\r\n    FollowupDate: 'FollowupDate',\r\n    OrderedBy: 'OrderedBy',\r\n    NoteId: 'NoteId',\r\n    RequirementInformationId: 'RequirementInformationId',\r\n    SupportsMatch: 'supportsMatch'\r\n};\r\n","import { RequirementDTO, DBDate } from 'ls-core/model';\r\nimport { IconData } from 'life-core/model';\r\n\r\nexport class RequirementIconHelper {\r\n    public static getMatchUnmatchIcon(requirement: RequirementDTO): string {\r\n        const iconData = this.getMatchUnmatchIconData(requirement);\r\n        if (iconData) {\r\n            return `<div class=\"${iconData.cssClass} grid-cell-icon\"/>`;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private static getMatchUnmatchIconData(requirement: RequirementDTO): IconData {\r\n        if (!requirement || !requirement.supportsMatch) {\r\n            return null;\r\n        }\r\n        return requirement.RequirementInformationId\r\n            ? new IconData('ls-matched-icon', 'Matched')\r\n            : new IconData('ls-unmatched-icon', 'Unmatched');\r\n    }\r\n\r\n    public static getNoteIcon(requirement: RequirementDTO): string {\r\n        const iconData = this.getNoteIconData(requirement);\r\n        if (iconData) {\r\n            return `<div class=\"${iconData.cssClass} grid-cell-icon\"/>`;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private static getNoteIconData(requirement: RequirementDTO): IconData {\r\n        return requirement.Note ? new IconData('ls-note-icon', 'Note') : null;\r\n    }\r\n\r\n    public static getAlertIcon(requirement: RequirementDTO): string {\r\n        const iconData = this.getAlertIconData(requirement);\r\n        if (iconData) {\r\n            return `<div class=\"${iconData.cssClass} grid-cell-icon\"/>`;\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private static getAlertIconData(requirement: RequirementDTO): IconData {\r\n        if (requirement.ClosedDisposition != 'S' && this.isFollowupDateExpired(requirement.FollowupDate)) {\r\n            return new IconData('ls-alert-icon', 'Alert');\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private static isFollowupDateExpired(followupDate: DBDate): boolean {\r\n        if (followupDate) {\r\n            const today = new Date();\r\n            today.setHours(0, 0, 0, 0);\r\n            return followupDate.dateAndTimeAsString != '' && new Date(followupDate.datetime) <= today;\r\n        }\r\n        return false;\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { RequirementDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class RequirementItemFactory extends BaseDTOItemFactory<RequirementDTO> {\r\n    public newInstance(createItemParams: RequirementCreateItemParams<RequirementDTO>): RequirementDTO {\r\n        const requirementDTO = createItemParams.requirementDTO;\r\n        requirementDTO.InsuredRequirementId = this.getNextId(createItemParams.items, 'InsuredRequirementId');\r\n        return requirementDTO;\r\n    }\r\n}\r\n\r\nexport interface RequirementCreateItemParams<T> extends CreateItemParams<T> {\r\n    requirementDTO: RequirementDTO;\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { RequirementDTO, AddressDTO } from 'ls-core/model';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\nimport { ListsDataRequest, ListDataRequestBuilder } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session';\r\n\r\n@Injectable()\r\nexport class RequirementListDataResolver extends BaseListDataResolver {\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        this.addRequirementCodeDataListRequest(listDataRequestBuilder);\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n\r\n    private addRequirementCodeDataListRequest(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        listDataRequestBuilder.addListRequestItem(new RequirementDTO(), 'RequirementCode');\r\n        listDataRequestBuilder.addListRequestItem(new AddressDTO(), 'CountryId');\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class RequirementMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['Requirement', 'RequirementStatus', 'underwriter', 'service_associate', 'team'];\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-page-header\\\" i18n=\\\"@@policy.requirement.requirements\\\">Requirements</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"applicantList\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.requirement.applicant\\\">\\r\\n\\t\\t\\t<!-- Use 'ngModelOption.standalone' to not add this control to NgForm to avoid saving data when applicant selection changes -->\\r\\n\\t\\t\\t<lf-select #applicantList name=\\\"applicantList\\\" [(ngModel)]=\\\"selectedApplicantId\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n\\t\\t\\t [items]=\\\"applicantListOptions\\\" (change)=\\\"onApplicantChange()\\\" [clearable]=\\\"false\\\" style=\\\"width:200px\\\" [actionType]=\\\"applicantDropdownActionType\\\"\\r\\n\\t\\t\\t secureComponent></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-12\\\">\\r\\n\\t\\t<master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\"\\r\\n\\t\\t secureComponent style=\\\"width: 1000px;\\\">\\r\\n\\t\\t</master-detail>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\n\nimport { ListItem } from 'life-core/model';\nimport {\n    MasterButton,\n    MasterButtonType,\n    MasterButtonLabels,\n    BaseDataManager,\n    RowManagementDelegate,\n    MasterDetailComponentResolver,\n    CreateItemEventData\n} from 'life-core/component/master-detail';\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\nimport {\n    ModalDialog,\n    PopoverDialogParams,\n    DialogButton,\n    DialogButtonType,\n    DialogSize,\n    ConfirmDialog,\n    DialogResult\n} from 'life-core/component/dialog';\nimport { ButtonActionType } from 'life-core/component/shared';\nimport { ResolvedDataNames } from 'life-core/view-model';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { PolicyDTO, RequirementDTO, DBDate } from 'ls-core/model';\nimport { DefaultDataService, SetDefaultDataRequest, SavePolicyDataDelegate } from 'ls-core/service';\nimport { DBDateUtil } from 'ls-core/util';\nimport { AppMasterButtonType, AppMasterButtonLabels } from 'business/shared/master-detail';\nimport { PersonIdToPolicyPersonIdMapper } from 'business/policy/shared';\n\nimport {\n    ActiveApplicantHelper,\n    BasePolicyMasterDetailViewModel,\n    ApplicantHelper,\n    All_Applicants_Id,\n    ApplicationCountersHelper\n} from 'business/policy/shared';\nimport { IAutoNavigation, AutoNavigationManager } from 'ls-core/auto-navigation';\nimport { INavigationSequence, NavigationTarget, NavigationTargetTypes } from 'ls-core/model/auto-navigation';\nimport { RequirementGridColumnsBuilder } from './requirement-grid-columns.builder';\nimport { CreateRequirementDetail } from './create-requirement-detail';\nimport { RequirementItemFactory, RequirementCreateItemParams } from './requirement-item-factory';\nimport { TabViewRequirementDetailComponent } from './detail/tab/tab-view-requirement-detail.component';\nimport { RequirementHistoryComponent, RequirementHistoryMetaDataResolver } from './history';\nimport { RequirementMatchUnmatchChannels, MatchUnmatchType } from './match';\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { ConvertUtil } from 'life-core/util/lang';\nimport { I18n } from 'life-core/i18n';\nimport { DropdownActionType } from 'life-core/component/input';\n\nimport { SaveMatchRequirementDataDelegate } from './save-match-requirement-data.delegate';\nimport { SaveUnmatchRequirementDataDelegate } from './save-unmatch-requirement-data.delegate';\nimport { AutoNavigationChannels } from 'business/shared/auto-navigation';\nimport { RequirementsAuthorizationProvider } from './requirements-authorization.provider';\nimport { RequirementStatuses } from './requirement-constants';\nimport { LfSplitPaneChannels, SplitPaneResult } from 'life-core/component/layout/split';\nimport { TabPolicySplitPaneAreas, TabPolicyDataKeys } from 'business/policy/tab';\nimport { TabStateValueAccessor, TabStateManager, DateUtil } from 'life-core/util';\nimport { SaveDataContext } from 'life-core/service';\n\nexport function rowManagementDelegateFactory(\n    itemFactory: RequirementItemFactory,\n    dataManager: BaseDataManager<RequirementDTO>\n): RowManagementDelegate<RequirementDTO> {\n    return new RowManagementDelegate({\n        itemName: 'Requirement',\n        itemIDPropertyName: 'InsuredRequirementId',\n        itemFactory: itemFactory,\n        dataManager: dataManager\n    });\n}\n\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<RequirementDTO> {\n    return new MasterDetailComponentResolver({\n        itemComponents: TabViewRequirementDetailComponent\n    });\n}\n\n@Component({\n    selector: 'requirement',\n    templateUrl: './requirement.component.html',\n    providers: [\n        BaseDataManager,\n        RequirementItemFactory,\n        PolicySubscriber,\n        {\n            provide: RowManagementDelegate,\n            useFactory: rowManagementDelegateFactory,\n            deps: [RequirementItemFactory, BaseDataManager]\n        },\n        {\n            provide: MasterDetailComponentResolver,\n            useFactory: itemComponentResolverFactory\n        },\n        RequirementGridColumnsBuilder,\n        AutoNavigationManager,\n        { provide: AuthorizationProvider, useClass: RequirementsAuthorizationProvider }\n    ]\n})\nexport class RequirementComponent extends BasePolicyMasterDetailViewModel<RequirementDTO> implements IAutoNavigation {\n    public policy: PolicyDTO;\n    public selectedApplicantId: number;\n    public applicantListOptions: Array<ListItem>;\n    public applicantDropdownActionType: DropdownActionType = DropdownActionType.Presentation;\n\n    private _confirmDialog: ConfirmDialog;\n    private _selectedRequirementCode: string;\n    private _activeApplicantHelper: ActiveApplicantHelper;\n    private _requirementCode: string;\n    private _defaultDataService: DefaultDataService;\n    private _gridColumnsBuilder: IGridColumnsBuilder;\n    private _modalDialog: ModalDialog;\n    private _messagingService: IMessagingService;\n    private _matchUnmatchType: string;\n    private _matchedRequirement: RequirementDTO;\n    private _autoNavigationManager: AutoNavigationManager;\n    private _masterButtonLabels: MasterButtonLabels;\n    private _lsMasterButtonLabels: AppMasterButtonLabels;\n    private _requirementStateValueAccessor: TabStateValueAccessor<string>;\n    private _applicationCountersHelper: ApplicationCountersHelper;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        modalDialog: ModalDialog,\n        confirmDialog: ConfirmDialog,\n        masterButtonLabels: MasterButtonLabels,\n        lsMasterButtonLabels: AppMasterButtonLabels,\n        activeApplicantHelper: ActiveApplicantHelper,\n        defaultDataService: DefaultDataService,\n        requirementGridColumnsBuilder: RequirementGridColumnsBuilder,\n        messagingService: MessagingService,\n        autoNavigationManager: AutoNavigationManager,\n        applicationCountersHelper: ApplicationCountersHelper,\n        tabStateManager: TabStateManager,\n        i18n: I18n\n    ) {\n        super(injector);\n        this.i18n = i18n;\n        this._activeApplicantHelper = activeApplicantHelper;\n        policySubscriber.subscribe(this, p => {\n            this.policy = p;\n            if (this.gridOptions) {\n                this.refreshMasterDetail();\n            }\n        });\n        this._defaultDataService = defaultDataService;\n        this._gridColumnsBuilder = requirementGridColumnsBuilder;\n        this._messagingService = messagingService;\n        this._autoNavigationManager = autoNavigationManager;\n        this._applicationCountersHelper = applicationCountersHelper;\n        this.applicantListOptions = new Array<ListItem>();\n        this._modalDialog = modalDialog;\n        this._confirmDialog = confirmDialog;\n        this._masterButtonLabels = masterButtonLabels;\n        this._lsMasterButtonLabels = lsMasterButtonLabels;\n        this._requirementStateValueAccessor = new TabStateValueAccessor<string>(\n            tabStateManager,\n            TabPolicyDataKeys.ACTIVE_REQUIREMENT\n        );\n        this.registerHandlers();\n    }\n\n    public registerHandlers(): void {\n        this.trackSubscription(\n            this._messagingService.subscribeNewMessageOnly(\n                RequirementMatchUnmatchChannels.RequirementMatchUnmatch,\n                matchUnmatchInformation => this.onMatchSelectionReceived(matchUnmatchInformation)\n            )\n        );\n\n        this.trackSubscription(\n            this._activeApplicantHelper.activeApplicantIdObservable.subscribe(activeApplicantId => {\n                this.setActiveApplicant(activeApplicantId);\n            })\n        );\n\n        this.trackSubscription(\n            this.messagingService.subscribe(LfSplitPaneChannels.RemoveSplitPaneArea, splitPaneResult => {\n                this.onRequirementNoteSplitPaneClose(splitPaneResult);\n            })\n        );\n    }\n\n    public get showDetailAsPopup(): boolean {\n        return false;\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedListData();\n        this.setResolvedMetaData();\n        this.loadApplicantList();\n        return Promise.resolve();\n    }\n\n    public ngAfterViewInit(): void {\n        super.ngAfterViewInit();\n        this.initializeAutoNavigationChannel();\n        this.restoreActiveRequirement();\n    }\n\n    public initializeAutoNavigationChannel(): void {\n        this._autoNavigationManager.registerWithNavigationChannel(\n            AutoNavigationChannels.Requirement,\n            (sequence: INavigationSequence) => {\n                this.processNavigationSequence(sequence);\n            }\n        );\n    }\n\n    public processNavigationSequence(sequence: INavigationSequence): void {\n        const target = sequence.getNextNavigationTarget();\n        if (target && target.targetType === NavigationTargetTypes.CollectionItem) {\n            const policyPersonId = target.getParam(NavigationTarget.PARAM_PERSON_ID);\n            const activeRequirementId = target.getParam(NavigationTarget.PARAM_COLLECTION_ITEM_ID);\n\n            // using setTimeout to avoid ExpressionChangedAfterItHasBeenCheckedError error\n            setTimeout(() => {\n                this.selectedApplicantId = ConvertUtil.toNumber(policyPersonId);\n                this.filterRequirementList();\n                this.showActiveRequirement(activeRequirementId);\n            });\n\n            this._autoNavigationManager.continueNavigation(sequence, target, AutoNavigationChannels.Requirement);\n        }\n    }\n\n    private onRequirementNoteSplitPaneClose(splitPaneResult: SplitPaneResult): void {\n        if (splitPaneResult.areaId === TabPolicySplitPaneAreas.AddRequirementCaseNote && splitPaneResult.dialogResult) {\n            this.showActiveRequirement(splitPaneResult.dialogResult.returnValue);\n        }\n    }\n\n    private restoreActiveRequirement(): void {\n        const requirementId = this._requirementStateValueAccessor.getValue();\n        if (requirementId) {\n            this.showActiveRequirement(requirementId);\n        }\n    }\n\n    public onApplicantChange(): void {\n        if (this.selectedApplicantId != All_Applicants_Id) {\n            // only update selected application in state when a particular applicant is selected.\n            this.setActiveApplicantId();\n        }\n        this.filterRequirementList();\n    }\n\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\n        return this._gridColumnsBuilder;\n    }\n\n    protected get numHeaderRows(): number {\n        return 2;\n    }\n\n    protected initRowManagementDelegate(): void {\n        const self = this;\n        const applicantFilter = function(item: RequirementDTO): boolean {\n            return ConvertUtil.toNumber(self.selectedApplicantId) === All_Applicants_Id ||\n                self.selectedApplicantId == null\n                ? true\n                : ConvertUtil.toNumber(item.PolicyPersonId) === ConvertUtil.toNumber(self.selectedApplicantId);\n        };\n        this.rowManagementDelegate.initDataManager(this.items, applicantFilter);\n    }\n\n    protected getTitle(): string {\n        return this.i18n({ value: 'Requirements', id: 'policy.requirement.requirements' });\n    }\n\n    private getSelectedRequirement(): RequirementDTO {\n        return this.policy.Requirements_LazyLoad.find(\n            req =>\n                req.RequirementCode == this.selectedItem.RequirementCode &&\n                req.InsuredRequirementId == this.selectedItem.InsuredRequirementId &&\n                req.RequirementInformationId == this.selectedItem.RequirementInformationId\n        );\n    }\n\n    protected getInlineDetailButtons(): MasterButton<RequirementDTO>[] {\n        const customButtons: MasterButton<RequirementDTO>[] = [\n            new MasterButton({ type: MasterButtonType.ADD }),\n            new MasterButton({\n                type: AppMasterButtonType.NOTE,\n                label: this._lsMasterButtonLabels.button_note,\n                actionType: ButtonActionType.DataChange,\n                handler: () => {\n                    const selectedRequirement = this.getSelectedRequirement();\n                    this.saveData().then(() => {\n                        this.showActiveRequirement(selectedRequirement.InsuredRequirementId.toString());\n                        this._messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, {\n                            areaId: TabPolicySplitPaneAreas.AddRequirementCaseNote,\n                            context: {\n                                requirement: selectedRequirement,\n                                parentNote: selectedRequirement.Note,\n                                requirementList: this.listData.Requirement\n                            }\n                        });\n                    });\n                }\n            }),\n            new MasterButton({\n                type: AppMasterButtonType.HISTORY,\n                label: this._lsMasterButtonLabels.button_history,\n                actionType: ButtonActionType.Presentation,\n                handler: () => {\n                    this._modalDialog.open({\n                        view: RequirementHistoryComponent,\n                        data: this.selectedItem.EvidenceStatuses_LazyLoad,\n                        resolve: [\n                            {\n                                resolveName: ResolvedDataNames.metaData,\n                                resolverClass: RequirementHistoryMetaDataResolver\n                            }\n                        ],\n                        title: this.i18n({ value: 'History', id: 'policy.requirement.history.title' }),\n                        buttons: [\n                            new DialogButton({\n                                type: DialogButtonType.CANCEL,\n                                label: this.i18n({ value: 'Close', id: 'general.button.label.close' }),\n                                options: { isDefault: true }\n                            })\n                        ],\n                        size: DialogSize.large\n                    });\n                }\n            }),\n            new MasterButton({ type: MasterButtonType.CANCEL, label: this._masterButtonLabels.button_undo })\n        ];\n\n        const buttonAdd = customButtons.find(button => button.type === MasterButtonType.ADD);\n        const dialogAddParams: PopoverDialogParams = {\n            content: CreateRequirementDetail,\n            title: this.i18n({ value: 'Create Requirement', id: 'policy.requirement.createRequirement.title' }),\n            data: this.listData,\n            buttons: [],\n            handler: (result: DialogResult) => {\n                this._selectedRequirementCode = result.returnValue;\n                this.validateForSimilarRequirement();\n            }\n        };\n        buttonAdd.dialog = dialogAddParams;\n\n        return customButtons;\n    }\n\n    protected loadItems(): RequirementDTO[] {\n        return this.policy.Requirements_LazyLoad;\n    }\n\n    protected getRowNodeId(data: RequirementDTO): string {\n        return data.InsuredRequirementId.toString();\n    }\n\n    protected createItem(eventData: CreateItemEventData): Promise<RequirementDTO> {\n        const requirement = new RequirementDTO();\n        requirement.RequirementCode = this._requirementCode;\n        requirement.PolicyPersonId = this.getApplicantForNewRequirement();\n        requirement.FollowupDate = this.getCurrentDate();\n        requirement.ClosedDisposition = RequirementStatuses.Open;\n        const defaultDataRequest = new SetDefaultDataRequest(this.policy, requirement, '');\n        return this._defaultDataService.setDefaultData(defaultDataRequest).then(data => {\n            return this.rowManagementDelegate.addNewRow({\n                items: this.items,\n                requirementDTO: data.workingDTO as RequirementDTO\n            } as RequirementCreateItemParams<RequirementDTO>);\n        });\n    }\n\n    protected onItemCreated(item: RequirementDTO): void {\n        super.onItemCreated(item);\n        this._applicationCountersHelper.incrementManualActionCounter(this.policy);\n        item._counterIncreased = true;\n    }\n\n    protected onItemCanceled(item: RequirementDTO): void {\n        super.onItemCanceled(item);\n        this._applicationCountersHelper.decrementManualActionCounter(this.policy);\n        item._counterIncreased = false;\n    }\n\n    protected getDataToSave(): Object {\n        if (this._matchUnmatchType === MatchUnmatchType.Match || this._matchUnmatchType === MatchUnmatchType.Unmatch) {\n            return { policy: this.policy, requirement: this._matchedRequirement };\n        }\n        return this.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        if (this._matchUnmatchType === MatchUnmatchType.Match) {\n            return this.injector.get(SaveMatchRequirementDataDelegate);\n        }\n        if (this._matchUnmatchType === MatchUnmatchType.Unmatch) {\n            return this.injector.get(SaveUnmatchRequirementDataDelegate);\n        }\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n\n    private validateForSimilarRequirement(): void {\n        const existingReqCode = this.items.find(\n            item =>\n                item.RequirementCode === this._selectedRequirementCode &&\n                ConvertUtil.toNumber(item.PolicyPersonId) == this.selectedApplicantId\n        );\n        if (existingReqCode) {\n            this.showSimilarRequirementExistsDialog();\n        } else {\n            this.createRequirement();\n        }\n    }\n\n    private showSimilarRequirementExistsDialog(): Promise<DialogResult> {\n        return this._confirmDialog.open({\n            message: this.i18n({\n                value:\n                    'A similar requirement already exists for the insured on the case. To add, select OK, otherwise select Cancel',\n                id: 'policy.requirement.RequirementAlreadyExist'\n            }),\n            title: this.i18n({\n                value: 'Requirement Already Exists',\n                id: 'policy.requirement.RequirementAlreadyExistTitle'\n            }),\n            buttons: [\n                new DialogButton({\n                    type: DialogButtonType.OK,\n                    handler: () => {\n                        this.createRequirement();\n                    }\n                }),\n                new DialogButton({ type: DialogButtonType.CANCEL })\n            ]\n        });\n    }\n\n    private createRequirement(): void {\n        this._requirementCode = this._selectedRequirementCode;\n        this.getMasterDetail().master.createItem();\n    }\n\n    private onMatchSelectionReceived(matchUnmatchInformation: any): void {\n        this.rowManagementDelegate.saveRow(matchUnmatchInformation.requirement);\n        this._matchUnmatchType = matchUnmatchInformation.matchUnmatchType;\n        this._matchedRequirement = matchUnmatchInformation.requirement;\n        this.saveData();\n    }\n\n    private loadApplicantList(): void {\n        if (this.policy.Insureds_LazyLoad) {\n            if (this._isMoreThanOneApplicantPresentInPolicy()) {\n                this._addAllApplicantsOption();\n            }\n            this._bindInsuredsToApplicantList();\n        }\n    }\n\n    private _isMoreThanOneApplicantPresentInPolicy(): boolean {\n        return this.policy.Insureds_LazyLoad.length > 1;\n    }\n\n    private getPolicyPersonIdFromPersonId(personId: number): number {\n        return PersonIdToPolicyPersonIdMapper.getPolicyPersonIdFromPersonId(personId, this.policy);\n    }\n\n    private getPersonIdFromPolicyPersonId(policyPersonId: number): number {\n        return PersonIdToPolicyPersonIdMapper.getPersonIdFromPolicyPersonId(policyPersonId, this.policy);\n    }\n\n    private _addAllApplicantsOption(): void {\n        this.applicantListOptions.push(new ListItem('All Applicants', All_Applicants_Id.toString()));\n    }\n\n    private _bindInsuredsToApplicantList(): void {\n        let applicantName: string;\n        this.policy.Insureds_LazyLoad.forEach(applicant => {\n            applicantName = ApplicantHelper.getApplicantFullName(applicant);\n            this.applicantListOptions.push(new ListItem(applicantName, applicant.PolicyPersonId.toString()));\n        });\n    }\n\n    private setActiveApplicant(activeApplicantId: number): void {\n        if (activeApplicantId == null) {\n            this.selectedApplicantId = All_Applicants_Id;\n        } else {\n            const activeApplicantPolicyPersonId = this.getPolicyPersonIdFromPersonId(activeApplicantId);\n            if (this.selectedApplicantId != activeApplicantPolicyPersonId) {\n                this.selectedApplicantId = activeApplicantPolicyPersonId;\n            }\n        }\n        this.filterRequirementList();\n    }\n\n    private getApplicantForNewRequirement(): any {\n        return this.selectedApplicantId == null || this.selectedApplicantId == All_Applicants_Id\n            ? this.applicantListOptions[1].value\n            : this.selectedApplicantId;\n    }\n\n    private showActiveRequirement(requirementId: string): void {\n        const activeRequirement = this.items.find(item => this.getRowNodeId(item) === requirementId);\n        if (activeRequirement) {\n            setTimeout(() => {\n                this.setActiveItem(activeRequirement);\n            });\n        }\n    }\n\n    private filterRequirementList(): void {\n        if (this.getMasterDetail()) {\n            this.rowManagementDelegate.applyFilter();\n            this.getMasterDetail().master.clearSelection();\n        }\n    }\n\n    private setActiveApplicantId(): void {\n        const selectedApplicantPersonId = this.getPersonIdFromPolicyPersonId(this.selectedApplicantId);\n        this._activeApplicantHelper.setActiveApplicantId(selectedApplicantPersonId);\n    }\n\n    public ngOnDestroy(): void {\n        this.saveActiveRequirement();\n        super.ngOnDestroy();\n    }\n\n    private saveActiveRequirement(): void {\n        if (this.selectedItem) {\n            const requirementId = this.getRowNodeId(this.selectedItem);\n            this._requirementStateValueAccessor.setValue(requirementId);\n        }\n    }\n    private getCurrentDate(): DBDate {\n        const currentDate = DateUtil.truncateTimeFromDate(new Date());\n        return DBDateUtil.dateToDBDate(currentDate);\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { RequirementComponent } from './requirement.component';\r\nimport { TabViewRequirementDetailComponent } from './detail/tab/tab-view-requirement-detail.component';\r\nimport { RequirementDetailBasicInfo } from './detail/requirement-detail-basic-info.component';\r\nimport { RequirementDetailProvidersInfo } from './detail/requirement-detail-providers-info.component';\r\nimport { CreateRequirementDetail } from './create-requirement-detail';\r\nimport { RequirementDataResolver } from './requirement-data.resolver';\r\nimport { RequirementMetaDataResolver } from './requirement-meta-data.resolver';\r\nimport { RequirementListDataResolver } from './requirement-list-data.resolver';\r\nimport {\r\n    MedicalProviderSearchComponent,\r\n    MedicalSearchMetaDataResolver,\r\n    MedicalProviderListComponent,\r\n    PhysicianNameComponent,\r\n    PhysicianFacilityNameComponent,\r\n    PhysicianAssociatedWithFacilityComponent,\r\n    RequirementDetailProvidersInfoMetaDataResolver\r\n} from './detail';\r\nimport { RequirementHistoryComponent, RequirementHistoryMetaDataResolver } from 'business/policy/requirements/history';\r\nimport { RequirementMatchComponent } from 'business/policy/requirements/match';\r\nimport { EvidenceStatusListComponent } from 'business/policy/requirements/history/evidence-status-list';\r\nimport { SaveMatchRequirementDataDelegate } from './save-match-requirement-data.delegate';\r\nimport { SaveUnmatchRequirementDataDelegate } from './save-unmatch-requirement-data.delegate';\r\nimport { RequirementDeactivateGuard } from './requirement-deactivate.guard';\r\nimport { RequirementTypes } from 'business/policy/requirements/requirement.type';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [\r\n        RequirementComponent,\r\n        TabViewRequirementDetailComponent,\r\n        RequirementDetailBasicInfo,\r\n        RequirementDetailProvidersInfo,\r\n        CreateRequirementDetail,\r\n        MedicalProviderSearchComponent,\r\n        MedicalProviderListComponent,\r\n        PhysicianNameComponent,\r\n        PhysicianFacilityNameComponent,\r\n        PhysicianAssociatedWithFacilityComponent,\r\n        RequirementHistoryComponent,\r\n        RequirementMatchComponent,\r\n        EvidenceStatusListComponent\r\n    ],\r\n    providers: [\r\n        RequirementDataResolver,\r\n        RequirementMetaDataResolver,\r\n        RequirementListDataResolver,\r\n        MedicalSearchMetaDataResolver,\r\n        SaveMatchRequirementDataDelegate,\r\n        SaveUnmatchRequirementDataDelegate,\r\n        RequirementHistoryMetaDataResolver,\r\n        RequirementDeactivateGuard,\r\n        RequirementTypes,\r\n        RequirementDetailProvidersInfoMetaDataResolver\r\n    ],\r\n    entryComponents: [\r\n        TabViewRequirementDetailComponent,\r\n        CreateRequirementDetail,\r\n        MedicalProviderSearchComponent,\r\n        MedicalProviderListComponent,\r\n        PhysicianNameComponent,\r\n        PhysicianFacilityNameComponent,\r\n        PhysicianAssociatedWithFacilityComponent,\r\n        RequirementHistoryComponent,\r\n        RequirementMatchComponent,\r\n        EvidenceStatusListComponent\r\n    ]\r\n})\r\nexport class RequirementModule {}\r\n","import { Injectable } from '@angular/core';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class RequirementTypes {\r\n    public lab: string;\r\n    public mvr: string;\r\n\r\n    protected i18n: I18n;\r\n\r\n    constructor(i18n: I18n) {\r\n        this.i18n = i18n;\r\n        this.lab = this.i18n({ value: 'LAB', id: 'policy.requirement.requirementtype.lab' });\r\n        this.mvr = this.i18n({ value: 'MVR', id: 'policy.requirement.requirementtype.mvr' });\r\n    }\r\n}\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\nimport { MasterButtonType } from 'life-core/component/master-detail';\r\nimport { AppMasterButtonType } from 'business/shared/master-detail';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class RequirementsAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const requirementsAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.REQUIREMENT]\r\n        );\r\n        const addButtonAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.REQUIREMENTADD]\r\n        );\r\n\r\n        const noteButtonAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.NOTE]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = requirementsAuthorizationLevel;\r\n        this.authorizationData.componentLevel[MasterButtonType.ADD] = addButtonAuthorizationLevel;\r\n        this.authorizationData.componentLevel[MasterButtonType.CANCEL] = addButtonAuthorizationLevel;\r\n        this.authorizationData.componentLevel[AppMasterButtonType.NOTE] = noteButtonAuthorizationLevel;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { SavePolicyDataDelegate, DataServiceParams, UIServiceNames, UIServiceMethods, SaveDTOInfo } from 'ls-core/service';\r\nimport { RequirementDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class SaveMatchRequirementDataDelegate extends SavePolicyDataDelegate {\r\n\r\n    private _requirementDTO: RequirementDTO;\r\n    \r\n    protected getServiceParams(data: any): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.MATCH_REQUIREMENT,\r\n            serviceMethod: UIServiceMethods.SAVE_DATA,\r\n            requestPayload: this.getPayload(data)\r\n        });\r\n    }\r\n\r\n    private getPayload(data: any): RequirementMatchUnmatchRequest {\r\n        const request = new RequirementMatchUnmatchRequest();\r\n        request.requirementDTO = data.requirement;\r\n        request.saveDTOInfo = new SaveDTOInfo(data.policy, this.getDeletedObjects());\r\n        return request;\r\n    }\r\n}\r\n\r\nexport class RequirementMatchUnmatchRequest {\r\n    readonly $type: string = 'life.ls.ui.ria.dto.requests.RequirementMatchUnmatchRequest, LifeSuite.UIServiceDTO';\r\n\r\n    public saveDTOInfo: SaveDTOInfo;\r\n    public requirementDTO: RequirementDTO;\r\n}","import { RequirementMatchUnmatchRequest } from './save-match-requirement-data.delegate';\r\nimport { Injectable } from '@angular/core';\r\n\r\nimport {\r\n    SavePolicyDataDelegate,\r\n    DataServiceParams,\r\n    UIServiceNames,\r\n    UIServiceMethods,\r\n    SaveDTOInfo\r\n} from 'ls-core/service';\r\n\r\n@Injectable()\r\nexport class SaveUnmatchRequirementDataDelegate extends SavePolicyDataDelegate {\r\n    protected getServiceParams(data: any): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.UNMATCH_REQUIREMENT,\r\n            serviceMethod: UIServiceMethods.SAVE_DATA,\r\n            requestPayload: this.getPayload(data)\r\n        });\r\n    }\r\n\r\n    private getPayload(data: any): RequirementMatchUnmatchRequest {\r\n        const request = new RequirementMatchUnmatchRequest();\r\n        request.requirementDTO = data.requirement;\r\n        request.saveDTOInfo = new SaveDTOInfo(data.policy, this.getDeletedObjects());\r\n        return request;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ComponentsModule } from 'life-core/component/components.module';\r\n\r\nimport { ScratchPadComponent } from './scratch-pad.component';\r\nimport { ScratchPadDialogComponent } from './scratch-pad-dialog.component';\r\nimport { ScratchPadDataResolver } from './scratch-pad-data.resolver';\r\nimport { ScratchPadDataService } from './scratch-pad-data.service';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, ComponentsModule],\r\n    declarations: [ScratchPadComponent, ScratchPadDialogComponent],\r\n    entryComponents: [ScratchPadComponent, ScratchPadDialogComponent],\r\n    providers: [ScratchPadDataResolver, ScratchPadDataService]\r\n})\r\nexport class ScratchPadModule {}\r\n","import { FieldConfig, ListFieldConfig, FormListFieldsUtil } from 'life-core/component/dynamic-form';\r\nimport { FormLoadFieldsService, FormFieldNames, DynamicFormFieldsManager } from 'ls-core/component/dynamic-form';\r\nimport { PolicyDTO, CoverageDTO, MetadataItem } from 'ls-core/model';\r\nimport { MetadataLoader } from 'ls-core/util';\r\nimport { ListUtil } from 'life-core/util';\r\nimport { ListItem } from 'life-core/model';\r\nimport { PlanCoverageFormFields } from './plan-coverage-form-fields';\r\nimport { CoverageFormDataBuilder, CoverageFormData } from './coverage-form-data.builder';\r\n\r\nexport abstract class BaseCoverageFormFieldsLoader {\r\n    protected _formLoadFieldsService: FormLoadFieldsService;\r\n    protected _metadataLoader: MetadataLoader;\r\n    protected _planCoverageFormFields: PlanCoverageFormFields;\r\n    protected _dynamicFormFieldsManager: DynamicFormFieldsManager;\r\n\r\n    constructor(\r\n        formLoadFieldsService: FormLoadFieldsService,\r\n        metadataLoader: MetadataLoader,\r\n        planCoverageFormFields: PlanCoverageFormFields,\r\n        dynamicFormFieldsManager: DynamicFormFieldsManager\r\n    ) {\r\n        this._formLoadFieldsService = formLoadFieldsService;\r\n        this._metadataLoader = metadataLoader;\r\n        this._planCoverageFormFields = planCoverageFormFields;\r\n        this._dynamicFormFieldsManager = dynamicFormFieldsManager;\r\n    }\r\n\r\n    public load(coverages: Array<CoverageDTO>, policy: PolicyDTO): Promise<void> {\r\n        return this.loadFormCoverageMetadata(policy, coverages);\r\n    }\r\n\r\n    private loadFormCoverageMetadata(policy: PolicyDTO, coverages: Array<CoverageDTO>): Promise<void> {\r\n        const metaCoverageFieldConfigNames = this.getCoverageConfigurationCodeType();\r\n        const metaPlanCodeNames = 'plan_code';\r\n        return this._metadataLoader.load([metaCoverageFieldConfigNames, metaPlanCodeNames]).then(metadata => {\r\n            return this.loadFormFieldsForCoverages(\r\n                metadata[metaCoverageFieldConfigNames],\r\n                metadata[metaPlanCodeNames],\r\n                policy,\r\n                coverages\r\n            );\r\n        });\r\n    }\r\n\r\n    protected abstract getCoverageConfigurationCodeType(): string;\r\n\r\n    private loadFormFieldsForCoverages(\r\n        coverageFieldConfig: Array<ListItem>,\r\n        planCodes: Array<MetadataItem>,\r\n        policy: PolicyDTO,\r\n        coverages: Array<CoverageDTO>\r\n    ): Promise<void> {\r\n        if (!this._planCoverageFormFields.loaded) {\r\n            return this._dynamicFormFieldsManager.getFormFields(this.getFormType()).then(response => {\r\n                const fields = response.value as Array<FieldConfig>;\r\n                const includedFormFieldNamesForPlans = this.getIncludedFormFieldsForPlans(\r\n                    coverageFieldConfig,\r\n                    planCodes,\r\n                    fields\r\n                );\r\n                this.preProcessFormFields(response.value as Array<FieldConfig>);\r\n                return this._formLoadFieldsService\r\n                    .load(\r\n                        this.getFormType(),\r\n                        response.value as Array<FieldConfig>,\r\n                        includedFormFieldNamesForPlans,\r\n                        this.getFormData(policy, coverages),\r\n                        policy\r\n                    )\r\n                    .then(planFormFieldsArray => this.setupPlanCoverageFormFields(planFormFieldsArray, planCodes));\r\n            });\r\n        }\r\n    }\r\n\r\n    private getFormData(policy: PolicyDTO, coverages: Array<CoverageDTO>): CoverageFormData {\r\n        return CoverageFormDataBuilder.build(policy, coverages[0]);\r\n    }\r\n\r\n    private getIncludedFormFieldsForPlans(\r\n        coverageFieldConfig: Array<ListItem>,\r\n        planCodes: Array<MetadataItem>,\r\n        formFields: Array<FieldConfig>\r\n    ): Array<FormFieldNames> {\r\n        return planCodes.map(planCode => {\r\n            const includedFieldsForPlan = ListUtil.getLabelByValue(\r\n                coverageFieldConfig,\r\n                planCode.externalCode.toLowerCase()\r\n            ).split(',');\r\n            // Temporary filter the list until all form fields are defined\r\n            const implementedFormFields = formFields.map(fieldConfig => fieldConfig.name);\r\n            return includedFieldsForPlan.filter(field => implementedFormFields.indexOf(field) >= 0);\r\n        });\r\n    }\r\n\r\n    private setupPlanCoverageFormFields(planFormFieldsArray: Array<FieldConfig[]>, planCodes: Array<ListItem>): void {\r\n        planCodes.forEach((planCode, index) => {\r\n            this._planCoverageFormFields.set(planCode.value.toUpperCase(), planFormFieldsArray[index]);\r\n        });\r\n    }\r\n\r\n    protected preProcessFormFields(formFields: Array<FieldConfig>): void {\r\n        FormListFieldsUtil.getListFieldsWithDynamicMetaType(formFields).forEach(fieldConfig => {\r\n            if ((fieldConfig as ListFieldConfig) && (<ListFieldConfig>fieldConfig).dynamicType) {\r\n                const fnGetDynamicType = (fieldConfig: ListFieldConfig, formData: Object): string => {\r\n                    const coverage = formData as CoverageDTO;\r\n                    return `${fieldConfig.metaType}${coverage.PlanCodeId ? coverage.PlanCodeId.toLowerCase() : ''}`;\r\n                };\r\n                (<ListFieldConfig>fieldConfig).getDynamicType = fnGetDynamicType;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected abstract getFormType(): string;\r\n}\r\n","import { PolicyDTO, CoverageDTO } from 'ls-core/model';\r\n\r\nexport interface CoverageFormData {\r\n\tpolicy: PolicyDTO;\r\n\tcoverage: CoverageDTO;\r\n}\r\n\r\nexport class CoverageFormDataBuilder {\r\n\r\n\tstatic build(policy: PolicyDTO, coverage: CoverageDTO): CoverageFormData {\r\n\t\treturn {\r\n\t\t\tpolicy: policy,\r\n\t\t\tcoverage: coverage\r\n\t\t};\r\n\t}\r\n\r\n}\r\n","﻿export * from './plan-coverage-form-fields';\r\nexport * from './base-coverage-form-fields.loader';\r\nexport * from './coverage-form-data.builder';\r\n","import { FieldConfig } from 'life-core/component/dynamic-form';\r\n\r\n/**\n* Maps Plan code to array of form field definitions\n*/\r\nexport type PlanFormFieldsMap = Map<string, Array<FieldConfig>>; \r\n\r\n/**\n* Data holder class to store form field definitions per plan code\n*/\r\nexport abstract class PlanCoverageFormFields {\r\n\t/**\n\t* Maps plan code to form field definitions for given plan\n\t*/\r\n\tprivate _map: PlanFormFieldsMap = new Map<string, Array<FieldConfig>>();\n\r\n\tpublic get loaded(): boolean {\r\n\t\treturn this._map.size > 0;\r\n\t}\r\n\r\n\tpublic set(key: string, value: FieldConfig[]): void {\r\n\t\tthis._map.set(key, value);\r\n\t}\r\n\r\n\tpublic get(key: string): FieldConfig[] {\r\n\t\treturn this._map.get(key);\r\n\t}\r\n\r\n}\r\n","﻿import { Injector } from '@angular/core';\r\n\r\nimport { DialogDetailViewModel } from 'life-core/component/master-detail';\r\nimport { DialogButtonType } from 'life-core/component/dialog';\r\n\r\nexport class BasePolicyDialogDetailViewModel<TData> extends DialogDetailViewModel<TData> {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected isDialogButtonTypeOK(buttonType: string): boolean {\r\n        return buttonType === DialogButtonType.OK || buttonType === DialogButtonType.ACCEPT;\r\n    }\r\n}\r\n","export * from './base-policy-dialog-detail.vm';\r\nexport * from './base-policy-master-detail.vm';\r\n","﻿import { InsuredDTO, CoverageDTO } from 'ls-core/model';\r\n\r\nexport class PrimaryCoverageUtil {\r\n    public static getPrimaryCoverage(insured: InsuredDTO): CoverageDTO {\r\n        return insured && insured.Coverages_LazyLoad && insured.Coverages_LazyLoad.length\r\n            ? insured.Coverages_LazyLoad[0]\r\n            : null;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { CompareResult } from 'life-core/util/lang';\r\nimport { InputValueValidator, InputValueValidationResult } from 'life-core/view-model/validation/input-value';\r\n\r\nimport { DBDate } from 'ls-core/model';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { DBDateUtil } from 'ls-core/util';\r\n\r\n@Injectable()\r\nexport class AgentSignedDateValidator implements InputValueValidator {\r\n    private _appSession: AppSession;\r\n\r\n    constructor(appSession: AppSession) {\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    public validate(): InputValueValidationResult {\r\n        const isValid =\r\n            !this.agentSignedDateExists() ||\r\n            this._appSession.policyDTO.Insureds_LazyLoad.every(applicant =>\r\n                this.isAgentSignedDateValid(applicant.BirthDate)\r\n            );\r\n\r\n        return isValid ? InputValueValidationResult.pass : InputValueValidationResult.fail;\r\n    }\r\n\r\n    private agentSignedDateExists(): boolean {\r\n        return DBDateUtil.isDateSet(this._appSession.policyDTO.AgentSignedDate);\r\n    }\r\n\r\n    private isAgentSignedDateValid(birthDate: DBDate): boolean {\r\n        return DBDateUtil.compareDates(this._appSession.policyDTO.AgentSignedDate, birthDate) === CompareResult.greater;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { InputValueValidator, InputValueValidationResult } from 'life-core/view-model/validation/input-value';\r\nimport { CompareResult } from 'life-core/util/lang';\r\n\r\nimport { DBDate } from 'ls-core/model';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { DBDateUtil } from 'ls-core/util';\r\n\r\n@Injectable()\r\nexport class ApplicationReceivedDateValidator implements InputValueValidator {\r\n    private _appSession: AppSession;\r\n\r\n    constructor(appSession: AppSession) {\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    public validate(): InputValueValidationResult {\r\n        const isValid = this._appSession.policyDTO.Insureds_LazyLoad.every(applicant =>\r\n            this.isApplicationReceivedDateValid(applicant.BirthDate)\r\n        );\r\n\r\n        return isValid ? InputValueValidationResult.pass : InputValueValidationResult.fail;\r\n    }\r\n\r\n    private isApplicationReceivedDateValid(birthDate: DBDate): boolean {\r\n        return DBDateUtil.compareDates(this._appSession.policyDTO.ReceiveDate, birthDate) === CompareResult.greater;\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods, DataService } from 'ls-core/service';\r\nimport { PolicyDTO } from 'ls-core/model';\r\nimport { AppSession } from 'ls-core/session';\r\n\r\n@Injectable()\r\nexport class UnderwriteService {\r\n    private _dataService: DataService;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(dataService: DataService, appSession: AppSession) {\r\n        this._dataService = dataService;\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    public underwrite(): Promise<UnderwriteResponse> {\r\n        const serviceParams = this.getUnderwriteServiceParams();\r\n        return this._dataService.updateData(serviceParams).then(response => {\r\n            return response.responsePayload as UnderwriteResponse;\r\n        });\r\n    }\r\n\r\n    private getUnderwriteServiceParams(): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.UNDERWRITING,\r\n            serviceMethod: UIServiceMethods.UNDERWRITE,\r\n            requestPayload: this.buildUnderwriteRequest()\r\n        });\r\n    }\r\n\r\n    private buildUnderwriteRequest(): UnderwriteRequest {\r\n        const request = new UnderwriteRequest();\r\n        request.policyDTO = this._appSession.policyDTO;\r\n        return request;\r\n    }\r\n}\r\n\r\nclass UnderwriteRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.UnderwritingRequest, LifeSuite.UIServiceDTO';\r\n    public policyDTO: PolicyDTO;\r\n}\r\n\r\nclass UnderwriteResponse {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.responses.UnderwritingResponse, LifeSuite.UIServiceDTO';\r\n    public policyDTO: PolicyDTO;\r\n    public UnderwritingResultMsg: string;\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { TabPolicySplitPaneAreas } from 'business/policy/tab';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class LSSplitContainerMessagesMapper {\r\n    protected i18n: I18n;\r\n    private _splitContainerMessagesMap: Map<string, any>;\r\n\r\n    constructor(i18n: I18n) {\r\n        this.i18n = i18n;\r\n        this.setupMessages();\r\n    }\r\n\r\n    public getMessage(areaId: string): string {\r\n        return this._splitContainerMessagesMap.has(areaId) ? this._splitContainerMessagesMap.get(areaId) : '';\r\n    }\r\n\r\n    private setupMessages(): void {\r\n        const multipleNotesMessage = this.i18n({\r\n            value: 'Multiple notes of the same type cannot be opened at the same time.',\r\n            id: 'split-pane.error.multiple-notes'\r\n        });\r\n\r\n        this._splitContainerMessagesMap = new Map([\r\n            [TabPolicySplitPaneAreas.AddCaseNote, multipleNotesMessage],\r\n            [TabPolicySplitPaneAreas.AddCaseSupplementalNote, multipleNotesMessage],\r\n            [TabPolicySplitPaneAreas.AddUWNote, multipleNotesMessage],\r\n            [TabPolicySplitPaneAreas.AddRequirementCaseNote, multipleNotesMessage],\r\n            [TabPolicySplitPaneAreas.AddReviewMessageNote, multipleNotesMessage],\r\n            [TabPolicySplitPaneAreas.AddMedicalConditionUWNote, multipleNotesMessage],\r\n            [\r\n                TabPolicySplitPaneAreas.ScratchPad,\r\n                this.i18n({\r\n                    value: 'Multiple scratch pads cannot be opened at the same time.',\r\n                    id: 'split-pane.error.multiple-scratch-pads'\r\n                })\r\n            ]\r\n        ]);\r\n    }\r\n}\r\n","module.exports = \"<div [class]=\\\"splitContainerClass\\\">\\r\\n\\t<lf-split direction=\\\"horizontal\\\" [useTransition]=\\\"true\\\" [gutterSize]=\\\"gutterSize\\\" [gutterColor]=\\\"gutterColor\\\" [dragGutterColor]=\\\"dragGutterColor\\\"\\r\\n\\t [splitterMinimized]=\\\"splitterMinimized\\\" (dragStart)=\\\"onSplitGutterDragStart($event)\\\" (dragEnd)=\\\"onSplitGutterDragEnd($event)\\\"\\r\\n\\t (gutterClick)=\\\"onSplitGutterClick($event)\\\">\\r\\n\\t\\t<lf-split-area [size]=\\\"containerAreasInfo.left.size\\\">\\r\\n\\t\\t\\t<div class=\\\"row justify-content-end\\\">\\r\\n\\t\\t\\t\\t<policy-toolbar></policy-toolbar>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t\\t<router-outlet></router-outlet>\\r\\n\\t\\t</lf-split-area>\\r\\n\\t\\t<lf-split-area *ngIf=\\\"splitterVisible\\\" [size]=\\\"containerAreasInfo.right.size\\\">\\r\\n\\t\\t\\t<lf-split-pane [splitPaneAreas]=\\\"splitPaneAreas\\\" direction=\\\"vertical\\\" stateId=\\\"split_pane\\\" [state]=\\\"componentsState.get('split_pane')\\\">\\r\\n\\t\\t\\t</lf-split-pane>\\r\\n\\t\\t</lf-split-area>\\r\\n\\t</lf-split>\\r\\n</div>\"","module.exports = \"/* Can redefine any of these variables in the themes by adding !default to the value */\\n/* Fonts */\\n/* Leftnav */\\n/* Navbar */\\n/* Footer */\\n/* Height Calculations */\\n/* Input components */\\n/* Obsolete ConsumerFacing variables\\r\\n\\r\\n$quote-btn-font-size: 23px;\\r\\n$form-quote-bton-font-size: 22px;\\r\\n$radio-checkbox-height: 20px;\\r\\n$radio-checkbox-width: 25px;\\r\\n$form-radius: 25px;\\r\\n$mobile-app-width: 93%;\\r\\n$panel-max-width: 400px;\\r\\n$wrapper-max-width: 1240px;\\r\\n\\r\\n$landing-pg-save-time-font-family: 'Goudy Old Style', Garamond, serif;\\r\\n$quote-font-family: 'Calisto MT', Serif;\\r\\n$invalid-message-font-family: 'adelle-sans', Helvetica, Arial, sans-serif;\\r\\n*/\\n.tab-split-container {\\n  height: calc(100vh - (94px + ((1.1rem - 16px) * 10)) - 7px); }\\n.tab-no-split-container {\\n  height: 100%; }\\npolicy-toolbar {\\n  min-height: 33px; }\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS90YWIvc3BsaXQtY29udGFpbmVyL0Q6XFxjb2RlXFxsaWZlc3VpdGVcXGJhc2VfMTBcXFVJXFxIVE1MNVxcTGlmZVN1aXRlLkFuZ3VsYXIvc3JjXFxzdHlsZXNcXGJhc2VcXGhlbHBlcnNcXHZhcmlhYmxlcy5zY3NzIiwic3JjL2xpZmVzdWl0ZS1hcHAvYnVzaW5lc3MvcG9saWN5L3RhYi9zcGxpdC1jb250YWluZXIvRDpcXGNvZGVcXGxpZmVzdWl0ZVxcYmFzZV8xMFxcVUlcXEhUTUw1XFxMaWZlU3VpdGUuQW5ndWxhci9zcmNcXGxpZmVzdWl0ZS1hcHBcXGJ1c2luZXNzXFxwb2xpY3lcXHRhYlxcc3BsaXQtY29udGFpbmVyXFx0YWItcG9saWN5LXNwbGl0LWNvbnRhaW5lci5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFLQSx1RkFBdUY7QUFFdkYsV0FBVztBQVlYLGFBQWE7QUFLYixZQUFZO0FBS1osWUFBWTtBQUdaLHlCQUF5QjtBQUt6QixzQkFBc0I7QUFJdEI7Ozs7Ozs7Ozs7Ozs7O0VBY0U7QUNqREY7RUFDSSw0REFIMkYsRUFJOUY7QUFFRDtFQUNJLGFBQVksRUFDZjtBQUVEO0VBQ0ksaUJBQWdCLEVBQ25CIiwiZmlsZSI6InNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS90YWIvc3BsaXQtY29udGFpbmVyL3RhYi1wb2xpY3ktc3BsaXQtY29udGFpbmVyLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiLy8kYm9vdHN0cmFwLXNhc3MtdmVyc2lvbjogJzMuMy43JztcclxuLy8kYm9vdHN0cmFwLXNhc3MtaWNvbi1wYXRoOiAnLi9qc3BtX3BhY2thZ2VzL2dpdGh1Yi90d2JzL2Jvb3RzdHJhcC1zYXNzQCcgKyAkYm9vdHN0cmFwLXNhc3MtdmVyc2lvbiArICcvYXNzZXRzL2ZvbnRzL2Jvb3RzdHJhcC8nO1xyXG4vLyRib290c3RyYXAtc2Fzcy1wYXRoOiAnLi4vLi4vanNwbV9wYWNrYWdlcy9naXRodWIvdHdicy9ib290c3RyYXAtc2Fzc0AnICsgJGJvb3RzdHJhcC1zYXNzLXZlcnNpb24gKyAnL2Fzc2V0cy9zdHlsZXNoZWV0cy9ib290c3RyYXAnO1xyXG4vLyRib290c3RyYXAtc2Fzcy12YXJpYWJsZXMtcGF0aDogJy4uLy4uL2pzcG1fcGFja2FnZXMvZ2l0aHViL3R3YnMvYm9vdHN0cmFwLXNhc3NAJyArICRib290c3RyYXAtc2Fzcy12ZXJzaW9uICsgJy9hc3NldHMvc3R5bGVzaGVldHMvYm9vdHN0cmFwL3ZhcmlhYmxlcyc7XHJcblxyXG4vKiBDYW4gcmVkZWZpbmUgYW55IG9mIHRoZXNlIHZhcmlhYmxlcyBpbiB0aGUgdGhlbWVzIGJ5IGFkZGluZyAhZGVmYXVsdCB0byB0aGUgdmFsdWUgKi9cclxuXHJcbi8qIEZvbnRzICovXHJcbiRmb250LXNpemUtYmFzZTogMC43cmVtO1xyXG4kZm9udC1zaXplLXNtYWxsOiAoKCRmb250LXNpemUtYmFzZSAqIDAuOSkpO1xyXG4kZm9udC1zaXplLWxhcmdlOiAoKCRmb250LXNpemUtYmFzZSAqIDEuMikpO1xyXG4kZm9udC1zaXplLWV4dHJhLWxhcmdlOiAoKCRmb250LXNpemUtYmFzZSAqIDUuMikpO1xyXG4kZm9udC1zaXplLWgxOiAoKCRmb250LXNpemUtYmFzZSAqIDIuNikpO1xyXG4kZm9udC1zaXplLWgyOiAoKCRmb250LXNpemUtYmFzZSAqIDIuMTUpKTtcclxuJGZvbnQtc2l6ZS1oMzogKCRmb250LXNpemUtYmFzZSAqIDIpO1xyXG4kZm9udC1zaXplLWg0OiAoKCRmb250LXNpemUtYmFzZSAqIDEuODUpKTtcclxuJGZvbnQtc2l6ZS1oNTogKCgkZm9udC1zaXplLWJhc2UgKiAxLjMpKTtcclxuJGZvbnQtc2l6ZS1oNjogKCgkZm9udC1zaXplLWJhc2UgKiAxLjEpKTtcclxuXHJcbi8qIExlZnRuYXYgKi9cclxuJGxlZnRuYXYtbWF4LXdpZHRoOiAxMi41cmVtO1xyXG4kbGVmdG5hdi1tYXgtd2lkdGgteGw6IDE0cmVtO1xyXG4kbGVmdG5hdi1pY29ucy1vbmx5LXdpZHRoOiAyLjVyZW07XHJcblxyXG4vKiBOYXZiYXIgKi9cclxuJG5hdmJhci1sb2dvLWhlaWdodDogNTBweCAhZGVmYXVsdDtcclxuJG5hdmJhci1sb2dvLXdpZHRoOiAyMDVweCAhZGVmYXVsdDtcclxuJG5hdmJhci1oZWlnaHQ6ICRuYXZiYXItbG9nby1oZWlnaHQgKyA1cHg7XHJcblxyXG4vKiBGb290ZXIgKi9cclxuJGZvb3Rlci1oZWlnaHQ6IDBweDtcclxuXHJcbi8qIEhlaWdodCBDYWxjdWxhdGlvbnMgKi9cclxuJG9mZnNldC1ib3R0b206IDdweDtcclxuJGdyaWQtc3RhdHVzLWJhci1oZWlnaHQ6IDI1cHg7XHJcbiRncmlkLW9mZnNldC1ib3R0b206ICRvZmZzZXQtYm90dG9tICsgJGdyaWQtc3RhdHVzLWJhci1oZWlnaHQ7XHJcblxyXG4vKiBJbnB1dCBjb21wb25lbnRzICovXHJcbiRpbnB1dC1oZWlnaHQ6IDEuNXJlbTtcclxuJGlucHV0LXRleHQtc2l6ZTogMC44cmVtO1xyXG5cclxuLyogT2Jzb2xldGUgQ29uc3VtZXJGYWNpbmcgdmFyaWFibGVzXHJcblxyXG4kcXVvdGUtYnRuLWZvbnQtc2l6ZTogMjNweDtcclxuJGZvcm0tcXVvdGUtYnRvbi1mb250LXNpemU6IDIycHg7XHJcbiRyYWRpby1jaGVja2JveC1oZWlnaHQ6IDIwcHg7XHJcbiRyYWRpby1jaGVja2JveC13aWR0aDogMjVweDtcclxuJGZvcm0tcmFkaXVzOiAyNXB4O1xyXG4kbW9iaWxlLWFwcC13aWR0aDogOTMlO1xyXG4kcGFuZWwtbWF4LXdpZHRoOiA0MDBweDtcclxuJHdyYXBwZXItbWF4LXdpZHRoOiAxMjQwcHg7XHJcblxyXG4kbGFuZGluZy1wZy1zYXZlLXRpbWUtZm9udC1mYW1pbHk6ICdHb3VkeSBPbGQgU3R5bGUnLCBHYXJhbW9uZCwgc2VyaWY7XHJcbiRxdW90ZS1mb250LWZhbWlseTogJ0NhbGlzdG8gTVQnLCBTZXJpZjtcclxuJGludmFsaWQtbWVzc2FnZS1mb250LWZhbWlseTogJ2FkZWxsZS1zYW5zJywgSGVsdmV0aWNhLCBBcmlhbCwgc2Fucy1zZXJpZjtcclxuKi9cclxuIiwiQGltcG9ydCAnLi4vLi4vLi4vLi4vLi4vc3R5bGVzL2Jhc2UvaGVscGVycy92YXJpYWJsZXMnO1xyXG5cclxuJHNwbGl0dGVyLW9mZnNldC10b3A6IDM5cHg7XHJcbiRzcGxpdHRlci10b3A6ICRzcGxpdHRlci1vZmZzZXQtdG9wICsgJG5hdmJhci1oZWlnaHQ7XHJcbiRzcGxpdHRlci1oZWlnaHQ6IGNhbGMoMTAwdmggLSAoI3skc3BsaXR0ZXItdG9wfSArICgoMS4xcmVtIC0gMTZweCkgKiAxMCkpIC0gI3skb2Zmc2V0LWJvdHRvbX0pO1xyXG5cclxuLnRhYi1zcGxpdC1jb250YWluZXIge1xyXG4gICAgaGVpZ2h0OiAkc3BsaXR0ZXItaGVpZ2h0O1xyXG59XHJcblxyXG4udGFiLW5vLXNwbGl0LWNvbnRhaW5lciB7XHJcbiAgICBoZWlnaHQ6IDEwMCU7XHJcbn1cclxuXHJcbnBvbGljeS10b29sYmFyIHtcclxuICAgIG1pbi1oZWlnaHQ6IDMzcHg7XHJcbn1cclxuIl19 */\"","﻿import { Component, Injector, ViewChild } from '@angular/core';\r\n\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport {\r\n    SplitArea,\r\n    SplitPaneArea,\r\n    SplitAreasInfo,\r\n    LfSplitPaneComponent,\r\n    SplitPaneContainerViewModel\r\n} from 'life-core/component/layout/split';\r\nimport { TabPolicySplitPaneAreaDefs } from './tab-policy-split-pane-areas';\r\n\r\n@Component({\r\n    selector: 'tab-policy-split-container',\r\n    templateUrl: './tab-policy-split-container.component.html',\r\n    styleUrls: ['./tab-policy-split-container.component.scss']\r\n})\r\nexport class TabPolicySplitContainerComponent extends SplitPaneContainerViewModel {\r\n    @ViewChild(LfSplitPaneComponent)\r\n    protected splitPane: LfSplitPaneComponent;\r\n\r\n    constructor(injector: Injector, i18n: I18n) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    protected getContainerAreasInfo(): SplitAreasInfo {\r\n        return {\r\n            left: new SplitArea({ id: 'split-left', index: 1 }),\r\n            right: new SplitArea({ id: 'split-right', index: 2 })\r\n        };\r\n    }\r\n\r\n    protected createSplitPaneArea(areaId: string): SplitPaneArea {\r\n        return SplitPaneAreaFactory.createSplitPaneArea(areaId);\r\n    }\r\n\r\n    protected setContainerAreasSize(splitPaneSize: number): void {\r\n        const SplitTotalSize = 100;\r\n        this.containerAreasInfo.right.size = splitPaneSize;\r\n        this.containerAreasInfo.left.size = SplitTotalSize - splitPaneSize;\r\n    }\r\n\r\n    protected get splitPaneInitialSize(): number {\r\n        const SplitPanelInitialSize = 35;\r\n        return SplitPanelInitialSize;\r\n    }\r\n\r\n    protected get splitPaneStateValueKey(): string {\r\n        return 'policy_split_pane';\r\n    }\r\n\r\n    protected getErrorItemDialogTitle(): string {\r\n        return this.i18n({ value: 'Message from webpage', id: 'dialog.message.from.webpage.error' });\r\n    }\r\n\r\n    protected getSplitAreaType(areaId: string): string {\r\n        return TabPolicySplitPaneAreaDefs[areaId] ? TabPolicySplitPaneAreaDefs[areaId].type : '';\r\n    }\r\n}\r\n\r\nclass SplitPaneAreaFactory {\r\n    public static createSplitPaneArea(areaId: string): SplitPaneArea {\r\n        const splitPaneArea: SplitPaneArea = TabPolicySplitPaneAreaDefs[areaId];\r\n        if (!splitPaneArea) {\r\n            throw new Error(`Undefined Split Pane Area ID: '${areaId}'.`);\r\n        }\r\n        return splitPaneArea;\r\n    }\r\n}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n\\t<tab-policy-split-container></tab-policy-split-container>\\r\\n</form>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { ActionsSubject } from '@ngrx/store';\r\n\r\nimport { DataSavingFlags, DataSaveStatus } from 'life-core/reducer/actions';\r\nimport { Action } from 'life-core/reducer/action';\r\nimport { PrimaryTabHostViewModel, TabChannels } from 'life-core/component/layout/tabview';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { ParentChildRegistry } from 'life-core/view-model';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { ToasterMessage, ToasterSeverity, ToasterChannels } from 'life-core/component/toaster';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { PolicyDTO } from 'ls-core/model';\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\n\r\nimport { CaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\nimport { SplitPaneToLeftMenuCommunicator } from 'ui/shared/communicator';\r\n\r\n@Component({\r\n    selector: 'tab-policy',\r\n    templateUrl: './tab-policy.component.html',\r\n    providers: [\r\n        ParentChildRegistry,\r\n        { provide: AuthorizationProvider, useClass: CaseAuthorizationProvider },\r\n        PolicySubscriber,\r\n        SplitPaneToLeftMenuCommunicator\r\n    ]\r\n})\r\nexport class TabPolicyComponent extends PrimaryTabHostViewModel {\r\n    private _policy: PolicyDTO;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        actionsSubject: ActionsSubject,\r\n        i18n: I18n,\r\n        splitPaneToLeftMenuCommunicator: SplitPaneToLeftMenuCommunicator // Please do not delete SplitPaneToLeftMenuCommunicator\r\n    ) {\r\n        super(injector);\r\n        policySubscriber.subscribeDirect(this, p => {\r\n            this._policy = p;\r\n        });\r\n        this.i18n = i18n;\r\n        this.subscribeToDataSave(actionsSubject);\r\n    }\r\n\r\n    protected isDataSaveNeeded(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected isValidatable(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getDataToSave(): any {\r\n        return this._policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n\r\n    private subscribeToDataSave(actionsSubject: ActionsSubject): void {\r\n        this.trackSubscription(\r\n            actionsSubject.subscribe((action: Action<DataSaveStatus>) => {\r\n                if (this.isPolicyDataSaved(action)) {\r\n                    this.notifyPolicyDataSaved();\r\n                }\r\n            })\r\n        );\r\n    }\r\n\r\n    private isPolicyDataSaved(action: Action<DataSaveStatus>): boolean {\r\n        return action.type == DataSavingFlags.DATA_SAVE_STATUS && action.payload == DataSaveStatus.Succeeded;\r\n    }\r\n\r\n    private notifyPolicyDataSaved(): void {\r\n        this.messagingService.publish(\r\n            ToasterChannels.Message,\r\n            new ToasterMessage({\r\n                severity: ToasterSeverity.SUCCESS,\r\n                summary: this.i18n({\r\n                    value: 'Policy Data Saved.',\r\n                    id: 'policy.tab.message.saved'\r\n                })\r\n            })\r\n        );\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ComponentsModule } from 'life-core/component/components.module';\r\nimport { PolicyToolbarModule } from './toolbar/policy-toolbar.module';\r\nimport { TabPolicyComponent } from './tab-policy.component';\r\nimport { TabPolicySplitContainerComponent } from './split-container/tab-policy-split-container.component';\r\nimport { SplitPaneContainerMessagesMapper } from 'life-core/component/layout/split/split-pane/vm/split-pane-container-messages.mapper';\r\nimport { LSSplitContainerMessagesMapper } from './split-container/ls-split-container-messages.mapper';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, ComponentsModule, PolicyToolbarModule],\r\n    declarations: [TabPolicyComponent, TabPolicySplitContainerComponent],\r\n    providers: [{ provide: SplitPaneContainerMessagesMapper, useClass: LSSplitContainerMessagesMapper }]\r\n})\r\nexport class TabPolicyModule {}\r\n","export * from './open-case-log-view.delegate';\r\nexport * from './underwrite-case.delegate';\r\nexport * from './validation-button.delegate';\r\nexport * from './open-view-notes.delegate';\r\nexport * from './open-help.delegate';\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { ModalDialog, DialogButton, DialogButtonType, DialogSize } from 'life-core/component';\r\nimport { ResolvedDataNames } from 'life-core/view-model';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { AppSession } from 'ls-core/session';\r\n\r\nimport { CaseLogComponent } from 'business/policy/case-log/case-log.component';\r\nimport { CaseLogMetaDataResolver } from 'business/policy/case-log/filter/case-log-metadata.resolver';\r\n\r\n@Injectable()\r\nexport class OpenCaseLogViewDelegate {\r\n    private _appSession: AppSession;\r\n    private _modalDialog: ModalDialog;\r\n    private i18n: I18n;\r\n\r\n    constructor(modalDialog: ModalDialog, appSession: AppSession, i18n: I18n) {\r\n        this._modalDialog = modalDialog;\r\n        this._appSession = appSession;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public openView(): void {\r\n        this._modalDialog.open({\r\n            view: CaseLogComponent,\r\n            title: this.i18n({ value: 'Case Log View', id: 'policy.case.log.headertitle' }),\r\n            buttons: [\r\n                new DialogButton({\r\n                    type: DialogButtonType.CANCEL,\r\n                    label: this.i18n({ value: 'Close', id: 'general.button.label.close' }),\r\n                    options: { isDefault: true }\r\n                })\r\n            ],\r\n            data: this._appSession.policyDTO.PolicyId,\r\n            resolve: [{ resolveName: ResolvedDataNames.metaData, resolverClass: CaseLogMetaDataResolver }],\r\n            size: DialogSize.large\r\n        });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { OpenURLDelegate } from 'ls-core/handler/open-url-delegate';\r\nimport { LsAppConfig } from 'ls-core/config';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { UrlLocaleUtil } from 'ls-core/i18n';\r\n\r\n@Injectable()\r\nexport class OpenHelpDelegate extends OpenURLDelegate {\r\n    private _config: LsAppConfig;\r\n    private _session: AppSession;\r\n\r\n    constructor(config: LsAppConfig, session: AppSession) {\r\n        super();\r\n        this._config = config;\r\n        this._session = session;\r\n    }\r\n\r\n    public openURL(url?: string): void {\r\n        super.openURL(this.getHelpUrl());\r\n    }\r\n\r\n    private getHelpUrl(): string {\r\n        const urlLocale = UrlLocaleUtil.getUrlLocale(this._session.user);\r\n        const helpUrl = this._config.helpPdfUrl.replace('{locale}', urlLocale);\r\n        return helpUrl;\r\n    }\r\n}\r\n","import { Injectable, Injector, OnDestroy } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\n\r\nimport { OpenAppParams } from 'life-core/startup';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { StartupForViewNotesContext } from 'ls-core/startup';\r\nimport { OpenViewNotesHandler, ActiveApplicantHelper } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class OpenViewNotesDelegate implements OnDestroy {\r\n    protected injector: Injector;\r\n    protected activeApplicantIdSubscription: Subscription;\r\n    protected activeApplicantId: number;\r\n\r\n    constructor(injector: Injector, activeApplicantHelper: ActiveApplicantHelper) {\r\n        this.injector = injector;\r\n        this.activeApplicantIdSubscription = activeApplicantHelper.activeApplicantIdObservable.subscribe(\r\n            activeApplicantId => {\r\n                this.activeApplicantId = activeApplicantId;\r\n            }\r\n        );\r\n    }\r\n\r\n    public openView(): void {\r\n        const appSession = this.injector.get(AppSession);\r\n        const startupForViewNotesContext = {\r\n            policyId: appSession.policyId,\r\n            activeApplicantId: this.activeApplicantId\r\n        } as StartupForViewNotesContext;\r\n\r\n        const openViewNotesHandler = this.injector.get(OpenViewNotesHandler);\r\n        const params = {\r\n            context: startupForViewNotesContext,\r\n            newInstance: true\r\n        } as OpenAppParams;\r\n        openViewNotesHandler.execute(params);\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this.activeApplicantIdSubscription.unsubscribe();\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { I18n } from 'life-core/i18n';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { DialogResult, ConfirmDialog, DialogButton, DialogButtonType } from 'life-core/component';\r\n\r\nimport { UnderwriteService } from 'business/policy/tab/services/underwriter.service';\r\nimport { PolicyDTO } from 'ls-core/model';\r\nimport { DTOObjectUtil } from 'ls-core/util';\r\n\r\n@Injectable()\r\nexport class UnderwriteCaseDelegate {\r\n    private _underwriteService: UnderwriteService;\r\n    private _confirmDialog: ConfirmDialog;\r\n    private i18n: I18n;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        underwriteService: UnderwriteService,\r\n        confirmDialog: ConfirmDialog,\r\n        appSession: AppSession,\r\n        i18n: I18n\r\n    ) {\r\n        this._underwriteService = underwriteService;\r\n        this._confirmDialog = confirmDialog;\r\n        this.i18n = i18n;\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    public underwrite(): void {\r\n        this._underwriteService.underwrite().then(result => {\r\n            if (this.isPolicyUnderwritingSuccessful(result)) {\r\n                this.updatePolicyInSession(result.policyDTO);\r\n                this.showConfirmDialog(\r\n                    this.i18n({ value: 'Underwrite Policy succeeded!', id: 'policytoolbar.uwpolicy.alertmsg' })\r\n                );\r\n            } else {\r\n                this.showConfirmDialog(result.UnderwritingResultMsg);\r\n            }\r\n        });\r\n    }\r\n\r\n    private updatePolicyInSession(updatedPolicy: PolicyDTO): void {\r\n        const policyDTO: PolicyDTO = DTOObjectUtil.deepConvertObjectOfType(updatedPolicy, PolicyDTO) as PolicyDTO;\r\n        this._appSession.updatePolicy(policyDTO);\r\n    }\r\n\r\n    private isPolicyUnderwritingSuccessful(result: any): boolean {\r\n        return result.UnderwritingResultMsg === '';\r\n    }\r\n\r\n    private showConfirmDialog(message: string): Promise<DialogResult> {\r\n        return this._confirmDialog.open({\r\n            message: message,\r\n            title: this.i18n({ value: 'Underwrite Policy', id: 'policytoolbar.uwpolicy.title' }),\r\n            buttons: [new DialogButton({ type: DialogButtonType.OK })]\r\n        });\r\n    }\r\n}\r\n","﻿import { FormValidationMessage, ServerValidationMessage, ValidationMessageData } from 'life-core/view-model';\r\n\r\nexport class ValidationButtonDelegate {\r\n    private _formValidationMessages: FormValidationMessage[] = [];\r\n    private _serverValidationMessages: ServerValidationMessage[] = [];\r\n\r\n    public onFormValidationMessagesChange(messages: FormValidationMessage[]): void {\r\n        this._formValidationMessages = messages;\r\n    }\r\n\r\n    public onServerValidationMessagesChange(messages: ServerValidationMessage[]): void {\r\n        this._serverValidationMessages = messages;\r\n    }\r\n\r\n    public get validationMessageCount(): number {\r\n        return this._formValidationMessages.length + this._serverValidationMessages.length;\r\n    }\r\n\r\n    public needToShowValidationButton(): boolean {\r\n        return this.validationMessageCount > 0;\r\n    }\r\n\r\n    public getValidationMessagesData(): ValidationMessageData {\r\n        return new ValidationMessageData(this._formValidationMessages, this._serverValidationMessages);\r\n    }\r\n}\r\n","export const PolicyToolBarButtonAction = {\r\n    EXPAND_COLLAPSE_PANELS: 'doExpandCollapsePanels',\r\n    EXPAND_PANELS: 'expandPanels',\r\n    COLLAPSE_PANELS: 'collapsePanels',\r\n    VIEW_CASE_LOG: 'doCaseLog',\r\n    UNDERWRITE: 'doUnderwrite',\r\n    ACTION_NOTE: 'displayNoteMenu',\r\n    VIEW_NOTES: 'viewNotes',\r\n    ADD_CASE_NOTES: 'addCaseNotes',\r\n    ADD_UW_NOTES: 'addUWNotes',\r\n    VIEW_SCRATCHPAD: 'scratchPad',\r\n    VIEW_UW_NOTES: 'viewUWNotes',\r\n    ADD_MEDCON_NOTES: 'addMedConNotes'\r\n};\r\n","export const PolicyToolbarButtonType = {\r\n    EXPAND_COLLAPSE_PANEL: 'panels',\r\n    WINDOW_DOCK: 'windowDock',\r\n    NOTE: 'note',\r\n    CASE_LOG: 'caseLog',\r\n    UNDERWRITE: 'underwrite',\r\n    FAVORITES: 'favorites'\r\n};\r\n","module.exports = \"ls-policy-toolbar.stick {\\n    position: fixed;\\n    top: 55px;\\n    right: 17px;\\n    z-index: 1;\\n    transition: margin 0.5s ease-out;\\n    -webkit-transition: margin 0.5s ease-out;\\n}\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS90YWIvdG9vbGJhci9wb2xpY3ktdG9vbGJhci5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksZ0JBQWdCO0lBQ2hCLFVBQVU7SUFDVixZQUFZO0lBQ1osV0FBVztJQUNYLGlDQUFpQztJQUNqQyx5Q0FBeUM7Q0FDNUMiLCJmaWxlIjoic3JjL2xpZmVzdWl0ZS1hcHAvYnVzaW5lc3MvcG9saWN5L3RhYi90b29sYmFyL3BvbGljeS10b29sYmFyLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyJscy1wb2xpY3ktdG9vbGJhci5zdGljayB7XG4gICAgcG9zaXRpb246IGZpeGVkO1xuICAgIHRvcDogNTVweDtcbiAgICByaWdodDogMTdweDtcbiAgICB6LWluZGV4OiAxO1xuICAgIHRyYW5zaXRpb246IG1hcmdpbiAwLjVzIGVhc2Utb3V0O1xuICAgIC13ZWJraXQtdHJhbnNpdGlvbjogbWFyZ2luIDAuNXMgZWFzZS1vdXQ7XG59XG4iXX0= */\"","module.exports = \"<ls-policy-toolbar [buttons]=\\\"toolbarButtons\\\" stick stickMin=\\\"56\\\" styleClass=\\\"ui-toolbar-group-right\\\"></ls-policy-toolbar>\"","﻿import { Component, Injector, ViewChild } from '@angular/core';\r\n\r\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\r\nimport { ToolbarButton, ToolBarElement, ToolBarKey } from 'life-core/component/toolbar';\r\nimport {\r\n    ViewModel,\r\n    FormValidationMessage,\r\n    ServerValidationMessage,\r\n    ViewValidationChannels,\r\n    ViewValidationHandler,\r\n    ViewValidationHandlerParams\r\n} from 'life-core/view-model';\r\nimport { PanelChannels } from 'life-core/component/layout/panel/panel-channels';\r\nimport { LfSplitPaneChannels } from 'life-core/component/layout/split';\r\nimport { ValidationPopoverDataManager } from 'life-core/view-model/validation';\r\n\r\nimport { AppSession } from 'ls-core/session';\r\nimport { OpenURLDelegate } from 'ls-core/handler/open-url-delegate';\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { PolicyDTO } from 'ls-core/model';\r\nimport { LsPolicyToolbar } from 'ls-core/component/toolbar/ls-policy-toolbar';\r\n\r\nimport {\r\n    ToolBarService,\r\n    ToolBarSetupDelegate,\r\n    ToolBarType,\r\n    ToolBarButtonType,\r\n    ToolBarButtonAction\r\n} from 'business/shared/toolbar';\r\nimport { LogPerformanceDelegate } from 'business/policy/shared/log-performance/log-performance.delegate';\r\nimport { RefreshPolicyHandler } from 'business/policy/shared/refresh-policy/refresh-policy.handler';\r\nimport {\r\n    OpenCaseLogViewDelegate,\r\n    UnderwriteCaseDelegate,\r\n    ValidationButtonDelegate,\r\n    OpenHelpDelegate\r\n} from './delegates';\r\nimport { TabPolicySplitPaneAreas } from '../split-container/tab-policy-split-pane-areas';\r\nimport { PolicyToolbarButtonType } from './policy-toolbar-button-type';\r\nimport { PolicyToolBarButtonAction } from './policy-toolbar-button-action';\r\nimport { OpenViewNotesDelegate } from './delegates/open-view-notes.delegate';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Component({\r\n    selector: 'policy-toolbar',\r\n    templateUrl: './policy-toolbar.component.html',\r\n    styleUrls: ['./policy-toolbar.component.css'],\r\n    providers: [ValidationPopoverDataManager]\r\n})\r\nexport class PolicyToolbarComponent extends ViewModel {\r\n    public toolbarButtons: ToolbarButton[] = [];\r\n\r\n    @ViewChild(LsPolicyToolbar)\r\n    private _toolbar: LsPolicyToolbar;\r\n    private _appSession: AppSession;\r\n    private _messagingService: IMessagingService;\r\n    private _validationButtonDelegate: ValidationButtonDelegate;\r\n    private _toolBarService: ToolBarService;\r\n    private _toolBarSetupDelegate: ToolBarSetupDelegate;\r\n    private _toolBarButtonsMap: { readonly [action: string]: Function };\r\n    private _openURLDelegate: OpenURLDelegate;\r\n    private _logPerformanceDelegate: LogPerformanceDelegate;\r\n    private _validationPopoverDataManager: ValidationPopoverDataManager;\r\n    constructor(\r\n        injector: Injector,\r\n        appSession: AppSession,\r\n        messagingService: MessagingService,\r\n        toolBarService: ToolBarService,\r\n        toolBarSetupDelegate: ToolBarSetupDelegate,\r\n        logPerformanceDelegate: LogPerformanceDelegate,\r\n        validationPopoverDataManager: ValidationPopoverDataManager,\r\n        openURLDelegate: OpenURLDelegate,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n        this._messagingService = messagingService;\r\n        this._validationButtonDelegate = new ValidationButtonDelegate();\r\n        this._toolBarService = toolBarService;\r\n        this._toolBarSetupDelegate = toolBarSetupDelegate;\r\n        this._openURLDelegate = openURLDelegate;\r\n        this._logPerformanceDelegate = logPerformanceDelegate;\r\n        this._validationPopoverDataManager = validationPopoverDataManager;\r\n        this.setupSubscriptions();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this._toolBarService.loadToolBar(this.buildToolBarKey()).then((linkItems: ToolBarElement[]) => {\r\n            this.setupToolBarButtons(linkItems);\r\n        });\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public ngAfterViewInit(): void {\r\n        super.ngAfterViewInit();\r\n        this.setupToolBarButtonsMap();\r\n    }\r\n\r\n    protected setupSubscriptions(): void {\r\n        this.subscriptionTracker.track(\r\n            this._messagingService.subscribeNewMessageOnly(\r\n                ViewValidationChannels.FormValidationMessagesChange,\r\n                (messages: FormValidationMessage[]) => this.onFormValidationMessagesChange(messages)\r\n            )\r\n        );\r\n        this.subscriptionTracker.track(\r\n            this._messagingService.subscribeNewMessageOnly(\r\n                ViewValidationChannels.ServerValidationMessagesChange,\r\n                (messages: ServerValidationMessage[]) => this.onServerValidationMessagesChange(messages)\r\n            )\r\n        );\r\n    }\r\n\r\n    protected getDataToSave(): PolicyDTO {\r\n        return this._appSession.policyDTO;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n\r\n    private buildToolBarKey(): ToolBarKey {\r\n        return new ToolBarKey({\r\n            toolBarName: ToolBarType.POLICY,\r\n            objectId: this._appSession.policyId.toString()\r\n        });\r\n    }\r\n\r\n    private setupToolBarButtons(linkItems: ToolBarElement[]): void {\r\n        this.toolbarButtons = this._toolBarSetupDelegate.setup(\r\n            linkItems,\r\n            ({ action, event, labelValue }: { action: string; event?: Event; labelValue?: string }) =>\r\n                this.onToolBarButtonClick({ action, labelValue, event })\r\n        );\r\n        this.setValidationDialogParams();\r\n    }\r\n\r\n    private setValidationDialogParams(): void {\r\n        const button = this.getButton(ToolBarButtonType.VALIDATE);\r\n        button.popoverParams.data = this._validationPopoverDataManager.popoverDataAsObservable();\r\n        button.popoverParams.title = this.i18n({ value: 'Validation Errors', id: 'policy.toolbar.errorpopover.title' });\r\n    }\r\n\r\n    private setupToolBarButtonsMap(): void {\r\n        this._toolBarButtonsMap = {\r\n            [ToolBarButtonAction.VALIDATE]: () => this.onButtonValidationClick(),\r\n            [ToolBarButtonAction.SAVE_REFRESH]: () => this.onButtonSaveRefreshClick(),\r\n            [ToolBarButtonAction.FAVORITES_ICON]: (event: Event) => this.onFavoriteIconClick(event),\r\n            [ToolBarButtonAction.FAVORITES]: ({ labelValue: string }) =>\r\n                this.onFavoritesLinkClick({ labelValue: string }),\r\n            [PolicyToolBarButtonAction.ACTION_NOTE]: (event: Event) => this.onButtonNotesClick(event),\r\n            [PolicyToolBarButtonAction.VIEW_NOTES]: (event: Event) => this.onViewNotesClick(),\r\n            [PolicyToolBarButtonAction.ADD_CASE_NOTES]: () => this.onAddCaseNotesClick(),\r\n            [PolicyToolBarButtonAction.ADD_UW_NOTES]: () => this.onAddUWNotesClick(),\r\n            [PolicyToolBarButtonAction.VIEW_CASE_LOG]: () => this.onButtonCaseLogClick(),\r\n            [PolicyToolBarButtonAction.UNDERWRITE]: () => this.onButtonUnderwriteClick(),\r\n            [ToolBarButtonAction.HELP]: () => this.onButtonHelpClick(),\r\n            [PolicyToolBarButtonAction.VIEW_SCRATCHPAD]: () => this.onViewScratchPadClick(),\r\n            [PolicyToolBarButtonAction.EXPAND_COLLAPSE_PANELS]: (event: Event) => this.onButtonPanelsClick(event),\r\n            [PolicyToolBarButtonAction.EXPAND_PANELS]: () => this.onExpandPanelsClick(),\r\n            [PolicyToolBarButtonAction.COLLAPSE_PANELS]: () => this.onCollapsePanelsClick()\r\n        };\r\n    }\r\n\r\n    private onToolBarButtonClick({\r\n        action,\r\n        event,\r\n        labelValue\r\n    }: {\r\n        action: string;\r\n        event?: Event;\r\n        labelValue?: string;\r\n    }): void {\r\n        const toolBarButtonClickHandler = this._toolBarButtonsMap[action];\r\n        if (toolBarButtonClickHandler) {\r\n            if (labelValue) {\r\n                toolBarButtonClickHandler({ labelValue: labelValue });\r\n            } else {\r\n                toolBarButtonClickHandler({ event: event });\r\n            }\r\n        }\r\n    }\r\n\r\n    private onButtonValidationClick(): void {\r\n        const viewValidationHandler = this.injector.get(ViewValidationHandler);\r\n        viewValidationHandler.execute(new ViewValidationHandlerParams(this.parentChildRegistry.root));\r\n    }\r\n\r\n    private onButtonNotesClick(event: Event): void {\r\n        if (event) {\r\n            this._toolbar.getSplitButton(PolicyToolbarButtonType.NOTE).onDropdownButtonClick(event);\r\n        }\r\n    }\r\n\r\n    private onViewNotesClick(): void {\r\n        const openViewNotesDelegate = this.injector.get(OpenViewNotesDelegate);\r\n        openViewNotesDelegate.openView();\r\n    }\r\n\r\n    private onAddCaseNotesClick(): void {\r\n        this._messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, {\r\n            areaId: TabPolicySplitPaneAreas.AddCaseNote\r\n        });\r\n    }\r\n\r\n    private onAddUWNotesClick(): void {\r\n        this._messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, {\r\n            areaId: TabPolicySplitPaneAreas.AddUWNote\r\n        });\r\n    }\r\n\r\n    private onViewScratchPadClick(): void {\r\n        this._messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, {\r\n            areaId: TabPolicySplitPaneAreas.ScratchPad\r\n        });\r\n    }\r\n\r\n    private onButtonCaseLogClick(): void {\r\n        const openCaseLogViewDelegate = this.injector.get(OpenCaseLogViewDelegate);\r\n        openCaseLogViewDelegate.openView();\r\n    }\r\n\r\n    private onButtonUnderwriteClick(): void {\r\n        this.saveData().then(() => {\r\n            const underwriteCaseDelegate = this.injector.get(UnderwriteCaseDelegate);\r\n            underwriteCaseDelegate.underwrite();\r\n        });\r\n    }\r\n\r\n    private onButtonHelpClick(): void {\r\n        this.injector.get(OpenHelpDelegate).openURL();\r\n    }\r\n\r\n    private onButtonSaveRefreshClick(): void {\r\n        this._logPerformanceDelegate.log(true, this._appSession.policyDTO.PolicyNumber, 'caseRefresh');\r\n\r\n        const refreshPolicyHandler = this.injector.get(RefreshPolicyHandler);\r\n        this.changeManager.setIsDirty(this.isDirty());\r\n        refreshPolicyHandler.setViewValidationDelegate(this.viewValidationDelegate);\r\n        refreshPolicyHandler.execute();\r\n    }\r\n\r\n    private onFavoritesLinkClick(pageLink: { labelValue: string }): void {\r\n        if (pageLink.labelValue) {\r\n            this._openURLDelegate.openURL(pageLink.labelValue);\r\n        }\r\n    }\r\n\r\n    private onFavoriteIconClick(event: Event): void {\r\n        this._toolbar.getSplitButton(PolicyToolbarButtonType.FAVORITES).onDropdownButtonClick(event);\r\n    }\r\n\r\n    private onButtonPanelsClick(event: Event): void {\r\n        this._toolbar.getSplitButton(PolicyToolbarButtonType.EXPAND_COLLAPSE_PANEL).onDropdownButtonClick(event);\r\n    }\r\n\r\n    private onExpandPanelsClick(): void {\r\n        this._messagingService.publish(PanelChannels.ExpandAllPanels);\r\n    }\r\n\r\n    private onCollapsePanelsClick(): void {\r\n        this._messagingService.publish(PanelChannels.CollapseAllPanels);\r\n    }\r\n\r\n    private onFormValidationMessagesChange(messages: FormValidationMessage[]): void {\r\n        this._validationButtonDelegate.onFormValidationMessagesChange(messages);\r\n        this.showHideValidationButton();\r\n    }\r\n\r\n    private onServerValidationMessagesChange(messages: ServerValidationMessage[]): void {\r\n        this._validationButtonDelegate.onServerValidationMessagesChange(messages);\r\n        this.showHideValidationButton();\r\n    }\r\n\r\n    private showHideValidationButton(): void {\r\n        const button = this.getButton(ToolBarButtonType.VALIDATE);\r\n        const needToShowButton = this._validationButtonDelegate.needToShowValidationButton();\r\n        if (button) {\r\n            // not sure how to remove toolbar-button-medium class, hence resetting button icon\r\n            button.icon = 'toolbar-button-small button-validate';\r\n            this.showHideButton(button, needToShowButton);\r\n        }\r\n        if (needToShowButton) {\r\n            this.setButtonBadge(button);\r\n            this.updatePopoverDialogData();\r\n        }\r\n    }\r\n\r\n    private setButtonBadge(button: ToolbarButton): void {\r\n        button.badge = this._validationButtonDelegate.validationMessageCount.toString();\r\n    }\r\n\r\n    private updatePopoverDialogData(): void {\r\n        this._validationPopoverDataManager.updatePopoverData({\r\n            validationMessages: this._validationButtonDelegate.getValidationMessagesData(),\r\n            formInputs: this.parentChildRegistry.combinedFormInputs\r\n        });\r\n    }\r\n\r\n    private showHideButton(button: ToolbarButton, needToShowButton: boolean): void {\r\n        button.visible = needToShowButton;\r\n    }\r\n\r\n    private getButton(buttonId: string): ToolbarButton {\r\n        return this.toolbarButtons.find(button => button.id == buttonId);\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this._messagingService.closeChannel(ViewValidationChannels.RenderValidationMessages);\r\n        super.ngOnDestroy();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { TOOLBAR_POPOVER_DIALOG_PARAMS_MAP } from 'life-core/component/toolbar';\r\n\r\nimport { OpenURLDelegate } from 'ls-core/handler/open-url-delegate';\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { CaseLogMetaDataResolver } from 'business/policy/case-log/filter/case-log-metadata.resolver';\r\nimport { UnderwriteService } from 'business/policy/tab/services/underwriter.service';\r\nimport { ToolBarService, ToolBarSetupDelegate, lsPopoverDialogParamsMap } from 'business/shared/toolbar';\r\n\r\nimport { OpenCaseLogViewDelegate, UnderwriteCaseDelegate, OpenViewNotesDelegate, OpenHelpDelegate } from './delegates';\r\nimport { PolicyToolbarComponent } from './policy-toolbar.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, LsComponentsModule],\r\n    declarations: [PolicyToolbarComponent],\r\n    providers: [\r\n        OpenViewNotesDelegate,\r\n        OpenCaseLogViewDelegate,\r\n        UnderwriteCaseDelegate,\r\n        CaseLogMetaDataResolver,\r\n        UnderwriteService,\r\n        { provide: TOOLBAR_POPOVER_DIALOG_PARAMS_MAP, useValue: lsPopoverDialogParamsMap },\r\n        ToolBarService,\r\n        ToolBarSetupDelegate,\r\n        OpenURLDelegate,\r\n        OpenHelpDelegate\r\n    ],\r\n    exports: [PolicyToolbarComponent]\r\n})\r\nexport class PolicyToolbarModule {}\r\n","module.exports = \"<span>Benefit: {{benefit.BenefitId}}, Amount: {{benefit.Amount | lfCurrency:'':'':'1.2-2'}}</span>\"","import { Component, Injector, Injectable, Input } from '@angular/core';\n\nimport { ViewModel } from 'life-core/view-model';\nimport { BenefitDTO } from 'ls-core/model';\r\n\n@Component({\n    selector: 'ls-benefit',\n    templateUrl: './benefit.component.html'\n})\n\n@Injectable()\nexport class BenefitComponent extends ViewModel {\n\r\n\t@Input() benefit: BenefitDTO;\r\n\r\n\tconstructor(injector: Injector) {\n\t\tsuper(injector);\r\n    }\n\n}\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames, CoverageDTO } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\nimport { WorksheetCoverageFormFieldsLoader } from 'business/policy/worksheet/case-disp/coverage/form';\r\n\r\n@Injectable()\r\nexport class CaseDispositionDataResolver extends BasePolicyDataResolver {\r\n    private _worksheetCoverageFormFieldsLoader: WorksheetCoverageFormFieldsLoader;\r\n\r\n    constructor(injector: Injector, worksheetCoverageFormFieldsLoader: WorksheetCoverageFormFieldsLoader) {\r\n        super(injector);\r\n        this._worksheetCoverageFormFieldsLoader = worksheetCoverageFormFieldsLoader;\r\n    }\r\n\r\n    protected resolveAdditionalData(): Promise<any> {\r\n        return super.resolveAdditionalData().then(result => {\r\n            return this.loadFormFields().then(_ => {\r\n                return Promise.resolve(this.resolvedData);\r\n            });\r\n        });\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getLazyLoadTree());\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.PolicyCoverages, this.getCoverageLazyLoadTree());\r\n        return this.lazyDataLoader.batchLoad(request);\r\n    }\r\n\r\n    private getLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            const coveragesNode = insuredDTOLoadTree.AddChild(DataCollectionNames.Coverages);\r\n            {\r\n                coveragesNode.AddChildren([\r\n                    DataCollectionNames.ImpairmentRestrictions,\r\n                    DataCollectionNames.Amendments,\r\n                    DataCollectionNames.Reinsurers,\r\n                    DataCollectionNames.WorksheetRows\r\n                ]);\r\n            }\r\n\r\n            insuredDTOLoadTree.AddChildren([DataCollectionNames.Medication, DataCollectionNames.MedicalConditions]);\r\n        }\r\n\r\n        return insuredDTOLoadTree;\r\n    }\r\n\r\n    private getCoverageLazyLoadTree(): NTree<string> {\r\n        const policyCoveragesDTOLoadTree = new NTree<string>(DataCollectionNames.PolicyCoverages);\r\n        {\r\n            policyCoveragesDTOLoadTree.AddChild(DataCollectionNames.Benefits);\r\n        }\r\n        return policyCoveragesDTOLoadTree;\r\n    }\r\n\r\n    private loadFormFields(): Promise<void> {\r\n        return this._worksheetCoverageFormFieldsLoader.load(this.getAllInsuredCoverages(), this.policy);\r\n    }\r\n\r\n    private getAllInsuredCoverages(): Array<CoverageDTO> {\r\n        const coverages: Array<CoverageDTO> = [];\r\n        this.policy.Insureds_LazyLoad.forEach(insured => {\r\n            coverages.push(...insured.Coverages_LazyLoad);\r\n        });\r\n        return coverages;\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { BenefitDTO, PolicyCoverageDTO, ReinsurerDTO, CoverageDTO, InsuredDTO, PolicyDTO } from 'ls-core/model';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\nimport { ListsDataRequest, ListDataRequestBuilder } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { CollectionUtil } from 'life-core/util';\r\n\r\n@Injectable()\r\nexport class CaseDispositionListDataResolver extends BaseListDataResolver {\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this.policy);\r\n        listDataRequestBuilder.addListRequestItem(this.policy, 'ReinsuranceVendorCode');\r\n        this.addCoverageStatusDataListRequestItems(listDataRequestBuilder);\r\n        this.addReinsurerListDataRequest(listDataRequestBuilder);\r\n        // Other Sections\r\n        // ...\r\n\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n\r\n    private addCoverageStatusDataListRequestItems(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        const policyCoverage = ObjectUtil.createObjectOfType<PolicyCoverageDTO>(\r\n            this.policy.PolicyCoverages_LazyLoad,\r\n            PolicyCoverageDTO\r\n        ) as PolicyCoverageDTO;\r\n        const benefit = ObjectUtil.createObjectOfType<BenefitDTO>(\r\n            policyCoverage.Benefits_LazyLoad,\r\n            BenefitDTO\r\n        ) as BenefitDTO;\r\n        listDataRequestBuilder.addListRequestItem(benefit, 'CoverageStatus');\r\n    }\r\n\r\n    private addReinsurerListDataRequest(listDataRequestBuilder: ListDataRequestBuilder): void {\r\n        let insured: InsuredDTO;\r\n        let coverageDTO: CoverageDTO;\r\n        const insureds = this.policy.Insureds_LazyLoad;\r\n        if (insureds && insureds.length > 0) {\r\n            insured = insureds[0];\r\n            CollectionUtil.addItemIfCollectionEmpty<CoverageDTO>(insured.Coverages_LazyLoad, CoverageDTO);\r\n            coverageDTO = insured.Coverages_LazyLoad[0];\r\n        }\r\n        const reinsurerDTO = new ReinsurerDTO();\r\n        listDataRequestBuilder.addListRequestItem(reinsurerDTO, 'Reinsurer');\r\n        listDataRequestBuilder.addListRequestItem(coverageDTO, 'PermTableRating');\r\n        listDataRequestBuilder.addListRequestItem(coverageDTO, 'RateClassApproved');\r\n    }\r\n\r\n    private get policy(): PolicyDTO {\r\n        return this._appSession.policyDTO;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class CaseDispositionMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return [\r\n            // Common Section\r\n            'applicant_status',\r\n            'ReinsurerTreatyType',\r\n            'benefit_type',\r\n            'underwriter',\r\n            'plan_code',\r\n            'worksheet_section_configuration',\r\n            'plan_code',\r\n            'System Message'\r\n\r\n            // Other Sections\r\n            //  ...\r\n        ];\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input label=\\\"Case Disposition\\\" i18n-label=\\\"@@policy.worksheet.caseDisposition\\\" [control]=\\\"caseDisposition\\\">\\r\\n            <lf-statictext #caseDisposition name=\\\"caseDisposition\\\" [value]=\\\"data.policy.PolicyStatusCode\\\"\\r\\n                secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input label=\\\"Reason\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionReason\\\" [control]=\\\"reasonText\\\">\\r\\n            <lf-statictext #reasonText name=\\\"reasonText\\\" [value]=\\\"data.policy.ReasonText\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\" *ngIf=\\\"canChangeDisposition\\\">\\r\\n        <lf-form-input [control]=\\\"changeDispositionField\\\">\\r\\n            <lf-hyperlink #changeDispositionField name=\\\"changeDisposition\\\" value=\\\"Change Disposition\\\" i18n-value=\\\"@@policy.worksheet.caseDispositionChange\\\"\\r\\n                (click)=\\\"onChangeDispositionClick($event)\\\" secureComponent></lf-hyperlink>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input label=\\\"Case Number\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionNumber\\\" [control]=\\\"caseNumber\\\">\\r\\n            <lf-statictext #caseNumber name=\\\"caseNumber\\\" [value]=\\\"data.policy.PolicyNumber\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input label=\\\"Assigned Underwriter\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionUnderwriter\\\"\\r\\n            [control]=\\\"assignedUnderwriter\\\">\\r\\n            <lf-statictext #assignedUnderwriter name=\\\"assignedUnderwriter\\\" [value]=\\\"assignedUWName\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Case Auto Approval Allowed\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionAutoApproval\\\"\\r\\n            [control]=\\\"caseAutoApprovalFlag\\\">\\r\\n            <lf-radiobuttongroup #caseAutoApprovalFlag name=\\\"caseAutoApprovalFlag\\\" [(ngModel)]=\\\"data.policy.AllowAusApproval\\\"\\r\\n                [disabled]=\\\"disabledBasedOnCaseDispositionStatus\\\" secureComponent>\\r\\n                <span>\\r\\n                    <lf-radiobutton name=\\\"caseAutoApprovalFlag\\\" [value]=\\\"RadioButtonValues.YES_LS_BOOLEAN\\\" label=\\\"Yes\\\"\\r\\n                        i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                </span>\\r\\n                <span>\\r\\n                    <lf-radiobutton name=\\\"caseAutoApprovalFlag\\\" [value]=\\\"RadioButtonValues.NO_LS_BOOLEAN\\\" label=\\\"No\\\"\\r\\n                        i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                </span>\\r\\n            </lf-radiobuttongroup>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-3\\\">\\r\\n        <lf-form-input label=\\\"Auto Close Date\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionAutoCloseDate\\\" [control]=\\\"autoCloseDate\\\">\\r\\n            <ls-inputdate #autoCloseDate name=\\\"autoCloseDate\\\" [(ngModel)]=\\\"data.policy.AutoCloseDate\\\" [disabled]=\\\"disabledBasedOnCaseDispositionStatus\\\"\\r\\n                secureComponent></ls-inputdate>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input label=\\\"GSI Indicator\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionGSI\\\" [control]=\\\"gsiIndicator\\\">\\r\\n            <lf-radiobuttongroup #gsiIndicator name=\\\"gsiIndicator\\\" [(ngModel)]=\\\"data.policy.GsiIndicator\\\" [disabled]=\\\"disabledBasedOnCaseDispositionStatus\\\"\\r\\n                secureComponent>\\r\\n                <span>\\r\\n                    <lf-radiobutton name=\\\"gsiIndicator\\\" [value]=\\\"RadioButtonValues.YES_LS_BOOLEAN\\\" label=\\\"Yes\\\"\\r\\n                        i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                </span>\\r\\n                <span>\\r\\n                    <lf-radiobutton name=\\\"gsiIndicator\\\" [value]=\\\"RadioButtonValues.NO_LS_BOOLEAN\\\" label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n                </span>\\r\\n            </lf-radiobuttongroup>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input label=\\\"Reinsurer\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionreinsurer\\\" [control]=\\\"reinsurer\\\">\\r\\n            <lf-select #reinsurer name=\\\"reinsurer\\\" [(ngModel)]=\\\"data.policy.ReinsuranceVendorCode\\\" [items]=\\\"listData['ReinsuranceVendorCode'] | listItems:'value':'Id' | emptyItem\\\"\\r\\n                style=\\\"width:150px\\\" [disabled]=\\\"disabledBasedOnCaseDispositionStatus\\\" secureComponent></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-2\\\">\\r\\n        <lf-form-input label=\\\"TPA\\\" i18n-label=\\\"@@policy.worksheet.caseDispositiontpa\\\" [control]=\\\"tpa\\\">\\r\\n            <lf-statictext #tpa name=\\\"tpa\\\" [value]=\\\"data.policy.TpaCode\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n\\r\\n    </div>\\r\\n    <div class=\\\"col-5\\\">\\r\\n        <lf-form-input label=\\\"Priority\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionpriority\\\" [control]=\\\"priority\\\">\\r\\n            <lf-statictext #priority name=\\\"priority\\\" [value]=\\\"data.policy.Priority\\\" secureComponent></lf-statictext>\\r\\n        </lf-form-input>\\r\\n\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-6\\\">\\r\\n        <lf-form-input [control]=\\\"finalActionNote\\\" label=\\\"Final Action Note\\\"\\r\\n            i18n-label=\\\"@@policy.worksheet.caseDispositionfinalActionNote\\\">\\r\\n            <lf-inputtextarea #finalActionNote name=\\\"finalActionNote\\\" [(ngModel)]=\\\"data.policy.FinalActionNote\\\"\\r\\n                [class]=\\\"{'lf-font-weight-bold':disabledBasedOnCaseDispositionStatus}\\\" [style]=\\\"{width:'100%'}\\\" rows=\\\"7\\\"\\r\\n                maxLength=\\\"2000\\\" [disabled]=\\\"disabledBasedOnCaseDispositionStatus\\\" secureComponent>\\r\\n            </lf-inputtextarea>\\r\\n\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</div>\\r\\n<br />\\r\\n<div *ngFor=\\\"let insured of data.policy.Insureds_LazyLoad; let idx=index\\\" class=\\\"lf-panel-section\\\">\\r\\n    <ls-insured [insured]=\\\"insured\\\" [index]=\\\"idx\\\" [disabledBasedOnCaseDispositionStatus]=\\\"disabledBasedOnCaseDispositionStatus\\\"></ls-insured>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\n\nimport { SecondaryTabHostViewModel } from 'life-core/component/layout/tabview';\nimport { I18n } from 'life-core/i18n';\nimport { ModalDialog, DialogButton, DialogButtonType } from 'life-core/component';\nimport { ResolvedDataNames } from 'life-core/view-model';\nimport { ListUtil } from 'life-core/util';\nimport { AuthorizationProvider } from 'life-core/authorization/authorization.provider';\n\nimport { SavePolicyDataDelegate } from 'ls-core/service';\nimport { PolicySubscriber, AppSession } from 'ls-core/session';\nimport { LsRadioButtonValues, LsRadioButtonValuesType } from 'ls-core/component/input';\n\nimport { UserPolicyService, PolicyStatusCodes } from 'business/policy/shared';\nimport { CaseAuthorizationProvider } from 'business/policy/shared/authorization';\nimport { PolicyApprovalAuthorizationDelegate } from 'business/policy/worksheet/case-disp/policy-approval-authorization.delegate';\nimport {\n    ChangeDispositionListDataResolver,\n    ChangeDispositionComponent\n} from 'business/policy/worksheet/case-disp/change-disp';\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\n\n@Component({\n    selector: 'case-disp',\n    templateUrl: './case-disp.component.html',\n    providers: [\n        PolicySubscriber,\n        UserPolicyService,\n        PolicyApprovalAuthorizationDelegate,\n        { provide: AuthorizationProvider, useClass: CaseAuthorizationProvider }\n    ]\n})\nexport class CaseDispositionComponent extends SecondaryTabHostViewModel<PolicyDataModel> {\n    public assignedUWName: string;\n    public canChangeDisposition: boolean;\n    public readonly RadioButtonValues: LsRadioButtonValuesType = LsRadioButtonValues;\n    public disabledBasedOnCaseDispositionStatus: boolean;\n    private _modalDialog: ModalDialog;\n    private _policyApprovalAuthorizationDelegate: PolicyApprovalAuthorizationDelegate;\n    private _appSession: AppSession;\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        modalDialog: ModalDialog,\n        policyApprovalAuthorizationDelegate: PolicyApprovalAuthorizationDelegate,\n        appSession: AppSession,\n        i18n: I18n\n    ) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this.data.policy = p;\n            this.setCaseDispositionLinkAvailability();\n            this.setDisableBasedOnCaseStatus();\n        });\n        this._modalDialog = modalDialog;\n        this._appSession = appSession;\n        this._policyApprovalAuthorizationDelegate = policyApprovalAuthorizationDelegate;\n        this.i18n = i18n;\n    }\n\n    public ngAfterContentInit(): void {\n        super.ngAfterContentInit();\n        this.setCaseDispositionLinkAvailability();\n        this.setDisableBasedOnCaseStatus();\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedMetaData();\n        this.setResolvedListData();\n        this.setAssignedUnderwriter();\n        return Promise.resolve();\n    }\n\n    private setDisableBasedOnCaseStatus(): void {\n        this.disabledBasedOnCaseDispositionStatus = this.data.policy.PolicyStatusCode === PolicyStatusCodes.CLOSED;\n    }\n\n    private setCaseDispositionLinkAvailability(): void {\n        this.canChangeDisposition = this.data.policy.PolicyStatusCode != PolicyStatusCodes.CLOSED;\n    }\n\n    public setAssignedUnderwriter(): void {\n        this.assignedUWName = this.getAssignedUWName();\n    }\n\n    public getAssignedUWName(): string {\n        return ListUtil.getLabelByValue(this.listData['underwriter'], this.data.policy.UnderwriterId.toString());\n    }\n\n    protected getDataToSave(): any {\n        return this.data.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n\n    public onChangeDispositionClick(): void {\n        this.validateUserCanApprovePolicy().then(canUserApprove => {\n            if (canUserApprove) {\n                this.openChangeDispositionDialog();\n            }\n        });\n    }\n\n    private openChangeDispositionDialog(): void {\n        this._modalDialog\n            .open({\n                view: ChangeDispositionComponent,\n                data: this.data.policy,\n                resolve: [\n                    { resolveName: ResolvedDataNames.listData, resolverClass: ChangeDispositionListDataResolver }\n                ],\n                title: this.i18n({ value: 'Change Case Disposition', id: 'policy.worksheet.caseDispositionTitle' }),\n                buttons: [\n                    new DialogButton({ type: DialogButtonType.SAVE, label: 'Accept' }),\n                    new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\n                ]\n            })\n            .then(dialogRef => {\n                dialogRef.result.then(result => this.logger.log('Modal dialog Result: ', result));\n            });\n    }\n\n    private validateUserCanApprovePolicy(): Promise<boolean> {\n        return this._policyApprovalAuthorizationDelegate.validate(\n            parseInt(this._appSession.user.UserId.toString()),\n            this.authorizationData.getLevel('caseApprove'),\n            this.listData['System Message']\n        );\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport {\r\n    ChangeDispositionListDataResolver,\r\n    ChangeDispositionComponent\r\n} from 'business/policy/worksheet/case-disp/change-disp';\r\nimport { CaseDispositionComponent } from 'business/policy/worksheet/case-disp/case-disp.component';\r\nimport { CaseDispositionDataResolver } from 'business/policy/worksheet/case-disp/case-disp-data.resolver';\r\nimport { CaseDispositionListDataResolver } from 'business/policy/worksheet/case-disp/case-disp-listdata.resolver';\r\nimport { CaseDispositionMetaDataResolver } from 'business/policy/worksheet/case-disp/case-disp-metadata.resolver';\r\nimport {\r\n    PlanWorksheetCoverageFormFields,\r\n    WorksheetCoverageFormFieldsLoader\r\n} from 'business/policy/worksheet/case-disp/coverage/form';\r\n\r\nimport { InsuredComponent } from 'business/policy/worksheet/case-disp/insured/insured.component';\r\nimport { WorksheetCoverageModule } from 'business/policy/worksheet/case-disp/coverage/worksheet-coverage.module';\r\nimport { BenefitComponent } from 'business/policy/worksheet/case-disp/benefit.component';\r\nimport { ReopenCoverageModule } from 'business/policy/worksheet/case-disp/coverage/reopen-coverage';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule, WorksheetCoverageModule, ReopenCoverageModule],\r\n    declarations: [ChangeDispositionComponent, CaseDispositionComponent, InsuredComponent, BenefitComponent],\r\n    exports: [ChangeDispositionComponent, CaseDispositionComponent, InsuredComponent, BenefitComponent],\r\n    providers: [\r\n        CaseDispositionDataResolver,\r\n        CaseDispositionListDataResolver,\r\n        CaseDispositionMetaDataResolver,\r\n        PlanWorksheetCoverageFormFields,\r\n        WorksheetCoverageFormFieldsLoader,\r\n        ChangeDispositionListDataResolver\r\n    ],\r\n    entryComponents: [ChangeDispositionComponent]\r\n})\r\nexport class CaseDispositionModule {}\r\n","import { Injector } from '@angular/core';\r\n\r\nimport { ViewModel, ViewValidationResult } from 'life-core/view-model';\r\nimport {\r\n    ICompose,\r\n    IDialogViewModel,\r\n    DialogViewModelResult,\r\n    DialogData,\r\n    DialogButtonType,\r\n    DialogResult,\r\n    DialogButton,\r\n    ConfirmDialog\r\n} from 'life-core/component';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { ListDataService, DataService, ListsDataRequest } from 'ls-core/service';\r\n\r\nexport abstract class BaseChangeDispositionComponent<T> extends ViewModel<T> implements ICompose, IDialogViewModel {\r\n    protected listDataService: ListDataService;\r\n    protected dataService: DataService;\r\n    public cancelOpenRequirementsExist: boolean;\r\n    public cancelOpenRequirementsValue: string;\r\n    public resolvedData: any;\r\n    public filteredReasonList: Array<any>;\r\n    private _confirmDialog: ConfirmDialog;\r\n\r\n    constructor(injector: Injector, i18n: I18n) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        this.listDataService = injector.get(ListDataService);\r\n        this.dataService = injector.get(DataService);\r\n        this._confirmDialog = injector.get(ConfirmDialog);\r\n    }\r\n\r\n    public ngAfterContentInit(): void {\r\n        super.ngAfterContentInit();\r\n        this.resetCancelOpenRequirements();\r\n    }\r\n\r\n    public setModel(model: DialogData): void {\r\n        this.resolvedData = model.resolvedData;\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId == DialogButtonType.SAVE) {\r\n            return this.validate().then(result => {\r\n                if (result == ViewValidationResult.pass) {\r\n                    return this.setDisposition();\r\n                } else {\r\n                    return new DialogViewModelResult(null, false);\r\n                }\r\n            });\r\n        }\r\n        return this.resetDispositionData();\r\n    }\r\n\r\n    public onDispositionChange(caseDispositionSelection: any): void {\r\n        this.resetReasonText();\r\n        this.reloadReasonList(caseDispositionSelection);\r\n        this.setCancelOpenRequirementsFlag();\r\n        this.resetCancelOpenRequirements();\r\n    }\r\n\r\n    protected abstract isCancelOpenRequirementOptionAvailable(): boolean;\r\n\r\n    protected abstract resetReasonText(): void;\r\n\r\n    protected abstract getReasonListDataRequest(): ListsDataRequest;\r\n\r\n    protected abstract setDisposition(): Promise<DialogViewModelResult>;\r\n\r\n    protected abstract resetDispositionData(): Promise<DialogViewModelResult>;\r\n\r\n    protected showDispositionErrorMessage(errorMessage: string): Promise<DialogResult> {\r\n        return this._confirmDialog.open({\r\n            message: errorMessage,\r\n            title: this.i18n({\r\n                value: 'Message from webpage',\r\n                id: 'policy.worksheet.coverage.changeDisposition.title'\r\n            }),\r\n            buttons: [new DialogButton({ type: DialogButtonType.OK })]\r\n        });\r\n    }\r\n\r\n    protected onDataSet(): void {\r\n        this.setCancelOpenRequirementsFlag();\r\n    }\r\n\r\n    private setCancelOpenRequirementsFlag(): void {\r\n        this.cancelOpenRequirementsExist = this.isCancelOpenRequirementOptionAvailable();\r\n    }\r\n\r\n    private resetCancelOpenRequirements(): void {\r\n        this.cancelOpenRequirementsValue = '';\r\n    }\r\n\r\n    private reloadReasonList(caseDispositionSelection: Event): void {\r\n        const request = this.getReasonListDataRequest();\r\n        this.listDataService.load(request).then(data => {\r\n            this.filteredReasonList = data.ReasonText;\r\n        });\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\nimport { ListsDataRequest, ListDataRequestBuilder } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session';\r\n\r\n@Injectable()\r\nexport class ChangeDispositionListDataResolver extends BaseListDataResolver {\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        listDataRequestBuilder.addListRequestItem(this._appSession.policyDTO, 'Disposition');\r\n        listDataRequestBuilder.addListRequestItem(this._appSession.policyDTO, 'ReasonText');\r\n\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <lf-form-input label=\\\"Case Disposition\\\" i18n-label=\\\"@@policy.worksheet.caseDisposition\\\" [control]=\\\"caseDisposition\\\">\\r\\n            <lf-select #caseDisposition name=\\\"caseDisposition\\\" [(ngModel)]=\\\"data.policy.Disposition\\\" [items]=\\\"filteredDispositionList | listItems:'value':'externalCode'\\\"\\r\\n                (change)=\\\"onDispositionChange($event)\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <lf-form-input label=\\\"Reason\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionReason\\\" [control]=\\\"caseDispositionChangeReason\\\">\\r\\n            <lf-select #caseDispositionChangeReason name=\\\"caseDispositionChangeReason\\\" [(ngModel)]=\\\"data.policy.ReasonText\\\"\\r\\n                [items]=\\\"filteredReasonList | listItems:'value':'Id'\\\" secureComponent style=\\\"width:200px\\\" [required]=\\\"isReasonRequired\\\"></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"cancelOpenRequirementsExist\\\">\\r\\n        <lf-form-input label=\\\"Cancel Open Requirements\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionRequirements\\\"\\r\\n            [control]=\\\"cancelOpenRequirementsOption\\\">\\r\\n            <lf-radiobuttongroup #cancelOpenRequirementsOption name=\\\"cancelOpenRequirementsOption\\\" [(ngModel)]=\\\"cancelOpenRequirementsValue\\\"\\r\\n                secureComponent>\\r\\n                <span>\\r\\n                    <lf-radiobutton name=\\\"cancelOpenRequirementsOption\\\" value=\\\"All\\\" label=\\\"All\\\" i18n-label=\\\"@@general.stringconstants.all\\\"></lf-radiobutton>\\r\\n                </span>\\r\\n                <span>\\r\\n                    <lf-radiobutton name=\\\"cancelOpenRequirementsOption\\\" value=\\\"Exclude\\\" label=\\\"Exclude Post Issue Requirements\\\"\\r\\n                        i18n-label=\\\"@@policy.worksheet.caseDispositionRequirementExclude\\\"></lf-radiobutton>\\r\\n                </span>\\r\\n            </lf-radiobuttongroup>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <lf-form-input label=\\\"Final Action Note\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionNote\\\" [control]=\\\"finalActionNote\\\">\\r\\n            <lf-inputtextarea #finalActionNote name=\\\"finalActionNote\\\" [(ngModel)]=\\\"data.policy.FinalActionNote\\\"\\r\\n                [required]=\\\"isNoteRequired\\\" secureComponent rows=\\\"10\\\" cols=\\\"30\\\" maxLength=\\\"2000\\\"></lf-inputtextarea>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n</form>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { ParentChildRegistry } from 'life-core/view-model';\r\nimport { DialogViewModelResult, DialogData } from 'life-core/component/dialog';\r\nimport { ICancelableDataManager, CancelableDataManager } from 'life-core/data-management';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { ListItem } from 'life-core/model/list.model';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport {\r\n    DataServiceParams,\r\n    UIServiceNames,\r\n    UIServiceMethods,\r\n    ListsDataRequest,\r\n    ListDataRequestBuilder\r\n} from 'ls-core/service';\r\nimport { PolicyDTO } from 'ls-core/model';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { DTOObjectUtil } from 'ls-core/util';\r\nimport { LsAppConfig, SystemSetting } from 'ls-core/config';\r\n\r\nimport { BaseChangeDispositionComponent } from 'business/policy/worksheet/case-disp/change-disp/base-change-disposition.component';\r\nimport { CoverageStatuses, Prompt } from 'business/policy/shared';\r\nimport { CaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\r\n\r\n@Component({\r\n    selector: 'change-disposition',\r\n    templateUrl: './change-disposition.component.html',\r\n    providers: [\r\n        ParentChildRegistry,\r\n        { provide: AuthorizationProvider, useClass: CaseAuthorizationProvider },\r\n        CancelableDataManager\r\n    ]\r\n})\r\nexport class ChangeDispositionComponent extends BaseChangeDispositionComponent<PolicyDataModel> {\r\n    public filteredDispositionList: Array<ListItem>;\r\n    public isNoteRequired: boolean;\r\n    public isReasonRequired: boolean;\r\n\r\n    private _cancelableDataManager: ICancelableDataManager<PolicyDTO>;\r\n    private _appSession: AppSession;\r\n    private _filteredDispositionArray: Array<any>;\r\n    private _filteredReasonArray: Array<any>;\r\n    private _appConfig: LsAppConfig;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        i18n: I18n,\r\n        appConfig: LsAppConfig,\r\n        cancelableDataManager: CancelableDataManager,\r\n        appSession: AppSession\r\n    ) {\r\n        super(injector, i18n);\r\n        this._cancelableDataManager = cancelableDataManager as CancelableDataManager<PolicyDTO>;\r\n        this._appSession = appSession;\r\n        this._appConfig = appConfig;\r\n    }\r\n\r\n    public setModel(model: DialogData): void {\r\n        super.setModel(model);\r\n        this._cancelableDataManager.setItem(model.parameterData as PolicyDTO);\r\n        this.subscriptionTracker.track(\r\n            this._cancelableDataManager.getItem().subscribe(policy => {\r\n                this.data.policy = policy;\r\n                this.onDataSet();\r\n            })\r\n        );\r\n    }\r\n\r\n    public setupData(): void {\r\n        this._filteredDispositionArray = this.resolvedData.listData.Disposition;\r\n        this._filteredReasonArray = this.resolvedData.listData.ReasonText;\r\n        this.getFilteredDispositionListItems();\r\n        this.getFilteredReasonTextListItems();\r\n        this.isNoteRequired =\r\n            this._appConfig.getSystemSetting(SystemSetting.WorksheetFANoteRequired).toLowerCase() === 'true';\r\n        this.isReasonRequired =\r\n            this._appConfig.getSystemSetting(SystemSetting.FinalActionReasonRequired).toLowerCase() === 'true';\r\n    }\r\n\r\n    protected resetReasonText(): void {\r\n        if (this.data.policy.ReasonText) {\r\n            this.data.policy.ReasonText = '';\r\n        }\r\n    }\r\n\r\n    protected getReasonListDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this.data.policy);\r\n        listDataRequestBuilder.addListRequestItem(this.data.policy, 'ReasonText');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n\r\n    protected getSetCaseDispositionServiceParams(): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.SET_DISPOSITION_SERVICE,\r\n            serviceMethod: UIServiceMethods.SET_DISPOSITION,\r\n            requestPayload: this.getCaseDispositionServicePayload()\r\n        });\r\n    }\r\n\r\n    protected isCancelOpenRequirementOptionAvailable(): boolean {\r\n        return this.data.policy.Disposition != null && this.data.policy.Disposition != CoverageStatuses.PENDING;\r\n    }\r\n\r\n    protected setDisposition(): Promise<DialogViewModelResult> {\r\n        const serviceParams: DataServiceParams = this.getSetCaseDispositionServiceParams();\r\n        return this.dataService.getData(serviceParams).then(response => {\r\n            const changeDispositionResponse = response.responsePayload as DispositionResponse;\r\n            if (changeDispositionResponse && changeDispositionResponse.Success) {\r\n                const updatedPolicy: PolicyDTO = DTOObjectUtil.deepConvertObjectOfType(\r\n                    changeDispositionResponse.Policy,\r\n                    PolicyDTO\r\n                ) as PolicyDTO;\r\n                this._appSession.updatePolicy(updatedPolicy);\r\n                return Promise.resolve(new DialogViewModelResult(null, true));\r\n            } else {\r\n                this.showDispositionErrorMessage(changeDispositionResponse.ResultMessage).then(() => {\r\n                    return Promise.resolve(new DialogViewModelResult(null, true));\r\n                });\r\n            }\r\n        });\r\n    }\r\n\r\n    private getFilteredDispositionListItems(): Array<ListItem> {\r\n        this.filteredDispositionList = this._filteredDispositionArray.filter(item => {\r\n            return item.Id !== this.data.policy.Disposition;\r\n        });\r\n        return this.filteredDispositionList;\r\n    }\r\n\r\n    private getFilteredReasonTextListItems(): Array<ListItem> {\r\n        this.filteredReasonList = this._filteredReasonArray.filter(item => {\r\n            return item.Id !== this.data.policy.PolicyStatusCode;\r\n        });\r\n        return this.filteredReasonList;\r\n    }\r\n\r\n    private getCaseDispositionServicePayload(): CaseDispositionRequest {\r\n        const request = new CaseDispositionRequest();\r\n        request.Policy = this.data.policy;\r\n        request.InsuredID = request.Policy.Insureds_LazyLoad[0].PolicyPersonId as number;\r\n        request.CancelOpenRequirements = this.cancelOpenRequirementsValue == 'Exclude';\r\n        request.CancelAllRequirements = this.cancelOpenRequirementsValue == 'All';\r\n        return request;\r\n    }\r\n\r\n    protected resetDispositionData(): Promise<DialogViewModelResult> {\r\n        this._cancelableDataManager.cancelItem(this.data.policy);\r\n        return Promise.resolve(new DialogViewModelResult(null, true));\r\n    }\r\n}\r\n\r\nexport class DispositionRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.DispositionRequest, LifeSuite.UIServiceDTO';\r\n\r\n    public Policy: PolicyDTO;\r\n    public InsuredID: number;\r\n    public CancelOpenRequirements: boolean;\r\n    public CancelAllRequirements: boolean;\r\n}\r\n\r\nexport class CaseDispositionRequest extends DispositionRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.CaseDispositionRequest, LifeSuite.UIServiceDTO';\r\n}\r\n\r\nexport class DispositionResponse {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.responses.DispositionResponse, LifeSuite.UIServiceDTO';\r\n\r\n    public Policy: PolicyDTO;\r\n    public ResultMessage: string;\r\n    public Success: boolean;\r\n    public Prompts: Prompt[];\r\n    public AprovalPrompts: Prompt[];\r\n}\r\n","﻿export * from 'business/policy/worksheet/case-disp/change-disp/change-disposition-listdata.resolver';\r\nexport * from 'business/policy/worksheet/case-disp/change-disp/base-change-disposition.component';\r\nexport * from 'business/policy/worksheet/case-disp/change-disp/change-disposition.component';\r\n","﻿import { Injectable } from '@angular/core';\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class AmendmentGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Issue Request Type', id: 'policy.worksheet.coverage.amendment.issueType' }),\r\n            field: AmendmentFields.AmendmentType,\r\n            width: 200\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Code', id: 'policy.worksheet.coverage.amendment.issuecode' }),\r\n            field: AmendmentFields.AmendmentCode,\r\n            width: 200\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Description', id: 'policy.worksheet.coverage.amendment.restrictionText' }),\r\n            field: AmendmentFields.AmendmentText,\r\n            width: 400,\r\n            autoHeight: true\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nexport const AmendmentFields = {\r\n    AmendmentType: 'AmendmentType',\r\n    AmendmentCode: 'AmendmentCode',\r\n    AmendmentText: 'AmendmentText'\r\n};\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { AmendmentDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class AmendmentItemFactory extends BaseDTOItemFactory<AmendmentDTO> {\r\n    public newInstance(createItemParams: AmendmentCreateItemParams<AmendmentDTO>): AmendmentDTO {\r\n        const amendmentDTO = new AmendmentDTO();\r\n        amendmentDTO.CoveragePersonAmendmentId = this.getNextId(createItemParams.items, 'CoveragePersonAmendmentId');\r\n        amendmentDTO.CoveragePersonId = createItemParams.coveragePersonId;\r\n        return amendmentDTO;\r\n    }\r\n}\r\n\r\nexport interface AmendmentCreateItemParams<T> extends CreateItemParams<T> {\r\n    coveragePersonId: any;\r\n}","module.exports = \"<master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\"\\r\\n    secureComponent [disabled]=\\\"disabled\\\">\\r\\n</master-detail>\"","﻿import { Component, Injector, Injectable, Input } from '@angular/core';\r\nimport {\r\n    RowManagementDelegate,\r\n    MasterDetailComponentResolver,\r\n    BaseDataManager,\r\n    MasterButton,\r\n    MasterButtonType\r\n} from 'life-core/component/master-detail';\r\nimport { IGridColumnsBuilder, DataGridRowNumber } from 'life-core/component/grid';\r\nimport { DirectDataResolve } from 'life-core/component/shared';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { CoverageDTO, AmendmentDTO } from 'ls-core/model';\r\nimport { BasePolicyMasterDetailViewModel } from 'business/policy/shared';\r\nimport { LsInsuredAuthorizationProvider } from 'business/policy/worksheet/case-disp/insured/insured-authorization.provider';\r\nimport { AmendmentGridColumnsBuilder } from './amendment-grid-column.builder';\r\nimport { AmendmentItemFactory, AmendmentCreateItemParams } from './amendment-item-factory';\r\nimport { AmendmentDialogDataResolver } from './detail/amendment-dialog-data.resolver';\r\nimport { AmendmentDialogDetailEditor } from './detail/amendment-detail-editor';\r\nimport {\r\n    DialogButton,\r\n    DialogButtonType,\r\n    ModalDialogParams,\r\n    ModalDialog,\r\n    CreateItemEventData,\r\n    DialogResult\r\n} from 'life-core/component';\r\n\r\nexport function rowManagementDelegateFactory(\r\n    itemFactory: AmendmentItemFactory,\r\n    dataManager: BaseDataManager<AmendmentDTO>\r\n): RowManagementDelegate<AmendmentDTO> {\r\n    return new RowManagementDelegate({\r\n        itemName: 'Issue Request',\r\n        itemIDPropertyName: 'CoveragePersonAmendmentId',\r\n        itemFactory: itemFactory,\r\n        dataManager: dataManager\r\n    });\r\n}\r\n\r\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<AmendmentDTO> {\r\n    return new MasterDetailComponentResolver({\r\n        itemComponents: AmendmentDialogDetailEditor\r\n    });\r\n}\r\n\r\n@Component({\r\n    selector: 'amendment',\r\n    templateUrl: './amendment.component.html',\r\n    providers: [\r\n        BaseDataManager,\r\n        AmendmentItemFactory,\r\n        {\r\n            provide: RowManagementDelegate,\r\n            useFactory: rowManagementDelegateFactory,\r\n            deps: [AmendmentItemFactory, BaseDataManager]\r\n        },\r\n        {\r\n            provide: MasterDetailComponentResolver,\r\n            useFactory: itemComponentResolverFactory\r\n        },\r\n        { provide: AuthorizationProvider, useClass: LsInsuredAuthorizationProvider },\r\n        AmendmentGridColumnsBuilder\r\n    ]\r\n})\r\n@Injectable()\r\nexport class AmendmentComponent extends BasePolicyMasterDetailViewModel<AmendmentDTO> {\r\n    public _amendmentItemFactory: AmendmentItemFactory;\r\n    @Input()\r\n    public coverage: CoverageDTO;\r\n\r\n    public coveragePersonId: number;\r\n    private _modalDialog: ModalDialog;\r\n    private _gridColumnBuilder: AmendmentGridColumnsBuilder;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        modalDialog: ModalDialog,\r\n        amendmentItemFactory: AmendmentItemFactory,\r\n        gridColumnBuilder: AmendmentGridColumnsBuilder,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this._modalDialog = modalDialog;\r\n        this._amendmentItemFactory = amendmentItemFactory;\r\n        this._gridColumnBuilder = gridColumnBuilder;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public get showDetailAsPopup(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getGridMinRows(): number {\r\n        return DataGridRowNumber.Medium;\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnBuilder;\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return this.i18n({ value: 'Issue Request', id: 'policy.worksheet.coverage.amendment.issueRequest' });\r\n    }\r\n\r\n    protected loadItems(): AmendmentDTO[] {\r\n        return this.coverage.Amendments_LazyLoad;\r\n    }\r\n\r\n    private getCoveragePersonIdForNewIssueRequest(): Object {\r\n        return this.coverage.CoveragePersonId;\r\n    }\r\n\r\n    protected getRowNodeId(data: AmendmentDTO): Object {\r\n        return data.CoveragePersonAmendmentId;\r\n    }\r\n\r\n    protected getPopupDetailButtons(): MasterButton<AmendmentDTO>[] {\r\n        // Add Master Button\r\n        const addMasterButton = new MasterButton({ type: MasterButtonType.ADD });\r\n        addMasterButton.handler = () => {\r\n            this.addMasterButtonHandler();\r\n        };\r\n\r\n        // Edit Master Button\r\n        const editMasterButton = new MasterButton({ type: MasterButtonType.EDIT });\r\n\r\n        // Delete Master Button\r\n        const deleteMasterButton = new MasterButton({ type: MasterButtonType.DELETE });\r\n\r\n        return [addMasterButton, editMasterButton, deleteMasterButton];\r\n    }\r\n\r\n    protected getItemDetailDialogResolve(item: AmendmentDTO): DirectDataResolve[] {\r\n        return [{ resolveName: 'listData', resolverClass: AmendmentDialogDataResolver, context: item }];\r\n    }\r\n\r\n    protected getItemDetailDialogButtonsForAddItems(): DialogButton[] {\r\n        return [\r\n            new DialogButton({\r\n                type: DialogButtonType.ACCEPT_ADD,\r\n                options: { isDefault: true },\r\n                handler: (item: AmendmentDTO, dialogResult: DialogResult) => {\r\n                    if (item) {\r\n                        this.acceptAddButtonHandler(dialogResult);\r\n                    }\r\n                }\r\n            }),\r\n            // new DialogButton({ type: DialogButtonType.ACCEPT_ADD, label: DialogButtonLabels.button_accept }),\r\n            new DialogButton({ type: DialogButtonType.ACCEPT }),\r\n            new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\r\n        ];\r\n    }\r\n\r\n    protected createItem(eventData?: CreateItemEventData<AmendmentDTO>): Promise<AmendmentDTO> {\r\n        const amendmentDTO: AmendmentDTO = this.rowManagementDelegate.addNewRow({\r\n            items: this.items,\r\n            coveragePersonId: this.getCoveragePersonIdForNewIssueRequest()\r\n        } as AmendmentCreateItemParams<AmendmentDTO>);\r\n        return Promise.resolve(amendmentDTO);\r\n    }\r\n\r\n    private addMasterButtonHandler(): void {\r\n        const amendmentDTO = new AmendmentDTO();\r\n        amendmentDTO.CoveragePersonId = this.getCoveragePersonIdForNewIssueRequest();\r\n        const addDialogParams: ModalDialogParams = {\r\n            view: AmendmentDialogDetailEditor,\r\n            resolve: this.getItemDetailDialogResolve(amendmentDTO),\r\n            title: this.getCreateItemDialogTitle(),\r\n            buttons: this.getItemDetailDialogButtonsForAddItems(),\r\n            data: amendmentDTO\r\n        };\r\n        const self = this;\r\n        this._modalDialog.open(addDialogParams).then(dialogRef => {\r\n            dialogRef.result.then(result => {\r\n                if (result.returnValue) {\r\n                    self.addAmendment(result);\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    private acceptAddButtonHandler(dialogResult: DialogResult): void {\r\n        this.addAmendment(dialogResult);\r\n    }\r\n\r\n    private addAmendment(dialogResult: DialogResult): void {\r\n        this.createItem().then(item => {\r\n            Object.assign(item, dialogResult.returnValue);\r\n            this.rowManagementDelegate.saveRow(item);\r\n            this.changeManager.setIsDirty(dialogResult.dialogDirty);\r\n        });\r\n    }\r\n}\r\n","﻿import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { AmendmentComponent } from './amendment.component';\r\nimport { AmendmentDialogDetailEditor } from './detail/amendment-detail-editor';\r\nimport { AmendmentDialogDataResolver } from './detail/amendment-dialog-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [AmendmentComponent, AmendmentDialogDetailEditor],\r\n    exports: [AmendmentComponent, AmendmentDialogDetailEditor],\r\n    providers: [AmendmentDialogDataResolver],\r\n    entryComponents: [AmendmentDialogDetailEditor]\r\n})\r\nexport class AmendmentModule {}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"amendmentType\\\" label=\\\"Issue Request Type\\\" i18n-label=\\\"@@policy.worksheet.coverage.amendment.issueType\\\">\\r\\n\\t\\t\\t\\t<lf-select #amendmentType name=\\\"amendmentType\\\" [items]=\\\"resolvedData.listData.AmendmentType | listItems:'value':'Id' | emptyItem\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.AmendmentType\\\" (change)=\\\"onAmendmentTypeChange($event)\\\" secureComponent style=\\\"width:350px\\\"\\r\\n\\t\\t\\t\\t required [disabled]=\\\"isDisabledOnEdit\\\">\\r\\n\\t\\t\\t\\t</lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"amendmentCode\\\" label=\\\"Issue Request\\\" i18n-label=\\\"@@policy.worksheet.coverage.amendment.issueRequest\\\">\\r\\n\\t\\t\\t\\t<lf-select #amendmentCode name=\\\"amendmentCode\\\" [items]=\\\"amendmentCodeOptions.AmendmentCode | listItems:'value':'Id' | emptyItem\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.AmendmentCode\\\" (change)=\\\"onAmendmentCodeChange($event)\\\" secureComponent style=\\\"width:350px\\\"\\r\\n\\t\\t\\t\\t container=\\\"dialog\\\" required [disabled]=\\\"isDisabledOnEdit\\\">\\r\\n\\t\\t\\t\\t</lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"amendmentCode\\\" label=\\\"Code\\\" i18n-label=\\\"@@policy.worksheet.coverage.amendment.issueCode\\\">\\r\\n\\t\\t\\t\\t<lf-statictext #amendmentCode name=\\\"amendmentCode\\\" [value]=\\\"data.AmendmentCode\\\" secureComponent [style]=\\\"{width:'350px'}\\\"></lf-statictext>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-12\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"amendmentText\\\" label=\\\"Description\\\" i18n-label=\\\"@@policy.worksheet.coverage.amendment.issueText\\\">\\r\\n\\t\\t\\t\\t<lf-inputtextarea #amendmentText name=\\\"amendmentText\\\" [(ngModel)]=\\\"data.AmendmentText\\\" secureComponent maxLength=\\\"1000\\\"\\r\\n\\t\\t\\t\\t rows=\\\"6\\\" [style]=\\\"{width: '100%'}\\\"></lf-inputtextarea>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</form>\"","﻿import { Component, Injector, Injectable } from '@angular/core';\nimport { RowManagementDelegate, BaseDataManager } from 'life-core/component/master-detail';\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { PolicyDTO, AmendmentDTO, CoverageDTO } from 'ls-core/model';\nimport { AppSession } from 'ls-core/session/app-session';\nimport { ListDataService, ListDataRequestBuilder, ListDataItem, ListDataUtil } from 'ls-core/service';\nimport { ObjectUtil } from 'life-core/util/lang';\nimport { ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { CoverageAuthorizationProvider } from './../../coverage-authorization.provider';\nimport { ListMap } from 'life-core/model';\nimport { DialogViewModelResult, DialogButtonType } from 'life-core/component/dialog';\nimport { AmendmentItemFactory } from 'business/policy/worksheet/case-disp/coverage/amendment/amendment-item-factory';\nexport function rowManagementDelegateFactory(\n    itemFactory: AmendmentItemFactory,\n    dataManager: BaseDataManager<AmendmentDTO>\n): RowManagementDelegate<AmendmentDTO> {\n    return new RowManagementDelegate({\n        itemName: 'Issue Request',\n        itemIDPropertyName: 'CoveragePersonAmendmentId',\n        itemFactory: itemFactory,\n        dataManager: dataManager\n    });\n}\n@Component({\n    selector: 'amendment-detail-editor',\n    templateUrl: './amendment-detail-editor.html',\n    providers: [\n        ParentChildRegistry,\n        BaseDataManager,\n        AmendmentItemFactory,\n        {\n            provide: RowManagementDelegate,\n            useFactory: rowManagementDelegateFactory,\n            deps: [AmendmentItemFactory, BaseDataManager]\n        },\n        { provide: AuthorizationProvider, useClass: CoverageAuthorizationProvider }\n    ]\n})\n@Injectable()\nexport class AmendmentDialogDetailEditor extends BasePolicyDialogDetailViewModel<AmendmentDTO> {\n    public amendmentCodeOptions: ListMap<ListDataItem> = {};\n    public context: CoverageDTO;\n    public isDisabledOnEdit: boolean;\n\n    private _policy: PolicyDTO;\n    private _selectedAmendmentTypeValue: string;\n    private _listDataService: ListDataService;\n    private _amendmentArray: ListDataItem[];\n\n    constructor(injector: Injector, appSession: AppSession, listDataService: ListDataService) {\n        super(injector);\n        this._policy = appSession.policyDTO;\n        this._listDataService = listDataService;\n        this._amendmentArray = new Array<ListDataItem>();\n        this.isDisabledOnEdit = false;\n    }\n\n    public loadData(): Promise<void> {\n        if (this.data.AmendmentCode) {\n            this.isDisabledOnEdit = true;\n            this.loadAmendmentCodeListData();\n        }\n        return Promise.resolve();\n    }\n\n    public getListsDataRequest(): any {\n        const listDataRequestBuilder = new ListDataRequestBuilder();\n        listDataRequestBuilder.setRootDTO(this._policy);\n        const amendmentDTO = ObjectUtil.createObjectOfType(this.data, AmendmentDTO);\n        listDataRequestBuilder.addListRequestItem(amendmentDTO, 'AmendmentCode');\n        return listDataRequestBuilder.getRequest();\n    }\n\n    public onAmendmentTypeChange(selectedAmendmentType: any): void {\n        this._selectedAmendmentTypeValue = selectedAmendmentType.value;\n        this.data.AmendmentType = this._selectedAmendmentTypeValue;\n        this.data.AmendmentText = '';\n        this.data.AmendmentCode = '';\n        this.loadAmendmentCodeListData();\n    }\n\n    public onAmendmentCodeChange(selectedAmendmentCode: any): void {\n        this.data.AmendmentText = ListDataUtil.getExternalCodeFromListDataById(\n            this._amendmentArray,\n            selectedAmendmentCode.value\n        );\n    }\n\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\n        if (buttonId == DialogButtonType.ACCEPT_ADD || this.isDialogButtonTypeOK(buttonId)) {\n            const isDirty = this.isDirty();\n            const amendment = { ...this.data };\n            return this.validate().then(result => {\n                if (result === ViewValidationResult.pass) {\n                    this.resetAmendmentDialogData(buttonId, amendment.CoveragePersonId);\n                    return new DialogViewModelResult(amendment, this.isDialogButtonTypeOK(buttonId), isDirty);\n                } else {\n                    return new DialogViewModelResult(null, false);\n                }\n            });\n        } else {\n            return Promise.resolve(null);\n        }\n    }\n\n    protected loadAmendmentCodeListData(): any {\n        const request = this.getListsDataRequest();\n        this._listDataService.load(request).then(data => {\n            Object.assign(this.amendmentCodeOptions, data);\n            this._amendmentArray = data.AmendmentCode;\n        });\n    }\n\n    private resetAmendmentDialogData(buttonId: string, coveragePersonId: object): void {\n        if (buttonId == DialogButtonType.ACCEPT_ADD) {\n            this.data = new AmendmentDTO();\n            this.data.CoveragePersonId = coveragePersonId;\n            this.form.reset();\n        }\n    }\n}\n","﻿import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { ListMap } from 'life-core/model';\r\nimport { AmendmentDTO } from 'ls-core/model';\r\nimport { ListDataRequestBuilder, ListsDataRequest, ListDataItem } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class AmendmentDialogDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    public context: AmendmentDTO;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        const amendmentDTO = ObjectUtil.createObjectOfType(this.context, AmendmentDTO);\r\n        listDataRequestBuilder.addListRequestItem(amendmentDTO, 'AmendmentType');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { ListUtil } from 'life-core/util';\r\nimport { ListItem } from 'life-core/model';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { GetYesNoStringPipe } from 'ls-core/util';\r\n\r\n@Injectable()\r\nexport class BenefitGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    public static benefitTypeList: Array<ListItem>;\r\n    private _cellFormatters: CellFormatters;\r\n\r\n    constructor(cellFormatters: CellFormatters, i18n: I18n) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Benefit', id: 'policy.worksheet.coverage.benefit.benefitName' }),\r\n            field: BenefitGridFields.BenefitName,\r\n            width: 90,\r\n            valueFormatter: this.getBenefitName\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Amount', id: 'policy.worksheet.coverage.benefit.amount' }),\r\n            field: BenefitGridFields.Amount,\r\n            valueFormatter: this._cellFormatters.currencyCellFormatter,\r\n            width: 90\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Reinsurance', id: 'policy.worksheet.coverage.benefit.reinsurance' }),\r\n            field: BenefitGridFields.ReinsuranceFlag,\r\n            width: 90,\r\n            valueFormatter: this.getYesNoString\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Disposition', id: 'policy.worksheet.coverage.benefit.disposition' }),\r\n            field: BenefitGridFields.CoverageStatusLabel,\r\n            width: 90,\r\n            valueFormatter: this.getDispositionLabel\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Disposition Reason',\r\n                id: 'policy.worksheet.coverage.benefit.dispositionReason'\r\n            }),\r\n            field: BenefitGridFields.ReasonText,\r\n            width: 90\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Table Rating', id: 'policy.worksheet.coverage.benefit.tableRating' }),\r\n            field: BenefitGridFields.PermTableRating,\r\n            width: 90,\r\n            valueFormatter: this.getTableRatings\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Reason', id: 'policy.worksheet.coverage.benefit.tableRatingReason' }),\r\n            field: BenefitGridFields.PermTableReason,\r\n            width: 90\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Perm. Flat Extra', id: 'policy.worksheet.coverage.benefit.permFlatExtra' }),\r\n            field: BenefitGridFields.PermFlatExtraAmount,\r\n            valueFormatter: this._cellFormatters.currencyCellFormatter,\r\n            width: 90\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Temp. Flat Extra', id: 'policy.worksheet.coverage.benefit.tempFlatExtra' }),\r\n            field: BenefitGridFields.TempFlatExtraAmount,\r\n            valueFormatter: this._cellFormatters.currencyCellFormatter,\r\n            width: 90\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Temp. Flat Extra Duration',\r\n                id: 'policy.worksheet.coverage.benefit.tempFlatExtraDuration'\r\n            }),\r\n            field: BenefitGridFields.TempFlatExtraPeriod,\r\n            width: 90\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getYesNoString(params: any): string {\r\n        return new GetYesNoStringPipe().transform(params.node.data.ReinsuranceFlag);\r\n    }\r\n\r\n    private getBenefitName(params: any): string {\r\n        if (params.node.data.BenefitId) {\r\n            return ListUtil.getLabelByValue(\r\n                params.context.listData.benefit_type,\r\n                params.node.data.BenefitId.toString()\r\n            );\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private getDispositionLabel(params: any): string {\r\n        if (params.node.data.CoverageStatus) {\r\n            const coverageStatusDropdownList: ListItem[] = ListUtil.convertToListItems(\r\n                params.context.listData.CoverageStatus\r\n            );\r\n            return ListUtil.getLabelByValue(coverageStatusDropdownList, params.node.data.CoverageStatus);\r\n        }\r\n        return '';\r\n    }\r\n\r\n    private getTableRatings(params: any): string {\r\n        if (params.node.data.PermTableRating) {\r\n            const tableRatingList: ListItem[] = ListUtil.convertToListItems(params.context.listData.PermTableRating);\r\n            return ListUtil.getLabelByValue(tableRatingList, params.node.data.PermTableRating);\r\n        }\r\n    }\r\n}\r\n\r\nexport const BenefitGridFields = {\r\n    BenefitName: 'BenefitName',\r\n    Amount: 'Amount',\r\n    ReinsuranceFlag: 'ReinsuranceFlag',\r\n    CoverageStatusLabel: 'CoverageStatusLabel',\r\n    ReasonText: 'ReasonText',\r\n    PermTableRating: 'PermTableRating',\r\n    PermTableReason: 'PermTableReason',\r\n    PermFlatExtraAmount: 'PermFlatExtraAmount',\r\n    TempFlatExtraAmount: 'TempFlatExtraAmount',\r\n    TempFlatExtraPeriod: 'TempFlatExtraPeriod'\r\n};\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { BenefitDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class BenefitItemFactory extends BaseDTOItemFactory<BenefitDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<BenefitDTO>): BenefitDTO {\r\n        let benefitDTO = new BenefitDTO();\r\n        benefitDTO.BenefitId = this.getNextId(createItemParams.items, \"BenefitId\");\r\n        return benefitDTO;\r\n    }\r\n}","module.exports = \"<master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\"\\r\\n    secureComponent [disabled]=\\\"disabled\\\">\\r\\n</master-detail>\"","import { Component, Injector, Injectable, Input } from '@angular/core';\r\n\r\nimport {\r\n    RowManagementDelegate,\r\n    MasterDetailComponentResolver,\r\n    BaseDataManager,\r\n    MasterButton,\r\n    MasterButtonType\r\n} from 'life-core/component/master-detail';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { DirectDataResolve } from 'life-core/component/shared';\r\nimport { ResolvedDataNames } from 'life-core/view-model/data-resolver';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { CoverageDTO, BenefitDTO, PolicyCoverageDTO } from 'ls-core/model';\r\n\r\nimport { LsInsuredAuthorizationProvider } from 'business/policy/worksheet/case-disp/insured/insured-authorization.provider';\r\nimport { BasePolicyMasterDetailViewModel } from 'business/policy/shared';\r\nimport { BenefitGridColumnsBuilder } from './benefit-grid-columns.builder';\r\nimport { BenefitItemFactory } from './benefit-item-factory';\r\nimport { BenefitDialogDataResolver } from './detail/benefit-dialog-data.resolver';\r\nimport { BenefitDialogDetailEditor } from './detail/benefit-detail-editor';\r\n\r\nexport function rowManagementDelegateFactory(\r\n    itemFactory: BenefitItemFactory,\r\n    dataManager: BaseDataManager<BenefitDTO>\r\n): RowManagementDelegate<BenefitDTO> {\r\n    return new RowManagementDelegate({\r\n        itemName: 'Benefit',\r\n        itemIDPropertyName: 'BenefitId',\r\n        itemFactory: itemFactory,\r\n        dataManager: dataManager\r\n    });\r\n}\r\n\r\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<BenefitDTO> {\r\n    return new MasterDetailComponentResolver({\r\n        itemComponents: BenefitDialogDetailEditor\r\n    });\r\n}\r\n\r\n@Component({\r\n    selector: 'benefit',\r\n    templateUrl: './benefit.component.html',\r\n    providers: [\r\n        BaseDataManager,\r\n        BenefitItemFactory,\r\n        {\r\n            provide: RowManagementDelegate,\r\n            useFactory: rowManagementDelegateFactory,\r\n            deps: [BenefitItemFactory, BaseDataManager]\r\n        },\r\n        {\r\n            provide: MasterDetailComponentResolver,\r\n            useFactory: itemComponentResolverFactory\r\n        },\r\n        BenefitGridColumnsBuilder,\r\n        { provide: AuthorizationProvider, useClass: LsInsuredAuthorizationProvider }\r\n    ]\r\n})\r\n@Injectable()\r\nexport class BenefitComponent extends BasePolicyMasterDetailViewModel<BenefitDTO> {\r\n    @Input()\r\n    public coverage: CoverageDTO;\r\n    private _policyCoverage: PolicyCoverageDTO;\r\n    private _appSession: AppSession;\r\n    private _gridColumenBuilder: BenefitGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumenBuilder: BenefitGridColumnsBuilder, appSession: AppSession, i18n: I18n) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n        this._gridColumenBuilder = gridColumenBuilder;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public get showDetailAsPopup(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumenBuilder;\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return this.i18n({ value: 'Benefit', id: 'applicant.coverage.benefit.party' });\r\n    }\r\n\r\n    protected loadItems(): BenefitDTO[] {\r\n        this.setResolvedMetaData();\r\n        this.setResolvedListData();\r\n        this._policyCoverage = this._appSession.policyDTO.PolicyCoverages_LazyLoad.find(\r\n            coverage => coverage.PolicyCoverageId === this.coverage.PolicyCoverageId\r\n        );\r\n        if (this._policyCoverage) {\r\n            return this._policyCoverage.Benefits_LazyLoad;\r\n        }\r\n    }\r\n\r\n    protected getRowNodeId(data: BenefitDTO): any {\r\n        return data.BenefitId;\r\n    }\r\n\r\n    protected getItemDetailDialogResolve(item: BenefitDTO): DirectDataResolve[] {\r\n        const context = { policyCoverage: this._policyCoverage, benefit: item };\r\n        return [\r\n            { resolveName: ResolvedDataNames.listData, resolverClass: BenefitDialogDataResolver, context: context }\r\n        ];\r\n    }\r\n\r\n    protected getPopupDetailButtons(): MasterButton<BenefitDTO>[] {\r\n        return [new MasterButton({ type: MasterButtonType.EDIT })];\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { BenefitComponent } from './benefit.component';\r\nimport { BenefitDialogDetailEditor } from './detail/benefit-detail-editor';\r\nimport { BenefitDialogDataResolver } from './detail/benefit-dialog-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [BenefitComponent, BenefitDialogDetailEditor],\r\n    exports: [BenefitComponent, BenefitDialogDetailEditor],\r\n    providers: [BenefitDialogDataResolver],\r\n    entryComponents: [BenefitDialogDetailEditor]\r\n})\r\nexport class BenefitModule {}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"disposition\\\" label=\\\"Disposition\\\" i18n-label=\\\"@@policy.worksheet.coverage.benefit.disposition\\\">\\r\\n                <lf-select #disposition name=\\\"disposition\\\" [items]=\\\"resolvedData.listData.CoverageStatus | listItems:'value':'Id'\\\" \\r\\n                [(ngModel)]=\\\"data.CoverageStatus\\\" (change)=\\\"onCaseDispositionChange($event)\\\" [clearable]=\\\"false\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"reason\\\" label=\\\"Reason\\\" i18n-label=\\\"@@policy.worksheet.coverage.benefit.dispositionReason\\\">\\r\\n                <lf-select #reason name=\\\"reason\\\" [items]=\\\"resolvedData.listData.ReasonText | listItems:'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.ReasonText\\\" \\r\\n                container=\\\"dialog\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"tableRating\\\" label=\\\"Table Rating\\\" i18n-label=\\\"@@policy.worksheet.coverage.benefit.tableRating\\\">\\r\\n                <lf-select #tableRating name=\\\"tableRating\\\" [items]=\\\"resolvedData.listData.PermTableRating | listItems:'value':'Id' | emptyItem\\\" [(ngModel)]=\\\"data.PermTableRating\\\" \\r\\n                container=\\\"dialog\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"tableRatingReason\\\" label=\\\"Table Rating Reason\\\" i18n-label=\\\"@@policy.worksheet.coverage.benefit.tableRatingReason\\\">\\r\\n                <lf-select #tableRatingReason name=\\\"tableRatingReason\\\" [items]=\\\"resolvedData.listData.PermTableReason | listItems:'value':'Id' | emptyItem\\\" \\r\\n                [(ngModel)]=\\\"data.PermTableReason\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"amount\\\" label=\\\"Amount\\\" i18n-label=\\\"@@policy.worksheet.coverage.benefit.amount\\\">\\r\\n                <lf-inputnumber #amount name=\\\"amount\\\" [(ngModel)]=\\\"data.Amount\\\" maxLength=\\\"10\\\" [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Reinsurance\\\" i18n-label=\\\"@@policy.worksheet.coverage.benefit.reinsurance\\\" [control]=\\\"reinsurance\\\">\\r\\n                <lf-radiobuttongroup #reinsurance name=\\\"reinsurance\\\" [(ngModel)]=\\\"data.ReinsuranceFlag\\\" secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"reinsurance\\\" [value]=true label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"reinsurance\\\" [value]=false label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"permFlatExtra\\\" label=\\\"Perm. Flat Extra\\\" i18n-label=\\\"@@policy.worksheet.coverage.benefit.permFlatExtra\\\">\\r\\n                <lf-inputnumber #permFlatExtra name=\\\"permFlatExtra\\\" [(ngModel)]=\\\"data.PermFlatExtraAmount\\\" format=\\\"n2\\\" decimals=\\\"2\\\" maxLength=\\\"6\\\" min=\\\"0\\\" max=\\\"999\\\" \\r\\n                [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"tempFlatExtraAmt\\\" label=\\\"Temporary Flat Extra Amount\\\" i18n-label=\\\"@@policy.worksheet.coverage.benefit.tempFlatExtra\\\">\\r\\n                <lf-inputnumber #tempFlatExtraAmt name=\\\"tempFlatExtraAmt\\\" [(ngModel)]=\\\"data.TempFlatExtraAmount\\\" format=\\\"n2\\\" decimals=\\\"2\\\" [allowNegative]=\\\"false\\\" \\r\\n                maxLength=\\\"6\\\" min=\\\"0\\\" max=\\\"999\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"tempFlatExtraDuration\\\" label=\\\"Temporary Flat Extra Duration\\\" i18n-label=\\\"@@policy.worksheet.coverage.benefit.tempFlatExtraDuration\\\">\\r\\n                <lf-inputnumber #tempFlatExtraDuration name=\\\"tempFlatExtraDuration\\\" [(ngModel)]=\\\"data.TempFlatExtraPeriod\\\" format=\\\"n0\\\" decimals=\\\"0\\\" [allowNegative]=\\\"false\\\" \\r\\n                min=\\\"0\\\" max=\\\"999\\\" maxLength=\\\"3\\\" secureComponent></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector, Injectable } from '@angular/core';\r\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\r\nimport { ParentChildRegistry } from 'life-core/view-model';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { ListDataService, ListsDataRequest, ListDataRequestBuilder } from 'ls-core/service';\r\nimport { BenefitDTO } from 'ls-core/model';\r\nimport { CoverageAuthorizationProvider } from './../../coverage-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'benefit-detail-editor',\r\n    templateUrl: './benefit-detail-editor.html',\r\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: CoverageAuthorizationProvider }]\r\n})\r\n@Injectable()\r\nexport class BenefitDialogDetailEditor extends BasePolicyDialogDetailViewModel<BenefitDTO> {\r\n    private _listDataService: ListDataService;\r\n\r\n    constructor(injector: Injector, listDataService: ListDataService) {\r\n        super(injector);\r\n        this._listDataService = listDataService;\r\n    }\r\n\r\n    public onCaseDispositionChange(caseDispositionSelection: Event): void {\r\n        this.resetReasonText();\r\n        this.reloadCaseDispositionReasonList(caseDispositionSelection);\r\n    }\r\n\r\n    protected resetReasonText(): void {\r\n        if (this.data.ReasonText) {\r\n            this.data.ReasonText = '';\r\n        }\r\n    }\r\n\r\n    private reloadCaseDispositionReasonList(caseDispositionSelection: Event): void {\r\n        let request = this.getListsDataRequest();\r\n        this._listDataService.load(request).then(data => {\r\n            this.resolvedData.listData.ReasonText = data.ReasonText;\r\n        });\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this.data);\r\n        listDataRequestBuilder.addListRequestItem(this.data, 'ReasonText');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { ListMap } from 'life-core/model';\r\nimport { BenefitDTO } from 'ls-core/model';\r\nimport { ListDataRequestBuilder, ListsDataRequest, ListDataItem } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class BenefitDialogDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    public context: any;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        const benefitDTO = ObjectUtil.createObjectOfType(this.context.benefit, BenefitDTO);\r\n        listDataRequestBuilder.addListRequestItem(benefitDTO, 'CoverageStatus');\r\n        listDataRequestBuilder.addListRequestItem(benefitDTO, 'ReasonText');\r\n        listDataRequestBuilder.addListRequestItem(benefitDTO, 'PermTableRating');\r\n        listDataRequestBuilder.addListRequestItem(benefitDTO, 'PermTableReason');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","import { Injectable, Injector } from '@angular/core';\r\n\r\nimport { ListMap } from 'life-core/model';\r\nimport { DirectDataResolverClass } from 'life-core/component/shared/data-resolve';\r\nimport { CoverageDTO } from 'ls-core/model';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\nimport { ListsDataRequest, ListDataRequestBuilder, ListDataItem } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session';\r\n\r\n@Injectable()\r\nexport class ChangeCoverageDispositionListDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    private _appSession: AppSession;\r\n    public context?: any;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        const coverage = this.context as CoverageDTO;\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        listDataRequestBuilder.addListRequestItem(coverage, 'CoverageStatus');\r\n        listDataRequestBuilder.addListRequestItem(coverage, 'ReasonText');\r\n\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","module.exports = \"<form ngForm #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Disposition\\\" i18n-label=\\\"@@policy.worksheet.coverageDisposition\\\" [control]=\\\"disposition\\\">\\r\\n                <lf-select #disposition name=\\\"disposition\\\" [(ngModel)]=\\\"data.Disposition\\\" [items]=\\\"filteredDispositionList | listItems:'value':'Id' | emptyItem\\\"\\r\\n                    (change)=\\\"onDispositionChange($event)\\\" secureComponent style=\\\"width:200px\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"applyToAllOpenBenefit\\\" label=\\\"Apply To All Open Benefits?\\\" i18n-label=\\\"@@policy.worksheet.applytoallbenefits\\\">\\r\\n                <lf-checkbox #applyToAllOpenBenefit name=\\\"applyToAllOpenBenefit\\\" [(ngModel)]=\\\"applyToAllBenefits\\\"\\r\\n                    secureComponent></lf-checkbox>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input label=\\\"Reason\\\" i18n-label=\\\"@@policy.worksheet.coverageDispositionReason\\\" [control]=\\\"dispositionChangeReason\\\">\\r\\n                <lf-select #dispositionChangeReason name=\\\"dispositionChangeReason\\\" [(ngModel)]=\\\"data.ReasonText\\\"\\r\\n                    [items]=\\\"filteredReasonList | listItems:'value':'Id' | emptyItem\\\" secureComponent style=\\\"width:200px\\\"\\r\\n                    [required]=\\\"isReasonRequired\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\" *ngIf=\\\"cancelOpenRequirementsExist\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input label=\\\"Cancel Open Requirements\\\" i18n-label=\\\"@@policy.worksheet.caseDispositionRequirements\\\"\\r\\n                [control]=\\\"cancelOpenRequirementsOption\\\">\\r\\n                <lf-radiobuttongroup #cancelOpenRequirementsOption name=\\\"cancelOpenRequirementsOption\\\" [(ngModel)]=\\\"cancelOpenRequirementsValue\\\"\\r\\n                    secureComponent>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"cancelOpenRequirementsOption\\\" value=\\\"All\\\" label=\\\"All\\\" i18n-label=\\\"@@general.stringconstants.all\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                    <span>\\r\\n                        <lf-radiobutton name=\\\"cancelOpenRequirementsOption\\\" value=\\\"Exclude\\\" label=\\\"Exclude Post Issue Requirements\\\"\\r\\n                            i18n-label=\\\"@@policy.worksheet.caseDispositionRequirementExclude\\\"></lf-radiobutton>\\r\\n                    </span>\\r\\n                </lf-radiobuttongroup>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <lf-form-input label=\\\"Final Action Note\\\" i18n-label=\\\"@@policy.worksheet.coverageDispositionNote\\\" [control]=\\\"finalActionNote\\\">\\r\\n                <lf-inputtextarea #finalActionNote name=\\\"finalActionNote\\\" [(ngModel)]=\\\"data.FinalActionNote\\\" [required]=\\\"isNoteRequired\\\"\\r\\n                    secureComponent rows=\\\"10\\\" cols=\\\"30\\\"></lf-inputtextarea>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { ParentChildRegistry } from 'life-core/view-model';\r\nimport { DialogViewModelResult } from 'life-core/component/dialog';\r\nimport { ICancelableDataManager, CancelableDataManager } from 'life-core/data-management';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { ListItem } from 'life-core/model/list.model';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { DialogButton, DialogButtonType, DialogSize, ModalDialog, DialogData } from 'life-core/component/dialog';\r\n\r\nimport { CoverageDTO, PolicyDTO } from 'ls-core/model';\r\nimport {\r\n    DataServiceParams,\r\n    UIServiceNames,\r\n    UIServiceMethods,\r\n    ListsDataRequest,\r\n    ListDataRequestBuilder,\r\n    DataService\r\n} from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session';\r\nimport { DTOObjectUtil } from 'ls-core/util';\r\nimport { LsAppConfig, SystemSetting } from 'ls-core/config';\r\n\r\nimport {\r\n    CaseDispositionRequest,\r\n    DispositionResponse,\r\n    BaseChangeDispositionComponent\r\n} from 'business/policy/worksheet/case-disp/change-disp';\r\nimport { CoverageStatuses, Prompt } from 'business/policy/shared';\r\nimport { CoverageValidationComponent } from 'business/policy/worksheet/case-disp/coverage/change-coverage-disp/coverage-validation/coverage-validation.component';\r\nimport { CoverageAuthorizationProvider } from 'business/policy/worksheet/case-disp/coverage/coverage-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'change-coverage-disposition',\r\n    templateUrl: './change-coverage-disposition.component.html',\r\n    providers: [\r\n        ParentChildRegistry,\r\n        { provide: AuthorizationProvider, useClass: CoverageAuthorizationProvider },\r\n        CancelableDataManager\r\n    ]\r\n})\r\nexport class ChangeCoverageDispositionComponent extends BaseChangeDispositionComponent<CoverageDTO> {\r\n    public filteredDispositionList: Array<ListItem>;\r\n    public filteredReasonList: Array<ListItem>;\r\n    public isReasonRequired: boolean;\r\n    public isNoteRequired: boolean;\r\n    public applyToAllBenefits: boolean;\r\n\r\n    private _cancelableDataManager: ICancelableDataManager<CoverageDTO>;\r\n    private _policy: PolicyDTO;\r\n    private _dataService: DataService;\r\n    private _appSession: AppSession;\r\n    private _modalDialog: ModalDialog;\r\n    private _validationMessages: Prompt[];\r\n    private _filteredDispositionArray: Array<any>;\r\n    private _filteredReasonArray: Array<any>;\r\n    private _appConfig: LsAppConfig;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        i18n: I18n,\r\n        appConfig: LsAppConfig,\r\n        cancelableDataManager: CancelableDataManager,\r\n        appSession: AppSession,\r\n        dataService: DataService,\r\n        modalDialog: ModalDialog\r\n    ) {\r\n        super(injector, i18n);\r\n        this._cancelableDataManager = cancelableDataManager as CancelableDataManager<CoverageDTO>;\r\n        this._appSession = appSession;\r\n        this._dataService = dataService;\r\n        this._modalDialog = modalDialog;\r\n        this._policy = this._appSession.policyDTO;\r\n        this._appConfig = appConfig;\r\n        this.applyToAllBenefits = false;\r\n    }\r\n\r\n    public setModel(model: DialogData): void {\r\n        super.setModel(model);\r\n        this._cancelableDataManager.setItem(model.parameterData as CoverageDTO);\r\n        this.subscriptionTracker.track(\r\n            this._cancelableDataManager.getItem().subscribe(coverage => {\r\n                this.data = coverage;\r\n                this.onDataSet();\r\n            })\r\n        );\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this._validationMessages = [];\r\n        this._filteredDispositionArray = this.resolvedData.listData.CoverageStatus;\r\n        this._filteredReasonArray = this.resolvedData.listData.ReasonText;\r\n        this.isReasonRequired =\r\n            this._appConfig.getSystemSetting(SystemSetting.FinalActionReasonRequired).toLowerCase() === 'true';\r\n        this.isNoteRequired =\r\n            this._appConfig.getSystemSetting(SystemSetting.WorksheetFANoteRequired).toLowerCase() === 'true';\r\n        this.getFilteredDispositionListItems();\r\n        this.getFilteredReasonTextListItems();\r\n    }\r\n\r\n    protected isCancelOpenRequirementOptionAvailable(): boolean {\r\n        return (\r\n            this.data.Disposition != null &&\r\n            this.data.Disposition != CoverageStatuses.PENDING &&\r\n            this.data.Disposition != CoverageStatuses.APPROVED\r\n        );\r\n    }\r\n\r\n    protected getReasonListDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._policy);\r\n        listDataRequestBuilder.addListRequestItem(this.data, 'ReasonText');\r\n\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n\r\n    protected setDisposition(): Promise<DialogViewModelResult> {\r\n        const serviceParams: DataServiceParams = this.getSetCoverageDispositionServiceParams();\r\n        return this._dataService.getData(serviceParams).then(response => {\r\n            const dispositionResponse = response.responsePayload as DispositionResponse;\r\n            if (dispositionResponse && dispositionResponse.Success) {\r\n                this.updatePolicyInSession(dispositionResponse.Policy);\r\n                return new DialogViewModelResult(null, true);\r\n            }\r\n            return this.handleCoverageDispositionValidation(dispositionResponse);\r\n        });\r\n    }\r\n\r\n    protected getSetCoverageDispositionServiceParams(): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.SET_DISPOSITION_SERVICE,\r\n            serviceMethod: UIServiceMethods.SET_DISPOSITION,\r\n            requestPayload: this.getSetCoverageDispositionServicePayload()\r\n        });\r\n    }\r\n\r\n    protected resetDispositionData(): Promise<DialogViewModelResult> {\r\n        this._cancelableDataManager.cancelItem(this.data);\r\n        return Promise.resolve(new DialogViewModelResult(null, true));\r\n    }\r\n\r\n    protected resetReasonText(): void {\r\n        if (this.data.ReasonText) {\r\n            this.data.ReasonText = '';\r\n        }\r\n    }\r\n\r\n    private getFilteredDispositionListItems(): Array<ListItem> {\r\n        this.filteredDispositionList = this._filteredDispositionArray.filter(item => {\r\n            return item.Id !== this.data.CoverageStatus;\r\n        });\r\n        return this.filteredDispositionList;\r\n    }\r\n\r\n    private getFilteredReasonTextListItems(): Array<ListItem> {\r\n        this.filteredReasonList = this._filteredReasonArray.filter(item => {\r\n            return item.Id !== this.data.CoverageStatusDescription;\r\n        });\r\n        return this.filteredReasonList;\r\n    }\r\n\r\n    private getSetCoverageDispositionServicePayload(): CoverageDispositionRequest {\r\n        const request = new CoverageDispositionRequest();\r\n        request.Policy = this._policy;\r\n        request.CoverageDTO = this.data;\r\n        request.ApplyToAllBenefits = this.applyToAllBenefits;\r\n        request.CancelOpenRequirements = this.cancelOpenRequirementsValue == 'Exclude';\r\n        request.CancelAllRequirements = this.cancelOpenRequirementsValue == 'All';\r\n        request.AprovalPrompts = this._validationMessages;\r\n        return request;\r\n    }\r\n\r\n    private updatePolicyInSession(updatedPolicy: PolicyDTO): void {\r\n        const policyDTO: PolicyDTO = DTOObjectUtil.deepConvertObjectOfType(updatedPolicy, PolicyDTO) as PolicyDTO;\r\n        this._appSession.updatePolicy(policyDTO);\r\n    }\r\n\r\n    private handleCoverageDispositionValidation(\r\n        dispositionResponse: DispositionResponse\r\n    ): Promise<DialogViewModelResult> {\r\n        if (dispositionResponse && dispositionResponse.AprovalPrompts) {\r\n            this._validationMessages = dispositionResponse.AprovalPrompts;\r\n            return this.showValidationMessages();\r\n        }\r\n        if (dispositionResponse && dispositionResponse.ResultMessage) {\r\n            return this.showDispositionErrorMessage(dispositionResponse.ResultMessage).then(() => {\r\n                return Promise.resolve(new DialogViewModelResult(null, true));\r\n            });\r\n        }\r\n    }\r\n\r\n    private showValidationMessages(): Promise<DialogViewModelResult> {\r\n        return this._modalDialog\r\n            .open({\r\n                view: CoverageValidationComponent,\r\n                title: this.i18n({ value: 'Coverage Validation', id: 'policy.worksheet.coverageValidationTitle' }),\r\n                buttons: [\r\n                    new DialogButton({ type: DialogButtonType.CONTINUE }),\r\n                    new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\r\n                ],\r\n                data: this._validationMessages,\r\n                size: DialogSize.large\r\n            })\r\n            .then(dialogRef => {\r\n                return dialogRef.result.then(result =>\r\n                    result.buttonId == DialogButtonType.CONTINUE ? this.onValidationCompleted() : null\r\n                );\r\n            });\r\n    }\r\n\r\n    private onValidationCompleted(): Promise<DialogViewModelResult> {\r\n        this._validationMessages.forEach(message => {\r\n            message.Deleted = true;\r\n        });\r\n        return this.setDisposition();\r\n    }\r\n}\r\n\r\nclass CoverageDispositionRequest extends CaseDispositionRequest {\r\n    public readonly $type: string = 'life.ls.ui.ria.dto.requests.CoverageDispositionRequest, LifeSuite.UIServiceDTO';\r\n\r\n    public CoverageDTO: CoverageDTO;\r\n    public Overriden: boolean;\r\n    public ApplyToAllBenefits: boolean;\r\n    public PromptResponses: any[];\r\n    public AprovalPrompts: any[];\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { I18n } from 'life-core/i18n';\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\n\r\nimport { CoverageValidationIconHelper } from './coverage-validation-icon.helper';\r\nimport { ValidationMessageType } from './validation-message.type';\r\n\r\n@Injectable()\r\nexport class CoverageValidationGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.getCoverageValidationGridColumns();\r\n        return this.columns;\r\n    }\r\n\r\n    private getCoverageValidationGridColumns(): void {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Checked', id: 'policy.worksheet.coverageValidationChecked' }),\r\n            checkboxSelection: this.isOverridableMessage,\r\n            width: 3\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Type', id: 'policy.worksheet.coverageValidationType' }),\r\n            field: CoverageValidationGridFields.Type,\r\n            cellRenderer: this.getIcon,\r\n            width: 3\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Message', id: 'policy.worksheet.coverageValidationMessage' }),\r\n            field: CoverageValidationGridFields.Message,\r\n            width: 94\r\n        });\r\n    }\r\n\r\n    private getIcon(params: any): string {\r\n        return CoverageValidationIconHelper.getIcon(params.data);\r\n    }\r\n\r\n    private isOverridableMessage(params: any): boolean {\r\n        return params.data && params.data.Type == ValidationMessageType.Overridable;\r\n    }\r\n}\r\n\r\nconst CoverageValidationGridFields = {\r\n    Checked: 'Checked',\r\n    Type: 'Type',\r\n    Message: 'Message'\r\n};\r\n","﻿import { IconData } from 'life-core/model';\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\nimport { Prompt } from 'business/policy/shared';\r\n\r\nexport class CoverageValidationIconHelper {\r\n    public static getIcon(message: Prompt): string {\r\n        const iconData = this.getIconData(message);\r\n        return `<div class=\"${iconData.cssClass} grid-cell-icon\"/>`;\r\n    }\r\n\r\n    private static getIconData(message: Prompt): IconData {\r\n        let iconData: IconData;\r\n        switch (message.Type) {\r\n            case 'Info': {\r\n                iconData = new IconData('ls-info-validation-message-icon', 'Information');\r\n                break;\r\n            }\r\n            case 'Required': {\r\n                iconData = new IconData('ls-required-validation-message-icon', 'Required Message');\r\n                break;\r\n            }\r\n            case 'Overridable': {\r\n                iconData = new IconData('ls-overridable-validation-message-icon', 'Overridable Message');\r\n                break;\r\n            }\r\n        }\r\n        return iconData;\r\n    }\r\n}\r\n","module.exports = \"<form role=\\\"form\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <data-grid style=\\\"height: 450px;\\\" [gridOptions]=\\\"gridOptions\\\" [suppressRowClickSelection]=\\\"true\\\" rowSelection=\\\"multiple\\\"\\r\\n            (rowSelected)=\\\"onRowSelected($event)\\\">\\r\\n        </data-grid>\\r\\n    </div>\\r\\n    <data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n</form>\"","import { Component, Injector, ViewChild } from '@angular/core';\r\nimport {\r\n    IDataGridViewModel,\r\n    IDataGridOptions,\r\n    DataGridColumns,\r\n    DataGridOptionsUtil,\r\n    DataGrid,\r\n    DataGridCommonOptions\r\n} from 'life-core/component/grid';\r\nimport { ViewModel, ParentChildRegistry } from 'life-core/view-model';\r\nimport { ICompose, DialogButton, DialogResult } from 'life-core/component';\r\nimport {\r\n    IDialogViewModel,\r\n    DialogData,\r\n    DialogViewModelResult,\r\n    ConfirmDialog,\r\n    DialogButtonType\r\n} from 'life-core/component/dialog';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { CoverageValidationGridColumnsBuilder } from './coverage-validation-grid-columns.builder';\r\nimport { Prompt } from 'business/policy/shared';\r\nimport { ValidationMessageType } from './validation-message.type';\r\nimport { CoverageAuthorizationProvider } from '../../coverage-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'coverage-validation',\r\n    templateUrl: './coverage-validation.component.html',\r\n    providers: [\r\n        ParentChildRegistry,\r\n        CoverageValidationGridColumnsBuilder,\r\n        { provide: AuthorizationProvider, useClass: CoverageAuthorizationProvider }\r\n    ]\r\n})\r\nexport class CoverageValidationComponent extends ViewModel implements ICompose, IDialogViewModel, IDataGridViewModel {\r\n    public gridOptions: IDataGridOptions;\r\n    public rowCount: number;\r\n    private _gridColumnsBuilder: CoverageValidationGridColumnsBuilder;\r\n    private _validationMessages: Prompt[];\r\n    private _confirmDialog: ConfirmDialog;\r\n\r\n    @ViewChild(DataGrid)\r\n    public refDataGrid: DataGrid;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        gridColumnsBuilder: CoverageValidationGridColumnsBuilder,\r\n        confirmDialog: ConfirmDialog,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n        this._confirmDialog = confirmDialog;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public setModel(model: DialogData): void {\r\n        this._validationMessages = model.parameterData;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.gridOptions = this.getGridOptions();\r\n        return Promise.resolve(null);\r\n    }\r\n\r\n    protected setupData(): void {\r\n        this.rowCount = this._validationMessages.length;\r\n    }\r\n\r\n    public getGridOptions(): IDataGridOptions {\r\n        const gridColumns: DataGridColumns = this.getGridColumns();\r\n        return DataGridOptionsUtil.getGridOptions(\r\n            {\r\n                rowData: this._validationMessages,\r\n                columnDefs: gridColumns.getLayout(),\r\n                rowSelection: 'multiple',\r\n                rowDeselection: true,\r\n                enableColResize: true,\r\n                enableSorting: true,\r\n                headerRows: 2,\r\n                context: {\r\n                    hostComponent: this\r\n                }\r\n            },\r\n            DataGridCommonOptions\r\n        );\r\n    }\r\n    public getGridColumns(): DataGridColumns {\r\n        return this._gridColumnsBuilder.build();\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId == DialogButtonType.CONTINUE) {\r\n            if (this.canContinueToChangeDisposition()) {\r\n                return Promise.resolve(\r\n                    new DialogViewModelResult({ validationMessages: this._validationMessages }, true)\r\n                );\r\n            }\r\n            this.showDispositionChangeValidationMessage();\r\n        } else {\r\n            return Promise.resolve(new DialogViewModelResult({ validationMessages: null }, true));\r\n        }\r\n    }\r\n\r\n    private canContinueToChangeDisposition(): boolean {\r\n        return this.isRequiredValidationMessagesNotPresent() && this.isOverridableValidationMessagesChecked();\r\n    }\r\n\r\n    private isRequiredValidationMessagesNotPresent(): boolean {\r\n        return this._validationMessages.find(message => message.Type == ValidationMessageType.Required) == undefined;\r\n    }\r\n\r\n    private isOverridableValidationMessagesChecked(): boolean {\r\n        return (\r\n            this._validationMessages.find(\r\n                message => message.Type == ValidationMessageType.Overridable && message.Checked == false\r\n            ) == undefined\r\n        );\r\n    }\r\n\r\n    private showDispositionChangeValidationMessage(): Promise<DialogResult> {\r\n        return this._confirmDialog.open({\r\n            message: this.i18n({\r\n                value: 'The messages needs to be addressed before continuing to change the coverage disposition.',\r\n                id: 'policy.worksheet.coverageValidationFailed.alertmsg'\r\n            }),\r\n            title: this.i18n({\r\n                value: 'Coverage Validation Failed',\r\n                id: 'policy.worksheet.coverageValidationFailed.title'\r\n            }),\r\n            buttons: [new DialogButton({ type: DialogButtonType.OK })]\r\n        });\r\n    }\r\n\r\n    public onRowSelected(selectedMessage: any): void {\r\n        const overridableMessage = this._validationMessages.find(\r\n            message => message.Type == selectedMessage.data.Type && message.Message == selectedMessage.data.Message\r\n        );\r\n        overridableMessage.Checked = selectedMessage.node.selected;\r\n    }\r\n}\r\n","export const ValidationMessageType = {\r\n    Informative: 'Info',\r\n    Required: 'Required',\r\n    Overridable: 'Overridable'\r\n};\r\n","export * from './change-coverage-disposition-listdata.resolver';\r\nexport * from './change-coverage-disposition.component';\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class CoverageAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const coverageAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.CASE]\r\n        );\r\n\r\n        const caseReopenAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.CASEREOPEN]\r\n        );\r\n        const caseApproveAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.CASEAPPROVE]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = coverageAuthorizationLevel;\r\n        this.authorizationData.componentLevel['reopenCaseButton'] = caseReopenAuthorizationLevel;\r\n        this.authorizationData.componentLevel['caseApprove'] = caseApproveAuthorizationLevel;\r\n    }\r\n}\r\n","﻿export * from './plan-worksheet-coverage-form-fields';\r\nexport * from './worksheet-coverage-form-fields.loader';","import { Injectable } from '@angular/core';\r\n\r\nimport { PlanCoverageFormFields } from \"business/policy/shared/coverage-dynamic-form\";\r\n/**\n* Data holder class to store form field definitions per plan code\n*/\r\n@Injectable()\r\nexport class PlanWorksheetCoverageFormFields extends PlanCoverageFormFields {\r\n\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { FormLoadFieldsService, LsFormTypes, DynamicFormFieldsManager } from 'ls-core/component/dynamic-form';\r\nimport { MetadataLoader } from 'ls-core/util';\r\n\r\nimport { BaseCoverageFormFieldsLoader } from 'business/policy/shared/coverage-dynamic-form';\r\nimport { PlanWorksheetCoverageFormFields } from './plan-worksheet-coverage-form-fields';\r\n\r\n@Injectable()\r\nexport class WorksheetCoverageFormFieldsLoader extends BaseCoverageFormFieldsLoader {\r\n    constructor(\r\n        formLoadFieldsService: FormLoadFieldsService,\r\n        metadataLoader: MetadataLoader,\r\n        planWorksheetCoverageFormFields: PlanWorksheetCoverageFormFields,\r\n        dynamicFormFieldsManager: DynamicFormFieldsManager\r\n    ) {\r\n        super(formLoadFieldsService, metadataLoader, planWorksheetCoverageFormFields, dynamicFormFieldsManager);\r\n    }\r\n\r\n    protected getFormType(): string {\r\n        return LsFormTypes.PolicyCoverage;\r\n    }\r\n\r\n    protected getCoverageConfigurationCodeType(): string {\r\n        return 'worksheet_field_configuration';\r\n    }\r\n}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"impairmentRestrictionCode\\\" label=\\\"Code\\\" i18n-label=\\\"@@policy.worksheet.coverage.impairment.restrictionCode\\\">\\r\\n\\t\\t\\t\\t<lf-select #impairmentRestrictionCode name=\\\"impairmentRestrictionCode\\\" [items]=\\\"resolvedData.listData.ImpairmentRestrictionCode | listItems:'value':'Id' | emptyItem\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.ImpairmentRestrictionCode\\\" (change)=\\\"onImpairmentChange($event)\\\" secureComponent style=\\\"width:350px\\\"\\r\\n\\t\\t\\t\\t container=\\\"dialog\\\" required [disabled]=\\\"isRestrictionSelectionDisabled\\\">\\r\\n\\t\\t\\t\\t</lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-12\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"impairmentText\\\" label=\\\"Description\\\" i18n-label=\\\"@@policy.worksheet.coverage.impairment.restrictionText\\\">\\r\\n\\t\\t\\t\\t<lf-inputtextarea #impairmentText name=\\\"impairmentText\\\" [(ngModel)]=\\\"data.ImpairmentText\\\" secureComponent rows=\\\"6\\\"\\r\\n\\t\\t\\t\\t maxLength=\\\"500\\\" [style]=\\\"{width: '100%'}\\\"></lf-inputtextarea>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</form>\"","import { Component, Injector, Injectable } from '@angular/core';\n\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { ListItem } from 'life-core/model';\nimport { ListUtil } from 'life-core/util';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { ParentChildRegistry } from 'life-core/view-model';\n\nimport { ImpairmentRestrictionDTO } from 'ls-core/model';\n\nimport { CoverageAuthorizationProvider } from './../../coverage-authorization.provider';\n\n@Component({\n    selector: 'impairment-detail-editor',\n    templateUrl: './impairment-detail-editor.html',\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: CoverageAuthorizationProvider }]\n})\n@Injectable()\nexport class ImpairmentDialogDetailEditor extends BasePolicyDialogDetailViewModel<ImpairmentRestrictionDTO> {\n    public isRestrictionSelectionDisabled: boolean;\n    constructor(injector: Injector) {\n        super(injector);\n        this.isRestrictionSelectionDisabled = false;\n    }\n\n    protected setupData(): void {\n        this.setRestrictionCodeDisability();\n    }\n\n    public onImpairmentChange(selectedImpairment: any): void {\n        const selectedImpairmentValue: string = selectedImpairment.value;\n        const impairmentDropdownList: ListItem[] = ListUtil.convertToListItems(\n            this.resolvedData.listData.ImpairmentRestrictionCode\n        );\n        const selectedImpairmentText: string = ListUtil.getLabelByValue(\n            impairmentDropdownList,\n            selectedImpairmentValue\n        );\n\n        this.data.ImpairmentText =\n            selectedImpairmentText && selectedImpairmentText.length > 0\n                ? selectedImpairmentText.substr(selectedImpairmentValue.length + 1)\n                : '';\n    }\n\n    private setRestrictionCodeDisability(): void {\n        this.isRestrictionSelectionDisabled = this.data.ImpairmentRestrictionCode ? true : false;\n    }\n}\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { ListMap } from 'life-core/model';\r\nimport { ImpairmentRestrictionDTO } from 'ls-core/model';\r\nimport { ListDataRequestBuilder, ListsDataRequest, ListDataItem } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class ImpairmentDialogDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    public context: any;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        const impairmentDTO = ObjectUtil.createObjectOfType(this.context, ImpairmentRestrictionDTO);\r\n        listDataRequestBuilder.addListRequestItem(impairmentDTO, 'ImpairmentRestrictionCode');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class ImpairmentGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    constructor(i18n: I18n) {\r\n        super();\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Code', id: 'policy.worksheet.coverage.impairment.issueCode' }),\r\n            field: ImpairmentGridFields.ImpairmentRestrictionCode,\r\n            width: 200\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Description', id: 'policy.worksheet.coverage.amendment.restrictionText' }),\r\n            field: ImpairmentGridFields.ImpairmentText,\r\n            width: 600,\r\n            autoHeight: true\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nexport const ImpairmentGridFields = {\r\n    ImpairmentRestrictionCode: 'ImpairmentRestrictionCode',\r\n    ImpairmentText: 'ImpairmentText'\r\n};\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { ImpairmentRestrictionDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class ImpairmentItemFactory extends BaseDTOItemFactory<ImpairmentRestrictionDTO> {\r\n\tpublic newInstance(createItemParams: CreateItemParams<ImpairmentRestrictionDTO>): ImpairmentRestrictionDTO {\r\n\t\tlet impairmentDTO = new ImpairmentRestrictionDTO();\r\n\t\timpairmentDTO.CoveragePersonImpairmentId = this.getNextId(createItemParams.items, \"CoveragePersonImpairmentId\");\r\n\t\treturn impairmentDTO;\r\n\t}\r\n}\r\n\r\n","module.exports = \"<master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\"\\r\\n    secureComponent [disabled]=\\\"disabled\\\">\\r\\n</master-detail>\"","import { Component, Injector, Injectable, Input } from '@angular/core';\n\nimport { RowManagementDelegate, MasterDetailComponentResolver, BaseDataManager } from 'life-core/component/master-detail';\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\nimport { DirectDataResolve } from 'life-core/component/shared';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { I18n } from 'life-core/i18n';\n\nimport { CoverageDTO, ImpairmentRestrictionDTO } from 'ls-core/model';\nimport { BasePolicyMasterDetailViewModel } from 'business/policy/shared';\nimport { LsInsuredAuthorizationProvider } from 'business/policy/worksheet/case-disp/insured/insured-authorization.provider';\nimport { ImpairmentGridColumnsBuilder } from './impairment-grid-columns.builder';\nimport { ImpairmentItemFactory } from './impairment-item-factory';\nimport { ImpairmentDialogDataResolver } from './detail/impairment-dialog-data.resolver';\nimport { ImpairmentDialogDetailEditor } from './detail/impairment-detail-editor';\n\nexport function rowManagementDelegateFactory(\n    itemFactory: ImpairmentItemFactory,\n    dataManager: BaseDataManager<ImpairmentRestrictionDTO>\n): RowManagementDelegate<ImpairmentRestrictionDTO> {\n    return new RowManagementDelegate({\n        itemName: 'Impairment',\n        itemIDPropertyName: 'CoveragePersonImpairmentId',\n        itemFactory: itemFactory,\n        dataManager: dataManager\n    });\n}\n\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<ImpairmentRestrictionDTO> {\n    return new MasterDetailComponentResolver({\n        itemComponents: ImpairmentDialogDetailEditor\n    });\n}\n\n@Component({\n    selector: 'impairment',\n    templateUrl: './impairment.component.html',\n    providers: [\n        BaseDataManager,\n        ImpairmentItemFactory,\n        ImpairmentGridColumnsBuilder,\n        {\n            provide: RowManagementDelegate,\n            useFactory: rowManagementDelegateFactory,\n            deps: [ImpairmentItemFactory, BaseDataManager]\n        },\n        {\n            provide: MasterDetailComponentResolver,\n            useFactory: itemComponentResolverFactory\n        },\n        { provide: AuthorizationProvider, useClass: LsInsuredAuthorizationProvider }\n    ]\n})\n@Injectable()\nexport class ImpairmentComponent extends BasePolicyMasterDetailViewModel<ImpairmentRestrictionDTO> {\n    @Input()\n    public coverage: CoverageDTO;\n    private _gridColumnBuilder: ImpairmentGridColumnsBuilder;\n\n    constructor(injector: Injector, gridColumnBuilder: ImpairmentGridColumnsBuilder, i18n: I18n) {\n        super(injector);\n        this._gridColumnBuilder = gridColumnBuilder;\n        this.i18n = i18n;\n    }\n\n    public get showDetailAsPopup(): boolean {\n        return true;\n    }\n\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\n        return this._gridColumnBuilder;\n    }\n\n    protected getTitle(): string {\n        return this.i18n({ value: 'Impairment', id: 'policy.worksheet.coverage.impairmentheader' });\n    }\n\n    protected loadItems(): ImpairmentRestrictionDTO[] {\n        return this.coverage.ImpairmentRestrictions_LazyLoad;\n    }\n\n    protected getRowNodeId(data: ImpairmentRestrictionDTO): any {\n        return data.CoveragePersonImpairmentId;\n    }\n\n    protected getItemDetailDialogResolve(item: ImpairmentRestrictionDTO): DirectDataResolve[] {\n        return [{ resolveName: 'listData', resolverClass: ImpairmentDialogDataResolver, context: item }];\n    }\n}\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { ImpairmentComponent } from './impairment.component';\r\nimport { ImpairmentDialogDetailEditor } from './detail/impairment-detail-editor';\r\nimport { ImpairmentDialogDataResolver } from './detail/impairment-dialog-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [ImpairmentComponent, ImpairmentDialogDetailEditor],\r\n    exports: [ImpairmentComponent, ImpairmentDialogDetailEditor],\r\n    providers: [ImpairmentDialogDataResolver],\r\n    entryComponents: [ImpairmentDialogDetailEditor]\r\n})\r\nexport class ImpairmentModule {}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"reinsurer\\\" label=\\\"Reinsurer\\\" i18n-label=\\\"@@policy.worksheet.coverage.reinsurer.reinsurer\\\">\\r\\n\\t\\t\\t\\t<lf-select #reinsurer name=\\\"reinsurer\\\" [items]=\\\"resolvedData.listData.Reinsurer | listItems:'value':'Id' | emptyItem\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.CompanyCode\\\" [disabled]=\\\"isReinsurerDisabled\\\" secureComponent required style=\\\"width:200px\\\">\\r\\n\\t\\t\\t\\t</lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"treatyType\\\" label=\\\"Treaty Type\\\" i18n-label=\\\"@@policy.worksheet.coverage.reinsurer.treatytype\\\">\\r\\n\\t\\t\\t\\t<lf-select #treatyType name=\\\"treatyType\\\" [items]=\\\"resolvedData.metaData.ReinsurerTreatyType | listItems: 'label' : 'value' | emptyItem\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.TreatyType\\\" secureComponent style=\\\"width:200px\\\">\\r\\n\\t\\t\\t\\t</lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"cessionNumber\\\" label=\\\"Cession Number\\\" i18n-label=\\\"@@policy.worksheet.coverage.reinsurer.cessionnumber\\\">\\r\\n\\t\\t\\t\\t<lf-inputtext #cessionNumber name=\\\"cessionNumber\\\" [(ngModel)]=\\\"data.CessionNumber\\\" maxLength=\\\"10\\\" [regExp]=\\\"alphaNumericRegex\\\"\\r\\n\\t\\t\\t\\t secureComponent></lf-inputtext>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"reinsuranceType\\\" label=\\\"Reinsurance Type\\\" i18n-label=\\\"@@policy.worksheet.coverage.reinsurer.reinsurancetype\\\">\\r\\n\\t\\t\\t\\t<lf-inputtext #reinsuranceType name=\\\"reinsuranceType\\\" maxLength=\\\"1\\\" [(ngModel)]=\\\"data.ReinsuranceType\\\" [regExp]=\\\"alphaNumericRegex\\\"\\r\\n\\t\\t\\t\\t secureComponent></lf-inputtext>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"retentionAmount\\\" label=\\\"Retention Amount\\\" i18n-label=\\\"@@policy.worksheet.coverage.reinsurer.retentionamount\\\">\\r\\n\\t\\t\\t\\t<lf-inputnumber #retentionAmount name=\\\"retentionAmount\\\" [max]=\\\"9999999999\\\" [(ngModel)]=\\\"data.RetentionAmount\\\"\\r\\n\\t\\t\\t\\t [maxLength]=\\\"13\\\" [disabled]=\\\"isRetentionAmountDisabled\\\" format=\\\"n2\\\" decimals=\\\"2\\\" [allowNegative]=\\\"false\\\"\\r\\n\\t\\t\\t\\t secureComponent></lf-inputnumber>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"reinsuranceAmount\\\" label=\\\"Reinsurance Amount\\\" i18n-label=\\\"@@policy.worksheet.coverage.reinsurer.reinsuranceamount\\\">\\r\\n\\t\\t\\t\\t<lf-inputnumber #reinsuranceAmount name=\\\"reinsuranceAmount\\\" [maxLength]=\\\"13\\\" [max]=\\\"9999999999\\\" [(ngModel)]=\\\"data.ReinsuranceAmount\\\"\\r\\n\\t\\t\\t\\t [disabled]=\\\"isReinsuranceAmountDisabled\\\" format=\\\"n2\\\" decimals=\\\"2\\\" [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"adbReinsuredAmount\\\" label=\\\"ADB Reinsured Amount\\\" i18n-label=\\\"@@policy.worksheet.coverage.reinsurer.adbreinsuredamount\\\">\\r\\n\\t\\t\\t\\t<lf-inputnumber #adbReinsuredAmount name=\\\"adbReinsuredAmount\\\" [maxLength]=\\\"13\\\" [max]=\\\"9999999999\\\" format=\\\"n2\\\"\\r\\n\\t\\t\\t\\t decimals=\\\"2\\\" [(ngModel)]=\\\"data.AdbReinsuredAmount\\\" [allowNegative]=\\\"false\\\" secureComponent></lf-inputnumber>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"reinsurerRateClass\\\" label=\\\"Reinsurer Rate Class\\\" i18n-label=\\\"@@policy.worksheet.coverage.reinsurer.reinsurerrateclass\\\">\\r\\n\\t\\t\\t\\t<lf-select #reinsurerRateClass name=\\\"reinsureanceRateClass\\\" [items]=\\\"resolvedData.listData.RateClassApproved | listItems:'value':'Id' | emptyItem\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.ReinsurerRateClass\\\" container=\\\"dialog\\\"  secureComponent style=\\\"width:200px\\\">\\r\\n\\t\\t\\t\\t</lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"row\\\">\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"reinsurerTableRating\\\" label=\\\"Reinsurer Table Rating\\\" i18n-label=\\\"@@policy.worksheet.coverage.reinsurer.reinsurertablerating\\\">\\r\\n\\t\\t\\t\\t<lf-select #reinsurerTableRating name=\\\"reinsurerTableRating\\\" [items]=\\\"resolvedData.listData.PermTableRating | listItems:'value':'Id' | emptyItem\\\"\\r\\n\\t\\t\\t\\t [(ngModel)]=\\\"data.ReinsurerTableRating\\\" container=\\\"dialog\\\" secureComponent style=\\\"width:200px\\\">\\r\\n\\t\\t\\t\\t</lf-select>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t\\t<div class=\\\"col-6\\\">\\r\\n\\t\\t\\t<lf-form-input [control]=\\\"placed\\\" label=\\\"Placed?\\\" i18n-label=\\\"@@policy.worksheet.coverage.reinsurer.placed\\\">\\r\\n\\t\\t\\t\\t<lf-radiobuttongroup #placed name=\\\"placed\\\" [(ngModel)]=\\\"data.Placed\\\" secureComponent>\\r\\n\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t<lf-radiobutton [value]=true name=\\\"placed\\\" label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t<lf-radiobutton [value]=false name=\\\"placed\\\" label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t</lf-radiobuttongroup>\\r\\n\\t\\t\\t</lf-form-input>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</form>\"","import { Component, Injector, Injectable } from '@angular/core';\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { ParentChildRegistry } from 'life-core/view-model';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { LfRegularExpressions } from 'life-core/util/regex/lf-regular-expressions';\n\nimport { ReinsurerDTO } from 'ls-core/model';\n\nimport { CoverageAuthorizationProvider } from './../../coverage-authorization.provider';\n\n@Component({\n    selector: 'reinsurer-detail-editor',\n    templateUrl: './reinsurer-detail-editor.html',\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: CoverageAuthorizationProvider }]\n})\n@Injectable()\nexport class ReinsurerDialogDetailEditor extends BasePolicyDialogDetailViewModel<ReinsurerDTO> {\n    public isReinsurerDisabled: boolean;\n    public isRetentionAmountDisabled: boolean;\n    public isReinsuranceAmountDisabled: boolean;\n    public alphaNumericRegex: RegExp;\n\n    constructor(injector: Injector) {\n        super(injector);\n        this.isReinsurerDisabled = false;\n        this.isRetentionAmountDisabled = false;\n        this.isReinsuranceAmountDisabled = false;\n        this.alphaNumericRegex = LfRegularExpressions.AlphaNumeric;\n    }\n\n    protected setupData(): void {\n        this.setReinsurerDisability();\n        this.setRetentionAmountDisability();\n        this.setReinsuranceAmountDisability();\n    }\n\n    private setReinsurerDisability(): void {\n        this.isReinsurerDisabled = this.data.CompanyCode ? true : false;\n    }\n\n    private setRetentionAmountDisability(): void {\n        this.isRetentionAmountDisabled = this.data.RetentionAmount ? true : false;\n    }\n\n    private setReinsuranceAmountDisability(): void {\n        this.isReinsuranceAmountDisabled = this.data.ReinsuranceAmount ? true : false;\n    }\n}\n","import { Injector, Injectable } from '@angular/core';\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\nimport { DirectDataResolverClass } from 'life-core/component/shared';\r\nimport { ListMap } from 'life-core/model';\r\nimport { CoverageDTO, ReinsurerDTO } from 'ls-core/model';\r\nimport { ListDataRequestBuilder, ListsDataRequest, ListDataItem } from 'ls-core/service';\r\nimport { AppSession } from 'ls-core/session/app-session';\r\nimport { BaseListDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class ReinsurerDialogDataResolver extends BaseListDataResolver\r\n    implements DirectDataResolverClass<ListMap<ListDataItem>> {\r\n    public context: any;\r\n    private _appSession: AppSession;\r\n\r\n    constructor(injector: Injector, appSession: AppSession) {\r\n        super(injector);\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    protected getListsDataRequest(): ListsDataRequest {\r\n        const listDataRequestBuilder = new ListDataRequestBuilder();\r\n        listDataRequestBuilder.setRootDTO(this._appSession.policyDTO);\r\n        const reinsurerDTO = ObjectUtil.createObjectOfType(this.context.reinsurer, ReinsurerDTO);\r\n        const coverageDTO = ObjectUtil.createObjectOfType(this.context.coverage, CoverageDTO);\r\n        listDataRequestBuilder.addListRequestItem(reinsurerDTO, 'Reinsurer');\r\n        listDataRequestBuilder.addListRequestItem(coverageDTO, 'PermTableRating');\r\n        listDataRequestBuilder.addListRequestItem(coverageDTO, 'RateClassApproved');\r\n        return listDataRequestBuilder.getRequest();\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class ReinsurerDialogMetaDataResolver extends BaseMetaDataResolver {\r\n\r\n    public context: any;\r\n\r\n    protected getMetadataTypes(): string[] {\r\n        return [\"ReinsurerTreatyType\"];\r\n    }\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { ListDataUtil } from 'ls-core/service/list-data';\r\nimport { GetYesNoStringPipe } from 'ls-core/util';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nconst ReinsurerGridFields = {\r\n    CompanyCode: 'CompanyCode',\r\n    TreatyType: 'TreatyType',\r\n    CessionNumber: 'CessionNumber',\r\n    ReinsuranceType: 'ReinsuranceType',\r\n    RetentionAmount: 'RetentionAmount',\r\n    ReinsuranceAmount: 'ReinsuranceAmount',\r\n    AdbReinsuredAmount: 'AdbReinsuredAmount',\r\n    Placed: 'Placed',\r\n    ReinsurerRateClass: 'ReinsurerRateClass',\r\n    ReinsurerTableRating: 'ReinsurerTableRating'\r\n};\r\n\r\n@Injectable()\r\nexport class ReinsurerGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n\r\n    constructor(cellFormatters: CellFormatters, i18n: I18n) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Reinsurer', id: 'policy.worksheet.coverage.reinsurer.reinsurer' }),\r\n            field: ReinsurerGridFields.CompanyCode,\r\n            width: 60,\r\n            valueFormatter: this.getReinsurer\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Treaty Type', id: 'policy.worksheet.coverage.reinsurer.treatytype' }),\r\n            field: ReinsurerGridFields.TreatyType,\r\n            width: 60,\r\n            valueFormatter: this.getTreatyType\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Cession', id: 'policy.worksheet.coverage.reinsurer.cessionnumber' }),\r\n            field: ReinsurerGridFields.CessionNumber,\r\n            width: 50\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Reinsurance Type',\r\n                id: 'policy.worksheet.coverage.reinsurer.reinsurancetype'\r\n            }),\r\n            field: ReinsurerGridFields.ReinsuranceType,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Retention Amount',\r\n                id: 'policy.worksheet.coverage.reinsurer.retentionamount'\r\n            }),\r\n            field: ReinsurerGridFields.RetentionAmount,\r\n            width: 100,\r\n            valueFormatter: params => this.getAmount(params)\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Reinsurance Amount',\r\n                id: 'policy.worksheet.coverage.reinsurer.reinsuranceamount'\r\n            }),\r\n            field: ReinsurerGridFields.ReinsuranceAmount,\r\n            width: 100,\r\n            valueFormatter: params => this.getAmount(params)\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'ADB Reinsurance Amount',\r\n                id: 'policy.worksheet.coverage.adbreinsuredamount.reinsurer'\r\n            }),\r\n            field: ReinsurerGridFields.AdbReinsuredAmount,\r\n            width: 100,\r\n            valueFormatter: params => this.getAmount(params)\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Placed?', id: 'policy.worksheet.coverage.reinsurer.placed' }),\r\n            field: ReinsurerGridFields.Placed,\r\n            width: 40,\r\n            valueFormatter: this.getYesNoString\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Reinsurer Risk Class',\r\n                id: 'policy.worksheet.coverage.reinsurerrateclass.reinsurer'\r\n            }),\r\n            field: ReinsurerGridFields.ReinsurerRateClass,\r\n            width: 100,\r\n            valueFormatter: this.getReinsurerRateClass\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Reinsurer Table Rating',\r\n                id: 'policy.worksheet.coverage.reinsurer.reinsurertablerating'\r\n            }),\r\n            field: ReinsurerGridFields.ReinsurerTableRating,\r\n            width: 120,\r\n            valueFormatter: this.getReinsurerTableRating\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getReinsurer(params: any): string {\r\n        return ListDataUtil.getValueFromListDataById(params.context.listData.Reinsurer, params.node.data.CompanyCode);\r\n    }\r\n\r\n    private getAmount(params: any): string {\r\n        if (params.value == null) params.value = 0;\r\n        return this._cellFormatters.currencyCellFormatter(params);\r\n    }\r\n\r\n    private getReinsurerRateClass(params: any): string {\r\n        return ListDataUtil.getValueFromListDataById(\r\n            params.context.listData.RateClassApproved,\r\n            params.node.data.ReinsurerRateClass\r\n        );\r\n    }\r\n\r\n    private getReinsurerTableRating(params: any): string {\r\n        return ListDataUtil.getValueFromListDataById(\r\n            params.context.listData.PermTableRating,\r\n            params.node.data.ReinsurerTableRating\r\n        );\r\n    }\r\n\r\n    private getTreatyType(params: any): string {\r\n        return ListDataUtil.getLabelFromListDataById(\r\n            params.context.listData.ReinsurerTreatyType,\r\n            params.node.data.TreatyType\r\n        );\r\n    }\r\n\r\n    private getYesNoString(params: any): string {\r\n        return new GetYesNoStringPipe().transform(params.node.data.Placed);\r\n    }\r\n}\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { ReinsurerDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class ReinsurerItemFactory extends BaseDTOItemFactory<ReinsurerDTO> {\r\n    public newInstance(createItemParams: CreateItemParams<ReinsurerDTO>): ReinsurerDTO {\r\n        const reinsurerDTO = new ReinsurerDTO();\r\n        reinsurerDTO.CoveragePersonReinsurerId = this.getNextId(createItemParams.items, 'CoveragePersonReinsurerId');\r\n        return reinsurerDTO;\r\n    }\r\n}\r\n","module.exports = \"<master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\"\\r\\n    secureComponent [disabled]=\\\"disabled\\\"></master-detail>\"","import { Component, Injector, Injectable, Input } from '@angular/core';\r\n\r\nimport { RowManagementDelegate, MasterDetailComponentResolver, BaseDataManager } from 'life-core/component/master-detail';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { DirectDataResolve } from 'life-core/component/shared';\r\nimport { ResolvedDataNames } from 'life-core/view-model/data-resolver';\r\nimport { CoverageDTO, ReinsurerDTO } from 'ls-core/model';\r\nimport { BasePolicyMasterDetailViewModel } from 'business/policy/shared';\r\nimport { LsInsuredAuthorizationProvider } from 'business/policy/worksheet/case-disp/insured/insured-authorization.provider';\r\nimport { ReinsurerGridColumnsBuilder } from './reinsurer-grid-columns.builder';\r\nimport { ReinsurerItemFactory } from './reinsurer-item-factory';\r\nimport { ReinsurerDialogDataResolver } from './detail/reinsurer-dialog-data.resolver';\r\nimport { ReinsurerDialogDetailEditor } from './detail/reinsurer-detail-editor';\r\nimport { ReinsurerDialogMetaDataResolver } from './detail/reinsurer-dialog-metadata.resolver';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nexport function rowManagementDelegateFactory(\r\n    itemFactory: ReinsurerItemFactory,\r\n    dataManager: BaseDataManager<ReinsurerDTO>\r\n): RowManagementDelegate<ReinsurerDTO> {\r\n    return new RowManagementDelegate({\r\n        itemName: 'Reinsurer',\r\n        itemIDPropertyName: 'CoveragePersonReinsurerId',\r\n        itemFactory: itemFactory,\r\n        dataManager: dataManager\r\n    });\r\n}\r\n\r\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<ReinsurerDTO> {\r\n    return new MasterDetailComponentResolver({\r\n        itemComponents: ReinsurerDialogDetailEditor\r\n    });\r\n}\r\n\r\n@Component({\r\n    selector: 'reinsurer',\r\n    templateUrl: './reinsurer.component.html',\r\n    providers: [\r\n        BaseDataManager,\r\n        ReinsurerItemFactory,\r\n        {\r\n            provide: RowManagementDelegate,\r\n            useFactory: rowManagementDelegateFactory,\r\n            deps: [ReinsurerItemFactory, BaseDataManager]\r\n        },\r\n        {\r\n            provide: MasterDetailComponentResolver,\r\n            useFactory: itemComponentResolverFactory\r\n        },\r\n        { provide: AuthorizationProvider, useClass: LsInsuredAuthorizationProvider },\r\n\r\n        ReinsurerGridColumnsBuilder\r\n    ]\r\n})\r\n@Injectable()\r\nexport class ReinsurerComponent extends BasePolicyMasterDetailViewModel<ReinsurerDTO> {\r\n    @Input()\r\n    public coverage: CoverageDTO;\r\n\r\n    private _gridColumnsBuilder: ReinsurerGridColumnsBuilder;\r\n\r\n    constructor(injector: Injector, gridColumnBuilder: ReinsurerGridColumnsBuilder, i18n: I18n) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        this._gridColumnsBuilder = gridColumnBuilder;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        this.setResolvedListData();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    public get showDetailAsPopup(): boolean {\r\n        return true;\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return this.i18n({ value: 'Reinsurer', id: 'policy.worksheet.coverage.reinsurerheader' });\r\n    }\r\n\r\n    protected loadItems(): ReinsurerDTO[] {\r\n        return this.coverage.Reinsurers_LazyLoad;\r\n    }\r\n\r\n    protected getRowNodeId(data: ReinsurerDTO): any {\r\n        return data.CoveragePersonReinsurerId;\r\n    }\r\n\r\n    protected getItemDetailDialogResolve(item: ReinsurerDTO): DirectDataResolve[] {\r\n        const context = { coverage: this.coverage, reinsurer: item };\r\n        return [\r\n            { resolveName: ResolvedDataNames.listData, resolverClass: ReinsurerDialogDataResolver, context: context },\r\n            { resolveName: ResolvedDataNames.metaData, resolverClass: ReinsurerDialogMetaDataResolver, context: item }\r\n        ];\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\nimport { ReinsurerComponent } from './reinsurer.component';\r\nimport { ReinsurerDialogDetailEditor } from './detail/reinsurer-detail-editor';\r\nimport { ReinsurerDialogDataResolver } from './detail/reinsurer-dialog-data.resolver';\r\nimport { ReinsurerDialogMetaDataResolver } from './detail/reinsurer-dialog-metadata.resolver';\r\nimport { LsPipeModule } from 'ls-core/util/pipe/ls-pipe.module';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule, LsPipeModule],\r\n    declarations: [ReinsurerComponent, ReinsurerDialogDetailEditor],\r\n    exports: [ReinsurerComponent, ReinsurerDialogDetailEditor],\r\n    providers: [ReinsurerDialogDataResolver, ReinsurerDialogMetaDataResolver],\r\n    entryComponents: [ReinsurerDialogDetailEditor]\r\n})\r\nexport class ReinsurerModule {}\r\n","﻿export * from './reopen-coverage-metadata.resolver';\r\nexport * from './reopen-coverage.component';\r\nexport * from './reopen-coverage.module';\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class ReopenCoverageMetaDataResolver extends BaseMetaDataResolver {\r\n\r\n\tprotected getMetadataTypes(): string[] {\r\n        return [\"final_action_reason_reopened\", \"system\"];\r\n\t}\n}\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\" [ngStyle]=\\\"{height: '100px'}\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input label=\\\"Reason\\\" i18n-label=\\\"@@applicant.info.family.reason\\\" [control]=\\\"reason\\\">\\r\\n                <lf-select #reason name=\\\"reason\\\" [(ngModel)]=\\\"reopenReason\\\" [disabled]=\\\"!isReasonListRequired\\\" [items]=\\\"resolvedData.metaData?.final_action_reason_reopened | listItems:'label':'value' | emptyItem\\\"\\r\\n                    style=\\\"width:250px\\\" container=\\\"dialog\\\" secureComponent [required]=\\\"isReasonListRequired\\\"></lf-select>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","﻿import { Component, Injector, Injectable } from '@angular/core';\r\n\r\nimport { ViewModel, ParentChildRegistry, ViewValidationResult } from 'life-core/view-model';\r\nimport { ICompose } from 'life-core/component/compose';\r\nimport { IDialogViewModel, DialogData, DialogButtonType } from 'life-core/component/dialog';\r\nimport { DialogViewModelResult } from 'life-core/component';\r\nimport { AuthorizationProvider } from 'life-core/authorization/authorization.provider';\r\n\r\nimport {\r\n    DataServiceParams,\r\n    DataService,\r\n    UIServiceNames,\r\n    UIServiceMethods,\r\n    SavePolicyDataDelegate\r\n} from 'ls-core/service';\r\nimport { PolicyDTO, CoverageDTO } from 'ls-core/model';\r\nimport { AppSession } from 'ls-core/session';\r\n\r\nimport { CoverageAuthorizationProvider } from './../coverage-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'reopen-coverage.component',\r\n    templateUrl: './reopen-coverage.component.html',\r\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: CoverageAuthorizationProvider }]\r\n})\r\n@Injectable()\r\nexport class ReopenCoverageComponent extends ViewModel implements ICompose, IDialogViewModel {\r\n    public resolvedData: any;\r\n    public reopenReason: string;\r\n    public isReasonListRequired: boolean;\r\n    private _dataService: DataService;\r\n    private _appSession: AppSession;\r\n    private _coverage: CoverageDTO;\r\n\r\n    constructor(injector: Injector, appSession: AppSession, dataService: DataService) {\r\n        super(injector);\r\n        this._dataService = dataService;\r\n        this._appSession = appSession;\r\n    }\r\n\r\n    public setModel(model: DialogData) {\r\n        this.resolvedData = model.resolvedData;\r\n        this._coverage = model.parameterData;\r\n    }\r\n\r\n    public ngAfterContentInit(): void {\r\n        super.ngAfterContentInit();\r\n        this.setReasonListAccessibility();\r\n    }\r\n\r\n    private setReasonListAccessibility(): void {\r\n        this.isReasonListRequired =\r\n            this.resolvedData.metaData['system'].find(item => item.value == 'CaseReopenReasonRequired').label == 'true';\r\n    }\r\n\r\n    public getDataToSave(): any {\r\n        return this.policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n\r\n    public onDialogButtonClick(buttonId: string): Promise<DialogViewModelResult> {\r\n        if (buttonId == DialogButtonType.ACCEPT) {\r\n            return this.validate().then(result => {\r\n                if (result == ViewValidationResult.pass) {\r\n                    return this.saveAndReopenCoverage();\r\n                } else {\r\n                    return new DialogViewModelResult(null, false);\r\n                }\r\n            });\r\n        } else {\r\n            return Promise.resolve(null);\r\n        }\r\n    }\r\n\r\n    private saveAndReopenCoverage(): Promise<DialogViewModelResult> {\r\n        return this.saveData().then(() => {\r\n            return this.reopenCoverage();\r\n        });\r\n    }\r\n\r\n    private reopenCoverage(): Promise<DialogViewModelResult> {\r\n        const serviceParams: DataServiceParams = this.getReopenCoverageServiceParams();\r\n        return this._dataService.getData(serviceParams).then(response => {\r\n            const reopenCoverageResponse = response.responsePayload as ReopenCaseResponse;\r\n            return new DialogViewModelResult({ updatedPolicy: reopenCoverageResponse.policyDTO });\r\n        });\r\n    }\r\n\r\n    private getReopenCoverageServiceParams(): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.REOPEN_CASE_DATA_SERVICE,\r\n            serviceMethod: UIServiceMethods.GET_DATA,\r\n            requestPayload: this.getReopenCoverageServicePayload()\r\n        });\r\n    }\r\n\r\n    private getReopenCoverageServicePayload(): ReopenCaseRequest {\r\n        let request = new ReopenCaseRequest();\r\n        request.policyDTO = this.policy;\r\n        request.insuredID = this._coverage.PolicyPersonId as number;\r\n        request.coverageID = this._coverage.PolicyCoverageId as number;\r\n        request.reasonText = this.reopenReason;\r\n        return request;\r\n    }\r\n\r\n    private get policy(): PolicyDTO {\r\n        return this._appSession.policyDTO;\r\n    }\r\n}\r\n\r\nexport class ReopenCaseRequest {\r\n    readonly $type: string = 'life.ls.ui.ria.dto.requests.ReopenCaseRequest, LifeSuite.UIServiceDTO';\r\n\r\n    public policyDTO: PolicyDTO;\r\n    public insuredID: number;\r\n    public coverageID: number;\r\n    public reasonText: string;\r\n}\r\n\r\nexport class ReopenCaseResponse {\r\n    readonly $type: string = 'life.ls.ui.ria.dto.responses.ReopenCaseResponse, LifeSuite.UIServiceDTO';\r\n\r\n    public policyDTO: PolicyDTO;\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ComponentsModule } from 'life-core/component/components.module';\r\n\r\nimport { ReopenCoverageComponent } from './reopen-coverage.component';\r\nimport { ReopenCoverageMetaDataResolver } from './reopen-coverage-metadata.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, ComponentsModule],\r\n    declarations: [ReopenCoverageComponent],\r\n    exports: [ReopenCoverageComponent],\r\n    entryComponents: [ReopenCoverageComponent],\r\n    providers: [ReopenCoverageMetaDataResolver]\r\n})\r\nexport class ReopenCoverageModule {}\r\n","module.exports = \"<lf-panel [header]=\\\"panelHeader\\\" [toggleable]=\\\"true\\\" panelType=\\\"secondary\\\" stateId=\\\"panel_coverage_{{index}}\\\" [state]=\\\"componentsState.get('panel_coverage_'+index)\\\"\\r\\n    secureComponent>\\r\\n    <div class=\\\"row justify-content-end\\\">\\r\\n        <lf-button id=\\\"reopenCaseButton\\\" name=\\\"reopenCaseButton\\\" label=\\\"Reopen\\\" i18n-label=\\\"@@general.button.label.reopen\\\"\\r\\n            [disabled]=\\\"canReopenCoverage\\\" (onClick)=\\\"onReopenCoverageButtonClick()\\\" styleClass=\\\"btn btn-primary\\\"\\r\\n            [actionType]=\\\"reopenCaseButtonActionType\\\" secureComponent></lf-button>\\r\\n    </div>\\r\\n    <dynamic-form [formFields]=\\\"formFields\\\" [formData]=\\\"formData\\\" [layoutConfig]=\\\"formLayoutConfig\\\" [form]=\\\"rootForm\\\"\\r\\n        [index]=\\\"index\\\" secureComponent>\\r\\n    </dynamic-form>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"calculatedRateClass\\\" label=\\\"Calculated Rate Class\\\"\\r\\n                i18n-label=\\\"@@policy.worksheet.calcrateclass\\\">\\r\\n                <lf-statictext #calculatedRateClass name=\\\"calculatedRateClass_{{index}}\\\"\\r\\n                    [value]=\\\"data.coverage.CalculatedPointsRateClass\\\" format=\\\"number\\\"\\r\\n                    [disabled]=\\\"disabledBasedOnCoverageStatus\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-3\\\">\\r\\n            <lf-form-input [control]=\\\"calculatedRateTableRating\\\" label=\\\"Calculated Table Rating\\\"\\r\\n                i18n-label=\\\"@@policy.worksheet.coverage.calculatedtablerating\\\">\\r\\n                <lf-statictext #calculatedRateTableRating name=\\\"calculatedRateTableRating_{{index}}\\\"\\r\\n                    [value]=\\\"data.coverage.RateClassApprovedDescription\\\" [disabled]=\\\"disabledBasedOnCoverageStatus\\\"\\r\\n                    secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"finalActionNote\\\" label=\\\"Final Action Note\\\"\\r\\n                i18n-label=\\\"@@policy.worksheet.coverageDispositionNote\\\">\\r\\n                <lf-inputtextarea #finalActionNote name=\\\"finalActionNote_{{index}}\\\"\\r\\n                    [(ngModel)]=\\\"data.coverage.FinalActionNote\\\" maxLength=\\\"2000\\\"\\r\\n                    [disabled]=\\\"disabledBasedOnCoverageStatus\\\"\\r\\n                    [class]=\\\"{'lf-font-weight-bold':disabledBasedOnCoverageStatus}\\\" [style]=\\\"{width:'100%'}\\\" rows=\\\"7\\\"\\r\\n                    secureComponent>\\r\\n                </lf-inputtextarea>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12 \\\">\\r\\n            <benefit [coverage]=\\\"data.coverage\\\" [disabled]=\\\"disabledBasedOnCoverageStatus\\\" *ngIf=\\\"showBenefitSection\\\"></benefit>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <amendment [coverage]=\\\"data.coverage\\\" [disabled]=\\\"disabledBasedOnCoverageStatus\\\" *ngIf=\\\"showAmendmentSection\\\"></amendment>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <reinsurer [coverage]=\\\"data.coverage\\\" [disabled]=\\\"disabledBasedOnCoverageStatus\\\" *ngIf=\\\"showReinsurerSection\\\"></reinsurer>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-12\\\">\\r\\n            <impairment [coverage]=\\\"data.coverage\\\" [disabled]=\\\"disabledBasedOnCoverageStatus\\\" *ngIf=\\\"showImpairmentSection\\\"></impairment>\\r\\n        </div>\\r\\n    </div>\\r\\n</lf-panel>\"","import { Component, Injector, Injectable, Input } from '@angular/core';\nimport { NgbModalRef } from '@ng-bootstrap/ng-bootstrap/modal/modal-ref';\n\nimport { FormLayoutConfig, FormFieldEvent, FormListFieldsUtil } from 'life-core/component/dynamic-form';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { ModalDialog, DialogButtonType, DialogButton, DialogSize, ButtonActionType } from 'life-core/component';\nimport { ResolvedDataNames } from 'life-core/view-model';\nimport { ObjectUtil } from 'life-core/util/lang';\nimport { I18n } from 'life-core/i18n';\n\nimport { LsDynamicFormViewModel, FormLoadDynamicMetadataService } from 'ls-core/component/dynamic-form';\nimport { PolicyDTO, CoverageDTO, PolicyCoverageDTO } from 'ls-core/model';\nimport { PolicySubscriber, AppSession } from 'ls-core/session';\n\nimport { CoverageFormDataBuilder } from 'business/policy/shared/coverage-dynamic-form';\nimport { CoverageStatuses, UserPolicyService } from 'business/policy/shared';\nimport { PlanWorksheetCoverageFormFields } from 'business/policy/worksheet/case-disp/coverage/form';\nimport {\n    ReopenCoverageComponent,\n    ReopenCoverageMetaDataResolver\n} from 'business/policy/worksheet/case-disp/coverage/reopen-coverage';\nimport { SavePolicyDataDelegate } from 'ls-core/service';\nimport { ChangeCoverageDispositionComponent, ChangeCoverageDispositionListDataResolver } from './change-coverage-disp';\nimport { CoverageAuthorizationProvider } from './coverage-authorization.provider';\nimport { SectionAvailabilityHelper } from 'business/policy/shared';\nimport { PolicyApprovalAuthorizationDelegate } from '../policy-approval-authorization.delegate';\n\n@Component({\n    selector: 'ls-worksheet-coverage',\n    templateUrl: './worksheet-coverage.component.html',\n    providers: [\n        PolicySubscriber,\n        UserPolicyService,\n        PolicyApprovalAuthorizationDelegate,\n        { provide: AuthorizationProvider, useClass: CoverageAuthorizationProvider }\n    ]\n})\n@Injectable()\nexport class WorksheetCoverageComponent extends LsDynamicFormViewModel {\n    @Input()\n    public coverage: CoverageDTO;\n    @Input()\n    public index: string;\n    public disabledBasedOnCoverageStatus: boolean;\n    public formLayoutConfig: FormLayoutConfig = {\n        fieldsPerRow: 4\n    };\n    public panelHeader: string;\n    public showBenefitSection: boolean;\n    public showAmendmentSection: boolean;\n    public showReinsurerSection: boolean;\n    public showImpairmentSection: boolean;\n    public canReopenCoverage: boolean;\n    public reopenCaseButtonActionType: ButtonActionType = ButtonActionType.DataChange;\n    protected policy: PolicyDTO;\n    protected policyCoverage: PolicyCoverageDTO;\n    private _planWorksheetCoverageFormFields: PlanWorksheetCoverageFormFields;\n    private _formLoadDynamicMetadataService: FormLoadDynamicMetadataService;\n    private _modalDialog: ModalDialog;\n    private _appSession: AppSession;\n    private _applyToAllBenefits: boolean;\n    private _policyApprovalAuthorizationDelegate: PolicyApprovalAuthorizationDelegate;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        policyApprovalAuthorizationDelegate: PolicyApprovalAuthorizationDelegate,\n        planWorksheetCoverageFormFields: PlanWorksheetCoverageFormFields,\n        formLoadDynamicMetadataService: FormLoadDynamicMetadataService,\n        modalDialog: ModalDialog,\n        appSession: AppSession,\n        i18n: I18n\n    ) {\n        super(injector);\n        this._planWorksheetCoverageFormFields = planWorksheetCoverageFormFields;\n        this._formLoadDynamicMetadataService = formLoadDynamicMetadataService;\n        this.i18n = i18n;\n        policySubscriber.subscribe(this, p => {\n            this.policy = p;\n        });\n        this._modalDialog = modalDialog;\n        this._appSession = appSession;\n        this._policyApprovalAuthorizationDelegate = policyApprovalAuthorizationDelegate;\n    }\n\n    public ngAfterContentInit(): void {\n        this.setData('coverage', this.coverage);\n        this.setDisabledBasedOnCoverageStatus();\n        super.ngAfterContentInit();\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedMetaData();\n        return super.loadData();\n    }\n\n    protected setupData(): void {\n        this._applyToAllBenefits = false;\n        this.setSectionsVisibility();\n        this.setPanelHeader();\n        this.setReopenButtonAvailability();\n    }\n\n    private setSectionsVisibility(): void {\n        const coverageLineOfBusiness = this.getCoverageLineOfBusiness();\n        this.showReinsurerSection = SectionAvailabilityHelper.isSectionVisible(\n            this.listData.worksheet_section_configuration,\n            coverageLineOfBusiness,\n            ApplicantSections.Reinsurer\n        );\n        this.showAmendmentSection = SectionAvailabilityHelper.isSectionVisible(\n            this.listData.worksheet_section_configuration,\n            coverageLineOfBusiness,\n            ApplicantSections.Amendment\n        );\n        this.showBenefitSection = SectionAvailabilityHelper.isSectionVisible(\n            this.listData.worksheet_section_configuration,\n            coverageLineOfBusiness,\n            ApplicantSections.Benefit\n        );\n        this.showImpairmentSection = SectionAvailabilityHelper.isSectionVisible(\n            this.listData.worksheet_section_configuration,\n            coverageLineOfBusiness,\n            ApplicantSections.Impairment\n        );\n    }\n\n    private getCoverageLineOfBusiness(): string {\n        return this.listData.plan_code\n            .find(plan => plan.value.toUpperCase() == this.coverage.PlanCodeId.toUpperCase())\n            .externalCode.toLowerCase();\n    }\n\n    private setReopenButtonAvailability(): void {\n        this.canReopenCoverage = !this.isDisabledBasedOnCoverageStatus();\n    }\n\n    protected setFormData(): void {\n        this.formData = CoverageFormDataBuilder.build(this.policy, this.coverage);\n    }\n\n    protected setFormFields(): Promise<void> {\n        const planFormFields = this._planWorksheetCoverageFormFields.get(this.coverage.PlanCodeId.toUpperCase()) || [];\n        this.formFields = this.copyFormFields(planFormFields);\n        return Promise.resolve();\n    }\n\n    protected preprocessFormFields(): Promise<void> {\n        this.adjustFormFieldsForCoverageStatus();\n        const listFieldsWithDynamicMetaType = FormListFieldsUtil.getListFieldsWithDynamicMetaType(this.formFields);\n        return this._formLoadDynamicMetadataService.load(listFieldsWithDynamicMetaType, this.coverage);\n    }\n\n    private adjustFormFieldsForCoverageStatus(): void {\n        this.filterFormFieldsForCoverageStatus();\n        this.disableFormFieldsForCoverageStatus();\n    }\n\n    private filterFormFieldsForCoverageStatus(): void {\n        const hideBasedOnCoverageStatus = ['ChangeDisposition'];\n        this.formFields = this.formFields.filter(formField => {\n            return !(this.disabledBasedOnCoverageStatus && hideBasedOnCoverageStatus.indexOf(formField.name) >= 0);\n        });\n    }\n\n    private disableFormFieldsForCoverageStatus(): void {\n        this.formFields.forEach(formField => {\n            formField.disabled = this.disabledBasedOnCoverageStatus || formField.disabled;\n        });\n    }\n\n    private setDisabledBasedOnCoverageStatus(): void {\n        this.disabledBasedOnCoverageStatus = this.isDisabledBasedOnCoverageStatus();\n    }\n\n    private isDisabledBasedOnCoverageStatus(): boolean {\n        return (\n            this.coverage.CoverageStatus == CoverageStatuses.CANCELLED ||\n            this.coverage.CoverageStatus == CoverageStatuses.DECLINED ||\n            this.coverage.CoverageStatus == CoverageStatuses.WITHDRAWN ||\n            this.coverage.CoverageStatus == CoverageStatuses.APPROVED\n        );\n    }\n\n    private setPanelHeader(): void {\n        const planName = this.coverage.planName;\n        const hyphenIndex = planName.indexOf('-');\n        this.panelHeader = `${this.i18n(\n            {\n                value: 'Coverage: {{planName}}',\n                id: 'policy.worksheet.coverage.title'\n            },\n            { planName: planName.substr(hyphenIndex + 1) }\n        )}`;\n    }\n\n    protected onFormFieldEvent(event: FormFieldEvent): void {\n        if (event.name == 'Product') {\n            this.setFormFields();\n            this.setPanelHeader();\n        }\n        if (event.name == 'ApplyToAllBenefits') {\n            this._applyToAllBenefits = !this._applyToAllBenefits;\n        }\n        if (event.name == 'ChangeDisposition') {\n            this.changeCoverageDisposition();\n        }\n    }\n\n    private changeCoverageDisposition(): void {\n        // save is needed as rules need to be run against the policy\n        this.saveData().then(() => {\n            this.validateUserCanApprovePolicy().then(canUserApprove => {\n                if (canUserApprove) {\n                    this.openChangeCoverageDispositionDialog();\n                }\n            });\n        });\n    }\n\n    public getDataToSave(): any {\n        return this.policy;\n    }\n\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\n        return this.injector.get(SavePolicyDataDelegate);\n    }\n\n    private openChangeCoverageDispositionDialog(): Promise<NgbModalRef> {\n        return this._modalDialog.open({\n            view: ChangeCoverageDispositionComponent,\n            data: this.coverage,\n            resolve: [\n                {\n                    resolveName: ResolvedDataNames.listData,\n                    resolverClass: ChangeCoverageDispositionListDataResolver,\n                    context: this.coverage\n                }\n            ],\n            title: this.i18n({ value: 'Change Coverage Disposition', id: 'policy.worksheet.coverageDispositionTitle' }),\n            buttons: [\n                new DialogButton({ type: DialogButtonType.SAVE, label: 'Accept' }),\n                new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\n            ]\n        });\n    }\n\n    public onReopenCoverageButtonClick(): void {\n        this.openReopenCoverageDialog();\n    }\n\n    private openReopenCoverageDialog(): void {\n        this._modalDialog\n            .open({\n                view: ReopenCoverageComponent,\n                data: this.coverage,\n                resolve: [{ resolveName: ResolvedDataNames.metaData, resolverClass: ReopenCoverageMetaDataResolver }],\n                title: this.i18n({ value: 'Reopen Coverage', id: 'policy.worksheet.coverage.reopen.title' }),\n                buttons: [\n                    new DialogButton({ type: DialogButtonType.ACCEPT }),\n                    new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\n                ],\n                size: DialogSize.small\n            })\n            .then(dialogRef => {\n                dialogRef.result.then(result =>\n                    result.buttonId == DialogButtonType.ACCEPT ? this.onCaseReopen(result.returnValue) : null\n                );\n            });\n    }\n\n    private onCaseReopen(coverageReopenResult: any): void {\n        const policyDTO = ObjectUtil.createObjectOfType<PolicyDTO>(\n            coverageReopenResult.updatedPolicy,\n            PolicyDTO\n        ) as PolicyDTO;\n        this._appSession.updatePolicy(policyDTO);\n    }\n\n    private validateUserCanApprovePolicy(): Promise<boolean> {\n        if (this.policy.UnderwriterId) {\n            return this._policyApprovalAuthorizationDelegate.validate(\n                this.data.coverage.PolicyPersonId,\n                this.authorizationData.getLevel('caseApprove'),\n                this.listData['System Message']\n            );\n        }\n    }\n}\n\nconst ApplicantSections = {\n    Reinsurer: 'reinsurer',\n    Amendment: 'amendment',\n    Benefit: 'benefit',\n    Impairment: 'impairment'\n};\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { ImpairmentModule } from './impairment/impairment.module';\r\nimport { ReinsurerModule } from './reinsurer/reinsurer.module';\r\nimport { WorksheetCoverageComponent } from './worksheet-coverage.component';\r\nimport { AmendmentModule } from './amendment/amendment.module';\r\nimport { BenefitModule } from 'business/policy/worksheet/case-disp/coverage/benefit/benefit.module';\r\nimport { ChangeCoverageDispositionComponent, ChangeCoverageDispositionListDataResolver } from './change-coverage-disp';\r\nimport { CoverageValidationComponent } from './change-coverage-disp/coverage-validation/coverage-validation.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        LsComponentsModule,\r\n        ImpairmentModule,\r\n        AmendmentModule,\r\n        ReinsurerModule,\r\n        BenefitModule\r\n    ],\r\n    declarations: [WorksheetCoverageComponent, ChangeCoverageDispositionComponent, CoverageValidationComponent],\r\n    exports: [WorksheetCoverageComponent, ChangeCoverageDispositionComponent, CoverageValidationComponent],\r\n    providers: [ChangeCoverageDispositionListDataResolver],\r\n    entryComponents: [ChangeCoverageDispositionComponent, CoverageValidationComponent]\r\n})\r\nexport class WorksheetCoverageModule {}\r\n","﻿export * from './case-disp-data.resolver';\r\nexport * from './case-disp-listdata.resolver';\r\nexport * from './case-disp-metadata.resolver';\r\nexport * from './case-disp.component';\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class LsInsuredAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const lsInsuredAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.WORKSHEET]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = lsInsuredAuthorizationLevel;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\n\nimport { NameFormatter, CurrencyFormatter } from 'life-core/util/formatter';\nimport { NamePattern } from 'life-core/util/formatter/name-pattern';\nimport { I18n } from 'life-core/i18n';\n\nimport { InsuredDTO } from 'ls-core/model';\nimport { GetYesNoStringPipe } from 'ls-core/util';\n\n@Injectable()\nexport class InsuredHeaderBuilder {\n    private _nameFormatter: NameFormatter;\n    private _currencyFormatter: CurrencyFormatter;\n    private i18n: I18n;\n\n    constructor(nameFormatter: NameFormatter, currencyFormatter: CurrencyFormatter, i18n: I18n) {\n        this._nameFormatter = nameFormatter;\n        this._currencyFormatter = currencyFormatter;\n        this.i18n = i18n;\n    }\n\n    public getHeader(applicantStatus: any, insured: InsuredDTO): string {\n        const coverage = insured.Coverages_LazyLoad ? insured.Coverages_LazyLoad[0] : null;\n\n        const applicantName = this._nameFormatter.format(\n            NamePattern.NameWithTitleSuffixAndMiddleInitial,\n            insured.FirstName,\n            insured.LastName,\n            insured.MiddleName,\n            insured.Title,\n            insured.Suffix\n        );\n        const uwAmount = insured.UnderwritingAmount ? insured.UnderwritingAmount : 0;\n        const formattedUWAmount = this._currencyFormatter.format(uwAmount);\n        return `\n        ${this.i18n(\n            {\n                value: 'Applicant: {{applicantName}}{{headerItemSeparator}}',\n                id: 'applicant.worksheet.app'\n            },\n            { applicantName: applicantName, headerItemSeparator: HeaderItemSeparator }\n        )} ${this.i18n(\n            {\n                value: 'UW Amount: {{formattedUWAmount}}{{headerItemSeparator}}',\n                id: 'applicant.worksheet.uwamt'\n            },\n            { formattedUWAmount: formattedUWAmount, headerItemSeparator: HeaderItemSeparator }\n        )} ${this.i18n(\n            {\n                value: 'Issued Age: {{issuedAge}}{{headerItemSeparator}}',\n                id: 'applicant.worksheet.issage'\n            },\n            {\n                issuedAge: coverage ? insured.Coverages_LazyLoad[0].issueAge : '',\n                headerItemSeparator: HeaderItemSeparator\n            }\n        )} ${this.i18n(\n            {\n                value: 'Smoker: {{isSmoker}}{{headerItemSeparator}}',\n                id: 'applicant.worksheet.smoker'\n            },\n            {\n                isSmoker: coverage ? new GetYesNoStringPipe().transform(insured.Coverages_LazyLoad[0].IsSmoker) : '',\n                headerItemSeparator: HeaderItemSeparator\n            }\n        )} ${this.i18n(\n            {\n                value: 'Status: {{codeValue}}',\n                id: 'applicant.worksheet.status'\n            },\n            { codeValue: applicantStatus.CodeValue }\n        )} `;\n    }\n}\n\nconst StringCodeValue = 160;\nconst NumberOfRepeats = 10;\n\nconst HeaderItemSeparator: string = String.fromCharCode(StringCodeValue).repeat(NumberOfRepeats);\n","module.exports = \"<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-12\\\">\\r\\n\\t\\t<lf-panel [header]=\\\"panelHeader\\\" [toggleable]=\\\"true\\\" panelType=\\\"primary\\\" stateId=\\\"panel_insured_{{index}}\\\" [state]=\\\"componentsState.get('panel_insured_'+index)\\\"\\r\\n\\t\\t [initCollapsed]=\\\"index!='0'\\\" (collapsedChange)=\\\"onPanelCollapsedChange($event)\\\" secureComponent>\\r\\n\\t\\t\\t<div *ngIf=\\\"showView\\\">\\r\\n\\t\\t\\t\\t<div class=\\\"row\\\">\\r\\n\\t\\t\\t\\t\\t<div class=\\\"col-2\\\">\\r\\n\\t\\t\\t\\t\\t\\t<lf-form-input [control]=\\\"aviationExclusion\\\" label=\\\"Aviation Exclusion\\\" i18n-label=\\\"@@policy.worksheet.caseApplicantAviationExclusion\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<lf-radiobuttongroup #aviationExclusion name=\\\"aviationExclusion_{{index}}\\\" [(ngModel)]=\\\"insured.AviationExclusion\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t [disabled]=\\\"disabledOnCaseOrCoverageStatus\\\" secureComponent>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<lf-radiobutton [value]=\\\"RadioButtonValues.YES_NUMBER\\\" name=\\\"aviationExclusion_{{index}}\\\" label=\\\"Yes\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<lf-radiobutton [value]=\\\"RadioButtonValues.NO_LS_BOOLEAN\\\" name=\\\"aviationExclusion_{{index}}\\\" label=\\\"No\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</lf-radiobuttongroup>\\r\\n\\t\\t\\t\\t\\t\\t</lf-form-input>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"col-2\\\">\\r\\n\\t\\t\\t\\t\\t\\t<lf-form-input [control]=\\\"autoApproval\\\" label=\\\"Auto Approval\\\" i18n-label=\\\"@@policy.worksheet.caseApplicantAutoApproval\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<lf-radiobuttongroup #autoApproval name=\\\"autoApproval_{{index}}\\\" [(ngModel)]=\\\"insured.AllowAutoApproval\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t [disabled]=\\\"disabledOnCaseOrCoverageStatus\\\" secureComponent>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<lf-radiobutton [value]=\\\"RadioButtonValues.YES_NUMBER\\\" name=\\\"autoApproval_{{index}}\\\" label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<lf-radiobutton [value]=\\\"RadioButtonValues.NO_LS_BOOLEAN\\\" name=\\\"autoApproval_{{index}}\\\" label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</lf-radiobuttongroup>\\r\\n\\t\\t\\t\\t\\t\\t</lf-form-input>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"col-2\\\">\\r\\n\\t\\t\\t\\t\\t\\t<lf-form-input [control]=\\\"allowAutoApproval\\\" label=\\\"Allow Auto Approval\\\" i18n-label=\\\"@@policy.worksheet.caseApplicantAllowAutoApproval\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<lf-statictext #allowAutoApproval name=\\\"allowAutoApproval\\\" [value]=\\\"insured.AllowAutoAprovalString\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t secureComponent></lf-statictext>\\r\\n\\t\\t\\t\\t\\t\\t</lf-form-input>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"col-2\\\">\\r\\n\\t\\t\\t\\t\\t\\t<lf-form-input [control]=\\\"debitCredit\\\" label=\\\"Debit/Credit\\\" i18n-label=\\\"@@policy.worksheet.caseApplicantDebitCredit\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<lf-statictext #debitCredit name=\\\"debitCredit\\\" [value]=\\\"applicantTotalPoints | lfDecimal:'1.0-0'\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t secureComponent></lf-statictext>\\r\\n\\t\\t\\t\\t\\t\\t</lf-form-input>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t\\t<div class=\\\"col-2\\\">\\r\\n\\t\\t\\t\\t\\t\\t<lf-form-input [control]=\\\"onHold\\\" label=\\\"On Hold\\\" i18n-label=\\\"@@policy.worksheet.caseApplicantPutOnHold\\\">\\r\\n\\t\\t\\t\\t\\t\\t\\t<lf-radiobuttongroup #onHold [(ngModel)]=\\\"insured.isHold\\\" name=\\\"onHold_{{index}}\\\" (change)=\\\"showOnHoldConfirmDialog($event)\\\"\\r\\n\\t\\t\\t\\t\\t\\t\\t [disabled]=\\\"disabledOnCaseOrCoverageStatus\\\" secureComponent>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<lf-radiobutton [value]=\\\"RadioButtonValues.YES_BOOLEAN\\\" name=\\\"onHold_{{index}}\\\" label=\\\"Yes\\\" i18n-label=\\\"@@general.stringconstants.yes\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t<span>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t\\t<lf-radiobutton [value]=\\\"RadioButtonValues.NO_BOOLEAN\\\" name=\\\"onHold_{{index}}\\\" label=\\\"No\\\" i18n-label=\\\"@@general.stringconstants.no\\\"></lf-radiobutton>\\r\\n\\t\\t\\t\\t\\t\\t\\t\\t</span>\\r\\n\\t\\t\\t\\t\\t\\t\\t</lf-radiobuttongroup>\\r\\n\\t\\t\\t\\t\\t\\t</lf-form-input>\\r\\n\\t\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t\\t<div *ngFor=\\\"let coverage of insured.Coverages_LazyLoad; let i=index\\\">\\r\\n\\t\\t\\t\\t\\t<ls-worksheet-coverage [coverage]=\\\"coverage\\\" index=\\\"{{insured.PersonId}}_{{i}}\\\"></ls-worksheet-coverage>\\r\\n\\t\\t\\t\\t</div>\\r\\n\\t\\t\\t</div>\\r\\n\\t\\t</lf-panel>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, Injector, Injectable, Input, ViewChild } from '@angular/core';\n\nimport { ViewModel } from 'life-core/view-model';\nimport { I18n } from 'life-core/i18n';\nimport { LfPanel, ConfirmDialog, DialogResult, DialogButton, DialogButtonType } from 'life-core/component';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { NameUtil } from 'life-core/util';\n\nimport { InsuredDTO } from 'ls-core/model';\nimport { LsRadioButtonValues, LsRadioButtonValuesType } from 'ls-core/component/input';\nimport { MetadataUtil } from 'ls-core/util';\n\nimport { InsuredHeaderBuilder } from 'business/policy/worksheet/case-disp/insured/insured-header.builder';\nimport { DebitCreditHelper } from 'business/policy/shared';\nimport { LsInsuredAuthorizationProvider } from 'business/policy/worksheet/case-disp/insured/insured-authorization.provider';\n\n@Component({\n    selector: 'ls-insured',\n    templateUrl: './insured.component.html',\n    providers: [{ provide: AuthorizationProvider, useClass: LsInsuredAuthorizationProvider }, InsuredHeaderBuilder]\n})\n@Injectable()\nexport class InsuredComponent extends ViewModel {\n    @Input()\n    public insured: InsuredDTO;\n    @Input()\n    public index: string;\n    @Input()\n    public disabledBasedOnCaseDispositionStatus: boolean;\n\n    @ViewChild(LfPanel)\n    private _insuredPanel: LfPanel;\n\n    private _debitCreditHelper: DebitCreditHelper;\n    private _confirmDialog: ConfirmDialog;\n    private _insuredHeaderBuilder: InsuredHeaderBuilder;\n\n    public i18n: I18n;\n    public panelHeader: string;\n    public applicantTotalPoints: number = 0;\n\n    // Flag to show/hide data inside the Applicant panel when panel is expanded/collapsed.\n    // This is to lazy-load/bind all applicant-related data inside the panel to\n    // improve page loading speed\n    public showView: boolean;\n\n    private viewRendered: boolean;\n    public readonly RadioButtonValues: LsRadioButtonValuesType = LsRadioButtonValues;\n    public disabledOnCaseOrCoverageStatus: boolean;\n\n    constructor(\n        injector: Injector,\n        confirmDialog: ConfirmDialog,\n        i18n: I18n,\n        insuredHeaderBuilder: InsuredHeaderBuilder,\n        debitCreditHelper: DebitCreditHelper\n    ) {\n        super(injector);\n        this._debitCreditHelper = debitCreditHelper;\n        this._confirmDialog = confirmDialog;\n        this.i18n = i18n;\n        this._insuredHeaderBuilder = insuredHeaderBuilder;\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedMetaData();\n        return Promise.resolve();\n    }\n\n    public onPanelCollapsedChange(event: Event): void {\n        this.viewRendered = true;\n        this.setShowViewFlag();\n    }\n\n    protected setupData(): void {\n        this.setShowViewFlag();\n        this.setAviationExclusionValue();\n        this.setAutoApprovalValue();\n    }\n\n    private setAviationExclusionValue(): void {\n        this.insured.AviationExclusion = this.getAviationExclusionValue();\n    }\n\n    private getAviationExclusionValue(): number {\n        return this.insured.AviationExclusion == null ||\n            this.insured.AviationExclusion == LsRadioButtonValues.NO_NUMBER ||\n            this.insured.AviationExclusion == LsRadioButtonValues.NO_LS_BOOLEAN\n            ? LsRadioButtonValues.NO_LS_BOOLEAN\n            : LsRadioButtonValues.YES_NUMBER;\n    }\n\n    private setAutoApprovalValue(): void {\n        this.insured.AllowAutoApproval = this.getAutoApprovalValue();\n    }\n\n    private getAutoApprovalValue(): number {\n        return this.insured.AllowAutoApproval == LsRadioButtonValues.YES_NUMBER ||\n            this.insured.AllowAutoApproval == LsRadioButtonValues.YES_LS_BOOLEAN\n            ? LsRadioButtonValues.YES_NUMBER\n            : LsRadioButtonValues.NO_LS_BOOLEAN;\n    }\n\n    public ngAfterContentInit(): void {\n        super.ngAfterContentInit();\n        this.setPanelHeader();\n        this.setApplicantTotalPoints();\n        this.setDisableFlagBasedOnCoverageOrCaseStatus();\n    }\n\n    private setDisableFlagBasedOnCoverageOrCaseStatus(): void {\n        this.disabledOnCaseOrCoverageStatus = this.disabledBasedOnCaseDispositionStatus || !this.insured.isOpen;\n    }\n\n    public showOnHoldConfirmDialog(event: any): void {\n        const applicantName = NameUtil.getFullName({\n            firstName: this.insured.FirstName,\n            lastName: this.insured.LastName\n        });\n        if (event) {\n            this.openOnHoldConfirmDialog(\n                this.i18n(\n                    {\n                        value: 'Are you sure you want to put {{applicantName}} on hold?',\n                        id: 'policytoolbar.holdmessage.onhold'\n                    },\n                    { applicantName: applicantName }\n                )\n            ).then(dialogResult => {\n                this.insured.isHold =\n                    dialogResult.buttonId == DialogButtonType.OK\n                        ? LsRadioButtonValues.YES_BOOLEAN\n                        : LsRadioButtonValues.NO_BOOLEAN;\n            });\n        } else {\n            this.openOnHoldConfirmDialog(\n                this.i18n(\n                    {\n                        value: 'Are you sure you want to remove hold on {{applicantName}} ?',\n                        id: 'policytoolbar.holdmessage.removehold'\n                    },\n                    { applicantName: applicantName }\n                )\n            ).then(dialogResult => {\n                this.insured.isHold =\n                    dialogResult.buttonId == DialogButtonType.OK\n                        ? LsRadioButtonValues.NO_BOOLEAN\n                        : LsRadioButtonValues.YES_BOOLEAN;\n            });\n        }\n    }\n\n    private openOnHoldConfirmDialog(message: string): Promise<DialogResult> {\n        return this._confirmDialog.open({\n            message: message,\n            title: this.i18n({ value: 'Hold Message', id: 'policytoolbar.holdmessage.title' }),\n            buttons: [\n                new DialogButton({ type: DialogButtonType.OK }),\n                new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\n            ]\n        });\n    }\n\n    private setPanelHeader(): void {\n        this.panelHeader = this.getPanelHeader();\n    }\n\n    private getPanelHeader(): string {\n        const applicantStatus = MetadataUtil.getItemByExternalCode(\n            this.listData.applicant_status,\n            this.insured.ApplicantStatus\n        );\n        return this._insuredHeaderBuilder.getHeader(applicantStatus, this.insured);\n    }\n    private setApplicantTotalPoints(): void {\n        this.applicantTotalPoints = this._debitCreditHelper.getDebitCreditTotalPoints(this.insured);\n    }\n\n    private setShowViewFlag(): void {\n        this.showView = !this._insuredPanel.state.get('collapsed') || this.viewRendered;\n    }\n}\n","import { Injectable } from '@angular/core';\r\n\r\nimport { MetadataUtil } from 'ls-core/util';\r\nimport { DialogButtonType, DialogButton, ConfirmDialog } from 'life-core/component';\r\nimport { UserPolicyService, PolicyStatusCodes } from 'business/policy/shared';\r\nimport { AuthorizationLevel } from 'life-core/authorization';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { AppSession } from 'ls-core/session';\r\nimport { MetadataItem } from 'ls-core/model/metadata/metadata.model';\r\n\r\n@Injectable()\r\nexport class PolicyApprovalAuthorizationDelegate {\r\n    constructor(\r\n        private _confirmDialog: ConfirmDialog,\r\n        private _userPolicyService: UserPolicyService,\r\n        private _appSession: AppSession,\r\n        private i18n: I18n\r\n    ) {}\r\n\r\n    public validate(\r\n        userId: number,\r\n        authorizationLevel: AuthorizationLevel,\r\n        systemMessagesList: Array<MetadataItem>\r\n    ): Promise<boolean> {\r\n        return this._userPolicyService.canUserApprovePolicy(userId).then(canUserApprove => {\r\n            if (authorizationLevel < AuthorizationLevel.EDIT) {\r\n                canUserApprove = false;\r\n            }\r\n            if (!canUserApprove || this.isPolicyApproved()) {\r\n                return this.showUserNotAuthorizedToApproveDialog(systemMessagesList);\r\n            } else {\r\n                return canUserApprove;\r\n            }\r\n        });\r\n    }\r\n\r\n    private isPolicyApproved(): boolean {\r\n        return this._appSession.policyDTO.PolicyStatusCode === PolicyStatusCodes.APPROVED;\r\n    }\r\n\r\n    private showUserNotAuthorizedToApproveDialog(systemMessagesList: Array<MetadataItem>): Promise<boolean> {\r\n        return this._confirmDialog\r\n            .open({\r\n                message: this.getMessage(systemMessagesList),\r\n                title: this.i18n({ value: 'Warning', id: 'policy.policyapproval.warning.title' }),\r\n                buttons: [\r\n                    new DialogButton({ type: DialogButtonType.OK }),\r\n                    new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\r\n                ]\r\n            })\r\n            .then(result => result.buttonId == DialogButtonType.OK);\r\n    }\r\n\r\n    private getMessage(systemMessagesList: Array<MetadataItem>): string {\r\n        const value = MetadataUtil.getLabelByValue(systemMessagesList, 'NotAuthApprovdStatusRemove');\r\n        return value ? value.replace(/\\\\n/gm, '\\n') : '';\r\n    }\r\n}\r\n","import { Injector, Input } from '@angular/core';\r\nimport { InsuredDTO } from 'ls-core/model';\r\nimport { BasePolicyGridViewModel } from 'business/policy/shared';\r\nimport { ActiveApplicantHelper, ApplicantListHelper } from 'business/policy/shared';\r\n\r\nexport abstract class BaseDebitCreditGridViewModel<T> extends BasePolicyGridViewModel<T> {\r\n    @Input() public insured: InsuredDTO;\r\n\r\n    public total: number;\r\n\r\n    private _applicantListHelper: ApplicantListHelper;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this._applicantListHelper = injector.get(ApplicantListHelper);\r\n        const activeApplicantHelper = injector.get(ActiveApplicantHelper);\r\n        this.subscriptionTracker.track(\r\n            activeApplicantHelper.activeApplicantIdObservable.subscribe(applicantId => {\r\n                this.setApplicant();\r\n                this.refreshGrid();\r\n            })\r\n        );\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this.insured = this._applicantListHelper.getActiveApplicantOrDefault(this.policy.Insureds_LazyLoad);\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { RiskFactorSystemGeneratedTypes } from '../';\r\n\r\n@Injectable()\r\nexport class CoronaryTestsColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n\r\n    constructor(cellFormatters: CellFormatters, i18n: I18n) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'CAN', id: 'policy.worksheet.debitcredit.gridheader.can' }),\r\n            field: RiskFactorSystemGeneratedTypes.CAN,\r\n            valueFormatter: params => this._cellFormatters.decimalCellFormatter(params, '1.0-0'),\r\n            width: 200\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'CAD', id: 'policy.worksheet.debitcredit.gridheader.cad' }),\r\n            field: RiskFactorSystemGeneratedTypes.CAD,\r\n            valueFormatter: params => this._cellFormatters.decimalCellFormatter(params, '1.0-0'),\r\n            width: 200\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'AO', id: 'policy.worksheet.debitcredit.gridheader.ao' }),\r\n            field: RiskFactorSystemGeneratedTypes.AO,\r\n            valueFormatter: params => this._cellFormatters.decimalCellFormatter(params, '1.0-0'),\r\n            width: 200\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-grid-title\\\" i18n=\\\"@@policy.worksheet.debitcredit.coronarytests\\\">Coronary Tests</div>\\r\\n<data-grid #dataGrid [ngStyle]=\\\"{height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\">\\r\\n</data-grid>\\r\\n<lf-form-input [control]=\\\"coronaryTestsTotal\\\" label=\\\"Total\\\" i18n-label=\\\"@@policy.worksheet.debitcredit.total\\\"\\r\\n    labelPosition=\\\"left\\\">\\r\\n    <lf-statictext #coronaryTestsTotal name=\\\"coronaryTestsTotal\\\" [value]=\\\"total | lfDecimal:'1.0-0'\\\" secureComponent></lf-statictext>\\r\\n</lf-form-input>\"","import { Component, Injector } from '@angular/core';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { BaseDebitCreditGridViewModel } from '../base-debit-credit-grid-view-model';\r\nimport { DebitCreditHelper } from 'business/policy/shared';\r\nimport { CoronaryTestsColumnsBuilder } from './coronary-tests-grid-columns.builder';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { RiskFactorSystemGeneratedTypes } from 'business/policy/worksheet/debit-credit';\r\n\r\n@Component({\r\n    selector: 'coronary-tests',\r\n    templateUrl: './coronary-tests.component.html',\r\n    providers: [PolicySubscriber, CoronaryTestsColumnsBuilder]\r\n})\r\nexport class CoronaryTestsComponent extends BaseDebitCreditGridViewModel<any> {\r\n    private _debitCreditHelper: DebitCreditHelper;\r\n    private _gridColumnBuilder: CoronaryTestsColumnsBuilder;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        debitCreditHelper: DebitCreditHelper,\r\n        gridColumnBuilder: CoronaryTestsColumnsBuilder\r\n    ) {\r\n        super(injector);\r\n        this._debitCreditHelper = debitCreditHelper;\r\n        this._gridColumnBuilder = gridColumnBuilder;\r\n    }\r\n\r\n    protected loadItems(): any[] {\r\n        const data = this._debitCreditHelper.getCoronaryTestGridInfo(this.insured);\r\n        this.total = data.Total || 0;\r\n        return data.Records || [];\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: any): RiskFactorSystemGeneratedTypes {\r\n        return data.CAN;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return 'Coronary Tests';\r\n    }\r\n}\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { TabDefDebitCredit } from 'ui/tabview/tab-definitions';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class DebitCreditAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n    }\r\n\r\n    protected setup(): void {\r\n        this.authorizationData.defaultLevel = this.getParentAuthorizationLevel(TabDefDebitCredit.name);\r\n    }\r\n}\r\n","export const DebitCreditsChannels = {\r\n    DebitCredits: 'DebitCredits'\r\n};\r\n","import { Injector, Injectable } from '@angular/core';\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\n\r\n@Injectable()\r\nexport class DebitCreditDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getLazyLoadTree());\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n\r\n    private getLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            const coveragesNode = insuredDTOLoadTree.AddChild(DataCollectionNames.Coverages);\r\n            {\r\n                coveragesNode.AddChildren([DataCollectionNames.WorksheetRows]);\r\n            }\r\n            insuredDTOLoadTree.AddChildren([DataCollectionNames.MedicalConditions, DataCollectionNames.Medication]);\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class DebitCreditMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['aus_users'];\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"caseNumber\\\" i18n=\\\"@@policy.worksheet.debitcredit.case\\\">Case #</label>\\r\\n            <div name=\\\"caseNumber\\\">{{data.policy.PolicyNumber}}</div>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <lf-form-input [control]=\\\"applicantList\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.worksheet.debitcredit.applicant\\\">\\r\\n            <!-- Use 'ngModelOption.standalone' to not add this control to NgForm to avoid saving data when applicant selection changes -->\\r\\n            <lf-select #applicantList name=\\\"applicantList\\\" [(ngModel)]=\\\"selectedApplicantId\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n                [items]=\\\"applicantListOptions\\\" (change)=\\\"onApplicantChange($event)\\\" [clearable]=\\\"false\\\" style=\\\"width:200px\\\"\\r\\n                [actionType]=\\\"applicantDropdownActionType\\\" secureComponent></lf-select>\\r\\n        </lf-form-input>\\r\\n    </div>\\r\\n    <div class=\\\"col-4\\\">\\r\\n        <div class=\\\"form-group\\\">\\r\\n            <label for=\\\"total\\\" i18n=\\\"@@policy.worksheet.debitcredit.total\\\">Total</label>\\r\\n            <div name=\\\"total\\\">{{applicantTotalPoints | lfDecimal:'1.0-0'}}</div>\\r\\n        </div>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 col-md-11 col-xl-10\\\">\\r\\n        <other-risks></other-risks>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 col-md-11 col-xl-10\\\">\\r\\n        <system-generated></system-generated>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 col-md-11 col-xl-10\\\">\\r\\n        <user-generated></user-generated>\\r\\n    </div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n    <div class=\\\"col-12 col-md-11 col-xl-10\\\">\\r\\n        <coronary-tests></coronary-tests>\\r\\n    </div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\n\r\nimport { SecondaryTabHostViewModel } from 'life-core/component/layout/tabview';\r\nimport { ListItem } from 'life-core/model';\r\nimport { DropdownActionType } from 'life-core/component/input';\r\n\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\nimport { InsuredDTO, PolicyDTO } from 'ls-core/model';\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\n\r\nimport { ApplicantListHelper, ActiveApplicantHelper, DebitCreditHelper } from 'business/policy/shared';\r\nimport { PolicyDataModel } from 'business/policy/shared/data-model';\r\n\r\nimport { DebitCreditsChannels } from './debit-credit-channels';\r\nimport { DebitCreditAuthorizationProvider } from './debit-credit-authorization.provider';\r\n\r\n@Component({\r\n    selector: 'debit-credit',\r\n    templateUrl: './debit-credit.component.html',\r\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: DebitCreditAuthorizationProvider }]\r\n})\r\nexport class DebitCreditComponent extends SecondaryTabHostViewModel<PolicyDataModel> {\r\n    public applicantListOptions: Array<ListItem>;\r\n    public selectedApplicantId: number;\r\n    public applicantDropdownActionType: DropdownActionType = DropdownActionType.Presentation;\r\n\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _activeApplicantHelper: ActiveApplicantHelper;\r\n    private _debitCreditHelper: DebitCreditHelper;\r\n    public applicantTotalPoints: number = 0;\r\n    public insured: InsuredDTO;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        applicantListHelper: ApplicantListHelper,\r\n        activeApplicantHelper: ActiveApplicantHelper,\r\n        debitCreditHelper: DebitCreditHelper\r\n    ) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.data.policy = p;\r\n        });\r\n        this.applicantListOptions = new Array<ListItem>();\r\n        this._applicantListHelper = applicantListHelper;\r\n        this._activeApplicantHelper = activeApplicantHelper;\r\n        this._debitCreditHelper = debitCreditHelper;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.loadApplicantList();\r\n        this.setupDebitCreditTotalPointsSubscriptions();\r\n        this.setApplicantTotalPoints();\r\n        return Promise.resolve();\r\n    }\r\n\r\n    private loadApplicantList(): void {\r\n        if (this.data.policy.Insureds_LazyLoad) {\r\n            this.applicantListOptions = this._applicantListHelper.getApplicantList(this.data.policy.Insureds_LazyLoad);\r\n        }\r\n    }\r\n\r\n    private setActiveApplicant(): void {\r\n        this.selectedApplicantId = this._applicantListHelper.getActiveApplicantIdOrDefault(\r\n            this.data.policy.Insureds_LazyLoad\r\n        );\r\n    }\r\n\r\n    private setApplicantTotalPoints(): void {\r\n        this.insured = this._applicantListHelper.getActiveApplicantOrDefault(this.data.policy.Insureds_LazyLoad);\r\n        this.applicantTotalPoints = this._debitCreditHelper.getDebitCreditTotalPoints(this.insured);\r\n    }\r\n\r\n    protected setupDebitCreditTotalPointsSubscriptions(): void {\r\n        this.subscriptionTracker.track(\r\n            this.messagingService.subscribeNewMessageOnly(DebitCreditsChannels.DebitCredits, () =>\r\n                this.setApplicantTotalPoints()\r\n            )\r\n        );\r\n        this.trackSubscription(\r\n            this._activeApplicantHelper.activeApplicantIdObservable.subscribe(activeApplicantId => {\r\n                this.setActiveApplicant();\r\n            })\r\n        );\r\n    }\r\n\r\n    public onApplicantChange(selectedApplicant: any): void {\r\n        this._activeApplicantHelper.setActiveApplicantId(selectedApplicant.value);\r\n        this.selectedApplicantId = selectedApplicant.value;\r\n        this.setApplicantTotalPoints();\r\n    }\r\n\r\n    protected getDataToSave(): PolicyDTO {\r\n        return this.data.policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ComponentsModule } from 'life-core/component/components.module';\r\nimport { DebitCreditComponent, DebitCreditDataResolver, DebitCreditMetaDataResolver } from './';\r\nimport { DebitCreditHelper } from 'business/policy/shared';\r\nimport { OtherRisksModule } from './other-risks/other-risks.module';\r\nimport { SystemGeneratedModule } from './system-generated/system-generated.module';\r\nimport { UserGeneratedModule } from './user-generated/user-generated.module';\r\nimport { CoronaryTestsComponent } from './coronary-tests/coronary-tests.component';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        ComponentsModule,\r\n        OtherRisksModule,\r\n        SystemGeneratedModule,\r\n        UserGeneratedModule\r\n    ],\r\n    declarations: [DebitCreditComponent, CoronaryTestsComponent],\r\n    exports: [DebitCreditComponent],\r\n    providers: [DebitCreditDataResolver, DebitCreditMetaDataResolver, DebitCreditHelper]\r\n})\r\nexport class DebitCreditModule {}\r\n","﻿export * from './debit-credit-data.resolver';\r\nexport * from './debit-credit-metadata.resolver';\r\nexport * from './debit-credit.component';\r\nexport * from './const/risk-factor-source-types';\r\nexport * from './const/risk-factor-system-generated-types';\r\n","module.exports = \"<form #form=\\\"ngForm\\\" role=\\\"form\\\" class=\\\"form\\\" autocomplete=\\\"off\\\">\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"riskFactor\\\" label=\\\"Risk Factor\\\" i18n-label=\\\"@@policy.worksheet.debitcredit.gridheader.riskfactor\\\">\\r\\n                <lf-inputtext #riskFactor name=\\\"riskFactor\\\" [(ngModel)]=\\\"data.RiskFactor\\\" maxLength=\\\"100\\\"\\r\\n                    secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"description\\\" label=\\\"Description\\\" i18n-label=\\\"@@policy.worksheet.debitcredit.gridheader.description\\\">\\r\\n                <lf-inputtext #description name=\\\"description\\\" [(ngModel)]=\\\"data.Note\\\" maxLength=\\\"200\\\" secureComponent></lf-inputtext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n    <div class=\\\"row\\\">\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"debit\\\" label=\\\"Debit/Credit\\\" i18n-label=\\\"@@policy.worksheet.debitcredit.gridheader.debitcredit\\\">\\r\\n                <lf-inputnumber #debit name=\\\"debit\\\" min=\\\"-999\\\" max=\\\"9999\\\" [(ngModel)]=\\\"data.Debit\\\" format=\\\"n0\\\"\\r\\n                    maxLength=\\\"4\\\" decimals=\\\"0\\\" secureComponent required></lf-inputnumber>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n        <div class=\\\"col-6\\\">\\r\\n            <lf-form-input [control]=\\\"createdBy\\\" label=\\\"Created By\\\" i18n-label=\\\"@@policy.worksheet.debitcredit.gridheader.createdby\\\">\\r\\n                <lf-statictext #createdBy name=\\\"createdBy\\\" [value]=\\\"userName\\\" secureComponent></lf-statictext>\\r\\n            </lf-form-input>\\r\\n        </div>\\r\\n    </div>\\r\\n</form>\"","import { Component, Injector, Injectable } from '@angular/core';\nimport { BasePolicyDialogDetailViewModel } from 'business/policy/shared/master-detail';\nimport { ParentChildRegistry } from 'life-core/view-model';\nimport { AuthorizationProvider } from 'life-core/authorization';\n\nimport { AppSession } from 'ls-core/session/app-session';\nimport { MetadataUtil } from 'ls-core/util';\nimport { WorksheetRowDTO } from 'ls-core/model';\n\nimport { OtherRisksAuthorizationProvider } from '../other-risk-authorization.provider';\n@Component({\n    selector: 'other-risks-detail-editor',\n    templateUrl: './other-risks-detail-editor.html',\n    providers: [ParentChildRegistry, { provide: AuthorizationProvider, useClass: OtherRisksAuthorizationProvider }]\n})\n@Injectable()\nexport class OtherRisksDialogDetailEditor extends BasePolicyDialogDetailViewModel<WorksheetRowDTO> {\n    private _appSession: AppSession;\n    public userName: string;\n\n    constructor(injector: Injector, appSession: AppSession) {\n        super(injector);\n        this._appSession = appSession;\n    }\n\n    public loadData(): Promise<void> {\n        this.setUserData();\n        return Promise.resolve();\n    }\n\n    private setUserData(): void {\n        if (!this.data.AddedBy) {\n            this.data.AddedBy = this._appSession.user.UserId;\n        }\n        this.userName = MetadataUtil.getItemLabelByCode(this.resolvedData.metaData.aus_users, this.data\n            .AddedBy as string);\n    }\n}\n","import { Injectable } from '@angular/core';\r\nimport { BaseMetaDataResolver } from 'ls-core/view-model';\r\n\r\n@Injectable()\r\nexport class OtherRisksDialogMetaDataResolver extends BaseMetaDataResolver {\r\n    protected getMetadataTypes(): string[] {\r\n        return ['aus_users'];\r\n    }\r\n}\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { PrivilegeObjectType, SubsystemType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class OtherRisksAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const defaultAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.DEBITCREDIT]\r\n        );\r\n\r\n        this.authorizationData.defaultLevel = defaultAuthorizationLevel;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { MetadataUtil } from 'ls-core/util';\r\n\r\n@Injectable()\r\nexport class OtherRisksGridColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n\r\n    constructor(i18n: I18n, cellFormatters: CellFormatters) {\r\n        super();\r\n        this.i18n = i18n;\r\n        this._cellFormatters = cellFormatters;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Risk Factor', id: 'policy.worksheet.debitcredit.gridheader.riskfactor' }),\r\n            field: OtherRisksGridFields.RiskFactor,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Description', id: 'policy.worksheet.debitcredit.gridheader.description' }),\r\n            field: OtherRisksGridFields.Note,\r\n            width: 200,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Debit/Credit', id: 'policy.worksheet.debitcredit.gridheader.debitcredit' }),\r\n            field: OtherRisksGridFields.Debit,\r\n            valueFormatter: params => this._cellFormatters.decimalCellFormatter(params, '1.0-0'),\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created By', id: 'policy.worksheet.debitcredit.gridheader.createdby' }),\r\n            field: OtherRisksGridFields.AddedBy,\r\n            width: 100,\r\n            valueFormatter: this.getUserName\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getUserName(params: any): string {\r\n        if (params.node.data.AddedBy) {\r\n            return MetadataUtil.getItemLabelByCode(params.context.listData.aus_users, params.node.data.AddedBy);\r\n        }\r\n    }\r\n}\r\n\r\nexport const OtherRisksGridFields = {\r\n    RiskFactor: 'RiskFactor',\r\n    Note: 'Note',\r\n    Debit: 'Debit',\r\n    AddedBy: 'AddedBy'\r\n};\r\n","﻿import { Injectable } from '@angular/core';\r\n\r\nimport { CreateItemParams } from 'life-core/component/master-detail';\r\nimport { BaseDTOItemFactory } from 'ls-core/component/master-detail';\r\nimport { WorksheetRowDTO } from 'ls-core/model';\r\n\r\n@Injectable()\r\nexport class OtherRisksItemFactory extends BaseDTOItemFactory<WorksheetRowDTO> {\r\n    public newInstance(createItemParams: OtherRisksCreateItemParams<WorksheetRowDTO>): WorksheetRowDTO {\r\n        const worksheetRowDTO = new WorksheetRowDTO();\r\n        worksheetRowDTO.CoveragePersonWorksheetId = this.getNextId(createItemParams.items, 'CoveragePersonWorksheetId');\r\n        worksheetRowDTO.CoveragePersonId = createItemParams.coveragePersonId;\r\n        return worksheetRowDTO;\r\n    }\r\n}\r\n\r\nexport interface OtherRisksCreateItemParams<T> extends CreateItemParams<T> {\r\n    coveragePersonId: any;\r\n}\r\n","module.exports = \"<div class=\\\"lf-solid-bottom-border \\\">\\r\\n    <master-detail [gridOptions]=\\\"gridOptions\\\" [buttons]=\\\"buttons\\\" [title]=\\\"title\\\" [showDetailAsPopup]=\\\"showDetailAsPopup\\\"\\r\\n        secureComponent [disabled]=\\\"disabled\\\"></master-detail>\\r\\n    <lf-form-input [control]=\\\"otherRiskTotal\\\" label=\\\"Total\\\"  i18n-label=\\\"@@policy.worksheet.debitcredit.total\\\" labelPosition=\\\"left\\\">\\r\\n        <lf-statictext #otherRiskTotal name=\\\"otherRiskTotal\\\" [value]=\\\"applicantOtherRiskTotalPoints | lfDecimal:'1.0-0'\\\"\\r\\n            secureComponent></lf-statictext>\\r\\n    </lf-form-input>\\r\\n</div>\"","import { Component, Injector, Injectable } from '@angular/core';\r\nimport {\r\n    RowManagementDelegate,\r\n    MasterDetailComponentResolver,\r\n    BaseDataManager,\r\n    CreateItemEventData\r\n} from 'life-core/component/master-detail';\r\nimport { IMessagingService, MessagingService } from 'life-core/messaging';\r\nimport { ResolvedDataNames } from 'life-core/view-model/data-resolver';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { DirectDataResolve } from 'life-core/component/shared';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { InsuredDTO, WorksheetRowDTO, PolicyDTO } from 'ls-core/model';\r\nimport { DefaultDataService, SetDefaultDataRequest } from 'ls-core/service';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\nimport { BasePolicyMasterDetailViewModel } from 'business/policy/shared';\r\nimport { ActiveApplicantHelper, ApplicantListHelper, DebitCreditHelper } from 'business/policy/shared';\r\n\r\nimport { OtherRisksGridColumnsBuilder } from './other-risks-grid-columns.builder';\r\nimport { OtherRisksItemFactory, OtherRisksCreateItemParams } from './other-risks-item-factory';\r\nimport { OtherRisksDialogDetailEditor } from './detail/other-risks-detail-editor';\r\nimport { DebitCreditsChannels } from '../debit-credit-channels';\r\nimport { OtherRisksDialogMetaDataResolver } from './detail/other-risks-dialog-metadata.resolver';\r\n\r\nexport function rowManagementDelegateFactory(\r\n    itemFactory: OtherRisksItemFactory,\r\n    dataManager: BaseDataManager<WorksheetRowDTO>\r\n): RowManagementDelegate<WorksheetRowDTO> {\r\n    return new RowManagementDelegate({\r\n        itemName: 'OtherRisks',\r\n        itemIDPropertyName: 'CoveragePersonWorksheetId',\r\n        itemFactory: itemFactory,\r\n        dataManager: dataManager\r\n    });\r\n}\r\n\r\nexport function itemComponentResolverFactory(): MasterDetailComponentResolver<WorksheetRowDTO> {\r\n    return new MasterDetailComponentResolver({\r\n        itemComponents: OtherRisksDialogDetailEditor\r\n    });\r\n}\r\n\r\n@Component({\r\n    selector: 'other-risks',\r\n    templateUrl: './other-risks.component.html',\r\n    providers: [\r\n        BaseDataManager,\r\n        OtherRisksItemFactory,\r\n        PolicySubscriber,\r\n        {\r\n            provide: RowManagementDelegate,\r\n            useFactory: rowManagementDelegateFactory,\r\n            deps: [OtherRisksItemFactory, BaseDataManager]\r\n        },\r\n        {\r\n            provide: MasterDetailComponentResolver,\r\n            useFactory: itemComponentResolverFactory\r\n        },\r\n        OtherRisksGridColumnsBuilder\r\n    ]\r\n})\r\n@Injectable()\r\nexport class OtherRisksComponent extends BasePolicyMasterDetailViewModel<WorksheetRowDTO> {\r\n    private _insured: InsuredDTO;\r\n    private _debitCreditHelper: DebitCreditHelper;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _messagingService: IMessagingService;\r\n    private _defaultDataService: DefaultDataService;\r\n    public policy: PolicyDTO;\r\n    public applicantOtherRiskTotalPoints: number;\r\n    public selectedApplicantId: number;\r\n    private _gridColumnBuilder: OtherRisksGridColumnsBuilder;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        defaultDataService: DefaultDataService,\r\n        debitCreditHelper: DebitCreditHelper,\r\n        activeApplicantHelper: ActiveApplicantHelper,\r\n        applicantListHelper: ApplicantListHelper,\r\n        messagingService: MessagingService,\r\n        gridColumnBuilder: OtherRisksGridColumnsBuilder,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this.i18n = i18n;\r\n        policySubscriber.subscribe(this, p => {\r\n            this.policy = p;\r\n        });\r\n        this._defaultDataService = defaultDataService;\r\n        this._debitCreditHelper = debitCreditHelper;\r\n        this._messagingService = messagingService;\r\n        this._applicantListHelper = applicantListHelper;\r\n\r\n        this.subscriptionTracker.track(\r\n            activeApplicantHelper.activeApplicantIdObservable.subscribe(applicantId => {\r\n                this.setApplicant();\r\n                this.refreshMasterDetail();\r\n            })\r\n        );\r\n        this._gridColumnBuilder = gridColumnBuilder;\r\n    }\r\n\r\n    public get showDetailAsPopup(): boolean {\r\n        return true;\r\n    }\r\n\r\n    public loadData(): Promise<void> {\r\n        this.setResolvedMetaData();\r\n        this.setApplicantPoints();\r\n        return Promise.resolve(null);\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnBuilder;\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return this.i18n({ value: 'Other Risks', id: 'policy.worksheet.debitcredit.otherrisks' });\r\n    }\r\n\r\n    protected loadItems(): WorksheetRowDTO[] {\r\n        return this._insured.Coverages_LazyLoad[0].WorksheetRows_LazyLoad;\r\n    }\r\n\r\n    protected initRowManagementDelegate(): void {\r\n        this.rowManagementDelegate.initDataManager(this.items, item => this.worksheetRowFilter(item));\r\n    }\r\n\r\n    protected getItemDetailDialogResolve(item: WorksheetRowDTO): DirectDataResolve[] {\r\n        return [\r\n            { resolveName: ResolvedDataNames.metaData, resolverClass: OtherRisksDialogMetaDataResolver, context: item }\r\n        ];\r\n    }\r\n\r\n    protected createItem(eventData: CreateItemEventData): Promise<WorksheetRowDTO> {\r\n        const worksheetRow: WorksheetRowDTO = this.rowManagementDelegate.addNewRow({\r\n            items: this.items,\r\n            coveragePersonId: this._insured.Coverages_LazyLoad[0].CoveragePersonId\r\n        } as OtherRisksCreateItemParams<WorksheetRowDTO>);\r\n        const defaultDataRequest = new SetDefaultDataRequest(this.policy, worksheetRow, '');\r\n        return this._defaultDataService.setDefaultData(defaultDataRequest).then(data => {\r\n            Object.assign(worksheetRow, data.workingDTO as WorksheetRowDTO);\r\n            return worksheetRow;\r\n        });\r\n    }\r\n\r\n    protected getRowNodeId(data: WorksheetRowDTO): Object {\r\n        return data.CoveragePersonWorksheetId;\r\n    }\r\n\r\n    protected removeItem(item: WorksheetRowDTO): Promise<boolean> {\r\n        return super.removeItem(item).then(result => {\r\n            if (result) {\r\n                this._messagingService.publish(DebitCreditsChannels.DebitCredits);\r\n                this.getMasterDetail().master.clearSelection();\r\n                this.setApplicantPoints();\r\n                return result;\r\n            }\r\n        });\r\n    }\r\n\r\n    protected onItemDetailDialogOKClick(item: WorksheetRowDTO, dialogDirty: boolean): void {\r\n        super.onItemDetailDialogOKClick(item, dialogDirty);\r\n        this.getMasterDetail().master.clearSelection();\r\n        this._messagingService.publish(DebitCreditsChannels.DebitCredits);\r\n        this.setApplicantPoints();\r\n    }\r\n\r\n    protected refreshMasterDetail(): void {\r\n        super.refreshMasterDetail();\r\n        this.setApplicantPoints();\r\n    }\r\n\r\n    private setApplicantPoints(): void {\r\n        this.applicantOtherRiskTotalPoints = this._debitCreditHelper.getOtherRiskPoints(this._insured, true);\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this._insured = this._applicantListHelper.getActiveApplicantOrDefault(this.policy.Insureds_LazyLoad);\r\n    }\r\n\r\n    private worksheetRowFilter(worksheetRow: WorksheetRowDTO): boolean {\r\n        return !worksheetRow.OriginCode || !worksheetRow.OriginCode.trim();\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ComponentsModule } from 'life-core/component/components.module';\r\nimport { OtherRisksComponent } from './other-risks.component';\r\nimport { OtherRisksDialogDetailEditor } from './detail/other-risks-detail-editor';\r\nimport { OtherRisksDialogMetaDataResolver } from './detail/other-risks-dialog-metadata.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, ComponentsModule],\r\n    declarations: [OtherRisksComponent, OtherRisksDialogDetailEditor],\r\n    exports: [OtherRisksComponent, OtherRisksDialogDetailEditor],\r\n    providers: [OtherRisksDialogMetaDataResolver],\r\n    entryComponents: [OtherRisksDialogDetailEditor]\r\n})\r\nexport class OtherRisksModule {}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\n@Injectable()\r\nexport class MedicalConditionColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(\r\n        cellFormatters: CellFormatters,\r\n        lsCellFormatters: LsCellFormatters,\r\n        lsCellComparators: LsCellComparators,\r\n        i18n: I18n\r\n    ) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Bodily System', id: 'policy.medicalcondition.gridheader.​bodilysystem' }),\r\n            field: MedicalConditionFields.BodilySystem,\r\n            width: 80,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Condition', id: 'policy.medicalcondition.gridheader.condition' }),\r\n            field: MedicalConditionFields.Condition,\r\n            width: 140,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Criteria', id: 'policy.medicalcondition.gridheader.criteria' }),\r\n            field: MedicalConditionFields.Criteria,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Time', id: 'policy.worksheet.debitcredit.gridheader.time' }),\r\n            field: MedicalConditionFields.TimeOfCriteria,\r\n            width: 80,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created On', id: 'policy.medicalcondition.gridheader.createdon' }),\r\n            field: MedicalConditionFields.Added,\r\n            width: 100,\r\n            valueFormatter: params => this._cellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Debit/Credit', id: 'policy.worksheet.debitcredit.gridheader.debitcredit' }),\r\n            field: MedicalConditionFields.Points,\r\n            valueFormatter: params => this._cellFormatters.decimalCellFormatter(params, '1.0-0'),\r\n            width: 80\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nexport const MedicalConditionFields = {\r\n    BodilySystem: 'BodilySystem',\r\n    Condition: 'Condition',\r\n    Criteria: 'Criteria',\r\n    TimeOfCriteria: 'TimeOfCriteria',\r\n    Added: 'Added',\r\n    Points: 'Points' //\r\n};\r\n","module.exports = \"<div class=\\\"lf-solid-bottom-border\\\">\\r\\n    <div class=\\\"lf-grid-title\\\">{{title}}</div>\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\">\\r\\n    </data-grid>\\r\\n    <lf-form-input [control]=\\\"medicalConditionTotal\\\" label=\\\"Total\\\" i18n-label=\\\"@@policy.medicalcondition.grid.totalconditionpoints\\\"\\r\\n        labelPosition=\\\"left\\\">\\r\\n        <lf-statictext #medicalConditionTotal name=\\\"medicalConditionTotal\\\" [value]=\\\"total | lfDecimal:'1.0-0'\\\"\\r\\n            secureComponent></lf-statictext>\\r\\n    </lf-form-input>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { BaseDebitCreditGridViewModel } from '../../base-debit-credit-grid-view-model';\r\nimport { DebitCreditHelper } from 'business/policy/shared';\r\nimport { MedicalConditionDTO } from 'ls-core/model';\r\nimport { MedicalConditionColumnsBuilder } from './medical-condition-grid-columns.builder';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { RiskFactorSourceType } from '../../';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Component({\r\n    selector: 'medical-condition',\r\n    templateUrl: './medical-condition.component.html',\r\n    providers: [PolicySubscriber, MedicalConditionColumnsBuilder]\r\n})\r\nexport class MedicalConditionComponent extends BaseDebitCreditGridViewModel<MedicalConditionDTO> {\r\n    private _debitCreditHelper: DebitCreditHelper;\r\n    private _gridColumnsBuilder: MedicalConditionColumnsBuilder;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        gridColumnsBuilder: MedicalConditionColumnsBuilder,\r\n        debitCreditHelper: DebitCreditHelper,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n        this._debitCreditHelper = debitCreditHelper;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    protected loadItems(): MedicalConditionDTO[] {\r\n        const data = this._debitCreditHelper.getMedicalConditionGridInfo(\r\n            this.insured,\r\n            RiskFactorSourceType.SYSTEM_GENERATED\r\n        );\r\n        this.total = data.Total || 0;\r\n        return data.Records || [];\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: MedicalConditionDTO): Object {\r\n        return data.MedicalConditionId;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'Medical Condition', id: 'policy.worksheet.debitcredit.medicalcondition' });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class MedicationColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(\r\n        cellFormatters: CellFormatters,\r\n        lsCellFormatters: LsCellFormatters,\r\n        lsCellComparators: LsCellComparators,\r\n        i18n: I18n\r\n    ) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Condtion', id: 'policy.medication.gridheader.condition' }),\r\n            field: MedicationFields.Condition,\r\n            width: 80,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Medication', id: 'policy.worksheet.debitcredit.gridheader.medication' }),\r\n            field: MedicationFields.DrugName,\r\n            width: 140,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created On', id: 'policy.medication.gridheader.createdon' }),\r\n            field: MedicationFields.Added,\r\n            width: 80,\r\n            valueFormatter: params => this._cellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Debit/Credit', id: 'policy.medication.gridheader.points' }),\r\n            field: MedicationFields.Points,\r\n            valueFormatter: params => this._cellFormatters.decimalCellFormatter(params, '1.0-0'),\r\n            width: 80\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nexport const MedicationFields = {\r\n    Condition: 'Condition',\r\n    DrugName: 'DrugName',\r\n    Added: 'Added',\r\n    Points: 'Points'\r\n};\r\n","module.exports = \"<div class=\\\"lf-dashed-bottom-border\\\">\\r\\n    <div class=\\\"lf-grid-title\\\">{{title}}</div>\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\">\\r\\n    </data-grid>\\r\\n    <lf-form-input [control]=\\\"medicationTotal\\\" label=\\\"Total\\\" i18n-label=\\\"@@policy.medicalcondition.grid.totalconditionpoints\\\"\\r\\n        labelPosition=\\\"left\\\">\\r\\n        <lf-statictext #medicationTotal name=\\\"medicationTotal\\\" [value]=\\\"total | lfDecimal:'1.0-0'\\\" secureComponent></lf-statictext>\\r\\n    </lf-form-input>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { BaseDebitCreditGridViewModel } from '../../base-debit-credit-grid-view-model';\r\nimport { DebitCreditHelper } from 'business/policy/shared';\r\nimport { MedicationDTO } from 'ls-core/model';\r\nimport { MedicationColumnsBuilder } from './medication-grid-columns.builder';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { RiskFactorSourceType } from '../../';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Component({\r\n    selector: 'medication',\r\n    templateUrl: './medication.component.html',\r\n    providers: [PolicySubscriber, MedicationColumnsBuilder]\r\n})\r\nexport class MedicationComponent extends BaseDebitCreditGridViewModel<MedicationDTO> {\r\n    private _debitCreditHelper: DebitCreditHelper;\r\n    private _gridColumnsBuilder: MedicationColumnsBuilder;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        gridColumnsBuilder: MedicationColumnsBuilder,\r\n        debitCreditHelper: DebitCreditHelper,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n        this._debitCreditHelper = debitCreditHelper;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    protected loadItems(): MedicationDTO[] {\r\n        const data = this._debitCreditHelper.getMedicationGridInfo(this.insured, RiskFactorSourceType.SYSTEM_GENERATED);\r\n        this.total = data.Total || 0;\r\n        return data.Records || [];\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: MedicationDTO): number {\r\n        return data.MedicationId;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'Other Medication', id: 'policy.worksheet.debitcredit.othermedication' });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable()\r\nexport class RiskFactorColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n\r\n    constructor(cellFormatters: CellFormatters, i18n: I18n) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Test Name', id: 'policy.worksheet.debitcredit.gridheader.​testname' }),\r\n            field: RiskFactorFields.TestName,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Result', id: 'policy.worksheet.debitcredit.gridheader.​Result' }),\r\n            field: RiskFactorFields.Result,\r\n            width: 120\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Range', id: 'policy.worksheet.debitcredit.gridheader.​range' }),\r\n            field: RiskFactorFields.Range,\r\n            width: 100\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Rate Class', id: 'policy.worksheet.debitcredit.rateclass.rateclass' }),\r\n            field: RiskFactorFields.RateClassDesc,\r\n            width: 150\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Debit/Credit',\r\n                id: 'policy.worksheet.debitcredit.gridheader.​debitcredit'\r\n            }),\r\n            field: RiskFactorFields.DebitCredit,\r\n            valueFormatter: params => this._cellFormatters.decimalCellFormatter(params, '1.0-0'),\r\n            width: 80\r\n        });\r\n        return this.columns;\r\n    }\r\n}\r\n\r\nexport const RiskFactorFields = {\r\n    TestName: 'RiskFactor', //\r\n    Result: 'Result',\r\n    Range: 'Note',\r\n    RateClassDesc: 'RateClassDesc',\r\n    DebitCredit: 'Debit'\r\n};\r\n","module.exports = \"<div class=\\\"lf-dashed-bottom-border\\\">\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\">\\r\\n    </data-grid>\\r\\n    <lf-form-input [control]=\\\"riskFactorTotal\\\" label=\\\"Total\\\" i18n-label=\\\"@@policy.medicalcondition.grid.totalconditionpoints\\\"\\r\\n        labelPosition=\\\"left\\\">\\r\\n        <lf-statictext #riskFactorTotal name=\\\"riskFactorTotal\\\" [value]=\\\"total | lfDecimal:'1.0-0'\\\" secureComponent></lf-statictext>\\r\\n    </lf-form-input>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { WorksheetRowDTO } from 'ls-core/model';\r\nimport { BaseDebitCreditGridViewModel } from '../../base-debit-credit-grid-view-model';\r\nimport { DebitCreditHelper } from 'business/policy/shared';\r\nimport { RiskFactorColumnsBuilder } from './risk-factor-grid-columns.builder';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { RiskFactorSourceType } from '../../';\r\n\r\n@Component({\r\n    selector: 'risk-factor',\r\n    templateUrl: './risk-factor.component.html',\r\n    providers: [PolicySubscriber, RiskFactorColumnsBuilder]\r\n})\r\nexport class RiskFactorComponent extends BaseDebitCreditGridViewModel<WorksheetRowDTO> {\r\n    private _debitCreditHelper: DebitCreditHelper;\r\n    private _gridColumenBuilder: RiskFactorColumnsBuilder;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        debitCreditHelper: DebitCreditHelper,\r\n        gridColumenBuilder: RiskFactorColumnsBuilder\r\n    ) {\r\n        super(injector);\r\n        this._debitCreditHelper = debitCreditHelper;\r\n        this._gridColumenBuilder = gridColumenBuilder;\r\n    }\r\n\r\n    protected loadItems(): WorksheetRowDTO[] {\r\n        const data = this._debitCreditHelper.getRiskFactorGridInfo(this.insured, RiskFactorSourceType.SYSTEM_GENERATED);\r\n        this.total = data.Total || 0;\r\n        return data.Records || [];\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumenBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: WorksheetRowDTO): Object {\r\n        return data.CoveragePersonWorksheetId;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return '';\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-grid-title\\\" i18n=\\\"@@policy.worksheet.debitcredit.systemgenerated\\\">System Generated</div>\\r\\n<risk-factor [insured]=\\\"insured\\\"></risk-factor>\\r\\n<medication [insured]=\\\"insured\\\"></medication>\\r\\n<medical-condition [insured]=\\\"insured\\\"></medical-condition>\"","import { Component, Injector } from '@angular/core';\r\nimport { ViewModel } from 'life-core/view-model';\r\nimport { ActiveApplicantHelper, ApplicantListHelper } from 'business/policy/shared';\r\nimport { InsuredDTO, PolicyDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\n@Component({\r\n    selector: 'system-generated',\r\n    templateUrl: './system-generated.component.html',\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class SystemGeneratedComponent extends ViewModel {\r\n    public insured: InsuredDTO;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _policy: PolicyDTO;\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        activeApplicantHelper: ActiveApplicantHelper,\r\n        applicantListHelper: ApplicantListHelper\r\n    ) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this._policy = p;\r\n        });\r\n        this._applicantListHelper = applicantListHelper;\r\n\r\n        this.subscriptionTracker.track(\r\n            activeApplicantHelper.activeApplicantIdObservable.subscribe(applicantId => {\r\n                this.setApplicant();\r\n            })\r\n        );\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this.insured = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ComponentsModule } from 'life-core/component/components.module';\r\nimport { SystemGeneratedComponent } from './system-generated.component';\r\nimport { RiskFactorComponent } from './risk-factor/risk-factor.component';\r\nimport { MedicationComponent } from './medication/medication.component';\r\nimport { MedicalConditionComponent } from './medical-condition/medical-condition.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, ComponentsModule],\r\n    declarations: [SystemGeneratedComponent, RiskFactorComponent, MedicationComponent, MedicalConditionComponent],\r\n    exports: [SystemGeneratedComponent]\r\n})\r\nexport class SystemGeneratedModule {}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { MetadataUtil } from 'ls-core/util';\r\nimport { LsCellComparators } from 'ls-core/component/grid';\r\n\r\n@Injectable()\r\nexport class MedicalConditionColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(cellFormatters: CellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Bodily System', id: 'policy.medicalcondition.gridheader.​bodilysystem' }),\r\n            field: MedicalConditionFields.BodilySystem,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Condition', id: 'policy.medicalcondition.gridheader.​condition' }),\r\n            field: MedicalConditionFields.Condition,\r\n            width: 200,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Criteria', id: 'policy.medicalcondition.gridheader.​criteria' }),\r\n            field: MedicalConditionFields.Criteria,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Time', id: 'policy.worksheet.debitcredit.gridheader.time' }),\r\n            field: MedicalConditionFields.TimeOfCriteria,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created By', id: 'policy.medicalcondition.gridheader.​createdby' }),\r\n            field: MedicalConditionFields.AddedBy,\r\n            width: 100,\r\n            valueFormatter: this.getUserName,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created On', id: 'policy.medicalcondition.gridheader.​createdon' }),\r\n            field: MedicalConditionFields.Added,\r\n            width: 100,\r\n            valueFormatter: params => this._cellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({\r\n                value: 'Debit/Credit',\r\n                id: 'policy.worksheet.debitcredit.gridheader.​debitcredit'\r\n            }),\r\n            field: MedicalConditionFields.Points,\r\n            valueFormatter: params => this._cellFormatters.decimalCellFormatter(params, '1.0-0'),\r\n            width: 100\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getUserName(params: any): string {\r\n        if (params.node.data.AddedBy) {\r\n            return MetadataUtil.getItemLabelByCode(params.context.listData.aus_users, params.node.data.AddedBy);\r\n        }\r\n    }\r\n}\r\n\r\nexport const MedicalConditionFields = {\r\n    BodilySystem: 'BodilySystem',\r\n    Condition: 'Condition',\r\n    Criteria: 'Criteria',\r\n    TimeOfCriteria: 'TimeOfCriteria',\r\n    AddedBy: 'AddedBy',\r\n    Added: 'Added',\r\n    Points: 'Points'\r\n};\r\n","module.exports = \"<div class=\\\"lf-solid-bottom-border\\\">\\r\\n    <div class=\\\"lf-grid-title\\\">{{title}}</div>\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{ height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\">\\r\\n    </data-grid>\\r\\n    <lf-form-input [control]=\\\"medicalConditionTotal\\\" label=\\\"Total\\\" i18n-label=\\\"@@policy.medicalcondition.grid.totalconditionpoints\\\"\\r\\n        labelPosition=\\\"left\\\">\\r\\n        <lf-statictext #medicalConditionTotal name=\\\"medicalConditionTotal\\\" [value]=\\\"total | lfDecimal:'1.0-0'\\\"\\r\\n            secureComponent></lf-statictext>\\r\\n    </lf-form-input>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { BaseDebitCreditGridViewModel } from '../../base-debit-credit-grid-view-model';\r\nimport { DebitCreditHelper } from 'business/policy/shared';\r\nimport { MedicalConditionDTO } from 'ls-core/model';\r\nimport { MedicalConditionColumnsBuilder } from './medical-condition-grid-columns.builder';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { RiskFactorSourceType } from '../../';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Component({\r\n    selector: 'medical-condition',\r\n    templateUrl: './medical-condition.component.html',\r\n    providers: [PolicySubscriber, MedicalConditionColumnsBuilder]\r\n})\r\nexport class MedicalConditionComponent extends BaseDebitCreditGridViewModel<MedicalConditionDTO> {\r\n    private _debitCreditHelper: DebitCreditHelper;\r\n    private _gridColumnsBuilder: MedicalConditionColumnsBuilder;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        gridColumnsBuilder: MedicalConditionColumnsBuilder,\r\n        debitCreditHelper: DebitCreditHelper,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n        this._debitCreditHelper = debitCreditHelper;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    protected loadItems(): MedicalConditionDTO[] {\r\n        const data = this._debitCreditHelper.getMedicalConditionGridInfo(\r\n            this.insured,\r\n            RiskFactorSourceType.USER_GENERATED\r\n        );\r\n        this.total = data.Total || 0;\r\n        return data.Records || [];\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: MedicalConditionDTO): Object {\r\n        return data.MedicalConditionId;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'Medical Condition', id: 'policy.worksheet.debitcredit.medicalcondition' });\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns, CellFormatters } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nimport { MetadataUtil } from 'ls-core/util';\r\nimport { LsCellComparators } from 'ls-core/component/grid';\r\n\r\n@Injectable()\r\nexport class MedicationColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _cellFormatters: CellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(cellFormatters: CellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._cellFormatters = cellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Condtion', id: 'policy.medication.gridheader.condition' }),\r\n            field: MedicationFields.Condition,\r\n            width: 100,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Medication', id: 'policy.worksheet.debitcredit.gridheader.medication' }),\r\n            field: MedicationFields.DrugName,\r\n            width: 200,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created By', id: 'policy.medicalcondition.gridheader.​createdby' }),\r\n            field: MedicationFields.AddedBy,\r\n            width: 100,\r\n            valueFormatter: this.getUserName,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created On', id: 'policy.medicalcondition.gridheader.createdon' }),\r\n            field: MedicationFields.Added,\r\n            width: 100,\r\n            valueFormatter: params => this._cellFormatters.dateCellFormatter(params, 'short'),\r\n            comparator: this._lsCellComparators.datetimeComparator,\r\n            autoHeight: true\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Debit/Credit', id: 'policy.worksheet.debitcredit.gridheader.debitcredit' }),\r\n            field: MedicationFields.Points,\r\n            valueFormatter: params => this._cellFormatters.decimalCellFormatter(params, '1.0-0'),\r\n            width: 100\r\n        });\r\n        return this.columns;\r\n    }\r\n\r\n    private getUserName(params: any): string {\r\n        if (params.node.data.AddedBy) {\r\n            return MetadataUtil.getItemLabelByCode(params.context.listData.aus_users, params.node.data.AddedBy);\r\n        }\r\n    }\r\n}\r\n\r\nexport const MedicationFields = {\r\n    Condition: 'Condition',\r\n    DrugName: 'DrugName',\r\n    AddedBy: 'AddedBy',\r\n    Added: 'Added',\r\n    Points: 'Points'\r\n};\r\n","module.exports = \"<div class=\\\"lf-dashed-bottom-border\\\">\\r\\n    <div class=\\\"lf-grid-title\\\">{{title}}</div>\\r\\n    <data-grid #dataGrid [ngStyle]=\\\"{height: gridOptions.height}\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\">\\r\\n    </data-grid>\\r\\n    <lf-form-input [control]=\\\"medicationTotal\\\" label=\\\"Total\\\" i18n-label=\\\"@@policy.medicalcondition.grid.totalconditionpoints\\\"\\r\\n        labelPosition=\\\"left\\\">\\r\\n        <lf-statictext #medicationTotal name=\\\"medicationTotal\\\" [value]=\\\"total | lfDecimal:'1.0-0'\\\" secureComponent></lf-statictext>\\r\\n    </lf-form-input>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\r\nimport { IGridColumnsBuilder } from 'life-core/component/grid';\r\nimport { BaseDebitCreditGridViewModel } from '../../base-debit-credit-grid-view-model';\r\nimport { DebitCreditHelper } from 'business/policy/shared';\r\nimport { MedicationDTO } from 'ls-core/model';\r\nimport { MedicationColumnsBuilder } from './medication-grid-columns.builder';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { RiskFactorSourceType } from '../../';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Component({\r\n    selector: 'medication',\r\n    templateUrl: './medication.component.html',\r\n    providers: [PolicySubscriber, MedicationColumnsBuilder]\r\n})\r\nexport class MedicationComponent extends BaseDebitCreditGridViewModel<MedicationDTO> {\r\n    private _debitCreditHelper: DebitCreditHelper;\r\n\r\n    private _gridColumnsBuilder: MedicationColumnsBuilder;\r\n    constructor(\r\n        injector: Injector,\r\n        gridColumnsBuilder: MedicationColumnsBuilder,\r\n        debitCreditHelper: DebitCreditHelper,\r\n        i18n: I18n\r\n    ) {\r\n        super(injector);\r\n        this._gridColumnsBuilder = gridColumnsBuilder;\r\n        this._debitCreditHelper = debitCreditHelper;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    protected loadItems(): MedicationDTO[] {\r\n        const data = this._debitCreditHelper.getMedicationGridInfo(this.insured, RiskFactorSourceType.USER_GENERATED);\r\n        this.total = data.Total || 0;\r\n        return data.Records || [];\r\n    }\r\n\r\n    protected getGridColumnsBuilder(): IGridColumnsBuilder {\r\n        return this._gridColumnsBuilder;\r\n    }\r\n\r\n    protected getRowNodeId(data: MedicationDTO): number {\r\n        return data.MedicationId;\r\n    }\r\n\r\n    protected setGridTitle(): string {\r\n        return this.i18n({ value: 'Other Medication', id: 'policy.worksheet.debitcredit.othermedication' });\r\n    }\r\n}\r\n","module.exports = \"<div class=\\\"lf-grid-title\\\" i18n=\\\"@@policy.worksheet.debitcredit.usergenerated\\\">User Generated</div>\\r\\n<medication [insured]=\\\"insured\\\"></medication>\\r\\n<medical-condition [insured]=\\\"insured\\\"></medical-condition>\"","import { Component, Injector } from '@angular/core';\r\nimport { ViewModel } from 'life-core/view-model';\r\nimport { ActiveApplicantHelper, ApplicantListHelper } from 'business/policy/shared';\r\nimport { InsuredDTO, PolicyDTO } from 'ls-core/model';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\n\r\n@Component({\r\n    selector: 'user-generated',\r\n    templateUrl: './user-generated.component.html',\r\n    providers: [PolicySubscriber]\r\n})\r\nexport class UserGeneratedComponent extends ViewModel {\r\n    public insured: InsuredDTO;\r\n    private _applicantListHelper: ApplicantListHelper;\r\n    private _policy: PolicyDTO;\r\n    constructor(\r\n        injector: Injector,\r\n        policySubscriber: PolicySubscriber,\r\n        activeApplicantHelper: ActiveApplicantHelper,\r\n        applicantListHelper: ApplicantListHelper\r\n    ) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this._policy = p;\r\n        });\r\n        this._applicantListHelper = applicantListHelper;\r\n\r\n        this.subscriptionTracker.track(\r\n            activeApplicantHelper.activeApplicantIdObservable.subscribe(applicantId => {\r\n                this.setApplicant();\r\n            })\r\n        );\r\n    }\r\n\r\n    private setApplicant(): void {\r\n        this.insured = this._applicantListHelper.getActiveApplicantOrDefault(this._policy.Insureds_LazyLoad);\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { ComponentsModule } from 'life-core/component/components.module';\r\nimport { UserGeneratedComponent } from './user-generated.component';\r\nimport { MedicationComponent } from './medication/medication.component';\r\nimport { MedicalConditionComponent } from './medical-condition/medical-condition.component';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, ComponentsModule],\r\n    declarations: [UserGeneratedComponent, MedicationComponent, MedicalConditionComponent],\r\n    exports: [UserGeneratedComponent]\r\n})\r\nexport class UserGeneratedModule {}\r\n","﻿import { PolicyDTO, InsuredDTO } from 'ls-core/model';\r\n\r\nexport class ReviewMessageDataContext {\r\n    public policy: PolicyDTO;\r\n    public applicant: InsuredDTO;\r\n}","﻿import { IconData } from 'life-core/model';\r\nimport { ReviewMessagesType } from './review-messages-type';\r\nimport { ReviewMessageDataContext } from './review-message-data-context';\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\n\r\nexport class ReviewMessageIconHelper {\r\n    private static REQUIREMENT_REPORT_RECEIVED_CLOSED_DISPOSITION: string = 'R';\r\n\r\n    public static getIcon(message: any, reviewMessagesDataContext: ReviewMessageDataContext): string {\r\n        const iconData = this.getIconData(message, reviewMessagesDataContext);\r\n        return `<div class=\"${iconData.cssClass} grid-cell-icon\"/>`;\r\n    }\r\n\r\n    private static getIconData(message: any, reviewMessagesDataContext: ReviewMessageDataContext): IconData {\r\n        let iconData: IconData;\r\n\r\n        if (this.isRequirementReportReceived(message, reviewMessagesDataContext)) {\r\n            iconData = new IconData(\r\n                'ls-requirement-report-received-message-icon',\r\n                'Requirement Report Received Message'\r\n            );\r\n        } else {\r\n            switch (ConvertUtil.toNumber(message.MessageType)) {\r\n                case ReviewMessagesType.CHECKABLE: {\r\n                    iconData = new IconData('ls-checkable-message-icon', 'Checkable Message');\r\n                    break;\r\n                }\r\n                case ReviewMessagesType.NOT_CHECKABLE: {\r\n                    iconData = new IconData(\r\n                        'ls-requirement-outstanding-message-icon',\r\n                        'Requirement Outstanding Message'\r\n                    );\r\n                    break;\r\n                }\r\n                case ReviewMessagesType.INFO_ONLY:\r\n                case ReviewMessagesType.INFO_PERM: {\r\n                    iconData = message.NoteId\r\n                        ? new IconData(\r\n                              'ls-system-information-message-with-note-icon',\r\n                              'System Information Message with Note'\r\n                          )\r\n                        : new IconData('ls-system-information-message-icon', 'System Information Message');\r\n                    break;\r\n                }\r\n                default: {\r\n                    iconData = new IconData('ls-message-checked-off-icon', 'Message Checked Off');\r\n                }\r\n            }\r\n        }\r\n        return iconData;\r\n    }\r\n\r\n    private static getRequirementReport(message: any, reviewMessagesDataContext: ReviewMessageDataContext): any {\r\n        let requirementReport;\r\n        const applicant = reviewMessagesDataContext.applicant;\r\n\r\n        if (reviewMessagesDataContext.policy.Requirements_LazyLoad) {\r\n            reviewMessagesDataContext.policy.Requirements_LazyLoad.some(requirement => {\r\n                if (\r\n                    requirement.PolicyPersonId == applicant.PolicyPersonId &&\r\n                    requirement.ReviewMessageId == message.ReviewMessageId\r\n                ) {\r\n                    requirementReport = requirement;\r\n                    return true;\r\n                }\r\n                return false;\r\n            });\r\n        }\r\n        return requirementReport;\r\n    }\r\n    public static isRequirementReportReceived(\r\n        message: any,\r\n        reviewMessagesDataContext: ReviewMessageDataContext\r\n    ): boolean {\r\n        const requirementReport = this.getRequirementReport(message, reviewMessagesDataContext);\r\n        return (\r\n            requirementReport &&\r\n            requirementReport.ClosedDisposition == this.REQUIREMENT_REPORT_RECEIVED_CLOSED_DISPOSITION\r\n        );\r\n    }\r\n}\r\n","import { Injectable, SkipSelf, Optional, Injector } from '@angular/core';\r\n\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { TabDefReviewMessages } from 'ui/tabview';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class ReviewMessagesAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n    }\r\n\r\n    protected setup(): void {\r\n        this.authorizationData.defaultLevel = this.getParentAuthorizationLevel(TabDefReviewMessages.name);\r\n    }\r\n}\r\n","import { Injector, Injectable } from '@angular/core';\r\n\r\nimport { DataCollectionNames } from 'ls-core/model';\r\nimport { BasePolicyDataResolver } from 'business/policy/shared';\r\nimport { LazyLoadItemsRequest } from 'ls-core/util';\r\nimport { NTree } from 'ls-core/service/load-bypk';\r\n\r\n@Injectable()\r\nexport class ReviewMessagesDataResolver extends BasePolicyDataResolver {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected loadLazyData(): Promise<any> {\r\n        const request = new LazyLoadItemsRequest();\r\n        request.addLazyLoadItem(this.policy, DataCollectionNames.Insureds, this.getLazyLoadTree());\r\n        return this.lazyDataLoader.load(request);\r\n    }\r\n\r\n    private getLazyLoadTree(): NTree<string> {\r\n        const insuredDTOLoadTree = new NTree<string>(DataCollectionNames.Insureds);\r\n        {\r\n            insuredDTOLoadTree.AddChild(DataCollectionNames.ReviewMessages);\r\n        }\r\n        return insuredDTOLoadTree;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { RowNode } from 'ag-grid-community';\r\n\r\nimport { BaseGridColumnsBuilder, DataGridColumns } from 'life-core/component/grid';\r\nimport { I18n } from 'life-core/i18n';\r\nimport { compare } from 'life-core/util';\r\n\r\nimport { LsCellFormatters, LsCellComparators } from 'ls-core/component/grid';\r\n\r\nimport { ReviewMessageIconHelper } from './review-message-icon.helper';\r\nimport { ReviewMessageDataContext } from './review-message-data-context';\r\n\r\n@Injectable()\r\nexport class ReviewMessagesListColumnsBuilder extends BaseGridColumnsBuilder {\r\n    private _reviewMessageDataContext: ReviewMessageDataContext;\r\n\r\n    private _lsCellFormatters: LsCellFormatters;\r\n    private _lsCellComparators: LsCellComparators;\r\n\r\n    constructor(lsCellFormatters: LsCellFormatters, lsCellComparators: LsCellComparators, i18n: I18n) {\r\n        super();\r\n        this._lsCellFormatters = lsCellFormatters;\r\n        this._lsCellComparators = lsCellComparators;\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public build(): DataGridColumns {\r\n        this.getReviewMessagesGridColumns();\r\n        return this.columns;\r\n    }\r\n\r\n    public setContext(context: ReviewMessageDataContext): void {\r\n        this._reviewMessageDataContext = context;\r\n    }\r\n\r\n    private getReviewMessagesGridColumns(): void {\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Type', id: 'policy.worksheet.reviewmsg.gridheader.type' }),\r\n            field: ReviewMessageGridFields.MessageType,\r\n            cellRenderer: this.getIcon,\r\n            cellRendererParams: { reviewMessagesDataContext: this._reviewMessageDataContext },\r\n            minWidth: 70,\r\n            maxWidth: 70,\r\n            comparator: (messageType1: any, messageType2: any, node1: RowNode, node2: RowNode): number => {\r\n                return this.compareMessageType(messageType1, messageType2, node1, node2);\r\n            }\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Message', id: 'policy.worksheet.reviewmsg.gridheader.message' }),\r\n            field: ReviewMessageGridFields.Message,\r\n            valueFormatter: this.addCommentToReviewMessages,\r\n            suppressSorting: true, \r\n            tooltipField: ReviewMessageGridFields.Message\r\n        });\r\n        this.addColumn({\r\n            headerName: this.i18n({ value: 'Created On', id: 'policy.worksheet.reviewmsg.gridheader.dateadded' }),\r\n            field: ReviewMessageGridFields.AddedDate,\r\n            valueFormatter: this._lsCellFormatters.dateCellFormatter,\r\n            minWidth: 110,\r\n            maxWidth: 110,\r\n            comparator: this._lsCellComparators.datetimeComparator\r\n        });\r\n    }\r\n\r\n    private getIcon(params: any): string {\r\n        return ReviewMessageIconHelper.getIcon(params.data, params.reviewMessagesDataContext);\r\n    }\r\n\r\n    private addCommentToReviewMessages(params: any): string {\r\n        return params.node.data.ReviewMessageComment && params.node.data.ReviewMessageComment != ''\r\n            ? `${params.value} <br /> Comment: ${params.node.data.ReviewMessageComment}`\r\n            : params.value;\r\n    }\r\n\r\n    private compareMessageType(messageType1: any, messageType2: any, node1: RowNode, node2: RowNode): number {\r\n        let reviewMessageType1: number;\r\n        let reviewMessageType2: number;\r\n        const messageTypeCase = this.setMessageTypeCase(messageType1, messageType2);\r\n        switch (messageTypeCase) {\r\n            case MessageTypeNumber.ONE: {\r\n                reviewMessageType1 = this.setReviewMessageType(node1.data, this._reviewMessageDataContext);\r\n                reviewMessageType2 = this.setReviewMessageType(node2.data, this._reviewMessageDataContext);\r\n                break;\r\n            }\r\n            case MessageTypeNumber.TWO: {\r\n                reviewMessageType1 = node1.data.NoteId !== null ? MessageTypeNumber.ONE : MessageTypeNumber.ZERO;\r\n                reviewMessageType2 = node2.data.NoteId !== null ? MessageTypeNumber.ONE : MessageTypeNumber.ZERO;\r\n                break;\r\n            }\r\n            case MessageTypeNumber.THREE: {\r\n                reviewMessageType1 = compare(messageType1, messageType2);\r\n                reviewMessageType2 = compare(messageType2, messageType1);\r\n                break;\r\n            }\r\n        }\r\n\r\n        return compare(reviewMessageType1, reviewMessageType2);\r\n    }\r\n\r\n    private setMessageTypeCase(messageType1: string, messageType2: string): number {\r\n        return messageType1 === '1' && messageType2 === '1'\r\n            ? MessageTypeNumber.ONE\r\n            : (messageType1 === '2' && messageType2 === '2') ||\r\n              (messageType1 === '3' && messageType2 === '3') ||\r\n              (messageType1 === '2' && messageType2 === '3') ||\r\n              (messageType1 === '3' && messageType2 === '2')\r\n            ? MessageTypeNumber.TWO\r\n            : MessageTypeNumber.THREE;\r\n    }\r\n\r\n    private setReviewMessageType(nodeData: any, reviewMessageDataContext: ReviewMessageDataContext): number {\r\n        return ReviewMessageIconHelper.isRequirementReportReceived(nodeData, reviewMessageDataContext)\r\n            ? MessageTypeNumber.ONE\r\n            : MessageTypeNumber.ZERO;\r\n    }\r\n}\r\n\r\nconst ReviewMessageGridFields = {\r\n    Message: 'Message',\r\n    AddedDate: 'AddedDate',\r\n    MessageType: 'MessageType'\r\n};\r\n\r\nconst MessageTypeNumber = {\r\n    ZERO: 0,\r\n    ONE: 1,\r\n    TWO: 2,\r\n    THREE: 3\r\n};\r\n","module.exports = \".pt-24 {\\r\\n    padding-top: 24px;\\r\\n}\\r\\n.rm-dropdown {\\r\\n    width: 200px;\\r\\n}\\r\\n.rm-grid-width {\\r\\n    width: 100%;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9saWZlc3VpdGUtYXBwL2J1c2luZXNzL3BvbGljeS93b3Jrc2hlZXQvcmV2aWV3LW1lc3NhZ2VzL3Jldmlldy1tZXNzYWdlcy5jb21wb25lbnQuY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0lBQ0ksa0JBQWtCO0NBQ3JCO0FBQ0Q7SUFDSSxhQUFhO0NBQ2hCO0FBRUQ7SUFDSSxZQUFZO0NBQ2YiLCJmaWxlIjoic3JjL2xpZmVzdWl0ZS1hcHAvYnVzaW5lc3MvcG9saWN5L3dvcmtzaGVldC9yZXZpZXctbWVzc2FnZXMvcmV2aWV3LW1lc3NhZ2VzLmNvbXBvbmVudC5jc3MiLCJzb3VyY2VzQ29udGVudCI6WyIucHQtMjQge1xyXG4gICAgcGFkZGluZy10b3A6IDI0cHg7XHJcbn1cclxuLnJtLWRyb3Bkb3duIHtcclxuICAgIHdpZHRoOiAyMDBweDtcclxufVxyXG5cclxuLnJtLWdyaWQtd2lkdGgge1xyXG4gICAgd2lkdGg6IDEwMCU7XHJcbn1cclxuIl19 */\"","module.exports = \"<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-9\\\">\\r\\n\\t\\t<lf-form-input [control]=\\\"applicantList\\\" label=\\\"Applicant\\\" i18n-label=\\\"@@policy.notes.label.applicant\\\">\\r\\n\\t\\t\\t<!-- Use 'ngModelOption.standalone' to not add this control to NgForm to avoid saving data when applicant selection changes -->\\r\\n\\t\\t\\t<lf-select class=\\\"rm-dropdown\\\" #applicantList name=\\\"applicantList\\\" [(ngModel)]=\\\"selectedApplicantId\\\" [ngModelOptions]=\\\"{standalone: true}\\\"\\r\\n\\t\\t\\t [items]=\\\"applicantListOptions\\\" (change)=\\\"onApplicantChange($event)\\\" [clearable]=\\\"false\\\"\\r\\n\\t\\t\\t [actionType]=\\\"applicantDropdownActionType\\\" secureComponent></lf-select>\\r\\n\\t\\t</lf-form-input>\\r\\n\\t</div>\\r\\n\\t<div class=\\\"col-3\\\">\\r\\n\\t\\t<div class=\\\"row justify-content-end from-group pt-24\\\">\\r\\n\\t\\t\\t\\t<lf-button id=\\\"openMessageButton\\\" name=\\\"openMessageButton\\\" label=\\\"Open\\\" i18n-label=\\\"@@general.button.label.open\\\"\\r\\n\\t\\t\\t\\t(onClick)=\\\"openMessage($event)\\\" styleClass=\\\"btn btn-primary\\\" [disabled]=\\\"isOpenButtonDisabled\\\" secureComponent></lf-button>\\r\\n\\t\\t</div>\\r\\n\\t</div>\\r\\n</div>\\r\\n<div class=\\\"row\\\">\\r\\n\\t<div class=\\\"col-12 pl-0 pr-0\\\" >\\r\\n\\t\\t<data-grid #dataGrid class=\\\"rm-grid-width\\\" [gridOptions]=\\\"gridOptions\\\" (rowClicked)=\\\"onRowClicked($event)\\\"\\r\\n\\t\\t (rowDoubleClicked)=\\\"onRowDoubleClicked($event)\\\">\\r\\n\\t\\t</data-grid>\\r\\n\\t\\t<data-grid-status-bar [rowCount]=\\\"rowCount\\\"></data-grid-status-bar>\\r\\n\\t</div>\\r\\n</div>\"","import { Component, Injector } from '@angular/core';\n\nimport {\n    IDataGridOptions,\n    DataGridColumns,\n    IDataGridViewModel,\n    DataGridOptionsUtil,\n    DataGridCommonOptions\n} from 'life-core/component/grid';\nimport { SecondaryTabHostViewModel } from 'life-core/component/layout/tabview';\nimport { ListItem } from 'life-core/model';\nimport { TabStateValueAccessor } from 'life-core/util/tab-state/tab-state-value.accessor';\nimport { AuthorizationProvider } from 'life-core/authorization';\nimport { LfSplitPaneChannels, SplitPaneResult } from 'life-core/component/layout/split';\nimport { TabStateManager } from 'life-core/util/tab-state';\nimport { DropdownActionType } from 'life-core/component/input';\n\nimport { PolicySubscriber } from 'ls-core/session';\nimport { PolicyDTO, InsuredDTO, ReviewMessageDTO } from 'ls-core/model';\n\nimport { TabPolicySplitPaneAreas } from 'business/policy/tab';\nimport { LogPerformanceDelegate } from 'business/policy/shared/log-performance/log-performance.delegate';\nimport { ReviewMessagesAuthorizationProvider } from './review-messages-authorization.provider';\nimport { TabWorksheetDataKeys } from 'business/policy/worksheet/tab-worksheet-data-keys';\nimport { ReviewMessageDataContext } from './review-message-data-context';\nimport { ReviewMessagesListColumnsBuilder } from './review-messages-list-columns.builder';\nimport { ActiveApplicantHelper, ApplicantHelper } from 'business/policy/shared';\n\n@Component({\n    selector: 'review-messages',\n    templateUrl: './review-messages.component.html',\n    styleUrls: ['./review-messages.component.css'],\n    providers: [\n        PolicySubscriber,\n        ReviewMessagesListColumnsBuilder,\n        { provide: AuthorizationProvider, useClass: ReviewMessagesAuthorizationProvider }\n    ]\n})\nexport class ReviewMessagesComponent extends SecondaryTabHostViewModel implements IDataGridViewModel {\n    public gridOptions: IDataGridOptions;\n    public applicantListOptions: Array<ListItem>;\n    public selectedApplicantId: number;\n    public isOpenButtonDisabled: boolean;\n    public rowCount: number;\n    public applicantDropdownActionType: DropdownActionType = DropdownActionType.Presentation;\n\n    private _policy: PolicyDTO;\n    private _activeApplicantHelper: ActiveApplicantHelper;\n    private _activeReviewMessage: ReviewMessageDTO;\n    private _gridColumnsBuilder: ReviewMessagesListColumnsBuilder;\n    private _logPerformanceDelegate: LogPerformanceDelegate;\n    private _performanceDataAlreadyLogged: boolean;\n    private _performanceMetricValueAccessor: TabStateValueAccessor<boolean>;\n\n    constructor(\n        injector: Injector,\n        policySubscriber: PolicySubscriber,\n        logPerformanceDelegate: LogPerformanceDelegate,\n        tabStateManager: TabStateManager,\n        activeApplicantHelper: ActiveApplicantHelper,\n        reviewMessagesListColumnsBuilder: ReviewMessagesListColumnsBuilder\n    ) {\n        super(injector);\n        policySubscriber.subscribe(this, p => {\n            this._policy = p;\n            this.refreshGrid();\n        });\n        this.applicantListOptions = new Array<ListItem>();\n        this._activeApplicantHelper = activeApplicantHelper;\n        this._gridColumnsBuilder = reviewMessagesListColumnsBuilder;\n        this.isOpenButtonDisabled = true;\n        this._logPerformanceDelegate = logPerformanceDelegate;\n        this.createStateValueAccessors(tabStateManager);\n        this.initSubscribers();\n        this._performanceDataAlreadyLogged = false;\n    }\n\n    private createStateValueAccessors(tabStateManager: TabStateManager): void {\n        this._performanceMetricValueAccessor = new TabStateValueAccessor<boolean>(\n            tabStateManager,\n            TabWorksheetDataKeys.REVIEW_MESSAGES\n        );\n    }\n\n    private initSubscribers(): void {\n        this.subscriptionTracker.track(\n            this.messagingService.subscribe(LfSplitPaneChannels.RemoveSplitPaneArea, splitPaneResult => {\n                this.onNoteSplitPaneClose(splitPaneResult);\n            })\n        );\n        this.trackSubscription(\n            this._activeApplicantHelper.activeApplicantIdObservable.subscribe(activeApplicantId => {\n                this.setActiveApplicant(activeApplicantId);\n            })\n        );\n    }\n\n    private onNoteSplitPaneClose(splitPaneResult: SplitPaneResult): void {\n        if (splitPaneResult.areaId == TabPolicySplitPaneAreas.AddReviewMessageNote) {\n            this.refreshGrid();\n        }\n    }\n\n    private setActiveApplicant(activeApplicantId: number): void {\n        if (activeApplicantId == null) {\n            const insured: any = this._policy.Insureds_LazyLoad.find(n => !!n.PrimaryInsuredFlag);\n            this.selectedApplicantId = insured ? insured.PersonId : this._policy.Insureds_LazyLoad[0].PersonId;\n            this._activeApplicantHelper.setActiveApplicantId(this.selectedApplicantId);\n        } else {\n            if (this.selectedApplicantId != activeApplicantId) {\n                this.selectedApplicantId = activeApplicantId;\n            }\n        }\n        this.filterReviewMessages();\n    }\n\n    public loadData(): Promise<void> {\n        this.setResolvedMetaData();\n        this.restorePerformanceMetricFlag();\n        this.loadApplicantList();\n        this.gridOptions = this.getGridOptions();\n        this.logPerformance();\n        return Promise.resolve(null);\n    }\n\n    private restorePerformanceMetricFlag(): void {\n        this._performanceDataAlreadyLogged = this._performanceMetricValueAccessor.hasValue()\n            ? this._performanceMetricValueAccessor.getValue()\n            : false;\n    }\n\n    private logPerformance(): void {\n        if (!this._performanceDataAlreadyLogged) {\n            this._logPerformanceDelegate.log(false, this._policy.PolicyNumber, 'caseOpen');\n            this._performanceDataAlreadyLogged = true;\n        }\n    }\n\n    public ngOnDestroy(): void {\n        this._performanceMetricValueAccessor.setValue(this._performanceDataAlreadyLogged);\n        super.ngOnDestroy();\n    }\n\n    public setupData(): void {\n        this.setRowCount();\n    }\n\n    public getGridOptions(): IDataGridOptions {\n        const gridColumns: DataGridColumns = this.getGridColumns();\n        return DataGridOptionsUtil.getGridOptions(\n            {\n                columnDefs: gridColumns.getLayout(),\n                rowData: this.getRowData(),\n                rowSelection: 'single',\n                rowDeselection: true,\n                enableColResize: true,\n                enableSorting: true,\n                domLayout: 'autoHeight',\n                showTotal: false,\n                getRowHeight: this.getRowHeight\n            },\n            DataGridCommonOptions\n        );\n    }\n\n    public getGridColumns(): DataGridColumns {\n        const reviewMessagesDataContext = new ReviewMessageDataContext();\n        reviewMessagesDataContext.policy = this._policy;\n        reviewMessagesDataContext.applicant = this._policy.Insureds_LazyLoad[0];\n        this._gridColumnsBuilder.setContext(reviewMessagesDataContext);\n        return this._gridColumnsBuilder.build();\n    }\n\n    public onRowClicked($event: any): void {\n        this.isOpenButtonDisabled = false;\n        this._activeReviewMessage = this.getReviewMessageFromPolicy($event);\n    }\n\n    private getReviewMessageFromPolicy($event: any): ReviewMessageDTO {\n        // need to retrieve this from policy as after every note is added, the policy is getting saved and need to get the note from updated policy object\n        return this._policy.Insureds_LazyLoad.find(\n            applicant => applicant.PersonId == this.selectedApplicantId\n        ).ReviewMessages_LazyLoad.find(message => message.ReviewMessageId == $event.node.data.ReviewMessageId);\n    }\n\n    public onRowDoubleClicked($event: any): void {\n        this.isOpenButtonDisabled = false;\n        this.onRowClicked($event);\n        this.openMessage($event.node.data);\n    }\n\n    public onApplicantChange(selectedApplicant: any): void {\n        this._activeApplicantHelper.setActiveApplicantId(selectedApplicant.value);\n        this.selectedApplicantId = selectedApplicant.value;\n        this.filterReviewMessages();\n    }\n\n    private filterReviewMessages(): void {\n        this.refreshGrid();\n        this.setRowCount();\n    }\n\n    public openMessage(selectedReviewMessage: any): void {\n        this.messagingService.publish(LfSplitPaneChannels.AddSplitPaneArea, {\n            areaId: TabPolicySplitPaneAreas.AddReviewMessageNote,\n            context: { reviewMessage: this._activeReviewMessage, parentNote: this._activeReviewMessage.reviewNote }\n        });\n    }\n\n    private loadApplicantList(): void {\n        if (this._policy.Insureds_LazyLoad) {\n            this._bindInsuredsToApplicantList();\n        }\n    }\n\n    private _bindInsuredsToApplicantList(): void {\n        let applicantName: string;\n        this._policy.Insureds_LazyLoad.forEach(applicant => {\n            applicantName = ApplicantHelper.getApplicantFullName(applicant);\n            this.applicantListOptions.push(new ListItem(applicantName, applicant.PersonId.toString()));\n        });\n    }\n\n    private getRowData(): any {\n        return this.getReviewMessages();\n    }\n\n    private refreshGrid(): void {\n        if (this.gridOptions) {\n            this.gridOptions.api.setRowData(this.getRowData());\n        }\n    }\n\n    private getReviewMessages(): Array<ReviewMessageDTO> {\n        const selectedApplicant = this.getSelectedApplicant();\n        const sortCompareFunction = this.getSortFunction(selectedApplicant.ReviewMessages_LazyLoad);\n        return selectedApplicant ? selectedApplicant.ReviewMessages_LazyLoad.sort(sortCompareFunction) : [];\n    }\n\n    private getSortFunction<ReviewMessageDTO>(\n        reviewMessages: Array<ReviewMessageDTO>\n    ): (a: ReviewMessageDTO, b: ReviewMessageDTO) => number {\n        return function sortFunc(a: ReviewMessageDTO, b: ReviewMessageDTO): number {\n            return parseInt(a['MessageType']) - parseInt(b['MessageType']);\n        };\n    }\n\n    private getSelectedApplicant(): InsuredDTO {\n        return this._policy.Insureds_LazyLoad.find(insured => insured.PersonId == this.selectedApplicantId);\n    }\n\n    private setRowCount(): void {\n        if (this.gridOptions) {\n            this.rowCount = this.gridOptions.api.getModel().getRowCount();\n        }\n    }\n\n    private getRowHeight(params: any): number {\n        return params.data.ReviewMessageComment && params.data.ReviewMessageComment !== ''\n            ? RowHeight.Medium\n            : RowHeight.Small;\n    }\n}\n\nconst RowHeight = {\n    Small: 30,\n    Medium: 50\n};\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { ReviewMessagesComponent } from './review-messages.component';\r\nimport { ReviewMessagesDataResolver } from './review-messages-data.resolver';\r\n\r\n@NgModule({\r\n    imports: [CommonModule, FormsModule, LsComponentsModule],\r\n    declarations: [ReviewMessagesComponent],\r\n    providers: [ReviewMessagesDataResolver]\r\n})\r\nexport class ReviewMessagesModule {}\r\n","export const TabWorksheetDataKeys = {\r\n    REVIEW_MESSAGES: 'review_messages',\r\n    REVIEW_MESSAGE_SELECTION: 'review-message-selection'\r\n};\r\n","module.exports = \"<div class=\\\"lf-page-header\\\" i18n=\\\"@@policy.worksheet.title\\\">Worksheet</div>\\r\\n<lf-routedTabView id=\\\"tabViewWorksheet\\\" tabViewType=\\\"secondary\\\" [tabs]=\\\"tabsData$\\\" [initialSelectedIndex]=\\\"initialSelectedIndex$\\\"\\r\\n controlClose=\\\"true\\\" (onClose)=\\\"onTabClose($event)\\\" (onChange)=\\\"onTabSelectionChange($event)\\\">\\r\\n\\r\\n\\t<router-outlet></router-outlet>\\r\\n\\r\\n</lf-routedTabView>\"","﻿import { Component, Injector } from '@angular/core';\r\n\r\nimport { TabDescriptor, SecondaryTabViewHostViewModel } from 'life-core/component/layout/tabview';\r\nimport { ConvertUtil } from 'life-core/util/lang';\r\nimport { AuthorizationProvider } from 'life-core/authorization';\r\n\r\nimport { SavePolicyDataDelegate } from 'ls-core/service';\r\nimport { PolicySubscriber } from 'ls-core/session';\r\nimport { PolicyDTO } from 'ls-core/model';\r\nimport { WorksheetAuthorizationProvider } from './wosksheet-authorization.provider';\r\nimport { LsTabDescriptorFactory } from 'ui/tabview';\r\n\r\n@Component({\r\n    selector: 'worksheet',\r\n    templateUrl: './tabview-worksheet.component.html',\r\n    providers: [PolicySubscriber, { provide: AuthorizationProvider, useClass: WorksheetAuthorizationProvider }]\r\n})\r\nexport class TabViewWorksheetComponent extends SecondaryTabViewHostViewModel {\r\n    protected policy: PolicyDTO;\r\n\r\n    constructor(injector: Injector, policySubscriber: PolicySubscriber) {\r\n        super(injector);\r\n        policySubscriber.subscribe(this, p => {\r\n            this.policy = p;\r\n        });\r\n    }\r\n\r\n    protected get tabViewId(): string {\r\n        return `worksheet-${this.policy.PolicyId}`;\r\n    }\r\n\r\n    protected getStaticTabs(): TabDescriptor[] {\r\n        const policyId = ConvertUtil.toNumber(this.policy.PolicyId);\r\n        const tabDescriptorFactory = this.tabDescriptorFactory as LsTabDescriptorFactory;\r\n        const tabCaseDisp = tabDescriptorFactory.createSecondaryTabDescriptorCaseDesp(policyId);\r\n        const tabReviewMessages = tabDescriptorFactory.createSecondaryTabDescriptorReviewMessages(policyId);\r\n        const tabDebitCredit = tabDescriptorFactory.createSecondaryTabDescriptorDebitCredit(policyId);\r\n        const tabs = [tabCaseDisp, tabReviewMessages, tabDebitCredit];\r\n        tabReviewMessages.selected = true;\r\n        return tabs;\r\n    }\r\n\r\n    protected getDataToSave(): PolicyDTO {\r\n        return this.policy;\r\n    }\r\n\r\n    protected getSaveDataDelegate(): SavePolicyDataDelegate {\r\n        return this.injector.get(SavePolicyDataDelegate);\r\n    }\r\n}\r\n","import { Injectable, Injector, SkipSelf, Optional } from '@angular/core';\r\n\r\nimport { AuthorizationProvider, AuthorizationService } from 'life-core/authorization';\r\n\r\nimport { SubsystemType, PrivilegeObjectType, PrivilegeType } from 'ls-core/authorization';\r\n\r\nimport { TabDefCaseDisposition, TabDefReviewMessages, TabDefDebitCredit } from 'ui/tabview';\r\n\r\nimport { BaseCaseAuthorizationProvider } from 'business/policy/shared/authorization';\r\n\r\n@Injectable()\r\nexport class WorksheetAuthorizationProvider extends BaseCaseAuthorizationProvider {\r\n    private _authorizationService: AuthorizationService;\r\n\r\n    constructor(\r\n        injector: Injector,\r\n        @SkipSelf()\r\n        @Optional()\r\n        parentAuthProvider: AuthorizationProvider,\r\n        authorizationService: AuthorizationService\r\n    ) {\r\n        super(injector, parentAuthProvider);\r\n        this._authorizationService = authorizationService;\r\n    }\r\n\r\n    protected setup(): void {\r\n        const tabCaseDispositionAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.WORKSHEET]\r\n        );\r\n\r\n        const tabReviewMessagesAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.REVIEWMESSAGECM, PrivilegeType.REVIEWMESSAGEUW]\r\n        );\r\n\r\n        const tabDebitCreditAuthorizationLevel = this._authorizationService.getObjectAuthorizationLevel(\r\n            SubsystemType.UWDESKTOP,\r\n            PrivilegeObjectType.Policy,\r\n            this.policy,\r\n            [PrivilegeType.DEBITCREDIT]\r\n        );\r\n\r\n        this.authorizationData.componentLevel[TabDefCaseDisposition.name] = tabCaseDispositionAuthorizationLevel;\r\n        this.authorizationData.componentLevel[TabDefReviewMessages.name] = tabReviewMessagesAuthorizationLevel;\r\n        this.authorizationData.componentLevel[TabDefDebitCredit.name] = tabDebitCreditAuthorizationLevel;\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule } from '@angular/forms';\r\n\r\nimport { LsComponentsModule } from 'ls-core/component/ls-components.module';\r\n\r\nimport { TabViewWorksheetComponent } from './tab/tabview-worksheet.component';\r\nimport { CaseDispositionModule } from './case-disp/case-disp.module';\r\nimport { ReviewMessagesModule } from './review-messages/review-messages.module';\r\nimport { DebitCreditModule } from './debit-credit/debit-credit.module';\r\n\r\n@NgModule({\r\n    imports: [\r\n        CommonModule,\r\n        FormsModule,\r\n        LsComponentsModule,\r\n        CaseDispositionModule,\r\n        ReviewMessagesModule,\r\n        DebitCreditModule\r\n    ],\r\n    declarations: [TabViewWorksheetComponent],\r\n    providers: []\r\n})\r\nexport class WorksheetModule {}\r\n","﻿export * from './app-master-button';\r\nexport * from './app-master-button-labels';\r\n","export * from './toolbar.service';\r\nexport * from './toolbar-type';\r\nexport * from './toolbar-button-type';\r\nexport * from './toolbar-button-action';\r\nexport * from './toolbar-setup.delegate';\r\nexport * from './popover-dialog-params.map';\r\n","import { DialogButton, DialogButtonType } from 'life-core/component';\r\nimport { ViewValidationDialog } from 'life-core/view-model';\r\nimport { ToolbarPopoverDialogParamsMapType } from 'life-core/component/toolbar';\r\n\r\nimport { ToolbarPopoverDialogIds } from 'ls-core/component/toolbar';\r\n\r\nimport { ToolBarButtonType } from './toolbar-button-type';\r\n\r\nexport const lsPopoverDialogParamsMap: ToolbarPopoverDialogParamsMapType = {\r\n    [ToolBarButtonType.VALIDATE]: {\r\n        id: ToolbarPopoverDialogIds.VALIDATION,\r\n        content: ViewValidationDialog,\r\n        title: 'Validation Errors',\r\n        triggers: 'manual',\r\n        buttons: [new DialogButton({ type: DialogButtonType.OK })],\r\n        autoClose: false\r\n    }\r\n};\r\n","export const ToolBarButtonAction = {\r\n    VALIDATE: 'doValidate',\r\n    SAVE: 'doSave',\r\n    SAVE_REFRESH: 'doSaveRefresh',\r\n    HELP: 'doHelp',\r\n    FAVORITES: 'doFavorites',\r\n    FAVORITES_ICON: 'iconFavorites'\r\n};\r\n","export const ToolBarButtonType = {\r\n    SAVE: 'save',\r\n    REFRESH: 'refresh',\r\n    FAVORITES: 'favorites',\r\n    HELP: 'help',\r\n    VALIDATE: 'validate'\r\n};\r\n","import { Injectable, Type } from '@angular/core';\r\n\r\nimport {\r\n    ToolbarButton,\r\n    ToolBarElement,\r\n    ToolBarButtonData,\r\n    ToolBarDropdownData,\r\n    ToolBarSeparator,\r\n    ToolBarButtonFactory\r\n} from 'life-core/component/toolbar';\r\n\r\ntype ToolBarButtonTypeMap = Map<string, Type<ToolBarElement>>;\r\nconst ToolBarButtonTypeMap: ToolBarButtonTypeMap = new Map<string, Type<ToolBarElement>>();\r\nToolBarButtonTypeMap.set('life.common.toolBar.ToolBarButtonData, UICommon', ToolBarButtonData);\r\nToolBarButtonTypeMap.set('life.common.toolBar.ToolBarDropdownData, UICommon', ToolBarDropdownData);\r\nToolBarButtonTypeMap.set('life.common.toolBar.ToolBarSeparator, UICommon', ToolBarSeparator);\r\n\r\n@Injectable()\r\nexport class ToolBarSetupDelegate {\r\n    private _toolBarButtonFactory: ToolBarButtonFactory;\r\n    constructor(toolBarButtonFactory: ToolBarButtonFactory) {\r\n        this._toolBarButtonFactory = toolBarButtonFactory;\r\n    }\r\n\r\n    public setup(\r\n        linkItems: ToolBarElement[],\r\n        toolBarButtonClickHandler: (\r\n            {\r\n                action,\r\n                event,\r\n                labelValue\r\n            }: {\r\n                action: string;\r\n                event?: Event;\r\n                labelValue?: string;\r\n            }\r\n        ) => void\r\n    ): ToolbarButton[] {\r\n        const toolbarButtons: ToolbarButton[] = [];\r\n        linkItems.forEach((toolBarItem: ToolBarElement) => {\r\n            const toolBarButton = this._toolBarButtonFactory.newItem(\r\n                toolBarItem,\r\n                this.isSplitButton(toolBarItem),\r\n                toolBarButtonClickHandler\r\n            );\r\n            toolbarButtons.push(toolBarButton);\r\n        });\r\n        return toolbarButtons;\r\n    }\r\n\r\n    private isSplitButton(toolBarItem: ToolBarElement): boolean {\r\n        return ToolBarButtonTypeMap.get(toolBarItem['$type']) === ToolBarDropdownData;\r\n    }\r\n}\r\n","export enum ToolBarType {\r\n    HOME = 'home',\r\n    POLICY = 'policy',\r\n    REASSIGN_CASE = 'reassignCase',\r\n    SEARCH_CASE = 'searchCase'\r\n}\r\n","import { Injectable } from '@angular/core';\r\n\r\nimport { DataServiceParams, UIServiceNames, UIServiceMethods, DataService } from 'ls-core/service';\r\nimport { ToolBarKey, ToolBarElement } from 'life-core/component/toolbar';\r\n\r\n@Injectable()\r\nexport class ToolBarService {\r\n    private _dataService: DataService;\r\n    constructor(dataService: DataService) {\r\n        this._dataService = dataService;\r\n    }\r\n\r\n    public loadToolBar(toolBarKey: ToolBarKey): Promise<ToolBarElement[]> {\r\n        const serviceParams: DataServiceParams = this.getServiceParams(toolBarKey);\r\n        return this._dataService.getData(serviceParams).then(response => {\r\n            return response.responsePayload ? (response.responsePayload as ToolBarElement[]) : [];\r\n        });\r\n    }\r\n\r\n    private getServiceParams(toolBarKey: ToolBarKey): DataServiceParams {\r\n        return new DataServiceParams({\r\n            serviceInterface: UIServiceNames.TOOLBAR,\r\n            serviceMethod: UIServiceMethods.LOAD_DATA,\r\n            requestPayload: this.buildRequestPayload(toolBarKey)\r\n        });\r\n    }\r\n\r\n    private buildRequestPayload(toolBarKey: ToolBarKey): ToolBarRequest {\r\n        const request = new ToolBarRequest();\r\n        request.toolBarType = toolBarKey.toolBarName;\r\n        request.objectID = toolBarKey.objectId;\r\n        return request;\r\n    }\r\n}\r\n\r\nclass ToolBarRequest {\r\n    public readonly $type: string = 'life.common.ToolBarRequest, UICommon';\r\n    public toolBarType: string;\r\n    public objectID: string;\r\n}\r\n","﻿export * from './optional-section';\r\nexport * from './model/optional-section-button';\r\nexport * from './model/optional-section-button-labels';\r\nexport * from './view-model/optional-section.vm';\r\nexport * from './view-model/optional-section-detail.vm';\r\n","﻿import { Injector } from '@angular/core';\r\n\r\nimport { ViewModel } from 'life-core/view-model';\r\nimport { ICompose } from 'life-core/component/compose';\r\n\r\nexport abstract class OptionalSectionDetailViewModel extends ViewModel implements ICompose {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    public setModel(model: any): void {\r\n        this.data = model;\r\n    }\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\n@Injectable({\r\n    providedIn: 'root'\r\n})\r\nexport class OptionalSectionViewModelResources {\r\n    public deleteMessage: string;\r\n    protected i18n: I18n;\r\n\r\n    constructor(i18n: I18n) {\r\n        this.i18n = i18n;\r\n    }\r\n\r\n    public getCreateItemDialogTitle(dialogTitle: string): string {\r\n        return this.i18n(\r\n            { value: 'Add {{title}}', id: 'component.masterdetail.dialog.createitem.title' },\r\n            { title: dialogTitle }\r\n        );\r\n    }\r\n\r\n    public getDeleteItemDialogTitle(dialogTitle: string): string {\r\n        return this.i18n(\r\n            { value: 'Delete {{title}} Confirmation', id: 'component.masterdetail.dialog.deleteitem.title' },\r\n            { title: dialogTitle }\r\n        );\r\n    }\r\n\r\n    public getDeleteItemConfirmMessage(): string {\r\n        return this.i18n({\r\n            value: 'Are you sure you want to delete the selected item?',\r\n            id: 'general.dialog.delete.message'\r\n        });\r\n    }\r\n}\r\n","﻿import { Injector, Type } from '@angular/core';\r\n\r\nimport { ConfirmDialog, DialogButton, DialogButtonType, DialogResult } from 'life-core/component/dialog';\r\nimport { ViewModel } from 'life-core/view-model';\r\nimport { OptionalSectionViewModelResources } from 'life-core/component/optional-section/view-model/optional-section.rc';\r\nimport { I18n } from 'life-core/i18n';\r\n\r\nexport abstract class OptionalSectionViewModel<TItem> extends ViewModel {\r\n    public dataExists: boolean;\r\n\r\n    public item: TItem;\r\n\r\n    public itemComponentType: Type<any>;\r\n\r\n    public title: string;\r\n\r\n    protected confirmDialog: ConfirmDialog;\r\n\r\n    protected optionalSectionViewModelResources: OptionalSectionViewModelResources;\r\n\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n        this.i18n = injector.get(I18n);\r\n        this.confirmDialog = injector.get(ConfirmDialog);\r\n        this.optionalSectionViewModelResources = injector.get(OptionalSectionViewModelResources);\r\n        this.title = this.getTitle();\r\n    }\r\n\r\n    protected updateProperties(): void {\r\n        this.item = this.getItem();\r\n        this.itemComponentType = this.item ? this.getItemComponentType() : null;\r\n        this.dataExists = !!this.item;\r\n    }\r\n\r\n    protected abstract getItem(): TItem;\r\n\r\n    protected abstract getItemComponentType(): Type<any>;\r\n\r\n    public createItem(): void {\r\n        this.executeCreateItem();\r\n        this.changeManager.setIsDirty(true);\r\n        this.updateProperties();\r\n    }\r\n\r\n    protected abstract executeCreateItem(): void;\r\n\r\n    public removeItem(): void {\r\n        this.confirmDelete().then(result => {\r\n            const isRemoved = result.buttonId == DialogButtonType.OK;\r\n            if (isRemoved) {\r\n                this.dataExists = false;\r\n                this.updateDeletedObjectArray(this.getItem());\r\n                this.executeRemoveItem();\r\n                this.updateProperties();\r\n            }\r\n        });\r\n    }\r\n\r\n    protected confirmDelete(): Promise<DialogResult> {\r\n        return this.confirmDialog.open({\r\n            title: this.getDeleteDialogTitle(),\r\n            message: this.getDeleteDialogMessage(),\r\n            buttons: [\r\n                new DialogButton({ type: DialogButtonType.OK }),\r\n                new DialogButton({ type: DialogButtonType.CANCEL, options: { isDefault: true } })\r\n            ]\r\n        });\r\n    }\r\n\r\n    protected updateDeletedObjectArray(item: TItem): void {\r\n        if (this.changeManager != null && item) {\r\n            this.changeManager.deleteObject(item);\r\n        }\r\n    }\r\n\r\n    protected getTitle(): string {\r\n        return '';\r\n    }\r\n\r\n    protected getDeleteDialogTitle(): string {\r\n        return this.optionalSectionViewModelResources.getDeleteItemDialogTitle(this.getTitle());\r\n    }\r\n\r\n    protected getDeleteDialogMessage(): string {\r\n        return this.optionalSectionViewModelResources.getDeleteItemConfirmMessage();\r\n    }\r\n\r\n    protected abstract executeRemoveItem(): void;\r\n}\r\n","import { Injectable, OnDestroy } from '@angular/core';\r\nimport { Observable, BehaviorSubject } from 'rxjs';\r\n\r\nimport { ObjectUtil } from 'life-core/util/lang';\r\n\r\nexport interface ICancelableDataManager<T> {\r\n    getItem(): Observable<T>;\r\n\r\n    setItem(item: T): void;\r\n\r\n    saveItem(item: T): void;\r\n\r\n    cancelItem(item: T): void;\r\n}\r\n\r\n@Injectable()\r\nexport class CancelableDataManager<T = any> implements ICancelableDataManager<T>, OnDestroy {\r\n    private _item: T;\r\n    private _itemSubject: BehaviorSubject<T>;\r\n\r\n    constructor() {}\r\n\r\n    public getItem(): Observable<T> {\r\n        return this._itemSubject.asObservable();\r\n    }\r\n\r\n    public setItem(item: T): void {\r\n        this.init(item);\r\n        this.publishItem();\r\n    }\r\n\r\n    private publishItem(): void {\r\n        // this._itemSubject.next(this.item == null ? null : Object.assign({}, this.item));\r\n        this._itemSubject.next(this._item == null ? null : ObjectUtil.deepCopy(this._item));\r\n    }\r\n\r\n    public saveItem(selectedItem: T): void {\r\n        if (!selectedItem) return;\r\n        Object.assign<T, T>(this._item, selectedItem);\r\n        // this.item = selectedItem;\r\n        this.publishItem();\r\n    }\r\n\r\n    public cancelItem(item: T): void {\r\n        this.publishItem();\r\n    }\r\n\r\n    public ngOnDestroy(): void {\r\n        this._itemSubject.complete();\r\n        this._itemSubject = null;\r\n        this._item = null;\r\n    }\r\n\r\n    private init(item: T): void {\r\n        this._item = item;\r\n        if (this._itemSubject) {\r\n            this._itemSubject.complete();\r\n        }\r\n        this._itemSubject = new BehaviorSubject<T>(null);\r\n    }\r\n}\r\n","export * from './cancelable-data-manager';\n","export const LfRegularExpressions = {\r\n    AlphaNumeric: /[A-Za-z0-9]/\r\n};\r\n","export * from './input-value-validator.interface';\r\n","export enum InputValueValidationResult {\r\n    fail = 0,\r\n    pass = 1\r\n}\r\n\r\nexport interface InputValueValidator {\r\n    validate(...params: any[]): InputValueValidationResult;\r\n}\r\n","﻿export * from './manager/base-dto-item.factory';\r\nexport * from './notification/ls-master-detail-notification';\r\n","﻿import { BaseItemFactory } from 'life-core/component/master-detail';\r\n\r\nexport abstract class BaseDTOItemFactory<TItem> extends BaseItemFactory<TItem, number> {\r\n    protected getNextId(items: Array<TItem>, idProperty: string): number {\r\n        const ids: number[] = items.map(item => {\r\n            return item[idProperty];\r\n        });\r\n        const maxId = ids.length > 0 ? Math.max(...ids) : 0;\r\n        return maxId + 1;\r\n    }\r\n}\r\n"],"sourceRoot":""}