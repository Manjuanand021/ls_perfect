{"version":3,"sources":["webpack:///./src/lifesuite-app/business/home/tab/index.ts","webpack:///./src/lifesuite-app/business/home/tab/state/tab-home-data-keys.ts","webpack:///./src/lifesuite-app/business/shared/auto-navigation/index.ts","webpack:///./src/lifesuite-app/business/shared/composite-fields/composite-fields.ts","webpack:///./src/lifesuite-app/business/shared/composite-fields/index.ts","webpack:///./src/lifesuite-app/business/shared/grid/base-grid-data-source.ts","webpack:///./src/lifesuite-app/business/shared/grid/base-policy-grid-datasource.ts","webpack:///./src/lifesuite-app/business/shared/grid/grid-data-state-keys.ts","webpack:///./src/lifesuite-app/business/shared/grid/index.ts","webpack:///./src/lifesuite-app/business/shared/view-type/policy-view-type.ts","webpack:///./src/lifesuite-app/ls-core/routing/index.ts","webpack:///./src/lifesuite-app/ls-core/routing/ls-resolve.util.ts"],"names":[],"mappings":"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","file":"common.js","sourcesContent":["﻿export * from './state/tab-home-data-keys';\r\n","﻿export const TabHomeDataKeys = {\r\n    ACTIVE_POLICY_PROXY: 'active_policy_proxy',\r\n    POLICY_LIST_FILTERS: 'policy_list_filters',\r\n    TASK_LIST_FILTERS: 'tasks_list_filters',\r\n    SUMMARY_FILTERS: 'summary_filters'\r\n};\r\n","export * from './auto-navigation-channels';\r\n","const CompositeFieldsMap: { readonly [field: string]: string[] } = {\r\n    InsuredNameFull: ['InsuredLastName', 'InsuredFirstName', 'InsuredMiddleName'],\r\n    UnderwriterName: ['UnderwriterLastName', 'UnderwriterFirstName'],\r\n    ServiceAssociateNameShort: ['ServiceAssociateLastName', 'ServiceAssociateFirstName'],\r\n    UnderwriterNameShort: ['UnderwriterLastName', 'UnderwriterFirstName'],\r\n    InsuredNameShort: ['InsuredNameShort'],\r\n    ServiceAssociateName: ['ServiceAssociateLastName', 'ServiceAssociateFirstName'],\r\n    AuthorName: ['AuthorLastName', 'AuthorFirstName'],\r\n    ReferredToName: ['ReferredToLastName', 'ReferredToFirstName'],\r\n    ApplicantName: ['ApplicantLastName', 'ApplicantFirstName'],\r\n    CaseManagerName: ['CaseManagerLastName', 'CaseManagerFirstName'],\r\n    Agent: ['AgentLastName', 'AgentFirstName'],\r\n    InsuredName: ['InsuredLastName', 'InsuredFirstName']\r\n};\r\n\r\nexport class CompositeFields {\r\n    /**\r\n     *Get mapping information for composite field\r\n     * @param field name of the field to look up mapping for\r\n     * @return array of one ore more field names.\r\n     * For a composite field return array of fields included in a composite field;\r\n     * For a simple field return an array with the field name itself\r\n     */\r\n    public static getFieldMap(field: string): string[] {\r\n        return CompositeFieldsMap[field] || [field];\r\n    }\r\n}\r\n","﻿export * from './composite-fields';\r\n","import { Injector } from '@angular/core';\r\n\r\nimport { IGetRowsParams } from 'ag-grid-community';\r\n\r\nimport { IServerFilter } from 'life-core/service';\r\nimport {\r\n    IGridDataSource,\r\n    IDataGridContext,\r\n    ServerFilterModelBuilder,\r\n    GridFilter,\r\n    GridState\r\n} from 'life-core/component/grid';\r\n\r\nimport { DataService, DataServiceParams, CompositeFilter, SortField, SortFieldOrder } from 'ls-core/service';\r\n\r\nimport { CompositeFields } from 'business/shared/composite-fields';\r\n\r\nexport abstract class BaseGridDataSource implements IGridDataSource {\r\n    public rowCount: number;\r\n    protected dataService: DataService;\r\n    protected serverFilterModelBuilder: ServerFilterModelBuilder;\r\n\r\n    constructor(injector: Injector) {\r\n        this.dataService = injector.get(DataService);\r\n        this.serverFilterModelBuilder = injector.get(ServerFilterModelBuilder);\r\n    }\r\n\r\n    public getRows(params: IGetRowsParams): void {\r\n        const onGetRowsComplete = (rows: Array<any>, rowCount: number) => {\r\n            params.successCallback(rows, rowCount);\r\n            (params.context as IDataGridContext).hostComponent.onGetRowsComplete({\r\n                gridState: new GridState({\r\n                    sortModel: params.sortModel,\r\n                    filterModel: params.filterModel\r\n                }),\r\n                rows: rows,\r\n                rowCount: rowCount\r\n            });\r\n        };\r\n        this.getRowCountIfNeeded(params).then(rowCount => {\r\n            if (rowCount > 0) {\r\n                const serviceParams: DataServiceParams = this.getRowsServiceParams(params);\r\n                this.dataService.getData(serviceParams).then(response => {\r\n                    const rows = response.responsePayload as Array<any>;\r\n                    onGetRowsComplete(rows, rowCount);\r\n                });\r\n            } else {\r\n                onGetRowsComplete([], rowCount);\r\n            }\r\n        });\r\n    }\r\n\r\n    protected getRowCountIfNeeded(params: IGetRowsParams): Promise<number> {\r\n        if (!this.rowCount) {\r\n            const serviceParams: DataServiceParams = this.getRowCountServiceParams(params);\r\n            return this.dataService.getData(serviceParams).then(response => {\r\n                const rowCount = response.responsePayload as number;\r\n                this.setRowCount(rowCount);\r\n                return rowCount;\r\n            });\r\n        } else {\r\n            return Promise.resolve(this.rowCount);\r\n        }\r\n    }\r\n\r\n    // override in child class\r\n    protected abstract getRowCountServiceParams(params: IGetRowsParams): DataServiceParams;\r\n\r\n    protected setRowCount(rowCount: number): void {\r\n        this.rowCount = rowCount;\r\n    }\r\n\r\n    // override in child class\r\n    protected abstract getRowsServiceParams(params: IGetRowsParams): DataServiceParams;\r\n\r\n    protected getSortFieldsForSortModel(sortModel: any): Array<SortField> {\r\n        const sortFieldForSortModel = [];\r\n        sortModel.forEach(field => {\r\n            const sortOrder: number = SortFieldOrder.getSortOrder(field.sort);\r\n            const sortFields = this.getSortFieldsForSortModelField(field.colId, sortOrder);\r\n            sortFieldForSortModel.push(...sortFields);\r\n        });\r\n        return sortFieldForSortModel;\r\n    }\r\n\r\n    private getSortFieldsForSortModelField(fieldId: string, sortOrder: number): Array<SortField> {\r\n        const mappedFields: string[] = CompositeFields.getFieldMap(fieldId);\r\n        return mappedFields.map(mappedField => {\r\n            return new SortField(mappedField, sortOrder);\r\n        });\r\n    }\r\n\r\n    protected getFilterCriterion(gridFilters: any): CompositeFilter {\r\n        const filterCriterion: CompositeFilter = this.getFilterModelsForGridFilters(gridFilters);\r\n        const externalFilters = this.getExternalFilters();\r\n        if (externalFilters && externalFilters.filters) {\r\n            // MT expects external filters to be at the top of the list\r\n            filterCriterion.filters.unshift(...externalFilters.filters);\r\n        }\r\n        return filterCriterion;\r\n    }\r\n\r\n    protected getFilterModelsForGridFilters(gridFilters: any): CompositeFilter {\r\n        const filterModels = new CompositeFilter([]);\r\n        Object.keys(gridFilters).forEach(gridFilterName => {\r\n            const filterModelForGridFilter = this.getFilterModelForGridFilter(\r\n                gridFilterName,\r\n                gridFilters[gridFilterName]\r\n            );\r\n            if (filterModelForGridFilter) {\r\n                filterModels.filters.push(filterModelForGridFilter);\r\n            }\r\n        });\r\n        return filterModels;\r\n    }\r\n\r\n    protected getFilterModelForGridFilter(field: string, gridFilter: GridFilter): IServerFilter {\r\n        const mappedFields: string[] = CompositeFields.getFieldMap(field);\r\n        return this.serverFilterModelBuilder.build(mappedFields, gridFilter);\r\n    }\r\n\r\n    protected getExternalFilters(): CompositeFilter {\r\n        // override in child class if need to provide external filters in additional to grid column filters\r\n        return null;\r\n    }\r\n\r\n    protected resetRowCount(): void {\r\n        this.rowCount = undefined;\r\n    }\r\n}\r\n","﻿import { Injector } from '@angular/core';\r\n\r\nimport { IGetRowsParams } from 'ag-grid-community';\r\n\r\nimport { PagedDataRequest } from 'ls-core/service';\r\nimport { BaseGridDataSource } from './base-grid-data-source';\r\n\r\nexport abstract class BasePolicyGridDataSource extends BaseGridDataSource {\r\n    constructor(injector: Injector) {\r\n        super(injector);\r\n    }\r\n\r\n    protected getRowsPayLoad(params: IGetRowsParams): PagedDataRequest {\r\n        const filterCriterion = this.getFilterCriterion(params.filterModel);\r\n        const numOfItems = params.endRow - params.startRow;\r\n        const sortFields = this.getSortFieldsForSortModel(params.sortModel);\r\n        return new PagedDataRequest({\r\n            startIndex: params.startRow,\r\n            numItemsToFetch: numOfItems,\r\n            sortFields: sortFields,\r\n            filters: filterCriterion !== undefined ? filterCriterion.filters : []\r\n        });\r\n    }\r\n\r\n    protected getRowCountPayLoad(params: IGetRowsParams): PagedDataRequest {\r\n        const filterCriterion = this.getFilterCriterion(params.filterModel);\r\n        return new PagedDataRequest({\r\n            filters: filterCriterion !== undefined ? filterCriterion.filters : []\r\n        });\r\n    }\r\n}\r\n","﻿export const GridDataStateKeys = {\r\n    REASSIGN_CASE: 'reassign-case',\r\n    SEARCH_CASE: 'search-case',\r\n    POLICY_LIST: 'policy-list',\r\n    TASK_LIST: 'task-list',\r\n    RECENTLY_ACCESSED_CASES: 'recently-accessed-cases',\r\n    CASE_LOG: 'case-log',\r\n    REQUIREMENT_MATCH: 'requirement-match'\r\n};\r\n","export * from './base-grid-data-source';\r\nexport * from './base-policy-grid-datasource';\r\nexport * from './grid-data-state-keys';\r\n","export enum PolicyViewType {\r\n    Applicant = 0,\r\n    Case = 1\r\n}\r\n","﻿export * from './ls-resolve.util';\r\n","﻿import { Type } from '@angular/core';\r\nimport { Resolve, ResolveData } from '@angular/router';\r\n\r\n/**\r\n *  Provides helper methods to define\r\n *  specific resolver objects, such as data, listData, metaData, etc. in routing tables.\r\n */\r\nexport class LsResolveUtil {\r\n    public static getDataResolver(resolver: Type<Resolve<any>>): ResolveData {\r\n        return { data: resolver };\r\n    }\r\n\r\n    public static getListDataResolver(resolver: Type<Resolve<any>>): ResolveData {\r\n        return { listData: resolver };\r\n    }\r\n\r\n    public static getMetaDataResolver(resolver: Type<Resolve<any>>): ResolveData {\r\n        return { metaData: resolver };\r\n    }\r\n}\r\n"],"sourceRoot":""}